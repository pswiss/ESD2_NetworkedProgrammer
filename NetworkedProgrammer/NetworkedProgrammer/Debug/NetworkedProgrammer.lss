
NetworkedProgrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003814  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403814  00403814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  0040381c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00018b9c  2000043c  00403c58  0002043c  2**2
                  ALLOC
  4 .stack        00003000  20018fd8  0041c7f4  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012528  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026dd  00000000  00000000  000329e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000061f4  00000000  00000000  000350c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ad0  00000000  00000000  0003b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a58  00000000  00000000  0003bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005fcb  00000000  00000000  0003c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c9b1  00000000  00000000  000427ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004ce38  00000000  00000000  0004f15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003120  00000000  00000000  0009bf94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 bf 01 20 29 25 40 00 f1 25 40 00 f1 25 40 00     ... )%@..%@..%@.
  400010:	f1 25 40 00 f1 25 40 00 f1 25 40 00 00 00 00 00     .%@..%@..%@.....
	...
  40002c:	f1 25 40 00 f1 25 40 00 00 00 00 00 f1 25 40 00     .%@..%@......%@.
  40003c:	f1 25 40 00 f1 25 40 00 f1 25 40 00 f1 25 40 00     .%@..%@..%@..%@.
  40004c:	f1 25 40 00 f1 25 40 00 f1 25 40 00 f1 25 40 00     .%@..%@..%@..%@.
  40005c:	00 00 00 00 f1 25 40 00 f1 25 40 00 00 00 00 00     .....%@..%@.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 19 13 40 00     ..@...@.......@.
  40007c:	f1 25 40 00 00 00 00 00 00 00 00 00 f1 25 40 00     .%@..........%@.
  40008c:	f1 25 40 00 f1 25 40 00 f1 25 40 00 f1 25 40 00     .%@..%@..%@..%@.
  40009c:	5d 10 40 00 f1 25 40 00 f1 25 40 00 00 00 00 00     ].@..%@..%@.....
	...
  4000b4:	f1 25 40 00 f1 25 40 00 f1 25 40 00 f1 25 40 00     .%@..%@..%@..%@.
  4000c4:	f1 25 40 00 f1 25 40 00                             .%@..%@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040381c 	.word	0x0040381c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040381c 	.word	0x0040381c
  40012c:	20000440 	.word	0x20000440
  400130:	0040381c 	.word	0x0040381c
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	00401d8f 	.word	0x00401d8f
  4001fc:	00401da5 	.word	0x00401da5
  400200:	20000458 	.word	0x20000458
  400204:	20018fb0 	.word	0x20018fb0
  400208:	200004cc 	.word	0x200004cc

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	200004c8 	.word	0x200004c8
  4002a4:	20000458 	.word	0x20000458
  4002a8:	00401cf1 	.word	0x00401cf1

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4002dc:	b480      	push	{r7}
  4002de:	b089      	sub	sp, #36	; 0x24
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	60f8      	str	r0, [r7, #12]
  4002e4:	60b9      	str	r1, [r7, #8]
  4002e6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4002e8:	68bb      	ldr	r3, [r7, #8]
  4002ea:	011a      	lsls	r2, r3, #4
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	429a      	cmp	r2, r3
  4002f0:	d802      	bhi.n	4002f8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4002f2:	2310      	movs	r3, #16
  4002f4:	61fb      	str	r3, [r7, #28]
  4002f6:	e001      	b.n	4002fc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4002f8:	2308      	movs	r3, #8
  4002fa:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4002fc:	687b      	ldr	r3, [r7, #4]
  4002fe:	00da      	lsls	r2, r3, #3
  400300:	69fb      	ldr	r3, [r7, #28]
  400302:	68b9      	ldr	r1, [r7, #8]
  400304:	fb01 f303 	mul.w	r3, r1, r3
  400308:	085b      	lsrs	r3, r3, #1
  40030a:	441a      	add	r2, r3
  40030c:	69fb      	ldr	r3, [r7, #28]
  40030e:	68b9      	ldr	r1, [r7, #8]
  400310:	fb01 f303 	mul.w	r3, r1, r3
  400314:	fbb2 f3f3 	udiv	r3, r2, r3
  400318:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40031a:	69bb      	ldr	r3, [r7, #24]
  40031c:	08db      	lsrs	r3, r3, #3
  40031e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400320:	69bb      	ldr	r3, [r7, #24]
  400322:	f003 0307 	and.w	r3, r3, #7
  400326:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400328:	697b      	ldr	r3, [r7, #20]
  40032a:	2b00      	cmp	r3, #0
  40032c:	d003      	beq.n	400336 <usart_set_async_baudrate+0x5a>
  40032e:	697b      	ldr	r3, [r7, #20]
  400330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400334:	d301      	bcc.n	40033a <usart_set_async_baudrate+0x5e>
		return 1;
  400336:	2301      	movs	r3, #1
  400338:	e00f      	b.n	40035a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40033a:	69fb      	ldr	r3, [r7, #28]
  40033c:	2b08      	cmp	r3, #8
  40033e:	d105      	bne.n	40034c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400340:	68fb      	ldr	r3, [r7, #12]
  400342:	685b      	ldr	r3, [r3, #4]
  400344:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400348:	68fb      	ldr	r3, [r7, #12]
  40034a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40034c:	693b      	ldr	r3, [r7, #16]
  40034e:	041a      	lsls	r2, r3, #16
  400350:	697b      	ldr	r3, [r7, #20]
  400352:	431a      	orrs	r2, r3
  400354:	68fb      	ldr	r3, [r7, #12]
  400356:	621a      	str	r2, [r3, #32]

	return 0;
  400358:	2300      	movs	r3, #0
}
  40035a:	4618      	mov	r0, r3
  40035c:	3724      	adds	r7, #36	; 0x24
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400364:	b580      	push	{r7, lr}
  400366:	b082      	sub	sp, #8
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40036c:	6878      	ldr	r0, [r7, #4]
  40036e:	4b0f      	ldr	r3, [pc, #60]	; (4003ac <usart_reset+0x48>)
  400370:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	2200      	movs	r2, #0
  400376:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	2200      	movs	r2, #0
  40037c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	2200      	movs	r2, #0
  400382:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400384:	6878      	ldr	r0, [r7, #4]
  400386:	4b0a      	ldr	r3, [pc, #40]	; (4003b0 <usart_reset+0x4c>)
  400388:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40038a:	6878      	ldr	r0, [r7, #4]
  40038c:	4b09      	ldr	r3, [pc, #36]	; (4003b4 <usart_reset+0x50>)
  40038e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400390:	6878      	ldr	r0, [r7, #4]
  400392:	4b09      	ldr	r3, [pc, #36]	; (4003b8 <usart_reset+0x54>)
  400394:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400396:	6878      	ldr	r0, [r7, #4]
  400398:	4b08      	ldr	r3, [pc, #32]	; (4003bc <usart_reset+0x58>)
  40039a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b08      	ldr	r3, [pc, #32]	; (4003c0 <usart_reset+0x5c>)
  4003a0:	4798      	blx	r3
#endif
}
  4003a2:	bf00      	nop
  4003a4:	3708      	adds	r7, #8
  4003a6:	46bd      	mov	sp, r7
  4003a8:	bd80      	pop	{r7, pc}
  4003aa:	bf00      	nop
  4003ac:	004005b5 	.word	0x004005b5
  4003b0:	004004a1 	.word	0x004004a1
  4003b4:	004004d1 	.word	0x004004d1
  4003b8:	00400533 	.word	0x00400533
  4003bc:	00400567 	.word	0x00400567
  4003c0:	0040054d 	.word	0x0040054d

004003c4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4003c4:	b580      	push	{r7, lr}
  4003c6:	b084      	sub	sp, #16
  4003c8:	af00      	add	r7, sp, #0
  4003ca:	60f8      	str	r0, [r7, #12]
  4003cc:	60b9      	str	r1, [r7, #8]
  4003ce:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4003d0:	68f8      	ldr	r0, [r7, #12]
  4003d2:	4b1a      	ldr	r3, [pc, #104]	; (40043c <usart_init_rs232+0x78>)
  4003d4:	4798      	blx	r3

	ul_reg_val = 0;
  4003d6:	4b1a      	ldr	r3, [pc, #104]	; (400440 <usart_init_rs232+0x7c>)
  4003d8:	2200      	movs	r2, #0
  4003da:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4003dc:	68bb      	ldr	r3, [r7, #8]
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d009      	beq.n	4003f6 <usart_init_rs232+0x32>
  4003e2:	68bb      	ldr	r3, [r7, #8]
  4003e4:	681b      	ldr	r3, [r3, #0]
  4003e6:	687a      	ldr	r2, [r7, #4]
  4003e8:	4619      	mov	r1, r3
  4003ea:	68f8      	ldr	r0, [r7, #12]
  4003ec:	4b15      	ldr	r3, [pc, #84]	; (400444 <usart_init_rs232+0x80>)
  4003ee:	4798      	blx	r3
  4003f0:	4603      	mov	r3, r0
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d001      	beq.n	4003fa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4003f6:	2301      	movs	r3, #1
  4003f8:	e01b      	b.n	400432 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4003fa:	68bb      	ldr	r3, [r7, #8]
  4003fc:	685a      	ldr	r2, [r3, #4]
  4003fe:	68bb      	ldr	r3, [r7, #8]
  400400:	689b      	ldr	r3, [r3, #8]
  400402:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400404:	68bb      	ldr	r3, [r7, #8]
  400406:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400408:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40040a:	68bb      	ldr	r3, [r7, #8]
  40040c:	68db      	ldr	r3, [r3, #12]
  40040e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400410:	4b0b      	ldr	r3, [pc, #44]	; (400440 <usart_init_rs232+0x7c>)
  400412:	681b      	ldr	r3, [r3, #0]
  400414:	4313      	orrs	r3, r2
  400416:	4a0a      	ldr	r2, [pc, #40]	; (400440 <usart_init_rs232+0x7c>)
  400418:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40041a:	4b09      	ldr	r3, [pc, #36]	; (400440 <usart_init_rs232+0x7c>)
  40041c:	681b      	ldr	r3, [r3, #0]
  40041e:	4a08      	ldr	r2, [pc, #32]	; (400440 <usart_init_rs232+0x7c>)
  400420:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400422:	68fb      	ldr	r3, [r7, #12]
  400424:	685a      	ldr	r2, [r3, #4]
  400426:	4b06      	ldr	r3, [pc, #24]	; (400440 <usart_init_rs232+0x7c>)
  400428:	681b      	ldr	r3, [r3, #0]
  40042a:	431a      	orrs	r2, r3
  40042c:	68fb      	ldr	r3, [r7, #12]
  40042e:	605a      	str	r2, [r3, #4]

	return 0;
  400430:	2300      	movs	r3, #0
}
  400432:	4618      	mov	r0, r3
  400434:	3710      	adds	r7, #16
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	00400365 	.word	0x00400365
  400440:	200004d0 	.word	0x200004d0
  400444:	004002dd 	.word	0x004002dd

00400448 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400448:	b580      	push	{r7, lr}
  40044a:	b084      	sub	sp, #16
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400454:	687a      	ldr	r2, [r7, #4]
  400456:	68b9      	ldr	r1, [r7, #8]
  400458:	68f8      	ldr	r0, [r7, #12]
  40045a:	4b0a      	ldr	r3, [pc, #40]	; (400484 <usart_init_hw_handshaking+0x3c>)
  40045c:	4798      	blx	r3
  40045e:	4603      	mov	r3, r0
  400460:	2b00      	cmp	r3, #0
  400462:	d001      	beq.n	400468 <usart_init_hw_handshaking+0x20>
		return 1;
  400464:	2301      	movs	r3, #1
  400466:	e008      	b.n	40047a <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400468:	68fb      	ldr	r3, [r7, #12]
  40046a:	685b      	ldr	r3, [r3, #4]
  40046c:	f023 030f 	bic.w	r3, r3, #15
  400470:	f043 0202 	orr.w	r2, r3, #2
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400478:	2300      	movs	r3, #0
}
  40047a:	4618      	mov	r0, r3
  40047c:	3710      	adds	r7, #16
  40047e:	46bd      	mov	sp, r7
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	004003c5 	.word	0x004003c5

00400488 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400488:	b480      	push	{r7}
  40048a:	b083      	sub	sp, #12
  40048c:	af00      	add	r7, sp, #0
  40048e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2240      	movs	r2, #64	; 0x40
  400494:	601a      	str	r2, [r3, #0]
}
  400496:	bf00      	nop
  400498:	370c      	adds	r7, #12
  40049a:	46bd      	mov	sp, r7
  40049c:	bc80      	pop	{r7}
  40049e:	4770      	bx	lr

004004a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b083      	sub	sp, #12
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4004a8:	687b      	ldr	r3, [r7, #4]
  4004aa:	2288      	movs	r2, #136	; 0x88
  4004ac:	601a      	str	r2, [r3, #0]
}
  4004ae:	bf00      	nop
  4004b0:	370c      	adds	r7, #12
  4004b2:	46bd      	mov	sp, r7
  4004b4:	bc80      	pop	{r7}
  4004b6:	4770      	bx	lr

004004b8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4004b8:	b480      	push	{r7}
  4004ba:	b083      	sub	sp, #12
  4004bc:	af00      	add	r7, sp, #0
  4004be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4004c0:	687b      	ldr	r3, [r7, #4]
  4004c2:	2210      	movs	r2, #16
  4004c4:	601a      	str	r2, [r3, #0]
}
  4004c6:	bf00      	nop
  4004c8:	370c      	adds	r7, #12
  4004ca:	46bd      	mov	sp, r7
  4004cc:	bc80      	pop	{r7}
  4004ce:	4770      	bx	lr

004004d0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4004d0:	b480      	push	{r7}
  4004d2:	b083      	sub	sp, #12
  4004d4:	af00      	add	r7, sp, #0
  4004d6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4004d8:	687b      	ldr	r3, [r7, #4]
  4004da:	2224      	movs	r2, #36	; 0x24
  4004dc:	601a      	str	r2, [r3, #0]
}
  4004de:	bf00      	nop
  4004e0:	370c      	adds	r7, #12
  4004e2:	46bd      	mov	sp, r7
  4004e4:	bc80      	pop	{r7}
  4004e6:	4770      	bx	lr

004004e8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4004e8:	b480      	push	{r7}
  4004ea:	b083      	sub	sp, #12
  4004ec:	af00      	add	r7, sp, #0
  4004ee:	6078      	str	r0, [r7, #4]
  4004f0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4004f2:	687b      	ldr	r3, [r7, #4]
  4004f4:	683a      	ldr	r2, [r7, #0]
  4004f6:	609a      	str	r2, [r3, #8]
}
  4004f8:	bf00      	nop
  4004fa:	370c      	adds	r7, #12
  4004fc:	46bd      	mov	sp, r7
  4004fe:	bc80      	pop	{r7}
  400500:	4770      	bx	lr

00400502 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400502:	b480      	push	{r7}
  400504:	b083      	sub	sp, #12
  400506:	af00      	add	r7, sp, #0
  400508:	6078      	str	r0, [r7, #4]
  40050a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40050c:	687b      	ldr	r3, [r7, #4]
  40050e:	683a      	ldr	r2, [r7, #0]
  400510:	60da      	str	r2, [r3, #12]
}
  400512:	bf00      	nop
  400514:	370c      	adds	r7, #12
  400516:	46bd      	mov	sp, r7
  400518:	bc80      	pop	{r7}
  40051a:	4770      	bx	lr

0040051c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40051c:	b480      	push	{r7}
  40051e:	b083      	sub	sp, #12
  400520:	af00      	add	r7, sp, #0
  400522:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	695b      	ldr	r3, [r3, #20]
}
  400528:	4618      	mov	r0, r3
  40052a:	370c      	adds	r7, #12
  40052c:	46bd      	mov	sp, r7
  40052e:	bc80      	pop	{r7}
  400530:	4770      	bx	lr

00400532 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400532:	b480      	push	{r7}
  400534:	b083      	sub	sp, #12
  400536:	af00      	add	r7, sp, #0
  400538:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40053a:	687b      	ldr	r3, [r7, #4]
  40053c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400540:	601a      	str	r2, [r3, #0]
}
  400542:	bf00      	nop
  400544:	370c      	adds	r7, #12
  400546:	46bd      	mov	sp, r7
  400548:	bc80      	pop	{r7}
  40054a:	4770      	bx	lr

0040054c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40054c:	b480      	push	{r7}
  40054e:	b083      	sub	sp, #12
  400550:	af00      	add	r7, sp, #0
  400552:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40055a:	601a      	str	r2, [r3, #0]
}
  40055c:	bf00      	nop
  40055e:	370c      	adds	r7, #12
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr

00400566 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400566:	b480      	push	{r7}
  400568:	b083      	sub	sp, #12
  40056a:	af00      	add	r7, sp, #0
  40056c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40056e:	687b      	ldr	r3, [r7, #4]
  400570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400574:	601a      	str	r2, [r3, #0]
}
  400576:	bf00      	nop
  400578:	370c      	adds	r7, #12
  40057a:	46bd      	mov	sp, r7
  40057c:	bc80      	pop	{r7}
  40057e:	4770      	bx	lr

00400580 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	6078      	str	r0, [r7, #4]
  400588:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40058a:	687b      	ldr	r3, [r7, #4]
  40058c:	695b      	ldr	r3, [r3, #20]
  40058e:	f003 0301 	and.w	r3, r3, #1
  400592:	2b00      	cmp	r3, #0
  400594:	d101      	bne.n	40059a <usart_read+0x1a>
		return 1;
  400596:	2301      	movs	r3, #1
  400598:	e006      	b.n	4005a8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40059a:	687b      	ldr	r3, [r7, #4]
  40059c:	699b      	ldr	r3, [r3, #24]
  40059e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4005a2:	683b      	ldr	r3, [r7, #0]
  4005a4:	601a      	str	r2, [r3, #0]

	return 0;
  4005a6:	2300      	movs	r3, #0
}
  4005a8:	4618      	mov	r0, r3
  4005aa:	370c      	adds	r7, #12
  4005ac:	46bd      	mov	sp, r7
  4005ae:	bc80      	pop	{r7}
  4005b0:	4770      	bx	lr
	...

004005b4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4005b4:	b480      	push	{r7}
  4005b6:	b083      	sub	sp, #12
  4005b8:	af00      	add	r7, sp, #0
  4005ba:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4005bc:	687b      	ldr	r3, [r7, #4]
  4005be:	4a04      	ldr	r2, [pc, #16]	; (4005d0 <usart_disable_writeprotect+0x1c>)
  4005c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4005c4:	bf00      	nop
  4005c6:	370c      	adds	r7, #12
  4005c8:	46bd      	mov	sp, r7
  4005ca:	bc80      	pop	{r7}
  4005cc:	4770      	bx	lr
  4005ce:	bf00      	nop
  4005d0:	55534100 	.word	0x55534100

004005d4 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  4005d4:	b480      	push	{r7}
  4005d6:	b083      	sub	sp, #12
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4005e2:	605a      	str	r2, [r3, #4]

}
  4005e4:	bf00      	nop
  4005e6:	370c      	adds	r7, #12
  4005e8:	46bd      	mov	sp, r7
  4005ea:	bc80      	pop	{r7}
  4005ec:	4770      	bx	lr
	...

004005f0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4005f0:	b480      	push	{r7}
  4005f2:	b083      	sub	sp, #12
  4005f4:	af00      	add	r7, sp, #0
  4005f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	2b07      	cmp	r3, #7
  4005fc:	d825      	bhi.n	40064a <osc_get_rate+0x5a>
  4005fe:	a201      	add	r2, pc, #4	; (adr r2, 400604 <osc_get_rate+0x14>)
  400600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400604:	00400625 	.word	0x00400625
  400608:	0040062b 	.word	0x0040062b
  40060c:	00400631 	.word	0x00400631
  400610:	00400637 	.word	0x00400637
  400614:	0040063b 	.word	0x0040063b
  400618:	0040063f 	.word	0x0040063f
  40061c:	00400643 	.word	0x00400643
  400620:	00400647 	.word	0x00400647
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400624:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400628:	e010      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40062a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40062e:	e00d      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400634:	e00a      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400636:	4b08      	ldr	r3, [pc, #32]	; (400658 <osc_get_rate+0x68>)
  400638:	e008      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40063a:	4b08      	ldr	r3, [pc, #32]	; (40065c <osc_get_rate+0x6c>)
  40063c:	e006      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40063e:	4b08      	ldr	r3, [pc, #32]	; (400660 <osc_get_rate+0x70>)
  400640:	e004      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400642:	4b07      	ldr	r3, [pc, #28]	; (400660 <osc_get_rate+0x70>)
  400644:	e002      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400646:	4b06      	ldr	r3, [pc, #24]	; (400660 <osc_get_rate+0x70>)
  400648:	e000      	b.n	40064c <osc_get_rate+0x5c>
	}

	return 0;
  40064a:	2300      	movs	r3, #0
}
  40064c:	4618      	mov	r0, r3
  40064e:	370c      	adds	r7, #12
  400650:	46bd      	mov	sp, r7
  400652:	bc80      	pop	{r7}
  400654:	4770      	bx	lr
  400656:	bf00      	nop
  400658:	003d0900 	.word	0x003d0900
  40065c:	007a1200 	.word	0x007a1200
  400660:	00b71b00 	.word	0x00b71b00

00400664 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400664:	b580      	push	{r7, lr}
  400666:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400668:	2006      	movs	r0, #6
  40066a:	4b04      	ldr	r3, [pc, #16]	; (40067c <sysclk_get_main_hz+0x18>)
  40066c:	4798      	blx	r3
  40066e:	4602      	mov	r2, r0
  400670:	4613      	mov	r3, r2
  400672:	009b      	lsls	r3, r3, #2
  400674:	4413      	add	r3, r2
  400676:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400678:	4618      	mov	r0, r3
  40067a:	bd80      	pop	{r7, pc}
  40067c:	004005f1 	.word	0x004005f1

00400680 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400680:	b580      	push	{r7, lr}
  400682:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400684:	4b02      	ldr	r3, [pc, #8]	; (400690 <sysclk_get_cpu_hz+0x10>)
  400686:	4798      	blx	r3
  400688:	4603      	mov	r3, r0
  40068a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40068c:	4618      	mov	r0, r3
  40068e:	bd80      	pop	{r7, pc}
  400690:	00400665 	.word	0x00400665

00400694 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400694:	b480      	push	{r7}
  400696:	b08d      	sub	sp, #52	; 0x34
  400698:	af00      	add	r7, sp, #0
  40069a:	6078      	str	r0, [r7, #4]
  40069c:	6039      	str	r1, [r7, #0]
  40069e:	687b      	ldr	r3, [r7, #4]
  4006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006a2:	683b      	ldr	r3, [r7, #0]
  4006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  4006a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006a8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006ac:	095a      	lsrs	r2, r3, #5
  4006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006b0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4006b2:	6a3b      	ldr	r3, [r7, #32]
  4006b4:	f003 031f 	and.w	r3, r3, #31
  4006b8:	2101      	movs	r1, #1
  4006ba:	fa01 f303 	lsl.w	r3, r1, r3
  4006be:	61fa      	str	r2, [r7, #28]
  4006c0:	61bb      	str	r3, [r7, #24]
  4006c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4006c4:	617b      	str	r3, [r7, #20]
  4006c6:	69fb      	ldr	r3, [r7, #28]
  4006c8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ca:	693b      	ldr	r3, [r7, #16]
  4006cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4006d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4006d4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006d6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	f003 0308 	and.w	r3, r3, #8
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d003      	beq.n	4006ea <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	69ba      	ldr	r2, [r7, #24]
  4006e6:	665a      	str	r2, [r3, #100]	; 0x64
  4006e8:	e002      	b.n	4006f0 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4006ea:	68fb      	ldr	r3, [r7, #12]
  4006ec:	69ba      	ldr	r2, [r7, #24]
  4006ee:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006f0:	697b      	ldr	r3, [r7, #20]
  4006f2:	f003 0310 	and.w	r3, r3, #16
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d004      	beq.n	400704 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	69ba      	ldr	r2, [r7, #24]
  4006fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400702:	e003      	b.n	40070c <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	69ba      	ldr	r2, [r7, #24]
  400708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	f003 0320 	and.w	r3, r3, #32
  400712:	2b00      	cmp	r3, #0
  400714:	d003      	beq.n	40071e <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	69ba      	ldr	r2, [r7, #24]
  40071a:	651a      	str	r2, [r3, #80]	; 0x50
  40071c:	e002      	b.n	400724 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  40071e:	68fb      	ldr	r3, [r7, #12]
  400720:	69ba      	ldr	r2, [r7, #24]
  400722:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40072a:	2b00      	cmp	r3, #0
  40072c:	d003      	beq.n	400736 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40072e:	68fb      	ldr	r3, [r7, #12]
  400730:	69ba      	ldr	r2, [r7, #24]
  400732:	621a      	str	r2, [r3, #32]
  400734:	e002      	b.n	40073c <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  400736:	68fb      	ldr	r3, [r7, #12]
  400738:	69ba      	ldr	r2, [r7, #24]
  40073a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400742:	2b00      	cmp	r3, #0
  400744:	d004      	beq.n	400750 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400746:	68fb      	ldr	r3, [r7, #12]
  400748:	69ba      	ldr	r2, [r7, #24]
  40074a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40074e:	e003      	b.n	400758 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400750:	68fb      	ldr	r3, [r7, #12]
  400752:	69ba      	ldr	r2, [r7, #24]
  400754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	f003 0301 	and.w	r3, r3, #1
  40075e:	2b00      	cmp	r3, #0
  400760:	d006      	beq.n	400770 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  400762:	68fb      	ldr	r3, [r7, #12]
  400764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400766:	69bb      	ldr	r3, [r7, #24]
  400768:	431a      	orrs	r2, r3
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	671a      	str	r2, [r3, #112]	; 0x70
  40076e:	e006      	b.n	40077e <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400770:	68fb      	ldr	r3, [r7, #12]
  400772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400774:	69bb      	ldr	r3, [r7, #24]
  400776:	43db      	mvns	r3, r3
  400778:	401a      	ands	r2, r3
  40077a:	68fb      	ldr	r3, [r7, #12]
  40077c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	f003 0302 	and.w	r3, r3, #2
  400784:	2b00      	cmp	r3, #0
  400786:	d006      	beq.n	400796 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  400788:	68fb      	ldr	r3, [r7, #12]
  40078a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40078c:	69bb      	ldr	r3, [r7, #24]
  40078e:	431a      	orrs	r2, r3
  400790:	68fb      	ldr	r3, [r7, #12]
  400792:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400794:	e006      	b.n	4007a4 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400796:	68fb      	ldr	r3, [r7, #12]
  400798:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40079a:	69bb      	ldr	r3, [r7, #24]
  40079c:	43db      	mvns	r3, r3
  40079e:	401a      	ands	r2, r3
  4007a0:	68fb      	ldr	r3, [r7, #12]
  4007a2:	675a      	str	r2, [r3, #116]	; 0x74
  4007a4:	bf00      	nop
  4007a6:	3734      	adds	r7, #52	; 0x34
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bc80      	pop	{r7}
  4007ac:	4770      	bx	lr

004007ae <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4007ae:	b480      	push	{r7}
  4007b0:	b08d      	sub	sp, #52	; 0x34
  4007b2:	af00      	add	r7, sp, #0
  4007b4:	6078      	str	r0, [r7, #4]
  4007b6:	460b      	mov	r3, r1
  4007b8:	70fb      	strb	r3, [r7, #3]
  4007ba:	687b      	ldr	r3, [r7, #4]
  4007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007be:	78fb      	ldrb	r3, [r7, #3]
  4007c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007c6:	627b      	str	r3, [r7, #36]	; 0x24
  4007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007ca:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4007cc:	6a3b      	ldr	r3, [r7, #32]
  4007ce:	095b      	lsrs	r3, r3, #5
  4007d0:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007d2:	69fb      	ldr	r3, [r7, #28]
  4007d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4007d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4007dc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007de:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4007e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007e4:	2b01      	cmp	r3, #1
  4007e6:	d109      	bne.n	4007fc <ioport_set_pin_dir+0x4e>
  4007e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ea:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4007ec:	697b      	ldr	r3, [r7, #20]
  4007ee:	f003 031f 	and.w	r3, r3, #31
  4007f2:	2201      	movs	r2, #1
  4007f4:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007f6:	69bb      	ldr	r3, [r7, #24]
  4007f8:	611a      	str	r2, [r3, #16]
  4007fa:	e00c      	b.n	400816 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4007fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400800:	2b00      	cmp	r3, #0
  400802:	d108      	bne.n	400816 <ioport_set_pin_dir+0x68>
  400804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400806:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400808:	693b      	ldr	r3, [r7, #16]
  40080a:	f003 031f 	and.w	r3, r3, #31
  40080e:	2201      	movs	r2, #1
  400810:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400812:	69bb      	ldr	r3, [r7, #24]
  400814:	615a      	str	r2, [r3, #20]
  400816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400818:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40081a:	68fb      	ldr	r3, [r7, #12]
  40081c:	f003 031f 	and.w	r3, r3, #31
  400820:	2201      	movs	r2, #1
  400822:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400824:	69bb      	ldr	r3, [r7, #24]
  400826:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40082a:	bf00      	nop
  40082c:	3734      	adds	r7, #52	; 0x34
  40082e:	46bd      	mov	sp, r7
  400830:	bc80      	pop	{r7}
  400832:	4770      	bx	lr

00400834 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400834:	b480      	push	{r7}
  400836:	b08b      	sub	sp, #44	; 0x2c
  400838:	af00      	add	r7, sp, #0
  40083a:	6078      	str	r0, [r7, #4]
  40083c:	460b      	mov	r3, r1
  40083e:	70fb      	strb	r3, [r7, #3]
  400840:	687b      	ldr	r3, [r7, #4]
  400842:	627b      	str	r3, [r7, #36]	; 0x24
  400844:	78fb      	ldrb	r3, [r7, #3]
  400846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40084c:	61fb      	str	r3, [r7, #28]
  40084e:	69fb      	ldr	r3, [r7, #28]
  400850:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400852:	69bb      	ldr	r3, [r7, #24]
  400854:	095b      	lsrs	r3, r3, #5
  400856:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400858:	697b      	ldr	r3, [r7, #20]
  40085a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40085e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400862:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400864:	613b      	str	r3, [r7, #16]

	if (level) {
  400866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40086a:	2b00      	cmp	r3, #0
  40086c:	d009      	beq.n	400882 <ioport_set_pin_level+0x4e>
  40086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400870:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	f003 031f 	and.w	r3, r3, #31
  400878:	2201      	movs	r2, #1
  40087a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40087c:	693b      	ldr	r3, [r7, #16]
  40087e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400880:	e008      	b.n	400894 <ioport_set_pin_level+0x60>
  400882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400884:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400886:	68bb      	ldr	r3, [r7, #8]
  400888:	f003 031f 	and.w	r3, r3, #31
  40088c:	2201      	movs	r2, #1
  40088e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400890:	693b      	ldr	r3, [r7, #16]
  400892:	635a      	str	r2, [r3, #52]	; 0x34
  400894:	bf00      	nop
  400896:	372c      	adds	r7, #44	; 0x2c
  400898:	46bd      	mov	sp, r7
  40089a:	bc80      	pop	{r7}
  40089c:	4770      	bx	lr

0040089e <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40089e:	b480      	push	{r7}
  4008a0:	b089      	sub	sp, #36	; 0x24
  4008a2:	af00      	add	r7, sp, #0
  4008a4:	6078      	str	r0, [r7, #4]
  4008a6:	687b      	ldr	r3, [r7, #4]
  4008a8:	61fb      	str	r3, [r7, #28]
  4008aa:	69fb      	ldr	r3, [r7, #28]
  4008ac:	61bb      	str	r3, [r7, #24]
  4008ae:	69bb      	ldr	r3, [r7, #24]
  4008b0:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  4008b2:	697b      	ldr	r3, [r7, #20]
  4008b4:	095b      	lsrs	r3, r3, #5
  4008b6:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008b8:	693b      	ldr	r3, [r7, #16]
  4008ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4008be:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4008c2:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4008c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4008c6:	69fb      	ldr	r3, [r7, #28]
  4008c8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4008ca:	68fb      	ldr	r3, [r7, #12]
  4008cc:	f003 031f 	and.w	r3, r3, #31
  4008d0:	2101      	movs	r1, #1
  4008d2:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4008d6:	4013      	ands	r3, r2
  4008d8:	2b00      	cmp	r3, #0
  4008da:	bf14      	ite	ne
  4008dc:	2301      	movne	r3, #1
  4008de:	2300      	moveq	r3, #0
  4008e0:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4008e2:	4618      	mov	r0, r3
  4008e4:	3724      	adds	r7, #36	; 0x24
  4008e6:	46bd      	mov	sp, r7
  4008e8:	bc80      	pop	{r7}
  4008ea:	4770      	bx	lr

004008ec <setupSWDPins>:
// Global Variables


// Functions /////////////////////////////////////////////
// Setup Pins
void setupSWDPins(void){
  4008ec:	b580      	push	{r7, lr}
  4008ee:	af00      	add	r7, sp, #0
	// Set all pins as output, low
	ioport_set_pin_dir(SWCLK_PIN, IOPORT_DIR_OUTPUT);
  4008f0:	2101      	movs	r1, #1
  4008f2:	2003      	movs	r0, #3
  4008f4:	4b0f      	ldr	r3, [pc, #60]	; (400934 <setupSWDPins+0x48>)
  4008f6:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN, LOW);
  4008f8:	2100      	movs	r1, #0
  4008fa:	2003      	movs	r0, #3
  4008fc:	4b0e      	ldr	r3, [pc, #56]	; (400938 <setupSWDPins+0x4c>)
  4008fe:	4798      	blx	r3
	
	ioport_set_pin_dir(SWIO_PIN, IOPORT_DIR_OUTPUT);
  400900:	2101      	movs	r1, #1
  400902:	2002      	movs	r0, #2
  400904:	4b0b      	ldr	r3, [pc, #44]	; (400934 <setupSWDPins+0x48>)
  400906:	4798      	blx	r3
	ioport_set_pin_level(SWIO_PIN, LOW);
  400908:	2100      	movs	r1, #0
  40090a:	2002      	movs	r0, #2
  40090c:	4b0a      	ldr	r3, [pc, #40]	; (400938 <setupSWDPins+0x4c>)
  40090e:	4798      	blx	r3
	
	ioport_set_pin_dir(MEMCLR_PIN, IOPORT_DIR_OUTPUT);
  400910:	2101      	movs	r1, #1
  400912:	2001      	movs	r0, #1
  400914:	4b07      	ldr	r3, [pc, #28]	; (400934 <setupSWDPins+0x48>)
  400916:	4798      	blx	r3
	ioport_set_pin_level(MEMCLR_PIN, LOW);
  400918:	2100      	movs	r1, #0
  40091a:	2001      	movs	r0, #1
  40091c:	4b06      	ldr	r3, [pc, #24]	; (400938 <setupSWDPins+0x4c>)
  40091e:	4798      	blx	r3
	
	ioport_set_pin_dir(FORCERST_PIN, IOPORT_DIR_OUTPUT);
  400920:	2101      	movs	r1, #1
  400922:	2000      	movs	r0, #0
  400924:	4b03      	ldr	r3, [pc, #12]	; (400934 <setupSWDPins+0x48>)
  400926:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN, LOW);
  400928:	2100      	movs	r1, #0
  40092a:	2003      	movs	r0, #3
  40092c:	4b02      	ldr	r3, [pc, #8]	; (400938 <setupSWDPins+0x4c>)
  40092e:	4798      	blx	r3
}
  400930:	bf00      	nop
  400932:	bd80      	pop	{r7, pc}
  400934:	004007af 	.word	0x004007af
  400938:	00400835 	.word	0x00400835

0040093c <configSWDPinsInput>:

// Configure SWD pins to be inputs
void configSWDPinsInput(void){
  40093c:	b580      	push	{r7, lr}
  40093e:	af00      	add	r7, sp, #0
	// Communication Pins Input: SWIO
	ioport_set_pin_dir(SWIO_PIN, IOPORT_DIR_INPUT);
  400940:	2100      	movs	r1, #0
  400942:	2002      	movs	r0, #2
  400944:	4b03      	ldr	r3, [pc, #12]	; (400954 <configSWDPinsInput+0x18>)
  400946:	4798      	blx	r3
	ioport_set_pin_mode(SWIO_PIN, IOPORT_MODE_PULLUP);
  400948:	2108      	movs	r1, #8
  40094a:	2002      	movs	r0, #2
  40094c:	4b02      	ldr	r3, [pc, #8]	; (400958 <configSWDPinsInput+0x1c>)
  40094e:	4798      	blx	r3
	
}
  400950:	bf00      	nop
  400952:	bd80      	pop	{r7, pc}
  400954:	004007af 	.word	0x004007af
  400958:	00400695 	.word	0x00400695

0040095c <configSWDPinsOutput>:

// Configure SWD pins to be outputs
void configSWDPinsOutput(void){
  40095c:	b580      	push	{r7, lr}
  40095e:	af00      	add	r7, sp, #0
	// Communication Pins Output: SWIO
	ioport_set_pin_dir(SWCLK_PIN, IOPORT_DIR_OUTPUT);
  400960:	2101      	movs	r1, #1
  400962:	2003      	movs	r0, #3
  400964:	4b03      	ldr	r3, [pc, #12]	; (400974 <configSWDPinsOutput+0x18>)
  400966:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN, LOW);
  400968:	2100      	movs	r1, #0
  40096a:	2003      	movs	r0, #3
  40096c:	4b02      	ldr	r3, [pc, #8]	; (400978 <configSWDPinsOutput+0x1c>)
  40096e:	4798      	blx	r3
}
  400970:	bf00      	nop
  400972:	bd80      	pop	{r7, pc}
  400974:	004007af 	.word	0x004007af
  400978:	00400835 	.word	0x00400835
  40097c:	00000000 	.word	0x00000000

00400980 <SWD_bitOut>:

// Bit-Bang Functions //////////////////////////////////////
// Bitbang: Write Bit over SWD
void SWD_bitOut(Bool outBit){
  400980:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400984:	b082      	sub	sp, #8
  400986:	af00      	add	r7, sp, #0
  400988:	4603      	mov	r3, r0
  40098a:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SWIO_PIN,outBit);
  40098c:	79fb      	ldrb	r3, [r7, #7]
  40098e:	2b00      	cmp	r3, #0
  400990:	bf14      	ite	ne
  400992:	2301      	movne	r3, #1
  400994:	2300      	moveq	r3, #0
  400996:	b2db      	uxtb	r3, r3
  400998:	4619      	mov	r1, r3
  40099a:	2002      	movs	r0, #2
  40099c:	4b26      	ldr	r3, [pc, #152]	; (400a38 <SWD_bitOut+0xb8>)
  40099e:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN,HIGH);
  4009a0:	2101      	movs	r1, #1
  4009a2:	2003      	movs	r0, #3
  4009a4:	4b24      	ldr	r3, [pc, #144]	; (400a38 <SWD_bitOut+0xb8>)
  4009a6:	4798      	blx	r3
	delay_us(DURATION_SWCLK_HIGH);
  4009a8:	4b24      	ldr	r3, [pc, #144]	; (400a3c <SWD_bitOut+0xbc>)
  4009aa:	4798      	blx	r3
  4009ac:	4603      	mov	r3, r0
  4009ae:	f04f 0400 	mov.w	r4, #0
  4009b2:	a21f      	add	r2, pc, #124	; (adr r2, 400a30 <SWD_bitOut+0xb0>)
  4009b4:	e9d2 1200 	ldrd	r1, r2, [r2]
  4009b8:	eb13 0b01 	adds.w	fp, r3, r1
  4009bc:	eb44 0c02 	adc.w	ip, r4, r2
  4009c0:	4658      	mov	r0, fp
  4009c2:	4661      	mov	r1, ip
  4009c4:	4c1e      	ldr	r4, [pc, #120]	; (400a40 <SWD_bitOut+0xc0>)
  4009c6:	4a1f      	ldr	r2, [pc, #124]	; (400a44 <SWD_bitOut+0xc4>)
  4009c8:	f04f 0300 	mov.w	r3, #0
  4009cc:	47a0      	blx	r4
  4009ce:	4603      	mov	r3, r0
  4009d0:	460c      	mov	r4, r1
  4009d2:	4618      	mov	r0, r3
  4009d4:	4b1c      	ldr	r3, [pc, #112]	; (400a48 <SWD_bitOut+0xc8>)
  4009d6:	4798      	blx	r3
	
	ioport_set_pin_level(SWCLK_PIN,LOW);
  4009d8:	2100      	movs	r1, #0
  4009da:	2003      	movs	r0, #3
  4009dc:	4b16      	ldr	r3, [pc, #88]	; (400a38 <SWD_bitOut+0xb8>)
  4009de:	4798      	blx	r3
	delay_us(DURATION_SWCLK_LOW);
  4009e0:	4b16      	ldr	r3, [pc, #88]	; (400a3c <SWD_bitOut+0xbc>)
  4009e2:	4798      	blx	r3
  4009e4:	4603      	mov	r3, r0
  4009e6:	4619      	mov	r1, r3
  4009e8:	f04f 0200 	mov.w	r2, #0
  4009ec:	460b      	mov	r3, r1
  4009ee:	4614      	mov	r4, r2
  4009f0:	00e6      	lsls	r6, r4, #3
  4009f2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  4009f6:	00dd      	lsls	r5, r3, #3
  4009f8:	462b      	mov	r3, r5
  4009fa:	4634      	mov	r4, r6
  4009fc:	185b      	adds	r3, r3, r1
  4009fe:	eb44 0402 	adc.w	r4, r4, r2
  400a02:	a20b      	add	r2, pc, #44	; (adr r2, 400a30 <SWD_bitOut+0xb0>)
  400a04:	e9d2 1200 	ldrd	r1, r2, [r2]
  400a08:	185d      	adds	r5, r3, r1
  400a0a:	eb44 0602 	adc.w	r6, r4, r2
  400a0e:	4628      	mov	r0, r5
  400a10:	4631      	mov	r1, r6
  400a12:	4c0b      	ldr	r4, [pc, #44]	; (400a40 <SWD_bitOut+0xc0>)
  400a14:	4a0b      	ldr	r2, [pc, #44]	; (400a44 <SWD_bitOut+0xc4>)
  400a16:	f04f 0300 	mov.w	r3, #0
  400a1a:	47a0      	blx	r4
  400a1c:	4603      	mov	r3, r0
  400a1e:	460c      	mov	r4, r1
  400a20:	4618      	mov	r0, r3
  400a22:	4b09      	ldr	r3, [pc, #36]	; (400a48 <SWD_bitOut+0xc8>)
  400a24:	4798      	blx	r3
}
  400a26:	bf00      	nop
  400a28:	3708      	adds	r7, #8
  400a2a:	46bd      	mov	sp, r7
  400a2c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400a30:	00d59f7f 	.word	0x00d59f7f
  400a34:	00000000 	.word	0x00000000
  400a38:	00400835 	.word	0x00400835
  400a3c:	00400681 	.word	0x00400681
  400a40:	00402a59 	.word	0x00402a59
  400a44:	00d59f80 	.word	0x00d59f80
  400a48:	20000001 	.word	0x20000001
  400a4c:	00000000 	.word	0x00000000

00400a50 <SWD_bitIn>:

// Bitbang: Read Bit over SWD
uint8_t SWD_bitIn(void){
  400a50:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400a54:	b082      	sub	sp, #8
  400a56:	af00      	add	r7, sp, #0
	ioport_set_pin_level(SWCLK_PIN,HIGH);
  400a58:	2101      	movs	r1, #1
  400a5a:	2003      	movs	r0, #3
  400a5c:	4b28      	ldr	r3, [pc, #160]	; (400b00 <SWD_bitIn+0xb0>)
  400a5e:	4798      	blx	r3
	delay_us(DURATION_SWCLK_HIGH);
  400a60:	4b28      	ldr	r3, [pc, #160]	; (400b04 <SWD_bitIn+0xb4>)
  400a62:	4798      	blx	r3
  400a64:	4603      	mov	r3, r0
  400a66:	f04f 0400 	mov.w	r4, #0
  400a6a:	a223      	add	r2, pc, #140	; (adr r2, 400af8 <SWD_bitIn+0xa8>)
  400a6c:	e9d2 1200 	ldrd	r1, r2, [r2]
  400a70:	eb13 0b01 	adds.w	fp, r3, r1
  400a74:	eb44 0c02 	adc.w	ip, r4, r2
  400a78:	4658      	mov	r0, fp
  400a7a:	4661      	mov	r1, ip
  400a7c:	4c22      	ldr	r4, [pc, #136]	; (400b08 <SWD_bitIn+0xb8>)
  400a7e:	4a23      	ldr	r2, [pc, #140]	; (400b0c <SWD_bitIn+0xbc>)
  400a80:	f04f 0300 	mov.w	r3, #0
  400a84:	47a0      	blx	r4
  400a86:	4603      	mov	r3, r0
  400a88:	460c      	mov	r4, r1
  400a8a:	4618      	mov	r0, r3
  400a8c:	4b20      	ldr	r3, [pc, #128]	; (400b10 <SWD_bitIn+0xc0>)
  400a8e:	4798      	blx	r3
	
	uint8_t reportLevel = ioport_get_pin_level(SWIO_PIN);
  400a90:	2002      	movs	r0, #2
  400a92:	4b20      	ldr	r3, [pc, #128]	; (400b14 <SWD_bitIn+0xc4>)
  400a94:	4798      	blx	r3
  400a96:	4603      	mov	r3, r0
  400a98:	71fb      	strb	r3, [r7, #7]
	
	ioport_set_pin_level(SWCLK_PIN,LOW);
  400a9a:	2100      	movs	r1, #0
  400a9c:	2003      	movs	r0, #3
  400a9e:	4b18      	ldr	r3, [pc, #96]	; (400b00 <SWD_bitIn+0xb0>)
  400aa0:	4798      	blx	r3
	delay_us(DURATION_SWCLK_LOW);
  400aa2:	4b18      	ldr	r3, [pc, #96]	; (400b04 <SWD_bitIn+0xb4>)
  400aa4:	4798      	blx	r3
  400aa6:	4603      	mov	r3, r0
  400aa8:	4619      	mov	r1, r3
  400aaa:	f04f 0200 	mov.w	r2, #0
  400aae:	460b      	mov	r3, r1
  400ab0:	4614      	mov	r4, r2
  400ab2:	00e6      	lsls	r6, r4, #3
  400ab4:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  400ab8:	00dd      	lsls	r5, r3, #3
  400aba:	462b      	mov	r3, r5
  400abc:	4634      	mov	r4, r6
  400abe:	185b      	adds	r3, r3, r1
  400ac0:	eb44 0402 	adc.w	r4, r4, r2
  400ac4:	a20c      	add	r2, pc, #48	; (adr r2, 400af8 <SWD_bitIn+0xa8>)
  400ac6:	e9d2 1200 	ldrd	r1, r2, [r2]
  400aca:	185d      	adds	r5, r3, r1
  400acc:	eb44 0602 	adc.w	r6, r4, r2
  400ad0:	4628      	mov	r0, r5
  400ad2:	4631      	mov	r1, r6
  400ad4:	4c0c      	ldr	r4, [pc, #48]	; (400b08 <SWD_bitIn+0xb8>)
  400ad6:	4a0d      	ldr	r2, [pc, #52]	; (400b0c <SWD_bitIn+0xbc>)
  400ad8:	f04f 0300 	mov.w	r3, #0
  400adc:	47a0      	blx	r4
  400ade:	4603      	mov	r3, r0
  400ae0:	460c      	mov	r4, r1
  400ae2:	4618      	mov	r0, r3
  400ae4:	4b0a      	ldr	r3, [pc, #40]	; (400b10 <SWD_bitIn+0xc0>)
  400ae6:	4798      	blx	r3
	
	return reportLevel;
  400ae8:	79fb      	ldrb	r3, [r7, #7]
}
  400aea:	4618      	mov	r0, r3
  400aec:	3708      	adds	r7, #8
  400aee:	46bd      	mov	sp, r7
  400af0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400af4:	f3af 8000 	nop.w
  400af8:	00d59f7f 	.word	0x00d59f7f
  400afc:	00000000 	.word	0x00000000
  400b00:	00400835 	.word	0x00400835
  400b04:	00400681 	.word	0x00400681
  400b08:	00402a59 	.word	0x00402a59
  400b0c:	00d59f80 	.word	0x00d59f80
  400b10:	20000001 	.word	0x20000001
  400b14:	0040089f 	.word	0x0040089f

00400b18 <SWD_bitTurn>:

// Bitbang: Turnaround Bit
void SWD_bitTurn(void){
  400b18:	b580      	push	{r7, lr}
  400b1a:	af00      	add	r7, sp, #0
	SWD_bitOut(HIGH);
  400b1c:	2001      	movs	r0, #1
  400b1e:	4b02      	ldr	r3, [pc, #8]	; (400b28 <SWD_bitTurn+0x10>)
  400b20:	4798      	blx	r3
}
  400b22:	bf00      	nop
  400b24:	bd80      	pop	{r7, pc}
  400b26:	bf00      	nop
  400b28:	00400981 	.word	0x00400981

00400b2c <ithBitLevel>:

// Return the level of the ith bit of a given value
Bool ithBitLevel(uint32_t checkByte, uint8_t ii){
  400b2c:	b480      	push	{r7}
  400b2e:	b083      	sub	sp, #12
  400b30:	af00      	add	r7, sp, #0
  400b32:	6078      	str	r0, [r7, #4]
  400b34:	460b      	mov	r3, r1
  400b36:	70fb      	strb	r3, [r7, #3]
	// Bit shift the checkByte right, then use bit mask
	return (((checkByte >> ii)&&MASK_32BIT_1)!=0);
  400b38:	78fb      	ldrb	r3, [r7, #3]
  400b3a:	687a      	ldr	r2, [r7, #4]
  400b3c:	fa22 f303 	lsr.w	r3, r2, r3
  400b40:	2b00      	cmp	r3, #0
  400b42:	bf14      	ite	ne
  400b44:	2301      	movne	r3, #1
  400b46:	2300      	moveq	r3, #0
  400b48:	b2db      	uxtb	r3, r3
}
  400b4a:	4618      	mov	r0, r3
  400b4c:	370c      	adds	r7, #12
  400b4e:	46bd      	mov	sp, r7
  400b50:	bc80      	pop	{r7}
  400b52:	4770      	bx	lr

00400b54 <SWD_sendRequest>:

// Bitbang: SWD Request
void SWD_sendRequest(uint8_t requestByte){
  400b54:	b580      	push	{r7, lr}
  400b56:	b084      	sub	sp, #16
  400b58:	af00      	add	r7, sp, #0
  400b5a:	4603      	mov	r3, r0
  400b5c:	71fb      	strb	r3, [r7, #7]
	// Set all pins to output
	configSWDPinsOutput();
  400b5e:	4b0f      	ldr	r3, [pc, #60]	; (400b9c <SWD_sendRequest+0x48>)
  400b60:	4798      	blx	r3
	
	// Send the bits in sequence, LSB first
	for(int ii = 0; ii<LENGTH_SWD_REQUEST;ii++){
  400b62:	2300      	movs	r3, #0
  400b64:	60fb      	str	r3, [r7, #12]
  400b66:	e012      	b.n	400b8e <SWD_sendRequest+0x3a>
		Bool sendBit = ithBitLevel(requestByte,LENGTH_SWD_REQUEST-1-ii);
  400b68:	79fa      	ldrb	r2, [r7, #7]
  400b6a:	68fb      	ldr	r3, [r7, #12]
  400b6c:	b2db      	uxtb	r3, r3
  400b6e:	f1c3 0307 	rsb	r3, r3, #7
  400b72:	b2db      	uxtb	r3, r3
  400b74:	4619      	mov	r1, r3
  400b76:	4610      	mov	r0, r2
  400b78:	4b09      	ldr	r3, [pc, #36]	; (400ba0 <SWD_sendRequest+0x4c>)
  400b7a:	4798      	blx	r3
  400b7c:	4603      	mov	r3, r0
  400b7e:	72fb      	strb	r3, [r7, #11]
		SWD_bitOut(sendBit);
  400b80:	7afb      	ldrb	r3, [r7, #11]
  400b82:	4618      	mov	r0, r3
  400b84:	4b07      	ldr	r3, [pc, #28]	; (400ba4 <SWD_sendRequest+0x50>)
  400b86:	4798      	blx	r3
	for(int ii = 0; ii<LENGTH_SWD_REQUEST;ii++){
  400b88:	68fb      	ldr	r3, [r7, #12]
  400b8a:	3301      	adds	r3, #1
  400b8c:	60fb      	str	r3, [r7, #12]
  400b8e:	68fb      	ldr	r3, [r7, #12]
  400b90:	2b07      	cmp	r3, #7
  400b92:	dde9      	ble.n	400b68 <SWD_sendRequest+0x14>
	}
}
  400b94:	bf00      	nop
  400b96:	3710      	adds	r7, #16
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	0040095d 	.word	0x0040095d
  400ba0:	00400b2d 	.word	0x00400b2d
  400ba4:	00400981 	.word	0x00400981

00400ba8 <SWD_AckGet>:

// Bitbang: SWD Ack Read
uint8_t SWD_AckGet(void){
  400ba8:	b580      	push	{r7, lr}
  400baa:	b082      	sub	sp, #8
  400bac:	af00      	add	r7, sp, #0
	uint8_t messageIn = 0;
  400bae:	2300      	movs	r3, #0
  400bb0:	71fb      	strb	r3, [r7, #7]
	
	// Take in the three Ack Bits. Data comes in LSB first
	for(uint8_t ii = 0; ii<LENGTH_SWD_ACK; ii++){
  400bb2:	2300      	movs	r3, #0
  400bb4:	71bb      	strb	r3, [r7, #6]
  400bb6:	e016      	b.n	400be6 <SWD_AckGet+0x3e>
		messageIn = messageIn||((SWD_bitIn()&&MASK_8BIT_1)<<ii);
  400bb8:	79fb      	ldrb	r3, [r7, #7]
  400bba:	2b00      	cmp	r3, #0
  400bbc:	d10c      	bne.n	400bd8 <SWD_AckGet+0x30>
  400bbe:	4b0e      	ldr	r3, [pc, #56]	; (400bf8 <SWD_AckGet+0x50>)
  400bc0:	4798      	blx	r3
  400bc2:	4603      	mov	r3, r0
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	d001      	beq.n	400bcc <SWD_AckGet+0x24>
  400bc8:	2201      	movs	r2, #1
  400bca:	e000      	b.n	400bce <SWD_AckGet+0x26>
  400bcc:	2200      	movs	r2, #0
  400bce:	79bb      	ldrb	r3, [r7, #6]
  400bd0:	fa02 f303 	lsl.w	r3, r2, r3
  400bd4:	2b00      	cmp	r3, #0
  400bd6:	d001      	beq.n	400bdc <SWD_AckGet+0x34>
  400bd8:	2301      	movs	r3, #1
  400bda:	e000      	b.n	400bde <SWD_AckGet+0x36>
  400bdc:	2300      	movs	r3, #0
  400bde:	71fb      	strb	r3, [r7, #7]
	for(uint8_t ii = 0; ii<LENGTH_SWD_ACK; ii++){
  400be0:	79bb      	ldrb	r3, [r7, #6]
  400be2:	3301      	adds	r3, #1
  400be4:	71bb      	strb	r3, [r7, #6]
  400be6:	79bb      	ldrb	r3, [r7, #6]
  400be8:	2b02      	cmp	r3, #2
  400bea:	d9e5      	bls.n	400bb8 <SWD_AckGet+0x10>
	}
	
	// Behavior changes due to Ack message processed in higher function
	return messageIn;
  400bec:	79fb      	ldrb	r3, [r7, #7]
	
}
  400bee:	4618      	mov	r0, r3
  400bf0:	3708      	adds	r7, #8
  400bf2:	46bd      	mov	sp, r7
  400bf4:	bd80      	pop	{r7, pc}
  400bf6:	bf00      	nop
  400bf8:	00400a51 	.word	0x00400a51

00400bfc <SWD_DataWrite>:

// Bitbang: Write Data
void SWD_DataWrite(uint32_t dataToSend){
  400bfc:	b580      	push	{r7, lr}
  400bfe:	b086      	sub	sp, #24
  400c00:	af00      	add	r7, sp, #0
  400c02:	6078      	str	r0, [r7, #4]
	// Set all pins to output
	configSWDPinsOutput();
  400c04:	4b16      	ldr	r3, [pc, #88]	; (400c60 <SWD_DataWrite+0x64>)
  400c06:	4798      	blx	r3
	
	uint8_t checksumValue = 0;
  400c08:	2300      	movs	r3, #0
  400c0a:	75fb      	strb	r3, [r7, #23]
	
	// Send the bits in sequence, LSB first. Track checksum
	for(int ii = 0; ii<LENGTH_SWD_DATA;ii++){
  400c0c:	2300      	movs	r3, #0
  400c0e:	613b      	str	r3, [r7, #16]
  400c10:	e015      	b.n	400c3e <SWD_DataWrite+0x42>
		Bool sendBit = ithBitLevel(dataToSend,LENGTH_SWD_DATA-1-ii);
  400c12:	693b      	ldr	r3, [r7, #16]
  400c14:	b2db      	uxtb	r3, r3
  400c16:	f1c3 031f 	rsb	r3, r3, #31
  400c1a:	b2db      	uxtb	r3, r3
  400c1c:	4619      	mov	r1, r3
  400c1e:	6878      	ldr	r0, [r7, #4]
  400c20:	4b10      	ldr	r3, [pc, #64]	; (400c64 <SWD_DataWrite+0x68>)
  400c22:	4798      	blx	r3
  400c24:	4603      	mov	r3, r0
  400c26:	73fb      	strb	r3, [r7, #15]
		SWD_bitOut(sendBit);
  400c28:	7bfb      	ldrb	r3, [r7, #15]
  400c2a:	4618      	mov	r0, r3
  400c2c:	4b0e      	ldr	r3, [pc, #56]	; (400c68 <SWD_DataWrite+0x6c>)
  400c2e:	4798      	blx	r3
		checksumValue+=sendBit;
  400c30:	7dfa      	ldrb	r2, [r7, #23]
  400c32:	7bfb      	ldrb	r3, [r7, #15]
  400c34:	4413      	add	r3, r2
  400c36:	75fb      	strb	r3, [r7, #23]
	for(int ii = 0; ii<LENGTH_SWD_DATA;ii++){
  400c38:	693b      	ldr	r3, [r7, #16]
  400c3a:	3301      	adds	r3, #1
  400c3c:	613b      	str	r3, [r7, #16]
  400c3e:	693b      	ldr	r3, [r7, #16]
  400c40:	2b1f      	cmp	r3, #31
  400c42:	dde6      	ble.n	400c12 <SWD_DataWrite+0x16>
	}
	
	// Implement the checksum bit: if odd, send 1, if even, send 0
	if(checksumValue&&MASK_8BIT_1){
  400c44:	7dfb      	ldrb	r3, [r7, #23]
  400c46:	2b00      	cmp	r3, #0
  400c48:	d003      	beq.n	400c52 <SWD_DataWrite+0x56>
		SWD_bitOut(1);
  400c4a:	2001      	movs	r0, #1
  400c4c:	4b06      	ldr	r3, [pc, #24]	; (400c68 <SWD_DataWrite+0x6c>)
  400c4e:	4798      	blx	r3
	}
	else{
		SWD_bitOut(0);
	}
}
  400c50:	e002      	b.n	400c58 <SWD_DataWrite+0x5c>
		SWD_bitOut(0);
  400c52:	2000      	movs	r0, #0
  400c54:	4b04      	ldr	r3, [pc, #16]	; (400c68 <SWD_DataWrite+0x6c>)
  400c56:	4798      	blx	r3
}
  400c58:	bf00      	nop
  400c5a:	3718      	adds	r7, #24
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bd80      	pop	{r7, pc}
  400c60:	0040095d 	.word	0x0040095d
  400c64:	00400b2d 	.word	0x00400b2d
  400c68:	00400981 	.word	0x00400981

00400c6c <SWD_DataRead>:

//Bitbang: Read Data
uint32_t SWD_DataRead(void){
  400c6c:	b580      	push	{r7, lr}
  400c6e:	b082      	sub	sp, #8
  400c70:	af00      	add	r7, sp, #0
	uint32_t dataIn = 0;
  400c72:	2300      	movs	r3, #0
  400c74:	607b      	str	r3, [r7, #4]
	
	// Take in data Bits. Data comes in LSB first
	for(uint8_t ii = 0; ii<LENGTH_SWD_DATA; ii++){
  400c76:	2300      	movs	r3, #0
  400c78:	70fb      	strb	r3, [r7, #3]
  400c7a:	e016      	b.n	400caa <SWD_DataRead+0x3e>
		dataIn = dataIn||((SWD_bitIn()&&MASK_32BIT_1)<<ii);
  400c7c:	687b      	ldr	r3, [r7, #4]
  400c7e:	2b00      	cmp	r3, #0
  400c80:	d10c      	bne.n	400c9c <SWD_DataRead+0x30>
  400c82:	4b0f      	ldr	r3, [pc, #60]	; (400cc0 <SWD_DataRead+0x54>)
  400c84:	4798      	blx	r3
  400c86:	4603      	mov	r3, r0
  400c88:	2b00      	cmp	r3, #0
  400c8a:	d001      	beq.n	400c90 <SWD_DataRead+0x24>
  400c8c:	2201      	movs	r2, #1
  400c8e:	e000      	b.n	400c92 <SWD_DataRead+0x26>
  400c90:	2200      	movs	r2, #0
  400c92:	78fb      	ldrb	r3, [r7, #3]
  400c94:	fa02 f303 	lsl.w	r3, r2, r3
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d001      	beq.n	400ca0 <SWD_DataRead+0x34>
  400c9c:	2301      	movs	r3, #1
  400c9e:	e000      	b.n	400ca2 <SWD_DataRead+0x36>
  400ca0:	2300      	movs	r3, #0
  400ca2:	607b      	str	r3, [r7, #4]
	for(uint8_t ii = 0; ii<LENGTH_SWD_DATA; ii++){
  400ca4:	78fb      	ldrb	r3, [r7, #3]
  400ca6:	3301      	adds	r3, #1
  400ca8:	70fb      	strb	r3, [r7, #3]
  400caa:	78fb      	ldrb	r3, [r7, #3]
  400cac:	2b1f      	cmp	r3, #31
  400cae:	d9e5      	bls.n	400c7c <SWD_DataRead+0x10>
	}
	
	// Read one more bit for the parity bit (assume that everything went OK)
	SWD_bitIn();
  400cb0:	4b03      	ldr	r3, [pc, #12]	; (400cc0 <SWD_DataRead+0x54>)
  400cb2:	4798      	blx	r3
	
	//return the data
	return dataIn;
  400cb4:	687b      	ldr	r3, [r7, #4]
}
  400cb6:	4618      	mov	r0, r3
  400cb8:	3708      	adds	r7, #8
  400cba:	46bd      	mov	sp, r7
  400cbc:	bd80      	pop	{r7, pc}
  400cbe:	bf00      	nop
  400cc0:	00400a51 	.word	0x00400a51
  400cc4:	00000000 	.word	0x00000000

00400cc8 <SWD_Comm>:


// Generic function to perform an SWD message
uint32_t SWD_Comm(uint8_t command, uint32_t data){
  400cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ccc:	b08d      	sub	sp, #52	; 0x34
  400cce:	af00      	add	r7, sp, #0
  400cd0:	4603      	mov	r3, r0
  400cd2:	6239      	str	r1, [r7, #32]
  400cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// Determine if Read or Write
	if((command>>5)&&MASK_8BIT_1){
  400cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400cdc:	095b      	lsrs	r3, r3, #5
  400cde:	b2db      	uxtb	r3, r3
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d05c      	beq.n	400d9e <SWD_Comm+0xd6>
		// If 1, Read
		uint32_t okFlag = 0;
  400ce4:	2300      	movs	r3, #0
  400ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
		
		while(!okFlag){
  400ce8:	e052      	b.n	400d90 <SWD_Comm+0xc8>
			configSWDPinsOutput();
  400cea:	4b61      	ldr	r3, [pc, #388]	; (400e70 <SWD_Comm+0x1a8>)
  400cec:	4798      	blx	r3
			SWD_sendRequest(command);
  400cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400cf2:	4618      	mov	r0, r3
  400cf4:	4b5f      	ldr	r3, [pc, #380]	; (400e74 <SWD_Comm+0x1ac>)
  400cf6:	4798      	blx	r3
			
			SWD_bitTurn();
  400cf8:	4b5f      	ldr	r3, [pc, #380]	; (400e78 <SWD_Comm+0x1b0>)
  400cfa:	4798      	blx	r3
			configSWDPinsInput();
  400cfc:	4b5f      	ldr	r3, [pc, #380]	; (400e7c <SWD_Comm+0x1b4>)
  400cfe:	4798      	blx	r3
			
			// Will break out if get Ack ok otherwise will have to repeat
			if(SWD_AckGet()==MSG_ACK_OK){
  400d00:	4b5f      	ldr	r3, [pc, #380]	; (400e80 <SWD_Comm+0x1b8>)
  400d02:	4798      	blx	r3
  400d04:	4603      	mov	r3, r0
  400d06:	2b01      	cmp	r3, #1
  400d08:	d102      	bne.n	400d10 <SWD_Comm+0x48>
				okFlag = 1;
  400d0a:	2301      	movs	r3, #1
  400d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  400d0e:	e03f      	b.n	400d90 <SWD_Comm+0xc8>
			}
			else{
				delay_us(DURATION_ACKWAIT);
  400d10:	4b5c      	ldr	r3, [pc, #368]	; (400e84 <SWD_Comm+0x1bc>)
  400d12:	4798      	blx	r3
  400d14:	4603      	mov	r3, r0
  400d16:	4619      	mov	r1, r3
  400d18:	f04f 0200 	mov.w	r2, #0
  400d1c:	460b      	mov	r3, r1
  400d1e:	4614      	mov	r4, r2
  400d20:	0160      	lsls	r0, r4, #5
  400d22:	61f8      	str	r0, [r7, #28]
  400d24:	69f8      	ldr	r0, [r7, #28]
  400d26:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  400d2a:	61f8      	str	r0, [r7, #28]
  400d2c:	015b      	lsls	r3, r3, #5
  400d2e:	61bb      	str	r3, [r7, #24]
  400d30:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  400d34:	1a5b      	subs	r3, r3, r1
  400d36:	eb64 0402 	sbc.w	r4, r4, r2
  400d3a:	00a0      	lsls	r0, r4, #2
  400d3c:	6178      	str	r0, [r7, #20]
  400d3e:	6978      	ldr	r0, [r7, #20]
  400d40:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  400d44:	6178      	str	r0, [r7, #20]
  400d46:	009b      	lsls	r3, r3, #2
  400d48:	613b      	str	r3, [r7, #16]
  400d4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  400d4e:	185b      	adds	r3, r3, r1
  400d50:	eb44 0402 	adc.w	r4, r4, r2
  400d54:	00e2      	lsls	r2, r4, #3
  400d56:	60fa      	str	r2, [r7, #12]
  400d58:	68fa      	ldr	r2, [r7, #12]
  400d5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  400d5e:	60fa      	str	r2, [r7, #12]
  400d60:	00db      	lsls	r3, r3, #3
  400d62:	60bb      	str	r3, [r7, #8]
  400d64:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  400d68:	4619      	mov	r1, r3
  400d6a:	4622      	mov	r2, r4
  400d6c:	a43e      	add	r4, pc, #248	; (adr r4, 400e68 <SWD_Comm+0x1a0>)
  400d6e:	e9d4 3400 	ldrd	r3, r4, [r4]
  400d72:	18cd      	adds	r5, r1, r3
  400d74:	eb42 0604 	adc.w	r6, r2, r4
  400d78:	4628      	mov	r0, r5
  400d7a:	4631      	mov	r1, r6
  400d7c:	4c42      	ldr	r4, [pc, #264]	; (400e88 <SWD_Comm+0x1c0>)
  400d7e:	4a43      	ldr	r2, [pc, #268]	; (400e8c <SWD_Comm+0x1c4>)
  400d80:	f04f 0300 	mov.w	r3, #0
  400d84:	47a0      	blx	r4
  400d86:	4603      	mov	r3, r0
  400d88:	460c      	mov	r4, r1
  400d8a:	4618      	mov	r0, r3
  400d8c:	4b40      	ldr	r3, [pc, #256]	; (400e90 <SWD_Comm+0x1c8>)
  400d8e:	4798      	blx	r3
		while(!okFlag){
  400d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d92:	2b00      	cmp	r3, #0
  400d94:	d0a9      	beq.n	400cea <SWD_Comm+0x22>
			}
		}
		// No turn for read
		return SWD_DataRead();
  400d96:	4b3f      	ldr	r3, [pc, #252]	; (400e94 <SWD_Comm+0x1cc>)
  400d98:	4798      	blx	r3
  400d9a:	4603      	mov	r3, r0
  400d9c:	e05c      	b.n	400e58 <SWD_Comm+0x190>
	}
	else{
		// If 0, Write
		uint32_t okFlag = 0;
  400d9e:	2300      	movs	r3, #0
  400da0:	62bb      	str	r3, [r7, #40]	; 0x28
		
		while(!okFlag){
  400da2:	e04e      	b.n	400e42 <SWD_Comm+0x17a>
			configSWDPinsOutput();
  400da4:	4b32      	ldr	r3, [pc, #200]	; (400e70 <SWD_Comm+0x1a8>)
  400da6:	4798      	blx	r3
			SWD_sendRequest(command);
  400da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400dac:	4618      	mov	r0, r3
  400dae:	4b31      	ldr	r3, [pc, #196]	; (400e74 <SWD_Comm+0x1ac>)
  400db0:	4798      	blx	r3
			
			SWD_bitTurn();
  400db2:	4b31      	ldr	r3, [pc, #196]	; (400e78 <SWD_Comm+0x1b0>)
  400db4:	4798      	blx	r3
			configSWDPinsInput();
  400db6:	4b31      	ldr	r3, [pc, #196]	; (400e7c <SWD_Comm+0x1b4>)
  400db8:	4798      	blx	r3
			
			// Will break out if get Ack ok otherwise will have to repeat
			if(SWD_AckGet()==MSG_ACK_OK){
  400dba:	4b31      	ldr	r3, [pc, #196]	; (400e80 <SWD_Comm+0x1b8>)
  400dbc:	4798      	blx	r3
  400dbe:	4603      	mov	r3, r0
  400dc0:	2b01      	cmp	r3, #1
  400dc2:	d102      	bne.n	400dca <SWD_Comm+0x102>
				okFlag = 1;
  400dc4:	2301      	movs	r3, #1
  400dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  400dc8:	e03b      	b.n	400e42 <SWD_Comm+0x17a>
			}
			else{
				delay_us(DURATION_ACKWAIT);
  400dca:	4b2e      	ldr	r3, [pc, #184]	; (400e84 <SWD_Comm+0x1bc>)
  400dcc:	4798      	blx	r3
  400dce:	4603      	mov	r3, r0
  400dd0:	4619      	mov	r1, r3
  400dd2:	f04f 0200 	mov.w	r2, #0
  400dd6:	460b      	mov	r3, r1
  400dd8:	4614      	mov	r4, r2
  400dda:	0160      	lsls	r0, r4, #5
  400ddc:	6078      	str	r0, [r7, #4]
  400dde:	6878      	ldr	r0, [r7, #4]
  400de0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  400de4:	6078      	str	r0, [r7, #4]
  400de6:	015b      	lsls	r3, r3, #5
  400de8:	603b      	str	r3, [r7, #0]
  400dea:	e9d7 3400 	ldrd	r3, r4, [r7]
  400dee:	1a5b      	subs	r3, r3, r1
  400df0:	eb64 0402 	sbc.w	r4, r4, r2
  400df4:	ea4f 0984 	mov.w	r9, r4, lsl #2
  400df8:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  400dfc:	ea4f 0883 	mov.w	r8, r3, lsl #2
  400e00:	4643      	mov	r3, r8
  400e02:	464c      	mov	r4, r9
  400e04:	185b      	adds	r3, r3, r1
  400e06:	eb44 0402 	adc.w	r4, r4, r2
  400e0a:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  400e0e:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  400e12:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  400e16:	4653      	mov	r3, sl
  400e18:	465c      	mov	r4, fp
  400e1a:	4619      	mov	r1, r3
  400e1c:	4622      	mov	r2, r4
  400e1e:	a412      	add	r4, pc, #72	; (adr r4, 400e68 <SWD_Comm+0x1a0>)
  400e20:	e9d4 3400 	ldrd	r3, r4, [r4]
  400e24:	18cd      	adds	r5, r1, r3
  400e26:	eb42 0604 	adc.w	r6, r2, r4
  400e2a:	4628      	mov	r0, r5
  400e2c:	4631      	mov	r1, r6
  400e2e:	4c16      	ldr	r4, [pc, #88]	; (400e88 <SWD_Comm+0x1c0>)
  400e30:	4a16      	ldr	r2, [pc, #88]	; (400e8c <SWD_Comm+0x1c4>)
  400e32:	f04f 0300 	mov.w	r3, #0
  400e36:	47a0      	blx	r4
  400e38:	4603      	mov	r3, r0
  400e3a:	460c      	mov	r4, r1
  400e3c:	4618      	mov	r0, r3
  400e3e:	4b14      	ldr	r3, [pc, #80]	; (400e90 <SWD_Comm+0x1c8>)
  400e40:	4798      	blx	r3
		while(!okFlag){
  400e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400e44:	2b00      	cmp	r3, #0
  400e46:	d0ad      	beq.n	400da4 <SWD_Comm+0xdc>
			}
		}
		configSWDPinsOutput();
  400e48:	4b09      	ldr	r3, [pc, #36]	; (400e70 <SWD_Comm+0x1a8>)
  400e4a:	4798      	blx	r3
		SWD_bitTurn();
  400e4c:	4b0a      	ldr	r3, [pc, #40]	; (400e78 <SWD_Comm+0x1b0>)
  400e4e:	4798      	blx	r3
		SWD_DataWrite(data);
  400e50:	6a38      	ldr	r0, [r7, #32]
  400e52:	4b11      	ldr	r3, [pc, #68]	; (400e98 <SWD_Comm+0x1d0>)
  400e54:	4798      	blx	r3
		return 1;
  400e56:	2301      	movs	r3, #1
	}
}
  400e58:	4618      	mov	r0, r3
  400e5a:	3734      	adds	r7, #52	; 0x34
  400e5c:	46bd      	mov	sp, r7
  400e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e62:	bf00      	nop
  400e64:	f3af 8000 	nop.w
  400e68:	00d59f7f 	.word	0x00d59f7f
  400e6c:	00000000 	.word	0x00000000
  400e70:	0040095d 	.word	0x0040095d
  400e74:	00400b55 	.word	0x00400b55
  400e78:	00400b19 	.word	0x00400b19
  400e7c:	0040093d 	.word	0x0040093d
  400e80:	00400ba9 	.word	0x00400ba9
  400e84:	00400681 	.word	0x00400681
  400e88:	00402a59 	.word	0x00402a59
  400e8c:	00d59f80 	.word	0x00d59f80
  400e90:	20000001 	.word	0x20000001
  400e94:	00400c6d 	.word	0x00400c6d
  400e98:	00400bfd 	.word	0x00400bfd

00400e9c <SWD_Start>:
	delay_ms(DURATION_CLEAR);
}

//High Level SWD Commands /////////////////////////////////////////////////
// Perform all start configurations for SWD
void SWD_Start(void ){
  400e9c:	b580      	push	{r7, lr}
  400e9e:	b088      	sub	sp, #32
  400ea0:	af00      	add	r7, sp, #0
	//////////////////////////////////////////////////////////////////
	// Purely an output operation
	configSWDPinsOutput();
  400ea2:	4b36      	ldr	r3, [pc, #216]	; (400f7c <SWD_Start+0xe0>)
  400ea4:	4798      	blx	r3
	
	// Go from JTAG to SWD
	// Write the first reset message
	for(uint32_t ii = 0; ii < STARTUP_HIGH_1;ii++){
  400ea6:	2300      	movs	r3, #0
  400ea8:	61fb      	str	r3, [r7, #28]
  400eaa:	e005      	b.n	400eb8 <SWD_Start+0x1c>
		SWD_bitOut(HIGH);
  400eac:	2001      	movs	r0, #1
  400eae:	4b34      	ldr	r3, [pc, #208]	; (400f80 <SWD_Start+0xe4>)
  400eb0:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_HIGH_1;ii++){
  400eb2:	69fb      	ldr	r3, [r7, #28]
  400eb4:	3301      	adds	r3, #1
  400eb6:	61fb      	str	r3, [r7, #28]
  400eb8:	69fb      	ldr	r3, [r7, #28]
  400eba:	2b37      	cmp	r3, #55	; 0x37
  400ebc:	d9f6      	bls.n	400eac <SWD_Start+0x10>
	}
	// Write the first message
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_1;ii++){
  400ebe:	2300      	movs	r3, #0
  400ec0:	61bb      	str	r3, [r7, #24]
  400ec2:	e011      	b.n	400ee8 <SWD_Start+0x4c>
		SWD_bitOut(MASK_32BIT_1&&(STARTUP_MSG_1>>(STARTUP_MSGLEN_1-ii)));
  400ec4:	69bb      	ldr	r3, [r7, #24]
  400ec6:	f1c3 030c 	rsb	r3, r3, #12
  400eca:	f640 723c 	movw	r2, #3900	; 0xf3c
  400ece:	fa42 f303 	asr.w	r3, r2, r3
  400ed2:	2b00      	cmp	r3, #0
  400ed4:	bf14      	ite	ne
  400ed6:	2301      	movne	r3, #1
  400ed8:	2300      	moveq	r3, #0
  400eda:	b2db      	uxtb	r3, r3
  400edc:	4618      	mov	r0, r3
  400ede:	4b28      	ldr	r3, [pc, #160]	; (400f80 <SWD_Start+0xe4>)
  400ee0:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_1;ii++){
  400ee2:	69bb      	ldr	r3, [r7, #24]
  400ee4:	3301      	adds	r3, #1
  400ee6:	61bb      	str	r3, [r7, #24]
  400ee8:	69bb      	ldr	r3, [r7, #24]
  400eea:	2b0b      	cmp	r3, #11
  400eec:	d9ea      	bls.n	400ec4 <SWD_Start+0x28>
	}
	
	// Write the second reset message
	for(uint32_t ii = 0; ii < STARTUP_HIGH_2;ii++){
  400eee:	2300      	movs	r3, #0
  400ef0:	617b      	str	r3, [r7, #20]
  400ef2:	e005      	b.n	400f00 <SWD_Start+0x64>
		SWD_bitOut(HIGH);
  400ef4:	2001      	movs	r0, #1
  400ef6:	4b22      	ldr	r3, [pc, #136]	; (400f80 <SWD_Start+0xe4>)
  400ef8:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_HIGH_2;ii++){
  400efa:	697b      	ldr	r3, [r7, #20]
  400efc:	3301      	adds	r3, #1
  400efe:	617b      	str	r3, [r7, #20]
  400f00:	697b      	ldr	r3, [r7, #20]
  400f02:	2b3a      	cmp	r3, #58	; 0x3a
  400f04:	d9f6      	bls.n	400ef4 <SWD_Start+0x58>
	}
	// Write the second message
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_2;ii++){
  400f06:	2300      	movs	r3, #0
  400f08:	613b      	str	r3, [r7, #16]
  400f0a:	e011      	b.n	400f30 <SWD_Start+0x94>
		SWD_bitOut(MASK_32BIT_1&&(STARTUP_MSG_2>>(STARTUP_MSGLEN_2-ii)));
  400f0c:	693b      	ldr	r3, [r7, #16]
  400f0e:	f1c3 030d 	rsb	r3, r3, #13
  400f12:	f640 52b6 	movw	r2, #3510	; 0xdb6
  400f16:	fa42 f303 	asr.w	r3, r2, r3
  400f1a:	2b00      	cmp	r3, #0
  400f1c:	bf14      	ite	ne
  400f1e:	2301      	movne	r3, #1
  400f20:	2300      	moveq	r3, #0
  400f22:	b2db      	uxtb	r3, r3
  400f24:	4618      	mov	r0, r3
  400f26:	4b16      	ldr	r3, [pc, #88]	; (400f80 <SWD_Start+0xe4>)
  400f28:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_2;ii++){
  400f2a:	693b      	ldr	r3, [r7, #16]
  400f2c:	3301      	adds	r3, #1
  400f2e:	613b      	str	r3, [r7, #16]
  400f30:	693b      	ldr	r3, [r7, #16]
  400f32:	2b0c      	cmp	r3, #12
  400f34:	d9ea      	bls.n	400f0c <SWD_Start+0x70>
	}
	
	// Write the third reset message
	for(uint32_t ii = 0; ii < STARTUP_HIGH_3;ii++){
  400f36:	2300      	movs	r3, #0
  400f38:	60fb      	str	r3, [r7, #12]
  400f3a:	e005      	b.n	400f48 <SWD_Start+0xac>
		SWD_bitOut(HIGH);
  400f3c:	2001      	movs	r0, #1
  400f3e:	4b10      	ldr	r3, [pc, #64]	; (400f80 <SWD_Start+0xe4>)
  400f40:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_HIGH_3;ii++){
  400f42:	68fb      	ldr	r3, [r7, #12]
  400f44:	3301      	adds	r3, #1
  400f46:	60fb      	str	r3, [r7, #12]
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	2b3a      	cmp	r3, #58	; 0x3a
  400f4c:	d9f6      	bls.n	400f3c <SWD_Start+0xa0>
	}
	// Write the third message
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_3;ii++){
  400f4e:	2300      	movs	r3, #0
  400f50:	60bb      	str	r3, [r7, #8]
  400f52:	e005      	b.n	400f60 <SWD_Start+0xc4>
		SWD_bitOut(MASK_32BIT_1&&(STARTUP_MSG_3>>(STARTUP_MSGLEN_3-ii)));
  400f54:	2000      	movs	r0, #0
  400f56:	4b0a      	ldr	r3, [pc, #40]	; (400f80 <SWD_Start+0xe4>)
  400f58:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_3;ii++){
  400f5a:	68bb      	ldr	r3, [r7, #8]
  400f5c:	3301      	adds	r3, #1
  400f5e:	60bb      	str	r3, [r7, #8]
  400f60:	68bb      	ldr	r3, [r7, #8]
  400f62:	2b0f      	cmp	r3, #15
  400f64:	d9f6      	bls.n	400f54 <SWD_Start+0xb8>
	}
	//////////////////////////////////////////////////////////////////
	// Request device ID
	uint32_t deviceTag = SWD_Comm(RQ_DP_READ_IDCODE, MSG_NULL);
  400f66:	2100      	movs	r1, #0
  400f68:	20a5      	movs	r0, #165	; 0xa5
  400f6a:	4b06      	ldr	r3, [pc, #24]	; (400f84 <SWD_Start+0xe8>)
  400f6c:	4798      	blx	r3
  400f6e:	6078      	str	r0, [r7, #4]

	deviceTag=0;
  400f70:	2300      	movs	r3, #0
  400f72:	607b      	str	r3, [r7, #4]

}
  400f74:	bf00      	nop
  400f76:	3720      	adds	r7, #32
  400f78:	46bd      	mov	sp, r7
  400f7a:	bd80      	pop	{r7, pc}
  400f7c:	0040095d 	.word	0x0040095d
  400f80:	00400981 	.word	0x00400981
  400f84:	00400cc9 	.word	0x00400cc9

00400f88 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400f88:	b480      	push	{r7}
  400f8a:	b083      	sub	sp, #12
  400f8c:	af00      	add	r7, sp, #0
  400f8e:	4603      	mov	r3, r0
  400f90:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400f92:	4908      	ldr	r1, [pc, #32]	; (400fb4 <NVIC_EnableIRQ+0x2c>)
  400f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400f98:	095b      	lsrs	r3, r3, #5
  400f9a:	79fa      	ldrb	r2, [r7, #7]
  400f9c:	f002 021f 	and.w	r2, r2, #31
  400fa0:	2001      	movs	r0, #1
  400fa2:	fa00 f202 	lsl.w	r2, r0, r2
  400fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400faa:	bf00      	nop
  400fac:	370c      	adds	r7, #12
  400fae:	46bd      	mov	sp, r7
  400fb0:	bc80      	pop	{r7}
  400fb2:	4770      	bx	lr
  400fb4:	e000e100 	.word	0xe000e100

00400fb8 <osc_get_rate>:
{
  400fb8:	b480      	push	{r7}
  400fba:	b083      	sub	sp, #12
  400fbc:	af00      	add	r7, sp, #0
  400fbe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400fc0:	687b      	ldr	r3, [r7, #4]
  400fc2:	2b07      	cmp	r3, #7
  400fc4:	d825      	bhi.n	401012 <osc_get_rate+0x5a>
  400fc6:	a201      	add	r2, pc, #4	; (adr r2, 400fcc <osc_get_rate+0x14>)
  400fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400fcc:	00400fed 	.word	0x00400fed
  400fd0:	00400ff3 	.word	0x00400ff3
  400fd4:	00400ff9 	.word	0x00400ff9
  400fd8:	00400fff 	.word	0x00400fff
  400fdc:	00401003 	.word	0x00401003
  400fe0:	00401007 	.word	0x00401007
  400fe4:	0040100b 	.word	0x0040100b
  400fe8:	0040100f 	.word	0x0040100f
		return OSC_SLCK_32K_RC_HZ;
  400fec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ff0:	e010      	b.n	401014 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ff6:	e00d      	b.n	401014 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ffc:	e00a      	b.n	401014 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400ffe:	4b08      	ldr	r3, [pc, #32]	; (401020 <osc_get_rate+0x68>)
  401000:	e008      	b.n	401014 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401002:	4b08      	ldr	r3, [pc, #32]	; (401024 <osc_get_rate+0x6c>)
  401004:	e006      	b.n	401014 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401006:	4b08      	ldr	r3, [pc, #32]	; (401028 <osc_get_rate+0x70>)
  401008:	e004      	b.n	401014 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40100a:	4b07      	ldr	r3, [pc, #28]	; (401028 <osc_get_rate+0x70>)
  40100c:	e002      	b.n	401014 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40100e:	4b06      	ldr	r3, [pc, #24]	; (401028 <osc_get_rate+0x70>)
  401010:	e000      	b.n	401014 <osc_get_rate+0x5c>
	return 0;
  401012:	2300      	movs	r3, #0
}
  401014:	4618      	mov	r0, r3
  401016:	370c      	adds	r7, #12
  401018:	46bd      	mov	sp, r7
  40101a:	bc80      	pop	{r7}
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	003d0900 	.word	0x003d0900
  401024:	007a1200 	.word	0x007a1200
  401028:	00b71b00 	.word	0x00b71b00

0040102c <sysclk_get_main_hz>:
{
  40102c:	b580      	push	{r7, lr}
  40102e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401030:	2006      	movs	r0, #6
  401032:	4b04      	ldr	r3, [pc, #16]	; (401044 <sysclk_get_main_hz+0x18>)
  401034:	4798      	blx	r3
  401036:	4602      	mov	r2, r0
  401038:	4613      	mov	r3, r2
  40103a:	009b      	lsls	r3, r3, #2
  40103c:	4413      	add	r3, r2
  40103e:	009b      	lsls	r3, r3, #2
}
  401040:	4618      	mov	r0, r3
  401042:	bd80      	pop	{r7, pc}
  401044:	00400fb9 	.word	0x00400fb9

00401048 <sysclk_get_cpu_hz>:
{
  401048:	b580      	push	{r7, lr}
  40104a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40104c:	4b02      	ldr	r3, [pc, #8]	; (401058 <sysclk_get_cpu_hz+0x10>)
  40104e:	4798      	blx	r3
  401050:	4603      	mov	r3, r0
  401052:	085b      	lsrs	r3, r3, #1
}
  401054:	4618      	mov	r0, r3
  401056:	bd80      	pop	{r7, pc}
  401058:	0040102d 	.word	0x0040102d

0040105c <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  40105c:	b580      	push	{r7, lr}
  40105e:	b082      	sub	sp, #8
  401060:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  401062:	2100      	movs	r1, #0
  401064:	4809      	ldr	r0, [pc, #36]	; (40108c <TC0_Handler+0x30>)
  401066:	4b0a      	ldr	r3, [pc, #40]	; (401090 <TC0_Handler+0x34>)
  401068:	4798      	blx	r3
  40106a:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  40106c:	687b      	ldr	r3, [r7, #4]
  40106e:	f003 0310 	and.w	r3, r3, #16
  401072:	2b00      	cmp	r3, #0
  401074:	d006      	beq.n	401084 <TC0_Handler+0x28>
		counts++;
  401076:	4b07      	ldr	r3, [pc, #28]	; (401094 <TC0_Handler+0x38>)
  401078:	781b      	ldrb	r3, [r3, #0]
  40107a:	b2db      	uxtb	r3, r3
  40107c:	3301      	adds	r3, #1
  40107e:	b2da      	uxtb	r2, r3
  401080:	4b04      	ldr	r3, [pc, #16]	; (401094 <TC0_Handler+0x38>)
  401082:	701a      	strb	r2, [r3, #0]
	}
}
  401084:	bf00      	nop
  401086:	3708      	adds	r7, #8
  401088:	46bd      	mov	sp, r7
  40108a:	bd80      	pop	{r7, pc}
  40108c:	40010000 	.word	0x40010000
  401090:	004022ff 	.word	0x004022ff
  401094:	200004e0 	.word	0x200004e0

00401098 <configure_tc>:

void configure_tc(void)
{
  401098:	b590      	push	{r4, r7, lr}
  40109a:	b087      	sub	sp, #28
  40109c:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  40109e:	4b18      	ldr	r3, [pc, #96]	; (401100 <configure_tc+0x68>)
  4010a0:	4798      	blx	r3
  4010a2:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  4010a4:	2017      	movs	r0, #23
  4010a6:	4b17      	ldr	r3, [pc, #92]	; (401104 <configure_tc+0x6c>)
  4010a8:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4010aa:	1d39      	adds	r1, r7, #4
  4010ac:	f107 0208 	add.w	r2, r7, #8
  4010b0:	68fb      	ldr	r3, [r7, #12]
  4010b2:	9300      	str	r3, [sp, #0]
  4010b4:	460b      	mov	r3, r1
  4010b6:	68f9      	ldr	r1, [r7, #12]
  4010b8:	2001      	movs	r0, #1
  4010ba:	4c13      	ldr	r4, [pc, #76]	; (401108 <configure_tc+0x70>)
  4010bc:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4010be:	687b      	ldr	r3, [r7, #4]
  4010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4010c4:	461a      	mov	r2, r3
  4010c6:	2100      	movs	r1, #0
  4010c8:	4810      	ldr	r0, [pc, #64]	; (40110c <configure_tc+0x74>)
  4010ca:	4b11      	ldr	r3, [pc, #68]	; (401110 <configure_tc+0x78>)
  4010cc:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  4010ce:	68bb      	ldr	r3, [r7, #8]
  4010d0:	68fa      	ldr	r2, [r7, #12]
  4010d2:	fbb2 f3f3 	udiv	r3, r2, r3
  4010d6:	461a      	mov	r2, r3
  4010d8:	2100      	movs	r1, #0
  4010da:	480c      	ldr	r0, [pc, #48]	; (40110c <configure_tc+0x74>)
  4010dc:	4b0d      	ldr	r3, [pc, #52]	; (401114 <configure_tc+0x7c>)
  4010de:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  4010e0:	2017      	movs	r0, #23
  4010e2:	4b0d      	ldr	r3, [pc, #52]	; (401118 <configure_tc+0x80>)
  4010e4:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4010e6:	2210      	movs	r2, #16
  4010e8:	2100      	movs	r1, #0
  4010ea:	4808      	ldr	r0, [pc, #32]	; (40110c <configure_tc+0x74>)
  4010ec:	4b0b      	ldr	r3, [pc, #44]	; (40111c <configure_tc+0x84>)
  4010ee:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  4010f0:	2100      	movs	r1, #0
  4010f2:	4806      	ldr	r0, [pc, #24]	; (40110c <configure_tc+0x74>)
  4010f4:	4b0a      	ldr	r3, [pc, #40]	; (401120 <configure_tc+0x88>)
  4010f6:	4798      	blx	r3
  4010f8:	bf00      	nop
  4010fa:	3714      	adds	r7, #20
  4010fc:	46bd      	mov	sp, r7
  4010fe:	bd90      	pop	{r4, r7, pc}
  401100:	00401049 	.word	0x00401049
  401104:	004021dd 	.word	0x004021dd
  401108:	00402321 	.word	0x00402321
  40110c:	40010000 	.word	0x40010000
  401110:	0040225d 	.word	0x0040225d
  401114:	004022b5 	.word	0x004022b5
  401118:	00400f89 	.word	0x00400f89
  40111c:	004022d9 	.word	0x004022d9
  401120:	00402295 	.word	0x00402295

00401124 <NVIC_EnableIRQ>:
{
  401124:	b480      	push	{r7}
  401126:	b083      	sub	sp, #12
  401128:	af00      	add	r7, sp, #0
  40112a:	4603      	mov	r3, r0
  40112c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40112e:	4908      	ldr	r1, [pc, #32]	; (401150 <NVIC_EnableIRQ+0x2c>)
  401130:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401134:	095b      	lsrs	r3, r3, #5
  401136:	79fa      	ldrb	r2, [r7, #7]
  401138:	f002 021f 	and.w	r2, r2, #31
  40113c:	2001      	movs	r0, #1
  40113e:	fa00 f202 	lsl.w	r2, r0, r2
  401142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401146:	bf00      	nop
  401148:	370c      	adds	r7, #12
  40114a:	46bd      	mov	sp, r7
  40114c:	bc80      	pop	{r7}
  40114e:	4770      	bx	lr
  401150:	e000e100 	.word	0xe000e100

00401154 <osc_get_rate>:
{
  401154:	b480      	push	{r7}
  401156:	b083      	sub	sp, #12
  401158:	af00      	add	r7, sp, #0
  40115a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40115c:	687b      	ldr	r3, [r7, #4]
  40115e:	2b07      	cmp	r3, #7
  401160:	d825      	bhi.n	4011ae <osc_get_rate+0x5a>
  401162:	a201      	add	r2, pc, #4	; (adr r2, 401168 <osc_get_rate+0x14>)
  401164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401168:	00401189 	.word	0x00401189
  40116c:	0040118f 	.word	0x0040118f
  401170:	00401195 	.word	0x00401195
  401174:	0040119b 	.word	0x0040119b
  401178:	0040119f 	.word	0x0040119f
  40117c:	004011a3 	.word	0x004011a3
  401180:	004011a7 	.word	0x004011a7
  401184:	004011ab 	.word	0x004011ab
		return OSC_SLCK_32K_RC_HZ;
  401188:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40118c:	e010      	b.n	4011b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401192:	e00d      	b.n	4011b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401198:	e00a      	b.n	4011b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40119a:	4b08      	ldr	r3, [pc, #32]	; (4011bc <osc_get_rate+0x68>)
  40119c:	e008      	b.n	4011b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40119e:	4b08      	ldr	r3, [pc, #32]	; (4011c0 <osc_get_rate+0x6c>)
  4011a0:	e006      	b.n	4011b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4011a2:	4b08      	ldr	r3, [pc, #32]	; (4011c4 <osc_get_rate+0x70>)
  4011a4:	e004      	b.n	4011b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4011a6:	4b07      	ldr	r3, [pc, #28]	; (4011c4 <osc_get_rate+0x70>)
  4011a8:	e002      	b.n	4011b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4011aa:	4b06      	ldr	r3, [pc, #24]	; (4011c4 <osc_get_rate+0x70>)
  4011ac:	e000      	b.n	4011b0 <osc_get_rate+0x5c>
	return 0;
  4011ae:	2300      	movs	r3, #0
}
  4011b0:	4618      	mov	r0, r3
  4011b2:	370c      	adds	r7, #12
  4011b4:	46bd      	mov	sp, r7
  4011b6:	bc80      	pop	{r7}
  4011b8:	4770      	bx	lr
  4011ba:	bf00      	nop
  4011bc:	003d0900 	.word	0x003d0900
  4011c0:	007a1200 	.word	0x007a1200
  4011c4:	00b71b00 	.word	0x00b71b00

004011c8 <sysclk_get_main_hz>:
{
  4011c8:	b580      	push	{r7, lr}
  4011ca:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4011cc:	2006      	movs	r0, #6
  4011ce:	4b04      	ldr	r3, [pc, #16]	; (4011e0 <sysclk_get_main_hz+0x18>)
  4011d0:	4798      	blx	r3
  4011d2:	4602      	mov	r2, r0
  4011d4:	4613      	mov	r3, r2
  4011d6:	009b      	lsls	r3, r3, #2
  4011d8:	4413      	add	r3, r2
  4011da:	009b      	lsls	r3, r3, #2
}
  4011dc:	4618      	mov	r0, r3
  4011de:	bd80      	pop	{r7, pc}
  4011e0:	00401155 	.word	0x00401155

004011e4 <sysclk_get_cpu_hz>:
{
  4011e4:	b580      	push	{r7, lr}
  4011e6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4011e8:	4b02      	ldr	r3, [pc, #8]	; (4011f4 <sysclk_get_cpu_hz+0x10>)
  4011ea:	4798      	blx	r3
  4011ec:	4603      	mov	r3, r0
  4011ee:	085b      	lsrs	r3, r3, #1
}
  4011f0:	4618      	mov	r0, r3
  4011f2:	bd80      	pop	{r7, pc}
  4011f4:	004011c9 	.word	0x004011c9

004011f8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4011f8:	b580      	push	{r7, lr}
  4011fa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4011fc:	4b02      	ldr	r3, [pc, #8]	; (401208 <sysclk_get_peripheral_hz+0x10>)
  4011fe:	4798      	blx	r3
  401200:	4603      	mov	r3, r0
  401202:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401204:	4618      	mov	r0, r3
  401206:	bd80      	pop	{r7, pc}
  401208:	004011c9 	.word	0x004011c9

0040120c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40120c:	b580      	push	{r7, lr}
  40120e:	b082      	sub	sp, #8
  401210:	af00      	add	r7, sp, #0
  401212:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401214:	6878      	ldr	r0, [r7, #4]
  401216:	4b03      	ldr	r3, [pc, #12]	; (401224 <sysclk_enable_peripheral_clock+0x18>)
  401218:	4798      	blx	r3
}
  40121a:	bf00      	nop
  40121c:	3708      	adds	r7, #8
  40121e:	46bd      	mov	sp, r7
  401220:	bd80      	pop	{r7, pc}
  401222:	bf00      	nop
  401224:	004021dd 	.word	0x004021dd

00401228 <ioport_set_pin_dir>:
{
  401228:	b480      	push	{r7}
  40122a:	b08d      	sub	sp, #52	; 0x34
  40122c:	af00      	add	r7, sp, #0
  40122e:	6078      	str	r0, [r7, #4]
  401230:	460b      	mov	r3, r1
  401232:	70fb      	strb	r3, [r7, #3]
  401234:	687b      	ldr	r3, [r7, #4]
  401236:	62fb      	str	r3, [r7, #44]	; 0x2c
  401238:	78fb      	ldrb	r3, [r7, #3]
  40123a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401240:	627b      	str	r3, [r7, #36]	; 0x24
  401242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401244:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401246:	6a3b      	ldr	r3, [r7, #32]
  401248:	095b      	lsrs	r3, r3, #5
  40124a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40124c:	69fb      	ldr	r3, [r7, #28]
  40124e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401252:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401256:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401258:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  40125a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40125e:	2b01      	cmp	r3, #1
  401260:	d109      	bne.n	401276 <ioport_set_pin_dir+0x4e>
  401262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401264:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401266:	697b      	ldr	r3, [r7, #20]
  401268:	f003 031f 	and.w	r3, r3, #31
  40126c:	2201      	movs	r2, #1
  40126e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401270:	69bb      	ldr	r3, [r7, #24]
  401272:	611a      	str	r2, [r3, #16]
  401274:	e00c      	b.n	401290 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40127a:	2b00      	cmp	r3, #0
  40127c:	d108      	bne.n	401290 <ioport_set_pin_dir+0x68>
  40127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401280:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401282:	693b      	ldr	r3, [r7, #16]
  401284:	f003 031f 	and.w	r3, r3, #31
  401288:	2201      	movs	r2, #1
  40128a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40128c:	69bb      	ldr	r3, [r7, #24]
  40128e:	615a      	str	r2, [r3, #20]
  401290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401292:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401294:	68fb      	ldr	r3, [r7, #12]
  401296:	f003 031f 	and.w	r3, r3, #31
  40129a:	2201      	movs	r2, #1
  40129c:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40129e:	69bb      	ldr	r3, [r7, #24]
  4012a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4012a4:	bf00      	nop
  4012a6:	3734      	adds	r7, #52	; 0x34
  4012a8:	46bd      	mov	sp, r7
  4012aa:	bc80      	pop	{r7}
  4012ac:	4770      	bx	lr

004012ae <ioport_set_pin_level>:
{
  4012ae:	b480      	push	{r7}
  4012b0:	b08b      	sub	sp, #44	; 0x2c
  4012b2:	af00      	add	r7, sp, #0
  4012b4:	6078      	str	r0, [r7, #4]
  4012b6:	460b      	mov	r3, r1
  4012b8:	70fb      	strb	r3, [r7, #3]
  4012ba:	687b      	ldr	r3, [r7, #4]
  4012bc:	627b      	str	r3, [r7, #36]	; 0x24
  4012be:	78fb      	ldrb	r3, [r7, #3]
  4012c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012c6:	61fb      	str	r3, [r7, #28]
  4012c8:	69fb      	ldr	r3, [r7, #28]
  4012ca:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4012cc:	69bb      	ldr	r3, [r7, #24]
  4012ce:	095b      	lsrs	r3, r3, #5
  4012d0:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4012d2:	697b      	ldr	r3, [r7, #20]
  4012d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4012d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4012dc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4012de:	613b      	str	r3, [r7, #16]
	if (level) {
  4012e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4012e4:	2b00      	cmp	r3, #0
  4012e6:	d009      	beq.n	4012fc <ioport_set_pin_level+0x4e>
  4012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012ea:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4012ec:	68fb      	ldr	r3, [r7, #12]
  4012ee:	f003 031f 	and.w	r3, r3, #31
  4012f2:	2201      	movs	r2, #1
  4012f4:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012f6:	693b      	ldr	r3, [r7, #16]
  4012f8:	631a      	str	r2, [r3, #48]	; 0x30
}
  4012fa:	e008      	b.n	40130e <ioport_set_pin_level+0x60>
  4012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012fe:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401300:	68bb      	ldr	r3, [r7, #8]
  401302:	f003 031f 	and.w	r3, r3, #31
  401306:	2201      	movs	r2, #1
  401308:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40130a:	693b      	ldr	r3, [r7, #16]
  40130c:	635a      	str	r2, [r3, #52]	; 0x34
  40130e:	bf00      	nop
  401310:	372c      	adds	r7, #44	; 0x2c
  401312:	46bd      	mov	sp, r7
  401314:	bc80      	pop	{r7}
  401316:	4770      	bx	lr

00401318 <USART0_Handler>:
/*
Handler for incoming data from the WiFi. Should call
process incoming byte wifi when a new byte arrives
*/
void WIFI_USART_HANDLER(void) 
{
  401318:	b580      	push	{r7, lr}
  40131a:	b082      	sub	sp, #8
  40131c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  40131e:	480d      	ldr	r0, [pc, #52]	; (401354 <USART0_Handler+0x3c>)
  401320:	4b0d      	ldr	r3, [pc, #52]	; (401358 <USART0_Handler+0x40>)
  401322:	4798      	blx	r3
  401324:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  401326:	687b      	ldr	r3, [r7, #4]
  401328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40132c:	2b00      	cmp	r3, #0
  40132e:	d00c      	beq.n	40134a <USART0_Handler+0x32>
		usart_read(BOARD_USART, &received_byte_wifi);
  401330:	490a      	ldr	r1, [pc, #40]	; (40135c <USART0_Handler+0x44>)
  401332:	4808      	ldr	r0, [pc, #32]	; (401354 <USART0_Handler+0x3c>)
  401334:	4b0a      	ldr	r3, [pc, #40]	; (401360 <USART0_Handler+0x48>)
  401336:	4798      	blx	r3
		new_rx_wifi = true;
  401338:	4b0a      	ldr	r3, [pc, #40]	; (401364 <USART0_Handler+0x4c>)
  40133a:	2201      	movs	r2, #1
  40133c:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  40133e:	4b07      	ldr	r3, [pc, #28]	; (40135c <USART0_Handler+0x44>)
  401340:	681b      	ldr	r3, [r3, #0]
  401342:	b2db      	uxtb	r3, r3
  401344:	4618      	mov	r0, r3
  401346:	4b08      	ldr	r3, [pc, #32]	; (401368 <USART0_Handler+0x50>)
  401348:	4798      	blx	r3
	}
}
  40134a:	bf00      	nop
  40134c:	3708      	adds	r7, #8
  40134e:	46bd      	mov	sp, r7
  401350:	bd80      	pop	{r7, pc}
  401352:	bf00      	nop
  401354:	40024000 	.word	0x40024000
  401358:	0040051d 	.word	0x0040051d
  40135c:	200004d4 	.word	0x200004d4
  401360:	00400581 	.word	0x00400581
  401364:	200004d8 	.word	0x200004d8
  401368:	0040136d 	.word	0x0040136d

0040136c <process_incoming_byte_wifi>:

/*
Stores every incoming byte (in byte) from the AMW136 in a buffer.
*/
void process_incoming_byte_wifi(uint8_t in_byte) 
{
  40136c:	b480      	push	{r7}
  40136e:	b083      	sub	sp, #12
  401370:	af00      	add	r7, sp, #0
  401372:	4603      	mov	r3, r0
  401374:	71fb      	strb	r3, [r7, #7]
	buffer_wifi[input_pos_wifi] = in_byte;
  401376:	4b07      	ldr	r3, [pc, #28]	; (401394 <process_incoming_byte_wifi+0x28>)
  401378:	681b      	ldr	r3, [r3, #0]
  40137a:	4907      	ldr	r1, [pc, #28]	; (401398 <process_incoming_byte_wifi+0x2c>)
  40137c:	79fa      	ldrb	r2, [r7, #7]
  40137e:	54ca      	strb	r2, [r1, r3]
	input_pos_wifi++;
  401380:	4b04      	ldr	r3, [pc, #16]	; (401394 <process_incoming_byte_wifi+0x28>)
  401382:	681b      	ldr	r3, [r3, #0]
  401384:	3301      	adds	r3, #1
  401386:	4a03      	ldr	r2, [pc, #12]	; (401394 <process_incoming_byte_wifi+0x28>)
  401388:	6013      	str	r3, [r2, #0]
}
  40138a:	bf00      	nop
  40138c:	370c      	adds	r7, #12
  40138e:	46bd      	mov	sp, r7
  401390:	bc80      	pop	{r7}
  401392:	4770      	bx	lr
  401394:	200004dc 	.word	0x200004dc
  401398:	20018bc4 	.word	0x20018bc4

0040139c <wifi_command_response_handler>:
/*
Handler for command complete rising-edge interrupt from AMW136.
When this is triggered, it is time to process the response of the AMW136.
*/
void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  40139c:	b580      	push	{r7, lr}
  40139e:	b084      	sub	sp, #16
  4013a0:	af00      	add	r7, sp, #0
  4013a2:	6078      	str	r0, [r7, #4]
  4013a4:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	process_data_wifi();
  4013a6:	4b0c      	ldr	r3, [pc, #48]	; (4013d8 <wifi_command_response_handler+0x3c>)
  4013a8:	4798      	blx	r3
	
	// reset the buffer
	input_pos_wifi = 0;
  4013aa:	4b0c      	ldr	r3, [pc, #48]	; (4013dc <wifi_command_response_handler+0x40>)
  4013ac:	2200      	movs	r2, #0
  4013ae:	601a      	str	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  4013b0:	2300      	movs	r3, #0
  4013b2:	60fb      	str	r3, [r7, #12]
  4013b4:	e007      	b.n	4013c6 <wifi_command_response_handler+0x2a>
		buffer_wifi[ii] = 0;
  4013b6:	4a0a      	ldr	r2, [pc, #40]	; (4013e0 <wifi_command_response_handler+0x44>)
  4013b8:	68fb      	ldr	r3, [r7, #12]
  4013ba:	4413      	add	r3, r2
  4013bc:	2200      	movs	r2, #0
  4013be:	701a      	strb	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  4013c0:	68fb      	ldr	r3, [r7, #12]
  4013c2:	3301      	adds	r3, #1
  4013c4:	60fb      	str	r3, [r7, #12]
  4013c6:	68fb      	ldr	r3, [r7, #12]
  4013c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4013cc:	d3f3      	bcc.n	4013b6 <wifi_command_response_handler+0x1a>
	}
	
}
  4013ce:	bf00      	nop
  4013d0:	3710      	adds	r7, #16
  4013d2:	46bd      	mov	sp, r7
  4013d4:	bd80      	pop	{r7, pc}
  4013d6:	bf00      	nop
  4013d8:	004013e5 	.word	0x004013e5
  4013dc:	200004dc 	.word	0x200004dc
  4013e0:	20018bc4 	.word	0x20018bc4

004013e4 <process_data_wifi>:
filled by process incoming byte wifi. This processing should be looking for certain
responses that the AMW136 should give, such as start transfer when it is ready to
receive the image.
*/
void process_data_wifi (void) 
{
  4013e4:	b580      	push	{r7, lr}
  4013e6:	af00      	add	r7, sp, #0
	strcpy(rawRecievedMessage,buffer_wifi);
  4013e8:	491a      	ldr	r1, [pc, #104]	; (401454 <process_data_wifi+0x70>)
  4013ea:	481b      	ldr	r0, [pc, #108]	; (401458 <process_data_wifi+0x74>)
  4013ec:	4b1b      	ldr	r3, [pc, #108]	; (40145c <process_data_wifi+0x78>)
  4013ee:	4798      	blx	r3
	// Compare the received string with some other string
	/*if(strstr(buffer_wifi, "StringToCompare")){
		// set receivedMessage variable as appropriate
	}*/
	if(strstr(buffer_wifi,msg_START_TRANSFER)){
  4013f0:	491b      	ldr	r1, [pc, #108]	; (401460 <process_data_wifi+0x7c>)
  4013f2:	4818      	ldr	r0, [pc, #96]	; (401454 <process_data_wifi+0x70>)
  4013f4:	4b1b      	ldr	r3, [pc, #108]	; (401464 <process_data_wifi+0x80>)
  4013f6:	4798      	blx	r3
  4013f8:	4603      	mov	r3, r0
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d003      	beq.n	401406 <process_data_wifi+0x22>
		receivedMessage = START_TRANSFER;
  4013fe:	4b1a      	ldr	r3, [pc, #104]	; (401468 <process_data_wifi+0x84>)
  401400:	2202      	movs	r2, #2
  401402:	601a      	str	r2, [r3, #0]
					receivedMessage = DEFAULT;
				}
			}
		}
	}
}
  401404:	e024      	b.n	401450 <process_data_wifi+0x6c>
    	if(strstr(buffer_wifi,msg_CLIENT_NOT_CONNECTED)){
  401406:	4919      	ldr	r1, [pc, #100]	; (40146c <process_data_wifi+0x88>)
  401408:	4812      	ldr	r0, [pc, #72]	; (401454 <process_data_wifi+0x70>)
  40140a:	4b16      	ldr	r3, [pc, #88]	; (401464 <process_data_wifi+0x80>)
  40140c:	4798      	blx	r3
  40140e:	4603      	mov	r3, r0
  401410:	2b00      	cmp	r3, #0
  401412:	d003      	beq.n	40141c <process_data_wifi+0x38>
			receivedMessage = CLIENT_NOT_CONNECTED	;
  401414:	4b14      	ldr	r3, [pc, #80]	; (401468 <process_data_wifi+0x84>)
  401416:	2204      	movs	r2, #4
  401418:	601a      	str	r2, [r3, #0]
}
  40141a:	e019      	b.n	401450 <process_data_wifi+0x6c>
			if(strstr(buffer_wifi,msg_COMMAND_FAILED)){
  40141c:	4914      	ldr	r1, [pc, #80]	; (401470 <process_data_wifi+0x8c>)
  40141e:	480d      	ldr	r0, [pc, #52]	; (401454 <process_data_wifi+0x70>)
  401420:	4b10      	ldr	r3, [pc, #64]	; (401464 <process_data_wifi+0x80>)
  401422:	4798      	blx	r3
  401424:	4603      	mov	r3, r0
  401426:	2b00      	cmp	r3, #0
  401428:	d003      	beq.n	401432 <process_data_wifi+0x4e>
				receivedMessage = COMMAND_FAILED;
  40142a:	4b0f      	ldr	r3, [pc, #60]	; (401468 <process_data_wifi+0x84>)
  40142c:	2205      	movs	r2, #5
  40142e:	601a      	str	r2, [r3, #0]
}
  401430:	e00e      	b.n	401450 <process_data_wifi+0x6c>
				if(strstr(buffer_wifi,msg_RECIEVE_NONE)){
  401432:	4910      	ldr	r1, [pc, #64]	; (401474 <process_data_wifi+0x90>)
  401434:	4807      	ldr	r0, [pc, #28]	; (401454 <process_data_wifi+0x70>)
  401436:	4b0b      	ldr	r3, [pc, #44]	; (401464 <process_data_wifi+0x80>)
  401438:	4798      	blx	r3
  40143a:	4603      	mov	r3, r0
  40143c:	2b00      	cmp	r3, #0
  40143e:	d003      	beq.n	401448 <process_data_wifi+0x64>
					receivedMessage = RECIEVE_NONE;
  401440:	4b09      	ldr	r3, [pc, #36]	; (401468 <process_data_wifi+0x84>)
  401442:	2206      	movs	r2, #6
  401444:	601a      	str	r2, [r3, #0]
}
  401446:	e003      	b.n	401450 <process_data_wifi+0x6c>
					receivedMessage = DEFAULT;
  401448:	4b07      	ldr	r3, [pc, #28]	; (401468 <process_data_wifi+0x84>)
  40144a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  40144e:	601a      	str	r2, [r3, #0]
}
  401450:	bf00      	nop
  401452:	bd80      	pop	{r7, pc}
  401454:	20018bc4 	.word	0x20018bc4
  401458:	200004ec 	.word	0x200004ec
  40145c:	00402db9 	.word	0x00402db9
  401460:	0040364c 	.word	0x0040364c
  401464:	00403125 	.word	0x00403125
  401468:	200004e4 	.word	0x200004e4
  40146c:	0040365c 	.word	0x0040365c
  401470:	00403674 	.word	0x00403674
  401474:	00403684 	.word	0x00403684

00401478 <wifi_web_setup_handler>:
/*
Handler for button to initiate web setup of AMW136. Should set a flag indicating a
request to initiate web setup
*/
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  401478:	b480      	push	{r7}
  40147a:	b083      	sub	sp, #12
  40147c:	af00      	add	r7, sp, #0
  40147e:	6078      	str	r0, [r7, #4]
  401480:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  401482:	4b04      	ldr	r3, [pc, #16]	; (401494 <wifi_web_setup_handler+0x1c>)
  401484:	2201      	movs	r2, #1
  401486:	701a      	strb	r2, [r3, #0]
}
  401488:	bf00      	nop
  40148a:	370c      	adds	r7, #12
  40148c:	46bd      	mov	sp, r7
  40148e:	bc80      	pop	{r7}
  401490:	4770      	bx	lr
  401492:	bf00      	nop
  401494:	200004e1 	.word	0x200004e1

00401498 <configure_usart_wifi>:

/*
Configuration of USART port used to communicate with the AMW136.
*/
void configure_usart_wifi(void) 
{
  401498:	b5b0      	push	{r4, r5, r7, lr}
  40149a:	b086      	sub	sp, #24
  40149c:	af00      	add	r7, sp, #0
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  40149e:	4b22      	ldr	r3, [pc, #136]	; (401528 <configure_usart_wifi+0x90>)
  4014a0:	463c      	mov	r4, r7
  4014a2:	461d      	mov	r5, r3
  4014a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4014a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4014a8:	e895 0003 	ldmia.w	r5, {r0, r1}
  4014ac:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  4014b0:	4b1e      	ldr	r3, [pc, #120]	; (40152c <configure_usart_wifi+0x94>)
  4014b2:	4798      	blx	r3
  4014b4:	4602      	mov	r2, r0
  4014b6:	4b1e      	ldr	r3, [pc, #120]	; (401530 <configure_usart_wifi+0x98>)
  4014b8:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  4014ba:	200e      	movs	r0, #14
  4014bc:	4b1d      	ldr	r3, [pc, #116]	; (401534 <configure_usart_wifi+0x9c>)
  4014be:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  4014c0:	4b1b      	ldr	r3, [pc, #108]	; (401530 <configure_usart_wifi+0x98>)
  4014c2:	681a      	ldr	r2, [r3, #0]
  4014c4:	463b      	mov	r3, r7
  4014c6:	4619      	mov	r1, r3
  4014c8:	481b      	ldr	r0, [pc, #108]	; (401538 <configure_usart_wifi+0xa0>)
  4014ca:	4b1c      	ldr	r3, [pc, #112]	; (40153c <configure_usart_wifi+0xa4>)
  4014cc:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  4014ce:	f04f 31ff 	mov.w	r1, #4294967295
  4014d2:	4819      	ldr	r0, [pc, #100]	; (401538 <configure_usart_wifi+0xa0>)
  4014d4:	4b1a      	ldr	r3, [pc, #104]	; (401540 <configure_usart_wifi+0xa8>)
  4014d6:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  4014d8:	4817      	ldr	r0, [pc, #92]	; (401538 <configure_usart_wifi+0xa0>)
  4014da:	4b1a      	ldr	r3, [pc, #104]	; (401544 <configure_usart_wifi+0xac>)
  4014dc:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4014de:	4816      	ldr	r0, [pc, #88]	; (401538 <configure_usart_wifi+0xa0>)
  4014e0:	4b19      	ldr	r3, [pc, #100]	; (401548 <configure_usart_wifi+0xb0>)
  4014e2:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4014e4:	2101      	movs	r1, #1
  4014e6:	4814      	ldr	r0, [pc, #80]	; (401538 <configure_usart_wifi+0xa0>)
  4014e8:	4b18      	ldr	r3, [pc, #96]	; (40154c <configure_usart_wifi+0xb4>)
  4014ea:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4014ec:	200e      	movs	r0, #14
  4014ee:	4b18      	ldr	r3, [pc, #96]	; (401550 <configure_usart_wifi+0xb8>)
  4014f0:	4798      	blx	r3

	// Configure the RX / TX pins
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4014f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4014f6:	2005      	movs	r0, #5
  4014f8:	4b16      	ldr	r3, [pc, #88]	; (401554 <configure_usart_wifi+0xbc>)
  4014fa:	4798      	blx	r3
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4014fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401500:	2006      	movs	r0, #6
  401502:	4b14      	ldr	r3, [pc, #80]	; (401554 <configure_usart_wifi+0xbc>)
  401504:	4798      	blx	r3
	/* Configure USART CTS pin */
	//gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
	ioport_set_pin_dir(PIN_USART0_CTS_IDX,IOPORT_DIR_OUTPUT);
  401506:	2101      	movs	r1, #1
  401508:	2008      	movs	r0, #8
  40150a:	4b13      	ldr	r3, [pc, #76]	; (401558 <configure_usart_wifi+0xc0>)
  40150c:	4798      	blx	r3
	ioport_set_pin_level(PIN_USART0_CTS_IDX,false);
  40150e:	2100      	movs	r1, #0
  401510:	2008      	movs	r0, #8
  401512:	4b12      	ldr	r3, [pc, #72]	; (40155c <configure_usart_wifi+0xc4>)
  401514:	4798      	blx	r3
	/* Configure USART RTS pin */
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  401516:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40151a:	2007      	movs	r0, #7
  40151c:	4b0d      	ldr	r3, [pc, #52]	; (401554 <configure_usart_wifi+0xbc>)
  40151e:	4798      	blx	r3
}
  401520:	bf00      	nop
  401522:	3718      	adds	r7, #24
  401524:	46bd      	mov	sp, r7
  401526:	bdb0      	pop	{r4, r5, r7, pc}
  401528:	0040368c 	.word	0x0040368c
  40152c:	004011f9 	.word	0x004011f9
  401530:	200004e8 	.word	0x200004e8
  401534:	0040120d 	.word	0x0040120d
  401538:	40024000 	.word	0x40024000
  40153c:	00400449 	.word	0x00400449
  401540:	00400503 	.word	0x00400503
  401544:	00400489 	.word	0x00400489
  401548:	004004b9 	.word	0x004004b9
  40154c:	004004e9 	.word	0x004004e9
  401550:	00401125 	.word	0x00401125
  401554:	00401dbd 	.word	0x00401dbd
  401558:	00401229 	.word	0x00401229
  40155c:	004012af 	.word	0x004012af

00401560 <configure_wifi_comm_pin>:

/*
Configuration of command complete rising-edge interrupt.
*/
void configure_wifi_comm_pin(void) 
{
  401560:	b590      	push	{r4, r7, lr}
  401562:	b083      	sub	sp, #12
  401564:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	
	pmc_enable_periph_clk(WIFI_COM_COMPLETE_ID);
  401566:	200b      	movs	r0, #11
  401568:	4b0e      	ldr	r3, [pc, #56]	; (4015a4 <configure_wifi_comm_pin+0x44>)
  40156a:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK, 10);
  40156c:	220a      	movs	r2, #10
  40156e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401572:	480d      	ldr	r0, [pc, #52]	; (4015a8 <configure_wifi_comm_pin+0x48>)
  401574:	4b0d      	ldr	r3, [pc, #52]	; (4015ac <configure_wifi_comm_pin+0x4c>)
  401576:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h	**/
	pio_handler_set(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_ID, WIFI_COM_COMPLETE_MSK,
  401578:	4b0d      	ldr	r3, [pc, #52]	; (4015b0 <configure_wifi_comm_pin+0x50>)
  40157a:	9300      	str	r3, [sp, #0]
  40157c:	2371      	movs	r3, #113	; 0x71
  40157e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401582:	210b      	movs	r1, #11
  401584:	4808      	ldr	r0, [pc, #32]	; (4015a8 <configure_wifi_comm_pin+0x48>)
  401586:	4c0b      	ldr	r4, [pc, #44]	; (4015b4 <configure_wifi_comm_pin+0x54>)
  401588:	47a0      	blx	r4
			WIFI_COM_COMPLETE_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COM_COMPLETE_ID);
  40158a:	200b      	movs	r0, #11
  40158c:	4b0a      	ldr	r3, [pc, #40]	; (4015b8 <configure_wifi_comm_pin+0x58>)
  40158e:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK);
  401590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401594:	4804      	ldr	r0, [pc, #16]	; (4015a8 <configure_wifi_comm_pin+0x48>)
  401596:	4b09      	ldr	r3, [pc, #36]	; (4015bc <configure_wifi_comm_pin+0x5c>)
  401598:	4798      	blx	r3
}
  40159a:	bf00      	nop
  40159c:	3704      	adds	r7, #4
  40159e:	46bd      	mov	sp, r7
  4015a0:	bd90      	pop	{r4, r7, pc}
  4015a2:	bf00      	nop
  4015a4:	004021dd 	.word	0x004021dd
  4015a8:	400e0e00 	.word	0x400e0e00
  4015ac:	00401ac7 	.word	0x00401ac7
  4015b0:	0040139d 	.word	0x0040139d
  4015b4:	0040020d 	.word	0x0040020d
  4015b8:	00401125 	.word	0x00401125
  4015bc:	00401d5b 	.word	0x00401d5b

004015c0 <configure_wifi_web_setup_pin>:

/*
Configuration of button interrupt to initiate web setup.
*/
void configure_wifi_web_setup_pin(void) 
{
  4015c0:	b590      	push	{r4, r7, lr}
  4015c2:	b083      	sub	sp, #12
  4015c4:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  4015c6:	200b      	movs	r0, #11
  4015c8:	4b0c      	ldr	r3, [pc, #48]	; (4015fc <configure_wifi_web_setup_pin+0x3c>)
  4015ca:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  4015cc:	220a      	movs	r2, #10
  4015ce:	2101      	movs	r1, #1
  4015d0:	480b      	ldr	r0, [pc, #44]	; (401600 <configure_wifi_web_setup_pin+0x40>)
  4015d2:	4b0c      	ldr	r3, [pc, #48]	; (401604 <configure_wifi_web_setup_pin+0x44>)
  4015d4:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  4015d6:	4b0c      	ldr	r3, [pc, #48]	; (401608 <configure_wifi_web_setup_pin+0x48>)
  4015d8:	9300      	str	r3, [sp, #0]
  4015da:	2349      	movs	r3, #73	; 0x49
  4015dc:	2201      	movs	r2, #1
  4015de:	210b      	movs	r1, #11
  4015e0:	4807      	ldr	r0, [pc, #28]	; (401600 <configure_wifi_web_setup_pin+0x40>)
  4015e2:	4c0a      	ldr	r4, [pc, #40]	; (40160c <configure_wifi_web_setup_pin+0x4c>)
  4015e4:	47a0      	blx	r4
			PUSH_BUTTON_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);
  4015e6:	200b      	movs	r0, #11
  4015e8:	4b09      	ldr	r3, [pc, #36]	; (401610 <configure_wifi_web_setup_pin+0x50>)
  4015ea:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  4015ec:	2101      	movs	r1, #1
  4015ee:	4804      	ldr	r0, [pc, #16]	; (401600 <configure_wifi_web_setup_pin+0x40>)
  4015f0:	4b08      	ldr	r3, [pc, #32]	; (401614 <configure_wifi_web_setup_pin+0x54>)
  4015f2:	4798      	blx	r3
}
  4015f4:	bf00      	nop
  4015f6:	3704      	adds	r7, #4
  4015f8:	46bd      	mov	sp, r7
  4015fa:	bd90      	pop	{r4, r7, pc}
  4015fc:	004021dd 	.word	0x004021dd
  401600:	400e0e00 	.word	0x400e0e00
  401604:	00401ac7 	.word	0x00401ac7
  401608:	00401479 	.word	0x00401479
  40160c:	0040020d 	.word	0x0040020d
  401610:	00401125 	.word	0x00401125
  401614:	00401d5b 	.word	0x00401d5b

00401618 <resetWifi>:
		dv++;
	}
}

// Simple function to reset the wifi
void resetWifi(void){
  401618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40161c:	b087      	sub	sp, #28
  40161e:	af00      	add	r7, sp, #0
	// Reset the wifi by pulling the wifi reset pin low, then bringing it back high.
	ioport_set_pin_level(PIN_WIFI_RESET,LOW); //reset WIFI
  401620:	2100      	movs	r1, #0
  401622:	2021      	movs	r0, #33	; 0x21
  401624:	4b43      	ldr	r3, [pc, #268]	; (401734 <resetWifi+0x11c>)
  401626:	4798      	blx	r3
	delay_ms(1000);
  401628:	4b43      	ldr	r3, [pc, #268]	; (401738 <resetWifi+0x120>)
  40162a:	4798      	blx	r3
  40162c:	4603      	mov	r3, r0
  40162e:	4619      	mov	r1, r3
  401630:	f04f 0200 	mov.w	r2, #0
  401634:	460b      	mov	r3, r1
  401636:	4614      	mov	r4, r2
  401638:	0166      	lsls	r6, r4, #5
  40163a:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  40163e:	015d      	lsls	r5, r3, #5
  401640:	462b      	mov	r3, r5
  401642:	4634      	mov	r4, r6
  401644:	1a5b      	subs	r3, r3, r1
  401646:	eb64 0402 	sbc.w	r4, r4, r2
  40164a:	00a0      	lsls	r0, r4, #2
  40164c:	6178      	str	r0, [r7, #20]
  40164e:	6978      	ldr	r0, [r7, #20]
  401650:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  401654:	6178      	str	r0, [r7, #20]
  401656:	009b      	lsls	r3, r3, #2
  401658:	613b      	str	r3, [r7, #16]
  40165a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  40165e:	185b      	adds	r3, r3, r1
  401660:	eb44 0402 	adc.w	r4, r4, r2
  401664:	00e2      	lsls	r2, r4, #3
  401666:	60fa      	str	r2, [r7, #12]
  401668:	68fa      	ldr	r2, [r7, #12]
  40166a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  40166e:	60fa      	str	r2, [r7, #12]
  401670:	00db      	lsls	r3, r3, #3
  401672:	60bb      	str	r3, [r7, #8]
  401674:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  401678:	4619      	mov	r1, r3
  40167a:	4622      	mov	r2, r4
  40167c:	f243 63af 	movw	r3, #13999	; 0x36af
  401680:	f04f 0400 	mov.w	r4, #0
  401684:	18cd      	adds	r5, r1, r3
  401686:	eb42 0604 	adc.w	r6, r2, r4
  40168a:	4628      	mov	r0, r5
  40168c:	4631      	mov	r1, r6
  40168e:	4c2b      	ldr	r4, [pc, #172]	; (40173c <resetWifi+0x124>)
  401690:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401694:	f04f 0300 	mov.w	r3, #0
  401698:	47a0      	blx	r4
  40169a:	4603      	mov	r3, r0
  40169c:	460c      	mov	r4, r1
  40169e:	4618      	mov	r0, r3
  4016a0:	4b27      	ldr	r3, [pc, #156]	; (401740 <resetWifi+0x128>)
  4016a2:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,HIGH); //turn Wifi Back on
  4016a4:	2101      	movs	r1, #1
  4016a6:	2021      	movs	r0, #33	; 0x21
  4016a8:	4b22      	ldr	r3, [pc, #136]	; (401734 <resetWifi+0x11c>)
  4016aa:	4798      	blx	r3
	delay_ms(2000); // Account for ~0.7s high during reset
  4016ac:	4b22      	ldr	r3, [pc, #136]	; (401738 <resetWifi+0x120>)
  4016ae:	4798      	blx	r3
  4016b0:	4603      	mov	r3, r0
  4016b2:	4619      	mov	r1, r3
  4016b4:	f04f 0200 	mov.w	r2, #0
  4016b8:	460b      	mov	r3, r1
  4016ba:	4614      	mov	r4, r2
  4016bc:	0160      	lsls	r0, r4, #5
  4016be:	6078      	str	r0, [r7, #4]
  4016c0:	6878      	ldr	r0, [r7, #4]
  4016c2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4016c6:	6078      	str	r0, [r7, #4]
  4016c8:	015b      	lsls	r3, r3, #5
  4016ca:	603b      	str	r3, [r7, #0]
  4016cc:	e9d7 3400 	ldrd	r3, r4, [r7]
  4016d0:	1a5b      	subs	r3, r3, r1
  4016d2:	eb64 0402 	sbc.w	r4, r4, r2
  4016d6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  4016da:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  4016de:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  4016e2:	4653      	mov	r3, sl
  4016e4:	465c      	mov	r4, fp
  4016e6:	185b      	adds	r3, r3, r1
  4016e8:	eb44 0402 	adc.w	r4, r4, r2
  4016ec:	ea4f 1904 	mov.w	r9, r4, lsl #4
  4016f0:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  4016f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
  4016f8:	4643      	mov	r3, r8
  4016fa:	464c      	mov	r4, r9
  4016fc:	4619      	mov	r1, r3
  4016fe:	4622      	mov	r2, r4
  401700:	f243 63af 	movw	r3, #13999	; 0x36af
  401704:	f04f 0400 	mov.w	r4, #0
  401708:	18cd      	adds	r5, r1, r3
  40170a:	eb42 0604 	adc.w	r6, r2, r4
  40170e:	4628      	mov	r0, r5
  401710:	4631      	mov	r1, r6
  401712:	4c0a      	ldr	r4, [pc, #40]	; (40173c <resetWifi+0x124>)
  401714:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401718:	f04f 0300 	mov.w	r3, #0
  40171c:	47a0      	blx	r4
  40171e:	4603      	mov	r3, r0
  401720:	460c      	mov	r4, r1
  401722:	4618      	mov	r0, r3
  401724:	4b06      	ldr	r3, [pc, #24]	; (401740 <resetWifi+0x128>)
  401726:	4798      	blx	r3
}
  401728:	bf00      	nop
  40172a:	371c      	adds	r7, #28
  40172c:	46bd      	mov	sp, r7
  40172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401732:	bf00      	nop
  401734:	004012af 	.word	0x004012af
  401738:	004011e5 	.word	0x004011e5
  40173c:	00402a59 	.word	0x00402a59
  401740:	20000001 	.word	0x20000001

00401744 <osc_enable>:
{
  401744:	b580      	push	{r7, lr}
  401746:	b082      	sub	sp, #8
  401748:	af00      	add	r7, sp, #0
  40174a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40174c:	687b      	ldr	r3, [r7, #4]
  40174e:	2b07      	cmp	r3, #7
  401750:	d831      	bhi.n	4017b6 <osc_enable+0x72>
  401752:	a201      	add	r2, pc, #4	; (adr r2, 401758 <osc_enable+0x14>)
  401754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401758:	004017b5 	.word	0x004017b5
  40175c:	00401779 	.word	0x00401779
  401760:	00401781 	.word	0x00401781
  401764:	00401789 	.word	0x00401789
  401768:	00401791 	.word	0x00401791
  40176c:	00401799 	.word	0x00401799
  401770:	004017a1 	.word	0x004017a1
  401774:	004017ab 	.word	0x004017ab
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401778:	2000      	movs	r0, #0
  40177a:	4b11      	ldr	r3, [pc, #68]	; (4017c0 <osc_enable+0x7c>)
  40177c:	4798      	blx	r3
		break;
  40177e:	e01a      	b.n	4017b6 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401780:	2001      	movs	r0, #1
  401782:	4b0f      	ldr	r3, [pc, #60]	; (4017c0 <osc_enable+0x7c>)
  401784:	4798      	blx	r3
		break;
  401786:	e016      	b.n	4017b6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401788:	2000      	movs	r0, #0
  40178a:	4b0e      	ldr	r3, [pc, #56]	; (4017c4 <osc_enable+0x80>)
  40178c:	4798      	blx	r3
		break;
  40178e:	e012      	b.n	4017b6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401790:	2010      	movs	r0, #16
  401792:	4b0c      	ldr	r3, [pc, #48]	; (4017c4 <osc_enable+0x80>)
  401794:	4798      	blx	r3
		break;
  401796:	e00e      	b.n	4017b6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401798:	2020      	movs	r0, #32
  40179a:	4b0a      	ldr	r3, [pc, #40]	; (4017c4 <osc_enable+0x80>)
  40179c:	4798      	blx	r3
		break;
  40179e:	e00a      	b.n	4017b6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4017a0:	213e      	movs	r1, #62	; 0x3e
  4017a2:	2000      	movs	r0, #0
  4017a4:	4b08      	ldr	r3, [pc, #32]	; (4017c8 <osc_enable+0x84>)
  4017a6:	4798      	blx	r3
		break;
  4017a8:	e005      	b.n	4017b6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4017aa:	213e      	movs	r1, #62	; 0x3e
  4017ac:	2001      	movs	r0, #1
  4017ae:	4b06      	ldr	r3, [pc, #24]	; (4017c8 <osc_enable+0x84>)
  4017b0:	4798      	blx	r3
		break;
  4017b2:	e000      	b.n	4017b6 <osc_enable+0x72>
		break;
  4017b4:	bf00      	nop
}
  4017b6:	bf00      	nop
  4017b8:	3708      	adds	r7, #8
  4017ba:	46bd      	mov	sp, r7
  4017bc:	bd80      	pop	{r7, pc}
  4017be:	bf00      	nop
  4017c0:	00402011 	.word	0x00402011
  4017c4:	0040207d 	.word	0x0040207d
  4017c8:	004020ed 	.word	0x004020ed

004017cc <osc_is_ready>:
{
  4017cc:	b580      	push	{r7, lr}
  4017ce:	b082      	sub	sp, #8
  4017d0:	af00      	add	r7, sp, #0
  4017d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4017d4:	687b      	ldr	r3, [r7, #4]
  4017d6:	2b07      	cmp	r3, #7
  4017d8:	d826      	bhi.n	401828 <osc_is_ready+0x5c>
  4017da:	a201      	add	r2, pc, #4	; (adr r2, 4017e0 <osc_is_ready+0x14>)
  4017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017e0:	00401801 	.word	0x00401801
  4017e4:	00401805 	.word	0x00401805
  4017e8:	00401805 	.word	0x00401805
  4017ec:	00401817 	.word	0x00401817
  4017f0:	00401817 	.word	0x00401817
  4017f4:	00401817 	.word	0x00401817
  4017f8:	00401817 	.word	0x00401817
  4017fc:	00401817 	.word	0x00401817
		return 1;
  401800:	2301      	movs	r3, #1
  401802:	e012      	b.n	40182a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401804:	4b0b      	ldr	r3, [pc, #44]	; (401834 <osc_is_ready+0x68>)
  401806:	4798      	blx	r3
  401808:	4603      	mov	r3, r0
  40180a:	2b00      	cmp	r3, #0
  40180c:	bf14      	ite	ne
  40180e:	2301      	movne	r3, #1
  401810:	2300      	moveq	r3, #0
  401812:	b2db      	uxtb	r3, r3
  401814:	e009      	b.n	40182a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  401816:	4b08      	ldr	r3, [pc, #32]	; (401838 <osc_is_ready+0x6c>)
  401818:	4798      	blx	r3
  40181a:	4603      	mov	r3, r0
  40181c:	2b00      	cmp	r3, #0
  40181e:	bf14      	ite	ne
  401820:	2301      	movne	r3, #1
  401822:	2300      	moveq	r3, #0
  401824:	b2db      	uxtb	r3, r3
  401826:	e000      	b.n	40182a <osc_is_ready+0x5e>
	return 0;
  401828:	2300      	movs	r3, #0
}
  40182a:	4618      	mov	r0, r3
  40182c:	3708      	adds	r7, #8
  40182e:	46bd      	mov	sp, r7
  401830:	bd80      	pop	{r7, pc}
  401832:	bf00      	nop
  401834:	00402049 	.word	0x00402049
  401838:	00402165 	.word	0x00402165

0040183c <osc_get_rate>:
{
  40183c:	b480      	push	{r7}
  40183e:	b083      	sub	sp, #12
  401840:	af00      	add	r7, sp, #0
  401842:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401844:	687b      	ldr	r3, [r7, #4]
  401846:	2b07      	cmp	r3, #7
  401848:	d825      	bhi.n	401896 <osc_get_rate+0x5a>
  40184a:	a201      	add	r2, pc, #4	; (adr r2, 401850 <osc_get_rate+0x14>)
  40184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401850:	00401871 	.word	0x00401871
  401854:	00401877 	.word	0x00401877
  401858:	0040187d 	.word	0x0040187d
  40185c:	00401883 	.word	0x00401883
  401860:	00401887 	.word	0x00401887
  401864:	0040188b 	.word	0x0040188b
  401868:	0040188f 	.word	0x0040188f
  40186c:	00401893 	.word	0x00401893
		return OSC_SLCK_32K_RC_HZ;
  401870:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401874:	e010      	b.n	401898 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40187a:	e00d      	b.n	401898 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40187c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401880:	e00a      	b.n	401898 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401882:	4b08      	ldr	r3, [pc, #32]	; (4018a4 <osc_get_rate+0x68>)
  401884:	e008      	b.n	401898 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401886:	4b08      	ldr	r3, [pc, #32]	; (4018a8 <osc_get_rate+0x6c>)
  401888:	e006      	b.n	401898 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40188a:	4b08      	ldr	r3, [pc, #32]	; (4018ac <osc_get_rate+0x70>)
  40188c:	e004      	b.n	401898 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40188e:	4b07      	ldr	r3, [pc, #28]	; (4018ac <osc_get_rate+0x70>)
  401890:	e002      	b.n	401898 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401892:	4b06      	ldr	r3, [pc, #24]	; (4018ac <osc_get_rate+0x70>)
  401894:	e000      	b.n	401898 <osc_get_rate+0x5c>
	return 0;
  401896:	2300      	movs	r3, #0
}
  401898:	4618      	mov	r0, r3
  40189a:	370c      	adds	r7, #12
  40189c:	46bd      	mov	sp, r7
  40189e:	bc80      	pop	{r7}
  4018a0:	4770      	bx	lr
  4018a2:	bf00      	nop
  4018a4:	003d0900 	.word	0x003d0900
  4018a8:	007a1200 	.word	0x007a1200
  4018ac:	00b71b00 	.word	0x00b71b00

004018b0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4018b0:	b580      	push	{r7, lr}
  4018b2:	b082      	sub	sp, #8
  4018b4:	af00      	add	r7, sp, #0
  4018b6:	4603      	mov	r3, r0
  4018b8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4018ba:	bf00      	nop
  4018bc:	79fb      	ldrb	r3, [r7, #7]
  4018be:	4618      	mov	r0, r3
  4018c0:	4b05      	ldr	r3, [pc, #20]	; (4018d8 <osc_wait_ready+0x28>)
  4018c2:	4798      	blx	r3
  4018c4:	4603      	mov	r3, r0
  4018c6:	f083 0301 	eor.w	r3, r3, #1
  4018ca:	b2db      	uxtb	r3, r3
  4018cc:	2b00      	cmp	r3, #0
  4018ce:	d1f5      	bne.n	4018bc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4018d0:	bf00      	nop
  4018d2:	3708      	adds	r7, #8
  4018d4:	46bd      	mov	sp, r7
  4018d6:	bd80      	pop	{r7, pc}
  4018d8:	004017cd 	.word	0x004017cd

004018dc <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4018dc:	b580      	push	{r7, lr}
  4018de:	b086      	sub	sp, #24
  4018e0:	af00      	add	r7, sp, #0
  4018e2:	60f8      	str	r0, [r7, #12]
  4018e4:	607a      	str	r2, [r7, #4]
  4018e6:	603b      	str	r3, [r7, #0]
  4018e8:	460b      	mov	r3, r1
  4018ea:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4018ec:	7afb      	ldrb	r3, [r7, #11]
  4018ee:	4618      	mov	r0, r3
  4018f0:	4b0d      	ldr	r3, [pc, #52]	; (401928 <pll_config_init+0x4c>)
  4018f2:	4798      	blx	r3
  4018f4:	4602      	mov	r2, r0
  4018f6:	687b      	ldr	r3, [r7, #4]
  4018f8:	fbb2 f3f3 	udiv	r3, r2, r3
  4018fc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4018fe:	697b      	ldr	r3, [r7, #20]
  401900:	683a      	ldr	r2, [r7, #0]
  401902:	fb02 f303 	mul.w	r3, r2, r3
  401906:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401908:	683b      	ldr	r3, [r7, #0]
  40190a:	3b01      	subs	r3, #1
  40190c:	041a      	lsls	r2, r3, #16
  40190e:	4b07      	ldr	r3, [pc, #28]	; (40192c <pll_config_init+0x50>)
  401910:	4013      	ands	r3, r2
  401912:	687a      	ldr	r2, [r7, #4]
  401914:	b2d2      	uxtb	r2, r2
  401916:	4313      	orrs	r3, r2
  401918:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40191c:	68fb      	ldr	r3, [r7, #12]
  40191e:	601a      	str	r2, [r3, #0]
}
  401920:	bf00      	nop
  401922:	3718      	adds	r7, #24
  401924:	46bd      	mov	sp, r7
  401926:	bd80      	pop	{r7, pc}
  401928:	0040183d 	.word	0x0040183d
  40192c:	07ff0000 	.word	0x07ff0000

00401930 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401930:	b580      	push	{r7, lr}
  401932:	b082      	sub	sp, #8
  401934:	af00      	add	r7, sp, #0
  401936:	6078      	str	r0, [r7, #4]
  401938:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40193a:	683b      	ldr	r3, [r7, #0]
  40193c:	2b00      	cmp	r3, #0
  40193e:	d108      	bne.n	401952 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401940:	4b09      	ldr	r3, [pc, #36]	; (401968 <pll_enable+0x38>)
  401942:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401944:	4a09      	ldr	r2, [pc, #36]	; (40196c <pll_enable+0x3c>)
  401946:	687b      	ldr	r3, [r7, #4]
  401948:	681b      	ldr	r3, [r3, #0]
  40194a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40194e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401950:	e005      	b.n	40195e <pll_enable+0x2e>
		pmc_disable_pllbck();
  401952:	4b07      	ldr	r3, [pc, #28]	; (401970 <pll_enable+0x40>)
  401954:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401956:	4a05      	ldr	r2, [pc, #20]	; (40196c <pll_enable+0x3c>)
  401958:	687b      	ldr	r3, [r7, #4]
  40195a:	681b      	ldr	r3, [r3, #0]
  40195c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  40195e:	bf00      	nop
  401960:	3708      	adds	r7, #8
  401962:	46bd      	mov	sp, r7
  401964:	bd80      	pop	{r7, pc}
  401966:	bf00      	nop
  401968:	0040217d 	.word	0x0040217d
  40196c:	400e0400 	.word	0x400e0400
  401970:	004021ad 	.word	0x004021ad

00401974 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401974:	b580      	push	{r7, lr}
  401976:	b082      	sub	sp, #8
  401978:	af00      	add	r7, sp, #0
  40197a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40197c:	687b      	ldr	r3, [r7, #4]
  40197e:	2b00      	cmp	r3, #0
  401980:	d103      	bne.n	40198a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401982:	4b05      	ldr	r3, [pc, #20]	; (401998 <pll_is_locked+0x24>)
  401984:	4798      	blx	r3
  401986:	4603      	mov	r3, r0
  401988:	e002      	b.n	401990 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40198a:	4b04      	ldr	r3, [pc, #16]	; (40199c <pll_is_locked+0x28>)
  40198c:	4798      	blx	r3
  40198e:	4603      	mov	r3, r0
	}
}
  401990:	4618      	mov	r0, r3
  401992:	3708      	adds	r7, #8
  401994:	46bd      	mov	sp, r7
  401996:	bd80      	pop	{r7, pc}
  401998:	00402195 	.word	0x00402195
  40199c:	004021c5 	.word	0x004021c5

004019a0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4019a0:	b580      	push	{r7, lr}
  4019a2:	b082      	sub	sp, #8
  4019a4:	af00      	add	r7, sp, #0
  4019a6:	4603      	mov	r3, r0
  4019a8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4019aa:	79fb      	ldrb	r3, [r7, #7]
  4019ac:	3b03      	subs	r3, #3
  4019ae:	2b04      	cmp	r3, #4
  4019b0:	d808      	bhi.n	4019c4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4019b2:	79fb      	ldrb	r3, [r7, #7]
  4019b4:	4618      	mov	r0, r3
  4019b6:	4b06      	ldr	r3, [pc, #24]	; (4019d0 <pll_enable_source+0x30>)
  4019b8:	4798      	blx	r3
		osc_wait_ready(e_src);
  4019ba:	79fb      	ldrb	r3, [r7, #7]
  4019bc:	4618      	mov	r0, r3
  4019be:	4b05      	ldr	r3, [pc, #20]	; (4019d4 <pll_enable_source+0x34>)
  4019c0:	4798      	blx	r3
		break;
  4019c2:	e000      	b.n	4019c6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4019c4:	bf00      	nop
	}
}
  4019c6:	bf00      	nop
  4019c8:	3708      	adds	r7, #8
  4019ca:	46bd      	mov	sp, r7
  4019cc:	bd80      	pop	{r7, pc}
  4019ce:	bf00      	nop
  4019d0:	00401745 	.word	0x00401745
  4019d4:	004018b1 	.word	0x004018b1

004019d8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4019d8:	b580      	push	{r7, lr}
  4019da:	b082      	sub	sp, #8
  4019dc:	af00      	add	r7, sp, #0
  4019de:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4019e0:	bf00      	nop
  4019e2:	6878      	ldr	r0, [r7, #4]
  4019e4:	4b04      	ldr	r3, [pc, #16]	; (4019f8 <pll_wait_for_lock+0x20>)
  4019e6:	4798      	blx	r3
  4019e8:	4603      	mov	r3, r0
  4019ea:	2b00      	cmp	r3, #0
  4019ec:	d0f9      	beq.n	4019e2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4019ee:	2300      	movs	r3, #0
}
  4019f0:	4618      	mov	r0, r3
  4019f2:	3708      	adds	r7, #8
  4019f4:	46bd      	mov	sp, r7
  4019f6:	bd80      	pop	{r7, pc}
  4019f8:	00401975 	.word	0x00401975

004019fc <sysclk_get_main_hz>:
{
  4019fc:	b580      	push	{r7, lr}
  4019fe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401a00:	2006      	movs	r0, #6
  401a02:	4b04      	ldr	r3, [pc, #16]	; (401a14 <sysclk_get_main_hz+0x18>)
  401a04:	4798      	blx	r3
  401a06:	4602      	mov	r2, r0
  401a08:	4613      	mov	r3, r2
  401a0a:	009b      	lsls	r3, r3, #2
  401a0c:	4413      	add	r3, r2
  401a0e:	009b      	lsls	r3, r3, #2
}
  401a10:	4618      	mov	r0, r3
  401a12:	bd80      	pop	{r7, pc}
  401a14:	0040183d 	.word	0x0040183d

00401a18 <sysclk_get_cpu_hz>:
{
  401a18:	b580      	push	{r7, lr}
  401a1a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401a1c:	4b02      	ldr	r3, [pc, #8]	; (401a28 <sysclk_get_cpu_hz+0x10>)
  401a1e:	4798      	blx	r3
  401a20:	4603      	mov	r3, r0
  401a22:	085b      	lsrs	r3, r3, #1
}
  401a24:	4618      	mov	r0, r3
  401a26:	bd80      	pop	{r7, pc}
  401a28:	004019fd 	.word	0x004019fd

00401a2c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401a2c:	b590      	push	{r4, r7, lr}
  401a2e:	b083      	sub	sp, #12
  401a30:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401a32:	4811      	ldr	r0, [pc, #68]	; (401a78 <sysclk_init+0x4c>)
  401a34:	4b11      	ldr	r3, [pc, #68]	; (401a7c <sysclk_init+0x50>)
  401a36:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401a38:	2006      	movs	r0, #6
  401a3a:	4b11      	ldr	r3, [pc, #68]	; (401a80 <sysclk_init+0x54>)
  401a3c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401a3e:	1d38      	adds	r0, r7, #4
  401a40:	2314      	movs	r3, #20
  401a42:	2201      	movs	r2, #1
  401a44:	2106      	movs	r1, #6
  401a46:	4c0f      	ldr	r4, [pc, #60]	; (401a84 <sysclk_init+0x58>)
  401a48:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401a4a:	1d3b      	adds	r3, r7, #4
  401a4c:	2100      	movs	r1, #0
  401a4e:	4618      	mov	r0, r3
  401a50:	4b0d      	ldr	r3, [pc, #52]	; (401a88 <sysclk_init+0x5c>)
  401a52:	4798      	blx	r3
		pll_wait_for_lock(0);
  401a54:	2000      	movs	r0, #0
  401a56:	4b0d      	ldr	r3, [pc, #52]	; (401a8c <sysclk_init+0x60>)
  401a58:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401a5a:	2010      	movs	r0, #16
  401a5c:	4b0c      	ldr	r3, [pc, #48]	; (401a90 <sysclk_init+0x64>)
  401a5e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401a60:	4b0c      	ldr	r3, [pc, #48]	; (401a94 <sysclk_init+0x68>)
  401a62:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401a64:	4b0c      	ldr	r3, [pc, #48]	; (401a98 <sysclk_init+0x6c>)
  401a66:	4798      	blx	r3
  401a68:	4603      	mov	r3, r0
  401a6a:	4618      	mov	r0, r3
  401a6c:	4b03      	ldr	r3, [pc, #12]	; (401a7c <sysclk_init+0x50>)
  401a6e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401a70:	bf00      	nop
  401a72:	370c      	adds	r7, #12
  401a74:	46bd      	mov	sp, r7
  401a76:	bd90      	pop	{r4, r7, pc}
  401a78:	07270e00 	.word	0x07270e00
  401a7c:	00402791 	.word	0x00402791
  401a80:	004019a1 	.word	0x004019a1
  401a84:	004018dd 	.word	0x004018dd
  401a88:	00401931 	.word	0x00401931
  401a8c:	004019d9 	.word	0x004019d9
  401a90:	00401f91 	.word	0x00401f91
  401a94:	004025f9 	.word	0x004025f9
  401a98:	00401a19 	.word	0x00401a19

00401a9c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401a9c:	b480      	push	{r7}
  401a9e:	b085      	sub	sp, #20
  401aa0:	af00      	add	r7, sp, #0
  401aa2:	60f8      	str	r0, [r7, #12]
  401aa4:	60b9      	str	r1, [r7, #8]
  401aa6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401aa8:	687b      	ldr	r3, [r7, #4]
  401aaa:	2b00      	cmp	r3, #0
  401aac:	d003      	beq.n	401ab6 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401aae:	68fb      	ldr	r3, [r7, #12]
  401ab0:	68ba      	ldr	r2, [r7, #8]
  401ab2:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401ab4:	e002      	b.n	401abc <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401ab6:	68fb      	ldr	r3, [r7, #12]
  401ab8:	68ba      	ldr	r2, [r7, #8]
  401aba:	661a      	str	r2, [r3, #96]	; 0x60
}
  401abc:	bf00      	nop
  401abe:	3714      	adds	r7, #20
  401ac0:	46bd      	mov	sp, r7
  401ac2:	bc80      	pop	{r7}
  401ac4:	4770      	bx	lr

00401ac6 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401ac6:	b480      	push	{r7}
  401ac8:	b085      	sub	sp, #20
  401aca:	af00      	add	r7, sp, #0
  401acc:	60f8      	str	r0, [r7, #12]
  401ace:	60b9      	str	r1, [r7, #8]
  401ad0:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401ad2:	68fb      	ldr	r3, [r7, #12]
  401ad4:	68ba      	ldr	r2, [r7, #8]
  401ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401ada:	687b      	ldr	r3, [r7, #4]
  401adc:	005b      	lsls	r3, r3, #1
  401ade:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ae2:	fbb2 f3f3 	udiv	r3, r2, r3
  401ae6:	3b01      	subs	r3, #1
  401ae8:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401aec:	68fb      	ldr	r3, [r7, #12]
  401aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401af2:	bf00      	nop
  401af4:	3714      	adds	r7, #20
  401af6:	46bd      	mov	sp, r7
  401af8:	bc80      	pop	{r7}
  401afa:	4770      	bx	lr

00401afc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401afc:	b480      	push	{r7}
  401afe:	b087      	sub	sp, #28
  401b00:	af00      	add	r7, sp, #0
  401b02:	60f8      	str	r0, [r7, #12]
  401b04:	60b9      	str	r1, [r7, #8]
  401b06:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401b08:	68fb      	ldr	r3, [r7, #12]
  401b0a:	687a      	ldr	r2, [r7, #4]
  401b0c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401b0e:	68bb      	ldr	r3, [r7, #8]
  401b10:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401b14:	d04a      	beq.n	401bac <pio_set_peripheral+0xb0>
  401b16:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401b1a:	d808      	bhi.n	401b2e <pio_set_peripheral+0x32>
  401b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401b20:	d016      	beq.n	401b50 <pio_set_peripheral+0x54>
  401b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401b26:	d02c      	beq.n	401b82 <pio_set_peripheral+0x86>
  401b28:	2b00      	cmp	r3, #0
  401b2a:	d069      	beq.n	401c00 <pio_set_peripheral+0x104>
  401b2c:	e064      	b.n	401bf8 <pio_set_peripheral+0xfc>
  401b2e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401b32:	d065      	beq.n	401c00 <pio_set_peripheral+0x104>
  401b34:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401b38:	d803      	bhi.n	401b42 <pio_set_peripheral+0x46>
  401b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401b3e:	d04a      	beq.n	401bd6 <pio_set_peripheral+0xda>
  401b40:	e05a      	b.n	401bf8 <pio_set_peripheral+0xfc>
  401b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401b46:	d05b      	beq.n	401c00 <pio_set_peripheral+0x104>
  401b48:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401b4c:	d058      	beq.n	401c00 <pio_set_peripheral+0x104>
  401b4e:	e053      	b.n	401bf8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b50:	68fb      	ldr	r3, [r7, #12]
  401b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b54:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401b56:	68fb      	ldr	r3, [r7, #12]
  401b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b5a:	687b      	ldr	r3, [r7, #4]
  401b5c:	43d9      	mvns	r1, r3
  401b5e:	697b      	ldr	r3, [r7, #20]
  401b60:	400b      	ands	r3, r1
  401b62:	401a      	ands	r2, r3
  401b64:	68fb      	ldr	r3, [r7, #12]
  401b66:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b68:	68fb      	ldr	r3, [r7, #12]
  401b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b6c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401b6e:	68fb      	ldr	r3, [r7, #12]
  401b70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b72:	687b      	ldr	r3, [r7, #4]
  401b74:	43d9      	mvns	r1, r3
  401b76:	697b      	ldr	r3, [r7, #20]
  401b78:	400b      	ands	r3, r1
  401b7a:	401a      	ands	r2, r3
  401b7c:	68fb      	ldr	r3, [r7, #12]
  401b7e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b80:	e03a      	b.n	401bf8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b82:	68fb      	ldr	r3, [r7, #12]
  401b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b86:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401b88:	687a      	ldr	r2, [r7, #4]
  401b8a:	697b      	ldr	r3, [r7, #20]
  401b8c:	431a      	orrs	r2, r3
  401b8e:	68fb      	ldr	r3, [r7, #12]
  401b90:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b92:	68fb      	ldr	r3, [r7, #12]
  401b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b96:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401b98:	68fb      	ldr	r3, [r7, #12]
  401b9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b9c:	687b      	ldr	r3, [r7, #4]
  401b9e:	43d9      	mvns	r1, r3
  401ba0:	697b      	ldr	r3, [r7, #20]
  401ba2:	400b      	ands	r3, r1
  401ba4:	401a      	ands	r2, r3
  401ba6:	68fb      	ldr	r3, [r7, #12]
  401ba8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401baa:	e025      	b.n	401bf8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bac:	68fb      	ldr	r3, [r7, #12]
  401bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401bb0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401bb2:	68fb      	ldr	r3, [r7, #12]
  401bb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401bb6:	687b      	ldr	r3, [r7, #4]
  401bb8:	43d9      	mvns	r1, r3
  401bba:	697b      	ldr	r3, [r7, #20]
  401bbc:	400b      	ands	r3, r1
  401bbe:	401a      	ands	r2, r3
  401bc0:	68fb      	ldr	r3, [r7, #12]
  401bc2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401bc4:	68fb      	ldr	r3, [r7, #12]
  401bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401bc8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401bca:	687a      	ldr	r2, [r7, #4]
  401bcc:	697b      	ldr	r3, [r7, #20]
  401bce:	431a      	orrs	r2, r3
  401bd0:	68fb      	ldr	r3, [r7, #12]
  401bd2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401bd4:	e010      	b.n	401bf8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bd6:	68fb      	ldr	r3, [r7, #12]
  401bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401bda:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401bdc:	687a      	ldr	r2, [r7, #4]
  401bde:	697b      	ldr	r3, [r7, #20]
  401be0:	431a      	orrs	r2, r3
  401be2:	68fb      	ldr	r3, [r7, #12]
  401be4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401be6:	68fb      	ldr	r3, [r7, #12]
  401be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401bea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401bec:	687a      	ldr	r2, [r7, #4]
  401bee:	697b      	ldr	r3, [r7, #20]
  401bf0:	431a      	orrs	r2, r3
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401bf6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401bf8:	68fb      	ldr	r3, [r7, #12]
  401bfa:	687a      	ldr	r2, [r7, #4]
  401bfc:	605a      	str	r2, [r3, #4]
  401bfe:	e000      	b.n	401c02 <pio_set_peripheral+0x106>
		return;
  401c00:	bf00      	nop
}
  401c02:	371c      	adds	r7, #28
  401c04:	46bd      	mov	sp, r7
  401c06:	bc80      	pop	{r7}
  401c08:	4770      	bx	lr
	...

00401c0c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401c0c:	b580      	push	{r7, lr}
  401c0e:	b084      	sub	sp, #16
  401c10:	af00      	add	r7, sp, #0
  401c12:	60f8      	str	r0, [r7, #12]
  401c14:	60b9      	str	r1, [r7, #8]
  401c16:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401c18:	68b9      	ldr	r1, [r7, #8]
  401c1a:	68f8      	ldr	r0, [r7, #12]
  401c1c:	4b19      	ldr	r3, [pc, #100]	; (401c84 <pio_set_input+0x78>)
  401c1e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401c20:	687b      	ldr	r3, [r7, #4]
  401c22:	f003 0301 	and.w	r3, r3, #1
  401c26:	461a      	mov	r2, r3
  401c28:	68b9      	ldr	r1, [r7, #8]
  401c2a:	68f8      	ldr	r0, [r7, #12]
  401c2c:	4b16      	ldr	r3, [pc, #88]	; (401c88 <pio_set_input+0x7c>)
  401c2e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c30:	687b      	ldr	r3, [r7, #4]
  401c32:	f003 030a 	and.w	r3, r3, #10
  401c36:	2b00      	cmp	r3, #0
  401c38:	d003      	beq.n	401c42 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401c3a:	68fb      	ldr	r3, [r7, #12]
  401c3c:	68ba      	ldr	r2, [r7, #8]
  401c3e:	621a      	str	r2, [r3, #32]
  401c40:	e002      	b.n	401c48 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401c42:	68fb      	ldr	r3, [r7, #12]
  401c44:	68ba      	ldr	r2, [r7, #8]
  401c46:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401c48:	687b      	ldr	r3, [r7, #4]
  401c4a:	f003 0302 	and.w	r3, r3, #2
  401c4e:	2b00      	cmp	r3, #0
  401c50:	d004      	beq.n	401c5c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401c52:	68fb      	ldr	r3, [r7, #12]
  401c54:	68ba      	ldr	r2, [r7, #8]
  401c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401c5a:	e008      	b.n	401c6e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401c5c:	687b      	ldr	r3, [r7, #4]
  401c5e:	f003 0308 	and.w	r3, r3, #8
  401c62:	2b00      	cmp	r3, #0
  401c64:	d003      	beq.n	401c6e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401c66:	68fb      	ldr	r3, [r7, #12]
  401c68:	68ba      	ldr	r2, [r7, #8]
  401c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401c6e:	68fb      	ldr	r3, [r7, #12]
  401c70:	68ba      	ldr	r2, [r7, #8]
  401c72:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401c74:	68fb      	ldr	r3, [r7, #12]
  401c76:	68ba      	ldr	r2, [r7, #8]
  401c78:	601a      	str	r2, [r3, #0]
}
  401c7a:	bf00      	nop
  401c7c:	3710      	adds	r7, #16
  401c7e:	46bd      	mov	sp, r7
  401c80:	bd80      	pop	{r7, pc}
  401c82:	bf00      	nop
  401c84:	00401d75 	.word	0x00401d75
  401c88:	00401a9d 	.word	0x00401a9d

00401c8c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401c8c:	b580      	push	{r7, lr}
  401c8e:	b084      	sub	sp, #16
  401c90:	af00      	add	r7, sp, #0
  401c92:	60f8      	str	r0, [r7, #12]
  401c94:	60b9      	str	r1, [r7, #8]
  401c96:	607a      	str	r2, [r7, #4]
  401c98:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401c9a:	68b9      	ldr	r1, [r7, #8]
  401c9c:	68f8      	ldr	r0, [r7, #12]
  401c9e:	4b12      	ldr	r3, [pc, #72]	; (401ce8 <pio_set_output+0x5c>)
  401ca0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401ca2:	69ba      	ldr	r2, [r7, #24]
  401ca4:	68b9      	ldr	r1, [r7, #8]
  401ca6:	68f8      	ldr	r0, [r7, #12]
  401ca8:	4b10      	ldr	r3, [pc, #64]	; (401cec <pio_set_output+0x60>)
  401caa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401cac:	683b      	ldr	r3, [r7, #0]
  401cae:	2b00      	cmp	r3, #0
  401cb0:	d003      	beq.n	401cba <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401cb2:	68fb      	ldr	r3, [r7, #12]
  401cb4:	68ba      	ldr	r2, [r7, #8]
  401cb6:	651a      	str	r2, [r3, #80]	; 0x50
  401cb8:	e002      	b.n	401cc0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401cba:	68fb      	ldr	r3, [r7, #12]
  401cbc:	68ba      	ldr	r2, [r7, #8]
  401cbe:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401cc0:	687b      	ldr	r3, [r7, #4]
  401cc2:	2b00      	cmp	r3, #0
  401cc4:	d003      	beq.n	401cce <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401cc6:	68fb      	ldr	r3, [r7, #12]
  401cc8:	68ba      	ldr	r2, [r7, #8]
  401cca:	631a      	str	r2, [r3, #48]	; 0x30
  401ccc:	e002      	b.n	401cd4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401cce:	68fb      	ldr	r3, [r7, #12]
  401cd0:	68ba      	ldr	r2, [r7, #8]
  401cd2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401cd4:	68fb      	ldr	r3, [r7, #12]
  401cd6:	68ba      	ldr	r2, [r7, #8]
  401cd8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401cda:	68fb      	ldr	r3, [r7, #12]
  401cdc:	68ba      	ldr	r2, [r7, #8]
  401cde:	601a      	str	r2, [r3, #0]
}
  401ce0:	bf00      	nop
  401ce2:	3710      	adds	r7, #16
  401ce4:	46bd      	mov	sp, r7
  401ce6:	bd80      	pop	{r7, pc}
  401ce8:	00401d75 	.word	0x00401d75
  401cec:	00401a9d 	.word	0x00401a9d

00401cf0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401cf0:	b480      	push	{r7}
  401cf2:	b085      	sub	sp, #20
  401cf4:	af00      	add	r7, sp, #0
  401cf6:	60f8      	str	r0, [r7, #12]
  401cf8:	60b9      	str	r1, [r7, #8]
  401cfa:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	f003 0310 	and.w	r3, r3, #16
  401d02:	2b00      	cmp	r3, #0
  401d04:	d020      	beq.n	401d48 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	68ba      	ldr	r2, [r7, #8]
  401d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401d0e:	687b      	ldr	r3, [r7, #4]
  401d10:	f003 0320 	and.w	r3, r3, #32
  401d14:	2b00      	cmp	r3, #0
  401d16:	d004      	beq.n	401d22 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401d18:	68fb      	ldr	r3, [r7, #12]
  401d1a:	68ba      	ldr	r2, [r7, #8]
  401d1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401d20:	e003      	b.n	401d2a <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401d22:	68fb      	ldr	r3, [r7, #12]
  401d24:	68ba      	ldr	r2, [r7, #8]
  401d26:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401d2a:	687b      	ldr	r3, [r7, #4]
  401d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401d30:	2b00      	cmp	r3, #0
  401d32:	d004      	beq.n	401d3e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401d34:	68fb      	ldr	r3, [r7, #12]
  401d36:	68ba      	ldr	r2, [r7, #8]
  401d38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401d3c:	e008      	b.n	401d50 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401d3e:	68fb      	ldr	r3, [r7, #12]
  401d40:	68ba      	ldr	r2, [r7, #8]
  401d42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401d46:	e003      	b.n	401d50 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401d48:	68fb      	ldr	r3, [r7, #12]
  401d4a:	68ba      	ldr	r2, [r7, #8]
  401d4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401d50:	bf00      	nop
  401d52:	3714      	adds	r7, #20
  401d54:	46bd      	mov	sp, r7
  401d56:	bc80      	pop	{r7}
  401d58:	4770      	bx	lr

00401d5a <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401d5a:	b480      	push	{r7}
  401d5c:	b083      	sub	sp, #12
  401d5e:	af00      	add	r7, sp, #0
  401d60:	6078      	str	r0, [r7, #4]
  401d62:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401d64:	687b      	ldr	r3, [r7, #4]
  401d66:	683a      	ldr	r2, [r7, #0]
  401d68:	641a      	str	r2, [r3, #64]	; 0x40
}
  401d6a:	bf00      	nop
  401d6c:	370c      	adds	r7, #12
  401d6e:	46bd      	mov	sp, r7
  401d70:	bc80      	pop	{r7}
  401d72:	4770      	bx	lr

00401d74 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401d74:	b480      	push	{r7}
  401d76:	b083      	sub	sp, #12
  401d78:	af00      	add	r7, sp, #0
  401d7a:	6078      	str	r0, [r7, #4]
  401d7c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401d7e:	687b      	ldr	r3, [r7, #4]
  401d80:	683a      	ldr	r2, [r7, #0]
  401d82:	645a      	str	r2, [r3, #68]	; 0x44
}
  401d84:	bf00      	nop
  401d86:	370c      	adds	r7, #12
  401d88:	46bd      	mov	sp, r7
  401d8a:	bc80      	pop	{r7}
  401d8c:	4770      	bx	lr

00401d8e <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401d8e:	b480      	push	{r7}
  401d90:	b083      	sub	sp, #12
  401d92:	af00      	add	r7, sp, #0
  401d94:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401d96:	687b      	ldr	r3, [r7, #4]
  401d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401d9a:	4618      	mov	r0, r3
  401d9c:	370c      	adds	r7, #12
  401d9e:	46bd      	mov	sp, r7
  401da0:	bc80      	pop	{r7}
  401da2:	4770      	bx	lr

00401da4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401da4:	b480      	push	{r7}
  401da6:	b083      	sub	sp, #12
  401da8:	af00      	add	r7, sp, #0
  401daa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401dac:	687b      	ldr	r3, [r7, #4]
  401dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401db0:	4618      	mov	r0, r3
  401db2:	370c      	adds	r7, #12
  401db4:	46bd      	mov	sp, r7
  401db6:	bc80      	pop	{r7}
  401db8:	4770      	bx	lr
	...

00401dbc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401dbc:	b590      	push	{r4, r7, lr}
  401dbe:	b087      	sub	sp, #28
  401dc0:	af02      	add	r7, sp, #8
  401dc2:	6078      	str	r0, [r7, #4]
  401dc4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401dc6:	6878      	ldr	r0, [r7, #4]
  401dc8:	4b63      	ldr	r3, [pc, #396]	; (401f58 <pio_configure_pin+0x19c>)
  401dca:	4798      	blx	r3
  401dcc:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401dce:	683b      	ldr	r3, [r7, #0]
  401dd0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dd8:	d067      	beq.n	401eaa <pio_configure_pin+0xee>
  401dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dde:	d809      	bhi.n	401df4 <pio_configure_pin+0x38>
  401de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401de4:	d02b      	beq.n	401e3e <pio_configure_pin+0x82>
  401de6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401dea:	d043      	beq.n	401e74 <pio_configure_pin+0xb8>
  401dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401df0:	d00a      	beq.n	401e08 <pio_configure_pin+0x4c>
  401df2:	e0a9      	b.n	401f48 <pio_configure_pin+0x18c>
  401df4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401df8:	d07e      	beq.n	401ef8 <pio_configure_pin+0x13c>
  401dfa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401dfe:	d07b      	beq.n	401ef8 <pio_configure_pin+0x13c>
  401e00:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e04:	d06c      	beq.n	401ee0 <pio_configure_pin+0x124>
  401e06:	e09f      	b.n	401f48 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401e08:	687b      	ldr	r3, [r7, #4]
  401e0a:	f003 031f 	and.w	r3, r3, #31
  401e0e:	2201      	movs	r2, #1
  401e10:	fa02 f303 	lsl.w	r3, r2, r3
  401e14:	461a      	mov	r2, r3
  401e16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e1a:	68f8      	ldr	r0, [r7, #12]
  401e1c:	4b4f      	ldr	r3, [pc, #316]	; (401f5c <pio_configure_pin+0x1a0>)
  401e1e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401e20:	687b      	ldr	r3, [r7, #4]
  401e22:	f003 031f 	and.w	r3, r3, #31
  401e26:	2201      	movs	r2, #1
  401e28:	fa02 f303 	lsl.w	r3, r2, r3
  401e2c:	4619      	mov	r1, r3
  401e2e:	683b      	ldr	r3, [r7, #0]
  401e30:	f003 0301 	and.w	r3, r3, #1
  401e34:	461a      	mov	r2, r3
  401e36:	68f8      	ldr	r0, [r7, #12]
  401e38:	4b49      	ldr	r3, [pc, #292]	; (401f60 <pio_configure_pin+0x1a4>)
  401e3a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401e3c:	e086      	b.n	401f4c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401e3e:	687b      	ldr	r3, [r7, #4]
  401e40:	f003 031f 	and.w	r3, r3, #31
  401e44:	2201      	movs	r2, #1
  401e46:	fa02 f303 	lsl.w	r3, r2, r3
  401e4a:	461a      	mov	r2, r3
  401e4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e50:	68f8      	ldr	r0, [r7, #12]
  401e52:	4b42      	ldr	r3, [pc, #264]	; (401f5c <pio_configure_pin+0x1a0>)
  401e54:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401e56:	687b      	ldr	r3, [r7, #4]
  401e58:	f003 031f 	and.w	r3, r3, #31
  401e5c:	2201      	movs	r2, #1
  401e5e:	fa02 f303 	lsl.w	r3, r2, r3
  401e62:	4619      	mov	r1, r3
  401e64:	683b      	ldr	r3, [r7, #0]
  401e66:	f003 0301 	and.w	r3, r3, #1
  401e6a:	461a      	mov	r2, r3
  401e6c:	68f8      	ldr	r0, [r7, #12]
  401e6e:	4b3c      	ldr	r3, [pc, #240]	; (401f60 <pio_configure_pin+0x1a4>)
  401e70:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401e72:	e06b      	b.n	401f4c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401e74:	687b      	ldr	r3, [r7, #4]
  401e76:	f003 031f 	and.w	r3, r3, #31
  401e7a:	2201      	movs	r2, #1
  401e7c:	fa02 f303 	lsl.w	r3, r2, r3
  401e80:	461a      	mov	r2, r3
  401e82:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401e86:	68f8      	ldr	r0, [r7, #12]
  401e88:	4b34      	ldr	r3, [pc, #208]	; (401f5c <pio_configure_pin+0x1a0>)
  401e8a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401e8c:	687b      	ldr	r3, [r7, #4]
  401e8e:	f003 031f 	and.w	r3, r3, #31
  401e92:	2201      	movs	r2, #1
  401e94:	fa02 f303 	lsl.w	r3, r2, r3
  401e98:	4619      	mov	r1, r3
  401e9a:	683b      	ldr	r3, [r7, #0]
  401e9c:	f003 0301 	and.w	r3, r3, #1
  401ea0:	461a      	mov	r2, r3
  401ea2:	68f8      	ldr	r0, [r7, #12]
  401ea4:	4b2e      	ldr	r3, [pc, #184]	; (401f60 <pio_configure_pin+0x1a4>)
  401ea6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401ea8:	e050      	b.n	401f4c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401eaa:	687b      	ldr	r3, [r7, #4]
  401eac:	f003 031f 	and.w	r3, r3, #31
  401eb0:	2201      	movs	r2, #1
  401eb2:	fa02 f303 	lsl.w	r3, r2, r3
  401eb6:	461a      	mov	r2, r3
  401eb8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401ebc:	68f8      	ldr	r0, [r7, #12]
  401ebe:	4b27      	ldr	r3, [pc, #156]	; (401f5c <pio_configure_pin+0x1a0>)
  401ec0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401ec2:	687b      	ldr	r3, [r7, #4]
  401ec4:	f003 031f 	and.w	r3, r3, #31
  401ec8:	2201      	movs	r2, #1
  401eca:	fa02 f303 	lsl.w	r3, r2, r3
  401ece:	4619      	mov	r1, r3
  401ed0:	683b      	ldr	r3, [r7, #0]
  401ed2:	f003 0301 	and.w	r3, r3, #1
  401ed6:	461a      	mov	r2, r3
  401ed8:	68f8      	ldr	r0, [r7, #12]
  401eda:	4b21      	ldr	r3, [pc, #132]	; (401f60 <pio_configure_pin+0x1a4>)
  401edc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401ede:	e035      	b.n	401f4c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401ee0:	687b      	ldr	r3, [r7, #4]
  401ee2:	f003 031f 	and.w	r3, r3, #31
  401ee6:	2201      	movs	r2, #1
  401ee8:	fa02 f303 	lsl.w	r3, r2, r3
  401eec:	683a      	ldr	r2, [r7, #0]
  401eee:	4619      	mov	r1, r3
  401ef0:	68f8      	ldr	r0, [r7, #12]
  401ef2:	4b1c      	ldr	r3, [pc, #112]	; (401f64 <pio_configure_pin+0x1a8>)
  401ef4:	4798      	blx	r3
		break;
  401ef6:	e029      	b.n	401f4c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401ef8:	687b      	ldr	r3, [r7, #4]
  401efa:	f003 031f 	and.w	r3, r3, #31
  401efe:	2201      	movs	r2, #1
  401f00:	fa02 f303 	lsl.w	r3, r2, r3
  401f04:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401f06:	683b      	ldr	r3, [r7, #0]
  401f08:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401f0c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401f10:	bf0c      	ite	eq
  401f12:	2301      	moveq	r3, #1
  401f14:	2300      	movne	r3, #0
  401f16:	b2db      	uxtb	r3, r3
  401f18:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401f1a:	683b      	ldr	r3, [r7, #0]
  401f1c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401f20:	2b00      	cmp	r3, #0
  401f22:	bf14      	ite	ne
  401f24:	2301      	movne	r3, #1
  401f26:	2300      	moveq	r3, #0
  401f28:	b2db      	uxtb	r3, r3
  401f2a:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401f2c:	683b      	ldr	r3, [r7, #0]
  401f2e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401f32:	2b00      	cmp	r3, #0
  401f34:	bf14      	ite	ne
  401f36:	2301      	movne	r3, #1
  401f38:	2300      	moveq	r3, #0
  401f3a:	b2db      	uxtb	r3, r3
  401f3c:	9300      	str	r3, [sp, #0]
  401f3e:	4603      	mov	r3, r0
  401f40:	68f8      	ldr	r0, [r7, #12]
  401f42:	4c09      	ldr	r4, [pc, #36]	; (401f68 <pio_configure_pin+0x1ac>)
  401f44:	47a0      	blx	r4
		break;
  401f46:	e001      	b.n	401f4c <pio_configure_pin+0x190>

	default:
		return 0;
  401f48:	2300      	movs	r3, #0
  401f4a:	e000      	b.n	401f4e <pio_configure_pin+0x192>
	}

	return 1;
  401f4c:	2301      	movs	r3, #1
}
  401f4e:	4618      	mov	r0, r3
  401f50:	3714      	adds	r7, #20
  401f52:	46bd      	mov	sp, r7
  401f54:	bd90      	pop	{r4, r7, pc}
  401f56:	bf00      	nop
  401f58:	00401f6d 	.word	0x00401f6d
  401f5c:	00401afd 	.word	0x00401afd
  401f60:	00401a9d 	.word	0x00401a9d
  401f64:	00401c0d 	.word	0x00401c0d
  401f68:	00401c8d 	.word	0x00401c8d

00401f6c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401f6c:	b480      	push	{r7}
  401f6e:	b085      	sub	sp, #20
  401f70:	af00      	add	r7, sp, #0
  401f72:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401f74:	687b      	ldr	r3, [r7, #4]
  401f76:	095b      	lsrs	r3, r3, #5
  401f78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401f7c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401f80:	025b      	lsls	r3, r3, #9
  401f82:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401f84:	68fb      	ldr	r3, [r7, #12]
}
  401f86:	4618      	mov	r0, r3
  401f88:	3714      	adds	r7, #20
  401f8a:	46bd      	mov	sp, r7
  401f8c:	bc80      	pop	{r7}
  401f8e:	4770      	bx	lr

00401f90 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401f90:	b480      	push	{r7}
  401f92:	b085      	sub	sp, #20
  401f94:	af00      	add	r7, sp, #0
  401f96:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401f98:	491c      	ldr	r1, [pc, #112]	; (40200c <pmc_switch_mck_to_pllack+0x7c>)
  401f9a:	4b1c      	ldr	r3, [pc, #112]	; (40200c <pmc_switch_mck_to_pllack+0x7c>)
  401f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401fa2:	687b      	ldr	r3, [r7, #4]
  401fa4:	4313      	orrs	r3, r2
  401fa6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401fac:	60fb      	str	r3, [r7, #12]
  401fae:	e007      	b.n	401fc0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fb0:	68fb      	ldr	r3, [r7, #12]
  401fb2:	2b00      	cmp	r3, #0
  401fb4:	d101      	bne.n	401fba <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401fb6:	2301      	movs	r3, #1
  401fb8:	e023      	b.n	402002 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401fba:	68fb      	ldr	r3, [r7, #12]
  401fbc:	3b01      	subs	r3, #1
  401fbe:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fc0:	4b12      	ldr	r3, [pc, #72]	; (40200c <pmc_switch_mck_to_pllack+0x7c>)
  401fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401fc4:	f003 0308 	and.w	r3, r3, #8
  401fc8:	2b00      	cmp	r3, #0
  401fca:	d0f1      	beq.n	401fb0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401fcc:	4a0f      	ldr	r2, [pc, #60]	; (40200c <pmc_switch_mck_to_pllack+0x7c>)
  401fce:	4b0f      	ldr	r3, [pc, #60]	; (40200c <pmc_switch_mck_to_pllack+0x7c>)
  401fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fd2:	f023 0303 	bic.w	r3, r3, #3
  401fd6:	f043 0302 	orr.w	r3, r3, #2
  401fda:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401fe0:	60fb      	str	r3, [r7, #12]
  401fe2:	e007      	b.n	401ff4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fe4:	68fb      	ldr	r3, [r7, #12]
  401fe6:	2b00      	cmp	r3, #0
  401fe8:	d101      	bne.n	401fee <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401fea:	2301      	movs	r3, #1
  401fec:	e009      	b.n	402002 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401fee:	68fb      	ldr	r3, [r7, #12]
  401ff0:	3b01      	subs	r3, #1
  401ff2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ff4:	4b05      	ldr	r3, [pc, #20]	; (40200c <pmc_switch_mck_to_pllack+0x7c>)
  401ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401ff8:	f003 0308 	and.w	r3, r3, #8
  401ffc:	2b00      	cmp	r3, #0
  401ffe:	d0f1      	beq.n	401fe4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402000:	2300      	movs	r3, #0
}
  402002:	4618      	mov	r0, r3
  402004:	3714      	adds	r7, #20
  402006:	46bd      	mov	sp, r7
  402008:	bc80      	pop	{r7}
  40200a:	4770      	bx	lr
  40200c:	400e0400 	.word	0x400e0400

00402010 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402010:	b480      	push	{r7}
  402012:	b083      	sub	sp, #12
  402014:	af00      	add	r7, sp, #0
  402016:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402018:	687b      	ldr	r3, [r7, #4]
  40201a:	2b01      	cmp	r3, #1
  40201c:	d107      	bne.n	40202e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40201e:	4a08      	ldr	r2, [pc, #32]	; (402040 <pmc_switch_sclk_to_32kxtal+0x30>)
  402020:	4b07      	ldr	r3, [pc, #28]	; (402040 <pmc_switch_sclk_to_32kxtal+0x30>)
  402022:	689b      	ldr	r3, [r3, #8]
  402024:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  402028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40202c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40202e:	4b04      	ldr	r3, [pc, #16]	; (402040 <pmc_switch_sclk_to_32kxtal+0x30>)
  402030:	4a04      	ldr	r2, [pc, #16]	; (402044 <pmc_switch_sclk_to_32kxtal+0x34>)
  402032:	601a      	str	r2, [r3, #0]
}
  402034:	bf00      	nop
  402036:	370c      	adds	r7, #12
  402038:	46bd      	mov	sp, r7
  40203a:	bc80      	pop	{r7}
  40203c:	4770      	bx	lr
  40203e:	bf00      	nop
  402040:	400e1410 	.word	0x400e1410
  402044:	a5000008 	.word	0xa5000008

00402048 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402048:	b480      	push	{r7}
  40204a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40204c:	4b09      	ldr	r3, [pc, #36]	; (402074 <pmc_osc_is_ready_32kxtal+0x2c>)
  40204e:	695b      	ldr	r3, [r3, #20]
  402050:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402054:	2b00      	cmp	r3, #0
  402056:	d007      	beq.n	402068 <pmc_osc_is_ready_32kxtal+0x20>
  402058:	4b07      	ldr	r3, [pc, #28]	; (402078 <pmc_osc_is_ready_32kxtal+0x30>)
  40205a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402060:	2b00      	cmp	r3, #0
  402062:	d001      	beq.n	402068 <pmc_osc_is_ready_32kxtal+0x20>
  402064:	2301      	movs	r3, #1
  402066:	e000      	b.n	40206a <pmc_osc_is_ready_32kxtal+0x22>
  402068:	2300      	movs	r3, #0
}
  40206a:	4618      	mov	r0, r3
  40206c:	46bd      	mov	sp, r7
  40206e:	bc80      	pop	{r7}
  402070:	4770      	bx	lr
  402072:	bf00      	nop
  402074:	400e1410 	.word	0x400e1410
  402078:	400e0400 	.word	0x400e0400

0040207c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40207c:	b480      	push	{r7}
  40207e:	b083      	sub	sp, #12
  402080:	af00      	add	r7, sp, #0
  402082:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402084:	4a18      	ldr	r2, [pc, #96]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402086:	4b18      	ldr	r3, [pc, #96]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402088:	6a1b      	ldr	r3, [r3, #32]
  40208a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40208e:	f043 0308 	orr.w	r3, r3, #8
  402092:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402094:	bf00      	nop
  402096:	4b14      	ldr	r3, [pc, #80]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40209e:	2b00      	cmp	r3, #0
  4020a0:	d0f9      	beq.n	402096 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4020a2:	4911      	ldr	r1, [pc, #68]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4020a4:	4b10      	ldr	r3, [pc, #64]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4020a6:	6a1b      	ldr	r3, [r3, #32]
  4020a8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4020ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4020b0:	687a      	ldr	r2, [r7, #4]
  4020b2:	4313      	orrs	r3, r2
  4020b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4020b8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4020ba:	bf00      	nop
  4020bc:	4b0a      	ldr	r3, [pc, #40]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4020be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4020c4:	2b00      	cmp	r3, #0
  4020c6:	d0f9      	beq.n	4020bc <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4020c8:	4a07      	ldr	r2, [pc, #28]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4020ca:	4b07      	ldr	r3, [pc, #28]	; (4020e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4020cc:	6a1b      	ldr	r3, [r3, #32]
  4020ce:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4020d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4020da:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4020dc:	bf00      	nop
  4020de:	370c      	adds	r7, #12
  4020e0:	46bd      	mov	sp, r7
  4020e2:	bc80      	pop	{r7}
  4020e4:	4770      	bx	lr
  4020e6:	bf00      	nop
  4020e8:	400e0400 	.word	0x400e0400

004020ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4020ec:	b480      	push	{r7}
  4020ee:	b083      	sub	sp, #12
  4020f0:	af00      	add	r7, sp, #0
  4020f2:	6078      	str	r0, [r7, #4]
  4020f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4020f6:	687b      	ldr	r3, [r7, #4]
  4020f8:	2b00      	cmp	r3, #0
  4020fa:	d008      	beq.n	40210e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4020fc:	4916      	ldr	r1, [pc, #88]	; (402158 <pmc_switch_mainck_to_xtal+0x6c>)
  4020fe:	4b16      	ldr	r3, [pc, #88]	; (402158 <pmc_switch_mainck_to_xtal+0x6c>)
  402100:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402102:	4a16      	ldr	r2, [pc, #88]	; (40215c <pmc_switch_mainck_to_xtal+0x70>)
  402104:	401a      	ands	r2, r3
  402106:	4b16      	ldr	r3, [pc, #88]	; (402160 <pmc_switch_mainck_to_xtal+0x74>)
  402108:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40210a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40210c:	e01e      	b.n	40214c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40210e:	4912      	ldr	r1, [pc, #72]	; (402158 <pmc_switch_mainck_to_xtal+0x6c>)
  402110:	4b11      	ldr	r3, [pc, #68]	; (402158 <pmc_switch_mainck_to_xtal+0x6c>)
  402112:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402114:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402118:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40211c:	683a      	ldr	r2, [r7, #0]
  40211e:	0212      	lsls	r2, r2, #8
  402120:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402122:	4313      	orrs	r3, r2
  402124:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402128:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40212c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40212e:	bf00      	nop
  402130:	4b09      	ldr	r3, [pc, #36]	; (402158 <pmc_switch_mainck_to_xtal+0x6c>)
  402132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402134:	f003 0301 	and.w	r3, r3, #1
  402138:	2b00      	cmp	r3, #0
  40213a:	d0f9      	beq.n	402130 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40213c:	4a06      	ldr	r2, [pc, #24]	; (402158 <pmc_switch_mainck_to_xtal+0x6c>)
  40213e:	4b06      	ldr	r3, [pc, #24]	; (402158 <pmc_switch_mainck_to_xtal+0x6c>)
  402140:	6a1b      	ldr	r3, [r3, #32]
  402142:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40214a:	6213      	str	r3, [r2, #32]
}
  40214c:	bf00      	nop
  40214e:	370c      	adds	r7, #12
  402150:	46bd      	mov	sp, r7
  402152:	bc80      	pop	{r7}
  402154:	4770      	bx	lr
  402156:	bf00      	nop
  402158:	400e0400 	.word	0x400e0400
  40215c:	fec8fffc 	.word	0xfec8fffc
  402160:	01370002 	.word	0x01370002

00402164 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402164:	b480      	push	{r7}
  402166:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402168:	4b03      	ldr	r3, [pc, #12]	; (402178 <pmc_osc_is_ready_mainck+0x14>)
  40216a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402170:	4618      	mov	r0, r3
  402172:	46bd      	mov	sp, r7
  402174:	bc80      	pop	{r7}
  402176:	4770      	bx	lr
  402178:	400e0400 	.word	0x400e0400

0040217c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40217c:	b480      	push	{r7}
  40217e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402180:	4b03      	ldr	r3, [pc, #12]	; (402190 <pmc_disable_pllack+0x14>)
  402182:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402186:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402188:	bf00      	nop
  40218a:	46bd      	mov	sp, r7
  40218c:	bc80      	pop	{r7}
  40218e:	4770      	bx	lr
  402190:	400e0400 	.word	0x400e0400

00402194 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402194:	b480      	push	{r7}
  402196:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402198:	4b03      	ldr	r3, [pc, #12]	; (4021a8 <pmc_is_locked_pllack+0x14>)
  40219a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40219c:	f003 0302 	and.w	r3, r3, #2
}
  4021a0:	4618      	mov	r0, r3
  4021a2:	46bd      	mov	sp, r7
  4021a4:	bc80      	pop	{r7}
  4021a6:	4770      	bx	lr
  4021a8:	400e0400 	.word	0x400e0400

004021ac <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4021ac:	b480      	push	{r7}
  4021ae:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4021b0:	4b03      	ldr	r3, [pc, #12]	; (4021c0 <pmc_disable_pllbck+0x14>)
  4021b2:	2200      	movs	r2, #0
  4021b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4021b6:	bf00      	nop
  4021b8:	46bd      	mov	sp, r7
  4021ba:	bc80      	pop	{r7}
  4021bc:	4770      	bx	lr
  4021be:	bf00      	nop
  4021c0:	400e0400 	.word	0x400e0400

004021c4 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4021c4:	b480      	push	{r7}
  4021c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4021c8:	4b03      	ldr	r3, [pc, #12]	; (4021d8 <pmc_is_locked_pllbck+0x14>)
  4021ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021cc:	f003 0304 	and.w	r3, r3, #4
}
  4021d0:	4618      	mov	r0, r3
  4021d2:	46bd      	mov	sp, r7
  4021d4:	bc80      	pop	{r7}
  4021d6:	4770      	bx	lr
  4021d8:	400e0400 	.word	0x400e0400

004021dc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4021dc:	b480      	push	{r7}
  4021de:	b083      	sub	sp, #12
  4021e0:	af00      	add	r7, sp, #0
  4021e2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4021e4:	687b      	ldr	r3, [r7, #4]
  4021e6:	2b22      	cmp	r3, #34	; 0x22
  4021e8:	d901      	bls.n	4021ee <pmc_enable_periph_clk+0x12>
		return 1;
  4021ea:	2301      	movs	r3, #1
  4021ec:	e02f      	b.n	40224e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4021ee:	687b      	ldr	r3, [r7, #4]
  4021f0:	2b1f      	cmp	r3, #31
  4021f2:	d813      	bhi.n	40221c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4021f4:	4b18      	ldr	r3, [pc, #96]	; (402258 <pmc_enable_periph_clk+0x7c>)
  4021f6:	699a      	ldr	r2, [r3, #24]
  4021f8:	2101      	movs	r1, #1
  4021fa:	687b      	ldr	r3, [r7, #4]
  4021fc:	fa01 f303 	lsl.w	r3, r1, r3
  402200:	401a      	ands	r2, r3
  402202:	2101      	movs	r1, #1
  402204:	687b      	ldr	r3, [r7, #4]
  402206:	fa01 f303 	lsl.w	r3, r1, r3
  40220a:	429a      	cmp	r2, r3
  40220c:	d01e      	beq.n	40224c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40220e:	4a12      	ldr	r2, [pc, #72]	; (402258 <pmc_enable_periph_clk+0x7c>)
  402210:	2101      	movs	r1, #1
  402212:	687b      	ldr	r3, [r7, #4]
  402214:	fa01 f303 	lsl.w	r3, r1, r3
  402218:	6113      	str	r3, [r2, #16]
  40221a:	e017      	b.n	40224c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40221c:	687b      	ldr	r3, [r7, #4]
  40221e:	3b20      	subs	r3, #32
  402220:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402222:	4b0d      	ldr	r3, [pc, #52]	; (402258 <pmc_enable_periph_clk+0x7c>)
  402224:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402228:	2101      	movs	r1, #1
  40222a:	687b      	ldr	r3, [r7, #4]
  40222c:	fa01 f303 	lsl.w	r3, r1, r3
  402230:	401a      	ands	r2, r3
  402232:	2101      	movs	r1, #1
  402234:	687b      	ldr	r3, [r7, #4]
  402236:	fa01 f303 	lsl.w	r3, r1, r3
  40223a:	429a      	cmp	r2, r3
  40223c:	d006      	beq.n	40224c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40223e:	4a06      	ldr	r2, [pc, #24]	; (402258 <pmc_enable_periph_clk+0x7c>)
  402240:	2101      	movs	r1, #1
  402242:	687b      	ldr	r3, [r7, #4]
  402244:	fa01 f303 	lsl.w	r3, r1, r3
  402248:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40224c:	2300      	movs	r3, #0
}
  40224e:	4618      	mov	r0, r3
  402250:	370c      	adds	r7, #12
  402252:	46bd      	mov	sp, r7
  402254:	bc80      	pop	{r7}
  402256:	4770      	bx	lr
  402258:	400e0400 	.word	0x400e0400

0040225c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40225c:	b480      	push	{r7}
  40225e:	b087      	sub	sp, #28
  402260:	af00      	add	r7, sp, #0
  402262:	60f8      	str	r0, [r7, #12]
  402264:	60b9      	str	r1, [r7, #8]
  402266:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402268:	68fa      	ldr	r2, [r7, #12]
  40226a:	68bb      	ldr	r3, [r7, #8]
  40226c:	019b      	lsls	r3, r3, #6
  40226e:	4413      	add	r3, r2
  402270:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  402272:	697b      	ldr	r3, [r7, #20]
  402274:	2202      	movs	r2, #2
  402276:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  402278:	697b      	ldr	r3, [r7, #20]
  40227a:	f04f 32ff 	mov.w	r2, #4294967295
  40227e:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  402280:	697b      	ldr	r3, [r7, #20]
  402282:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  402284:	697b      	ldr	r3, [r7, #20]
  402286:	687a      	ldr	r2, [r7, #4]
  402288:	605a      	str	r2, [r3, #4]
}
  40228a:	bf00      	nop
  40228c:	371c      	adds	r7, #28
  40228e:	46bd      	mov	sp, r7
  402290:	bc80      	pop	{r7}
  402292:	4770      	bx	lr

00402294 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  402294:	b480      	push	{r7}
  402296:	b083      	sub	sp, #12
  402298:	af00      	add	r7, sp, #0
  40229a:	6078      	str	r0, [r7, #4]
  40229c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40229e:	687a      	ldr	r2, [r7, #4]
  4022a0:	683b      	ldr	r3, [r7, #0]
  4022a2:	019b      	lsls	r3, r3, #6
  4022a4:	4413      	add	r3, r2
  4022a6:	2205      	movs	r2, #5
  4022a8:	601a      	str	r2, [r3, #0]
}
  4022aa:	bf00      	nop
  4022ac:	370c      	adds	r7, #12
  4022ae:	46bd      	mov	sp, r7
  4022b0:	bc80      	pop	{r7}
  4022b2:	4770      	bx	lr

004022b4 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b085      	sub	sp, #20
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	60f8      	str	r0, [r7, #12]
  4022bc:	60b9      	str	r1, [r7, #8]
  4022be:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4022c0:	68fa      	ldr	r2, [r7, #12]
  4022c2:	68bb      	ldr	r3, [r7, #8]
  4022c4:	019b      	lsls	r3, r3, #6
  4022c6:	4413      	add	r3, r2
  4022c8:	331c      	adds	r3, #28
  4022ca:	687a      	ldr	r2, [r7, #4]
  4022cc:	601a      	str	r2, [r3, #0]
}
  4022ce:	bf00      	nop
  4022d0:	3714      	adds	r7, #20
  4022d2:	46bd      	mov	sp, r7
  4022d4:	bc80      	pop	{r7}
  4022d6:	4770      	bx	lr

004022d8 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4022d8:	b480      	push	{r7}
  4022da:	b087      	sub	sp, #28
  4022dc:	af00      	add	r7, sp, #0
  4022de:	60f8      	str	r0, [r7, #12]
  4022e0:	60b9      	str	r1, [r7, #8]
  4022e2:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4022e4:	68fa      	ldr	r2, [r7, #12]
  4022e6:	68bb      	ldr	r3, [r7, #8]
  4022e8:	019b      	lsls	r3, r3, #6
  4022ea:	4413      	add	r3, r2
  4022ec:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  4022ee:	697b      	ldr	r3, [r7, #20]
  4022f0:	687a      	ldr	r2, [r7, #4]
  4022f2:	625a      	str	r2, [r3, #36]	; 0x24
}
  4022f4:	bf00      	nop
  4022f6:	371c      	adds	r7, #28
  4022f8:	46bd      	mov	sp, r7
  4022fa:	bc80      	pop	{r7}
  4022fc:	4770      	bx	lr

004022fe <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4022fe:	b480      	push	{r7}
  402300:	b085      	sub	sp, #20
  402302:	af00      	add	r7, sp, #0
  402304:	6078      	str	r0, [r7, #4]
  402306:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402308:	687a      	ldr	r2, [r7, #4]
  40230a:	683b      	ldr	r3, [r7, #0]
  40230c:	019b      	lsls	r3, r3, #6
  40230e:	4413      	add	r3, r2
  402310:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  402312:	68fb      	ldr	r3, [r7, #12]
  402314:	6a1b      	ldr	r3, [r3, #32]
}
  402316:	4618      	mov	r0, r3
  402318:	3714      	adds	r7, #20
  40231a:	46bd      	mov	sp, r7
  40231c:	bc80      	pop	{r7}
  40231e:	4770      	bx	lr

00402320 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  402320:	b480      	push	{r7}
  402322:	b08d      	sub	sp, #52	; 0x34
  402324:	af00      	add	r7, sp, #0
  402326:	60f8      	str	r0, [r7, #12]
  402328:	60b9      	str	r1, [r7, #8]
  40232a:	607a      	str	r2, [r7, #4]
  40232c:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40232e:	2302      	movs	r3, #2
  402330:	613b      	str	r3, [r7, #16]
  402332:	2308      	movs	r3, #8
  402334:	617b      	str	r3, [r7, #20]
  402336:	2320      	movs	r3, #32
  402338:	61bb      	str	r3, [r7, #24]
  40233a:	2380      	movs	r3, #128	; 0x80
  40233c:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  402340:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  402342:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  402344:	2300      	movs	r3, #0
  402346:	62fb      	str	r3, [r7, #44]	; 0x2c
  402348:	e01a      	b.n	402380 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  40234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40234c:	009b      	lsls	r3, r3, #2
  40234e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  402352:	4413      	add	r3, r2
  402354:	f853 3c20 	ldr.w	r3, [r3, #-32]
  402358:	68ba      	ldr	r2, [r7, #8]
  40235a:	fbb2 f3f3 	udiv	r3, r2, r3
  40235e:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  402360:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402362:	0c1b      	lsrs	r3, r3, #16
  402364:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  402366:	68fa      	ldr	r2, [r7, #12]
  402368:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40236a:	429a      	cmp	r2, r3
  40236c:	d901      	bls.n	402372 <tc_find_mck_divisor+0x52>
			return 0;
  40236e:	2300      	movs	r3, #0
  402370:	e023      	b.n	4023ba <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  402372:	68fa      	ldr	r2, [r7, #12]
  402374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402376:	429a      	cmp	r2, r3
  402378:	d206      	bcs.n	402388 <tc_find_mck_divisor+0x68>
			ul_index++) {
  40237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40237c:	3301      	adds	r3, #1
  40237e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  402380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402382:	2b04      	cmp	r3, #4
  402384:	d9e1      	bls.n	40234a <tc_find_mck_divisor+0x2a>
  402386:	e000      	b.n	40238a <tc_find_mck_divisor+0x6a>
			break;
  402388:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40238c:	2b04      	cmp	r3, #4
  40238e:	d901      	bls.n	402394 <tc_find_mck_divisor+0x74>
		return 0;
  402390:	2300      	movs	r3, #0
  402392:	e012      	b.n	4023ba <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  402394:	687b      	ldr	r3, [r7, #4]
  402396:	2b00      	cmp	r3, #0
  402398:	d008      	beq.n	4023ac <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40239c:	009b      	lsls	r3, r3, #2
  40239e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4023a2:	4413      	add	r3, r2
  4023a4:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4023a8:	687b      	ldr	r3, [r7, #4]
  4023aa:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4023ac:	683b      	ldr	r3, [r7, #0]
  4023ae:	2b00      	cmp	r3, #0
  4023b0:	d002      	beq.n	4023b8 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4023b2:	683b      	ldr	r3, [r7, #0]
  4023b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4023b6:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4023b8:	2301      	movs	r3, #1
}
  4023ba:	4618      	mov	r0, r3
  4023bc:	3734      	adds	r7, #52	; 0x34
  4023be:	46bd      	mov	sp, r7
  4023c0:	bc80      	pop	{r7}
  4023c2:	4770      	bx	lr

004023c4 <sysclk_enable_peripheral_clock>:
{
  4023c4:	b580      	push	{r7, lr}
  4023c6:	b082      	sub	sp, #8
  4023c8:	af00      	add	r7, sp, #0
  4023ca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4023cc:	6878      	ldr	r0, [r7, #4]
  4023ce:	4b03      	ldr	r3, [pc, #12]	; (4023dc <sysclk_enable_peripheral_clock+0x18>)
  4023d0:	4798      	blx	r3
}
  4023d2:	bf00      	nop
  4023d4:	3708      	adds	r7, #8
  4023d6:	46bd      	mov	sp, r7
  4023d8:	bd80      	pop	{r7, pc}
  4023da:	bf00      	nop
  4023dc:	004021dd 	.word	0x004021dd

004023e0 <ioport_init>:
{
  4023e0:	b580      	push	{r7, lr}
  4023e2:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  4023e4:	200b      	movs	r0, #11
  4023e6:	4b03      	ldr	r3, [pc, #12]	; (4023f4 <ioport_init+0x14>)
  4023e8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  4023ea:	200c      	movs	r0, #12
  4023ec:	4b01      	ldr	r3, [pc, #4]	; (4023f4 <ioport_init+0x14>)
  4023ee:	4798      	blx	r3
}
  4023f0:	bf00      	nop
  4023f2:	bd80      	pop	{r7, pc}
  4023f4:	004023c5 	.word	0x004023c5

004023f8 <ioport_set_pin_dir>:
{
  4023f8:	b480      	push	{r7}
  4023fa:	b08d      	sub	sp, #52	; 0x34
  4023fc:	af00      	add	r7, sp, #0
  4023fe:	6078      	str	r0, [r7, #4]
  402400:	460b      	mov	r3, r1
  402402:	70fb      	strb	r3, [r7, #3]
  402404:	687b      	ldr	r3, [r7, #4]
  402406:	62fb      	str	r3, [r7, #44]	; 0x2c
  402408:	78fb      	ldrb	r3, [r7, #3]
  40240a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402410:	627b      	str	r3, [r7, #36]	; 0x24
  402412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402414:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  402416:	6a3b      	ldr	r3, [r7, #32]
  402418:	095b      	lsrs	r3, r3, #5
  40241a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40241c:	69fb      	ldr	r3, [r7, #28]
  40241e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402422:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402426:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402428:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  40242a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40242e:	2b01      	cmp	r3, #1
  402430:	d109      	bne.n	402446 <ioport_set_pin_dir+0x4e>
  402432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402434:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402436:	697b      	ldr	r3, [r7, #20]
  402438:	f003 031f 	and.w	r3, r3, #31
  40243c:	2201      	movs	r2, #1
  40243e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402440:	69bb      	ldr	r3, [r7, #24]
  402442:	611a      	str	r2, [r3, #16]
  402444:	e00c      	b.n	402460 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40244a:	2b00      	cmp	r3, #0
  40244c:	d108      	bne.n	402460 <ioport_set_pin_dir+0x68>
  40244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402450:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402452:	693b      	ldr	r3, [r7, #16]
  402454:	f003 031f 	and.w	r3, r3, #31
  402458:	2201      	movs	r2, #1
  40245a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40245c:	69bb      	ldr	r3, [r7, #24]
  40245e:	615a      	str	r2, [r3, #20]
  402460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402462:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402464:	68fb      	ldr	r3, [r7, #12]
  402466:	f003 031f 	and.w	r3, r3, #31
  40246a:	2201      	movs	r2, #1
  40246c:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40246e:	69bb      	ldr	r3, [r7, #24]
  402470:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  402474:	bf00      	nop
  402476:	3734      	adds	r7, #52	; 0x34
  402478:	46bd      	mov	sp, r7
  40247a:	bc80      	pop	{r7}
  40247c:	4770      	bx	lr

0040247e <ioport_set_pin_level>:
{
  40247e:	b480      	push	{r7}
  402480:	b08b      	sub	sp, #44	; 0x2c
  402482:	af00      	add	r7, sp, #0
  402484:	6078      	str	r0, [r7, #4]
  402486:	460b      	mov	r3, r1
  402488:	70fb      	strb	r3, [r7, #3]
  40248a:	687b      	ldr	r3, [r7, #4]
  40248c:	627b      	str	r3, [r7, #36]	; 0x24
  40248e:	78fb      	ldrb	r3, [r7, #3]
  402490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402496:	61fb      	str	r3, [r7, #28]
  402498:	69fb      	ldr	r3, [r7, #28]
  40249a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40249c:	69bb      	ldr	r3, [r7, #24]
  40249e:	095b      	lsrs	r3, r3, #5
  4024a0:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4024a2:	697b      	ldr	r3, [r7, #20]
  4024a4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4024a8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4024ac:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4024ae:	613b      	str	r3, [r7, #16]
	if (level) {
  4024b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4024b4:	2b00      	cmp	r3, #0
  4024b6:	d009      	beq.n	4024cc <ioport_set_pin_level+0x4e>
  4024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024ba:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4024bc:	68fb      	ldr	r3, [r7, #12]
  4024be:	f003 031f 	and.w	r3, r3, #31
  4024c2:	2201      	movs	r2, #1
  4024c4:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4024c6:	693b      	ldr	r3, [r7, #16]
  4024c8:	631a      	str	r2, [r3, #48]	; 0x30
}
  4024ca:	e008      	b.n	4024de <ioport_set_pin_level+0x60>
  4024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024ce:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4024d0:	68bb      	ldr	r3, [r7, #8]
  4024d2:	f003 031f 	and.w	r3, r3, #31
  4024d6:	2201      	movs	r2, #1
  4024d8:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4024da:	693b      	ldr	r3, [r7, #16]
  4024dc:	635a      	str	r2, [r3, #52]	; 0x34
  4024de:	bf00      	nop
  4024e0:	372c      	adds	r7, #44	; 0x2c
  4024e2:	46bd      	mov	sp, r7
  4024e4:	bc80      	pop	{r7}
  4024e6:	4770      	bx	lr

004024e8 <board_init>:
#include <board.h>
#include <conf_board.h>


void board_init(void)
{
  4024e8:	b580      	push	{r7, lr}
  4024ea:	af00      	add	r7, sp, #0
	ioport_init();
  4024ec:	4b0b      	ldr	r3, [pc, #44]	; (40251c <board_init+0x34>)
  4024ee:	4798      	blx	r3
	ioport_set_pin_dir(PIN_WIFI_RESET,IOPORT_DIR_OUTPUT);
  4024f0:	2101      	movs	r1, #1
  4024f2:	2021      	movs	r0, #33	; 0x21
  4024f4:	4b0a      	ldr	r3, [pc, #40]	; (402520 <board_init+0x38>)
  4024f6:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,LOW);
  4024f8:	2100      	movs	r1, #0
  4024fa:	2021      	movs	r0, #33	; 0x21
  4024fc:	4b09      	ldr	r3, [pc, #36]	; (402524 <board_init+0x3c>)
  4024fe:	4798      	blx	r3
	
	ioport_set_pin_dir(PIN_WIFI_NETWORK_STATUS,IOPORT_DIR_INPUT);
  402500:	2100      	movs	r1, #0
  402502:	200b      	movs	r0, #11
  402504:	4b06      	ldr	r3, [pc, #24]	; (402520 <board_init+0x38>)
  402506:	4798      	blx	r3
	//ioport_set_pin_level(PIN_WIFI_NETWORK_STATUS,LOW);
	
	ioport_set_pin_dir(PUSH_BUTTON,IOPORT_DIR_INPUT);
  402508:	2100      	movs	r1, #0
  40250a:	2000      	movs	r0, #0
  40250c:	4b04      	ldr	r3, [pc, #16]	; (402520 <board_init+0x38>)
  40250e:	4798      	blx	r3
	//ioport_set_pin_level(PUSH_BUTTON,HIGH);
	
	ioport_set_pin_dir(WIFI_COM_COMPLETE,IOPORT_DIR_INPUT);
  402510:	2100      	movs	r1, #0
  402512:	200c      	movs	r0, #12
  402514:	4b02      	ldr	r3, [pc, #8]	; (402520 <board_init+0x38>)
  402516:	4798      	blx	r3
	//ioport_set_pin_level(WIFI_COM_COMPLETE,LOW);



}
  402518:	bf00      	nop
  40251a:	bd80      	pop	{r7, pc}
  40251c:	004023e1 	.word	0x004023e1
  402520:	004023f9 	.word	0x004023f9
  402524:	0040247f 	.word	0x0040247f

00402528 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402528:	b580      	push	{r7, lr}
  40252a:	b084      	sub	sp, #16
  40252c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40252e:	4b27      	ldr	r3, [pc, #156]	; (4025cc <Reset_Handler+0xa4>)
  402530:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402532:	4b27      	ldr	r3, [pc, #156]	; (4025d0 <Reset_Handler+0xa8>)
  402534:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  402536:	68fa      	ldr	r2, [r7, #12]
  402538:	68bb      	ldr	r3, [r7, #8]
  40253a:	429a      	cmp	r2, r3
  40253c:	d90d      	bls.n	40255a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40253e:	e007      	b.n	402550 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402540:	68bb      	ldr	r3, [r7, #8]
  402542:	1d1a      	adds	r2, r3, #4
  402544:	60ba      	str	r2, [r7, #8]
  402546:	68fa      	ldr	r2, [r7, #12]
  402548:	1d11      	adds	r1, r2, #4
  40254a:	60f9      	str	r1, [r7, #12]
  40254c:	6812      	ldr	r2, [r2, #0]
  40254e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402550:	68bb      	ldr	r3, [r7, #8]
  402552:	4a20      	ldr	r2, [pc, #128]	; (4025d4 <Reset_Handler+0xac>)
  402554:	4293      	cmp	r3, r2
  402556:	d3f3      	bcc.n	402540 <Reset_Handler+0x18>
  402558:	e020      	b.n	40259c <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  40255a:	68fa      	ldr	r2, [r7, #12]
  40255c:	68bb      	ldr	r3, [r7, #8]
  40255e:	429a      	cmp	r2, r3
  402560:	d21c      	bcs.n	40259c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402562:	4a1c      	ldr	r2, [pc, #112]	; (4025d4 <Reset_Handler+0xac>)
  402564:	4b1a      	ldr	r3, [pc, #104]	; (4025d0 <Reset_Handler+0xa8>)
  402566:	1ad3      	subs	r3, r2, r3
  402568:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40256a:	68fa      	ldr	r2, [r7, #12]
  40256c:	687b      	ldr	r3, [r7, #4]
  40256e:	4413      	add	r3, r2
  402570:	3b04      	subs	r3, #4
  402572:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402574:	68ba      	ldr	r2, [r7, #8]
  402576:	687b      	ldr	r3, [r7, #4]
  402578:	4413      	add	r3, r2
  40257a:	3b04      	subs	r3, #4
  40257c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40257e:	e00a      	b.n	402596 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402580:	68bb      	ldr	r3, [r7, #8]
  402582:	1f1a      	subs	r2, r3, #4
  402584:	60ba      	str	r2, [r7, #8]
  402586:	68fa      	ldr	r2, [r7, #12]
  402588:	1f11      	subs	r1, r2, #4
  40258a:	60f9      	str	r1, [r7, #12]
  40258c:	6812      	ldr	r2, [r2, #0]
  40258e:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402590:	687b      	ldr	r3, [r7, #4]
  402592:	3b04      	subs	r3, #4
  402594:	607b      	str	r3, [r7, #4]
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	2b00      	cmp	r3, #0
  40259a:	d1f1      	bne.n	402580 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40259c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40259e:	4b0e      	ldr	r3, [pc, #56]	; (4025d8 <Reset_Handler+0xb0>)
  4025a0:	60bb      	str	r3, [r7, #8]
  4025a2:	e004      	b.n	4025ae <Reset_Handler+0x86>
		*pDest++ = 0;
  4025a4:	68bb      	ldr	r3, [r7, #8]
  4025a6:	1d1a      	adds	r2, r3, #4
  4025a8:	60ba      	str	r2, [r7, #8]
  4025aa:	2200      	movs	r2, #0
  4025ac:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  4025ae:	68bb      	ldr	r3, [r7, #8]
  4025b0:	4a0a      	ldr	r2, [pc, #40]	; (4025dc <Reset_Handler+0xb4>)
  4025b2:	4293      	cmp	r3, r2
  4025b4:	d3f6      	bcc.n	4025a4 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4025b6:	4b0a      	ldr	r3, [pc, #40]	; (4025e0 <Reset_Handler+0xb8>)
  4025b8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4025ba:	4a0a      	ldr	r2, [pc, #40]	; (4025e4 <Reset_Handler+0xbc>)
  4025bc:	68fb      	ldr	r3, [r7, #12]
  4025be:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4025c0:	4b09      	ldr	r3, [pc, #36]	; (4025e8 <Reset_Handler+0xc0>)
  4025c2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4025c4:	4b09      	ldr	r3, [pc, #36]	; (4025ec <Reset_Handler+0xc4>)
  4025c6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4025c8:	e7fe      	b.n	4025c8 <Reset_Handler+0xa0>
  4025ca:	bf00      	nop
  4025cc:	0040381c 	.word	0x0040381c
  4025d0:	20000000 	.word	0x20000000
  4025d4:	2000043c 	.word	0x2000043c
  4025d8:	2000043c 	.word	0x2000043c
  4025dc:	20018fd8 	.word	0x20018fd8
  4025e0:	00400000 	.word	0x00400000
  4025e4:	e000ed00 	.word	0xe000ed00
  4025e8:	00402d69 	.word	0x00402d69
  4025ec:	004028c9 	.word	0x004028c9

004025f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4025f0:	b480      	push	{r7}
  4025f2:	af00      	add	r7, sp, #0
	while (1) {
  4025f4:	e7fe      	b.n	4025f4 <Dummy_Handler+0x4>
	...

004025f8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4025f8:	b480      	push	{r7}
  4025fa:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4025fc:	4b5d      	ldr	r3, [pc, #372]	; (402774 <SystemCoreClockUpdate+0x17c>)
  4025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402600:	f003 0303 	and.w	r3, r3, #3
  402604:	2b03      	cmp	r3, #3
  402606:	f200 8096 	bhi.w	402736 <SystemCoreClockUpdate+0x13e>
  40260a:	a201      	add	r2, pc, #4	; (adr r2, 402610 <SystemCoreClockUpdate+0x18>)
  40260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402610:	00402621 	.word	0x00402621
  402614:	00402641 	.word	0x00402641
  402618:	0040268b 	.word	0x0040268b
  40261c:	0040268b 	.word	0x0040268b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402620:	4b55      	ldr	r3, [pc, #340]	; (402778 <SystemCoreClockUpdate+0x180>)
  402622:	695b      	ldr	r3, [r3, #20]
  402624:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402628:	2b00      	cmp	r3, #0
  40262a:	d004      	beq.n	402636 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40262c:	4b53      	ldr	r3, [pc, #332]	; (40277c <SystemCoreClockUpdate+0x184>)
  40262e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402632:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402634:	e080      	b.n	402738 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402636:	4b51      	ldr	r3, [pc, #324]	; (40277c <SystemCoreClockUpdate+0x184>)
  402638:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40263c:	601a      	str	r2, [r3, #0]
		break;
  40263e:	e07b      	b.n	402738 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402640:	4b4c      	ldr	r3, [pc, #304]	; (402774 <SystemCoreClockUpdate+0x17c>)
  402642:	6a1b      	ldr	r3, [r3, #32]
  402644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402648:	2b00      	cmp	r3, #0
  40264a:	d003      	beq.n	402654 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40264c:	4b4b      	ldr	r3, [pc, #300]	; (40277c <SystemCoreClockUpdate+0x184>)
  40264e:	4a4c      	ldr	r2, [pc, #304]	; (402780 <SystemCoreClockUpdate+0x188>)
  402650:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402652:	e071      	b.n	402738 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402654:	4b49      	ldr	r3, [pc, #292]	; (40277c <SystemCoreClockUpdate+0x184>)
  402656:	4a4b      	ldr	r2, [pc, #300]	; (402784 <SystemCoreClockUpdate+0x18c>)
  402658:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40265a:	4b46      	ldr	r3, [pc, #280]	; (402774 <SystemCoreClockUpdate+0x17c>)
  40265c:	6a1b      	ldr	r3, [r3, #32]
  40265e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402662:	2b10      	cmp	r3, #16
  402664:	d008      	beq.n	402678 <SystemCoreClockUpdate+0x80>
  402666:	2b20      	cmp	r3, #32
  402668:	d00a      	beq.n	402680 <SystemCoreClockUpdate+0x88>
  40266a:	2b00      	cmp	r3, #0
  40266c:	d000      	beq.n	402670 <SystemCoreClockUpdate+0x78>
			break;
  40266e:	e00b      	b.n	402688 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402670:	4b42      	ldr	r3, [pc, #264]	; (40277c <SystemCoreClockUpdate+0x184>)
  402672:	4a44      	ldr	r2, [pc, #272]	; (402784 <SystemCoreClockUpdate+0x18c>)
  402674:	601a      	str	r2, [r3, #0]
			break;
  402676:	e007      	b.n	402688 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402678:	4b40      	ldr	r3, [pc, #256]	; (40277c <SystemCoreClockUpdate+0x184>)
  40267a:	4a43      	ldr	r2, [pc, #268]	; (402788 <SystemCoreClockUpdate+0x190>)
  40267c:	601a      	str	r2, [r3, #0]
			break;
  40267e:	e003      	b.n	402688 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402680:	4b3e      	ldr	r3, [pc, #248]	; (40277c <SystemCoreClockUpdate+0x184>)
  402682:	4a3f      	ldr	r2, [pc, #252]	; (402780 <SystemCoreClockUpdate+0x188>)
  402684:	601a      	str	r2, [r3, #0]
			break;
  402686:	bf00      	nop
		break;
  402688:	e056      	b.n	402738 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40268a:	4b3a      	ldr	r3, [pc, #232]	; (402774 <SystemCoreClockUpdate+0x17c>)
  40268c:	6a1b      	ldr	r3, [r3, #32]
  40268e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402692:	2b00      	cmp	r3, #0
  402694:	d003      	beq.n	40269e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402696:	4b39      	ldr	r3, [pc, #228]	; (40277c <SystemCoreClockUpdate+0x184>)
  402698:	4a39      	ldr	r2, [pc, #228]	; (402780 <SystemCoreClockUpdate+0x188>)
  40269a:	601a      	str	r2, [r3, #0]
  40269c:	e019      	b.n	4026d2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40269e:	4b37      	ldr	r3, [pc, #220]	; (40277c <SystemCoreClockUpdate+0x184>)
  4026a0:	4a38      	ldr	r2, [pc, #224]	; (402784 <SystemCoreClockUpdate+0x18c>)
  4026a2:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4026a4:	4b33      	ldr	r3, [pc, #204]	; (402774 <SystemCoreClockUpdate+0x17c>)
  4026a6:	6a1b      	ldr	r3, [r3, #32]
  4026a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026ac:	2b10      	cmp	r3, #16
  4026ae:	d008      	beq.n	4026c2 <SystemCoreClockUpdate+0xca>
  4026b0:	2b20      	cmp	r3, #32
  4026b2:	d00a      	beq.n	4026ca <SystemCoreClockUpdate+0xd2>
  4026b4:	2b00      	cmp	r3, #0
  4026b6:	d000      	beq.n	4026ba <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4026b8:	e00b      	b.n	4026d2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4026ba:	4b30      	ldr	r3, [pc, #192]	; (40277c <SystemCoreClockUpdate+0x184>)
  4026bc:	4a31      	ldr	r2, [pc, #196]	; (402784 <SystemCoreClockUpdate+0x18c>)
  4026be:	601a      	str	r2, [r3, #0]
					break;
  4026c0:	e007      	b.n	4026d2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4026c2:	4b2e      	ldr	r3, [pc, #184]	; (40277c <SystemCoreClockUpdate+0x184>)
  4026c4:	4a30      	ldr	r2, [pc, #192]	; (402788 <SystemCoreClockUpdate+0x190>)
  4026c6:	601a      	str	r2, [r3, #0]
					break;
  4026c8:	e003      	b.n	4026d2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4026ca:	4b2c      	ldr	r3, [pc, #176]	; (40277c <SystemCoreClockUpdate+0x184>)
  4026cc:	4a2c      	ldr	r2, [pc, #176]	; (402780 <SystemCoreClockUpdate+0x188>)
  4026ce:	601a      	str	r2, [r3, #0]
					break;
  4026d0:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4026d2:	4b28      	ldr	r3, [pc, #160]	; (402774 <SystemCoreClockUpdate+0x17c>)
  4026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026d6:	f003 0303 	and.w	r3, r3, #3
  4026da:	2b02      	cmp	r3, #2
  4026dc:	d115      	bne.n	40270a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4026de:	4b25      	ldr	r3, [pc, #148]	; (402774 <SystemCoreClockUpdate+0x17c>)
  4026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4026e2:	0c1b      	lsrs	r3, r3, #16
  4026e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4026e8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4026ea:	4a24      	ldr	r2, [pc, #144]	; (40277c <SystemCoreClockUpdate+0x184>)
  4026ec:	6812      	ldr	r2, [r2, #0]
  4026ee:	fb02 f303 	mul.w	r3, r2, r3
  4026f2:	4a22      	ldr	r2, [pc, #136]	; (40277c <SystemCoreClockUpdate+0x184>)
  4026f4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4026f6:	4b1f      	ldr	r3, [pc, #124]	; (402774 <SystemCoreClockUpdate+0x17c>)
  4026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4026fa:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4026fc:	4a1f      	ldr	r2, [pc, #124]	; (40277c <SystemCoreClockUpdate+0x184>)
  4026fe:	6812      	ldr	r2, [r2, #0]
  402700:	fbb2 f3f3 	udiv	r3, r2, r3
  402704:	4a1d      	ldr	r2, [pc, #116]	; (40277c <SystemCoreClockUpdate+0x184>)
  402706:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402708:	e016      	b.n	402738 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40270a:	4b1a      	ldr	r3, [pc, #104]	; (402774 <SystemCoreClockUpdate+0x17c>)
  40270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40270e:	0c1b      	lsrs	r3, r3, #16
  402710:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402714:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402716:	4a19      	ldr	r2, [pc, #100]	; (40277c <SystemCoreClockUpdate+0x184>)
  402718:	6812      	ldr	r2, [r2, #0]
  40271a:	fb02 f303 	mul.w	r3, r2, r3
  40271e:	4a17      	ldr	r2, [pc, #92]	; (40277c <SystemCoreClockUpdate+0x184>)
  402720:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402722:	4b14      	ldr	r3, [pc, #80]	; (402774 <SystemCoreClockUpdate+0x17c>)
  402724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402726:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402728:	4a14      	ldr	r2, [pc, #80]	; (40277c <SystemCoreClockUpdate+0x184>)
  40272a:	6812      	ldr	r2, [r2, #0]
  40272c:	fbb2 f3f3 	udiv	r3, r2, r3
  402730:	4a12      	ldr	r2, [pc, #72]	; (40277c <SystemCoreClockUpdate+0x184>)
  402732:	6013      	str	r3, [r2, #0]
		break;
  402734:	e000      	b.n	402738 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402736:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402738:	4b0e      	ldr	r3, [pc, #56]	; (402774 <SystemCoreClockUpdate+0x17c>)
  40273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40273c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402740:	2b70      	cmp	r3, #112	; 0x70
  402742:	d108      	bne.n	402756 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402744:	4b0d      	ldr	r3, [pc, #52]	; (40277c <SystemCoreClockUpdate+0x184>)
  402746:	681b      	ldr	r3, [r3, #0]
  402748:	4a10      	ldr	r2, [pc, #64]	; (40278c <SystemCoreClockUpdate+0x194>)
  40274a:	fba2 2303 	umull	r2, r3, r2, r3
  40274e:	085b      	lsrs	r3, r3, #1
  402750:	4a0a      	ldr	r2, [pc, #40]	; (40277c <SystemCoreClockUpdate+0x184>)
  402752:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402754:	e00a      	b.n	40276c <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402756:	4b07      	ldr	r3, [pc, #28]	; (402774 <SystemCoreClockUpdate+0x17c>)
  402758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40275a:	091b      	lsrs	r3, r3, #4
  40275c:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402760:	4a06      	ldr	r2, [pc, #24]	; (40277c <SystemCoreClockUpdate+0x184>)
  402762:	6812      	ldr	r2, [r2, #0]
  402764:	fa22 f303 	lsr.w	r3, r2, r3
  402768:	4a04      	ldr	r2, [pc, #16]	; (40277c <SystemCoreClockUpdate+0x184>)
  40276a:	6013      	str	r3, [r2, #0]
}
  40276c:	bf00      	nop
  40276e:	46bd      	mov	sp, r7
  402770:	bc80      	pop	{r7}
  402772:	4770      	bx	lr
  402774:	400e0400 	.word	0x400e0400
  402778:	400e1410 	.word	0x400e1410
  40277c:	2000000c 	.word	0x2000000c
  402780:	00b71b00 	.word	0x00b71b00
  402784:	003d0900 	.word	0x003d0900
  402788:	007a1200 	.word	0x007a1200
  40278c:	aaaaaaab 	.word	0xaaaaaaab

00402790 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402790:	b480      	push	{r7}
  402792:	b083      	sub	sp, #12
  402794:	af00      	add	r7, sp, #0
  402796:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402798:	687b      	ldr	r3, [r7, #4]
  40279a:	4a18      	ldr	r2, [pc, #96]	; (4027fc <system_init_flash+0x6c>)
  40279c:	4293      	cmp	r3, r2
  40279e:	d804      	bhi.n	4027aa <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4027a0:	4b17      	ldr	r3, [pc, #92]	; (402800 <system_init_flash+0x70>)
  4027a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4027a6:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4027a8:	e023      	b.n	4027f2 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4027aa:	687b      	ldr	r3, [r7, #4]
  4027ac:	4a15      	ldr	r2, [pc, #84]	; (402804 <system_init_flash+0x74>)
  4027ae:	4293      	cmp	r3, r2
  4027b0:	d803      	bhi.n	4027ba <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4027b2:	4b13      	ldr	r3, [pc, #76]	; (402800 <system_init_flash+0x70>)
  4027b4:	4a14      	ldr	r2, [pc, #80]	; (402808 <system_init_flash+0x78>)
  4027b6:	601a      	str	r2, [r3, #0]
}
  4027b8:	e01b      	b.n	4027f2 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4027ba:	687b      	ldr	r3, [r7, #4]
  4027bc:	4a13      	ldr	r2, [pc, #76]	; (40280c <system_init_flash+0x7c>)
  4027be:	4293      	cmp	r3, r2
  4027c0:	d803      	bhi.n	4027ca <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4027c2:	4b0f      	ldr	r3, [pc, #60]	; (402800 <system_init_flash+0x70>)
  4027c4:	4a12      	ldr	r2, [pc, #72]	; (402810 <system_init_flash+0x80>)
  4027c6:	601a      	str	r2, [r3, #0]
}
  4027c8:	e013      	b.n	4027f2 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4027ca:	687b      	ldr	r3, [r7, #4]
  4027cc:	4a11      	ldr	r2, [pc, #68]	; (402814 <system_init_flash+0x84>)
  4027ce:	4293      	cmp	r3, r2
  4027d0:	d803      	bhi.n	4027da <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4027d2:	4b0b      	ldr	r3, [pc, #44]	; (402800 <system_init_flash+0x70>)
  4027d4:	4a10      	ldr	r2, [pc, #64]	; (402818 <system_init_flash+0x88>)
  4027d6:	601a      	str	r2, [r3, #0]
}
  4027d8:	e00b      	b.n	4027f2 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4027da:	687b      	ldr	r3, [r7, #4]
  4027dc:	4a0f      	ldr	r2, [pc, #60]	; (40281c <system_init_flash+0x8c>)
  4027de:	4293      	cmp	r3, r2
  4027e0:	d804      	bhi.n	4027ec <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4027e2:	4b07      	ldr	r3, [pc, #28]	; (402800 <system_init_flash+0x70>)
  4027e4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4027e8:	601a      	str	r2, [r3, #0]
}
  4027ea:	e002      	b.n	4027f2 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4027ec:	4b04      	ldr	r3, [pc, #16]	; (402800 <system_init_flash+0x70>)
  4027ee:	4a0c      	ldr	r2, [pc, #48]	; (402820 <system_init_flash+0x90>)
  4027f0:	601a      	str	r2, [r3, #0]
}
  4027f2:	bf00      	nop
  4027f4:	370c      	adds	r7, #12
  4027f6:	46bd      	mov	sp, r7
  4027f8:	bc80      	pop	{r7}
  4027fa:	4770      	bx	lr
  4027fc:	01312cff 	.word	0x01312cff
  402800:	400e0a00 	.word	0x400e0a00
  402804:	026259ff 	.word	0x026259ff
  402808:	04000100 	.word	0x04000100
  40280c:	039386ff 	.word	0x039386ff
  402810:	04000200 	.word	0x04000200
  402814:	04c4b3ff 	.word	0x04c4b3ff
  402818:	04000300 	.word	0x04000300
  40281c:	05f5e0ff 	.word	0x05f5e0ff
  402820:	04000500 	.word	0x04000500

00402824 <osc_get_rate>:
{
  402824:	b480      	push	{r7}
  402826:	b083      	sub	sp, #12
  402828:	af00      	add	r7, sp, #0
  40282a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40282c:	687b      	ldr	r3, [r7, #4]
  40282e:	2b07      	cmp	r3, #7
  402830:	d825      	bhi.n	40287e <osc_get_rate+0x5a>
  402832:	a201      	add	r2, pc, #4	; (adr r2, 402838 <osc_get_rate+0x14>)
  402834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402838:	00402859 	.word	0x00402859
  40283c:	0040285f 	.word	0x0040285f
  402840:	00402865 	.word	0x00402865
  402844:	0040286b 	.word	0x0040286b
  402848:	0040286f 	.word	0x0040286f
  40284c:	00402873 	.word	0x00402873
  402850:	00402877 	.word	0x00402877
  402854:	0040287b 	.word	0x0040287b
		return OSC_SLCK_32K_RC_HZ;
  402858:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40285c:	e010      	b.n	402880 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402862:	e00d      	b.n	402880 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402868:	e00a      	b.n	402880 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40286a:	4b08      	ldr	r3, [pc, #32]	; (40288c <osc_get_rate+0x68>)
  40286c:	e008      	b.n	402880 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40286e:	4b08      	ldr	r3, [pc, #32]	; (402890 <osc_get_rate+0x6c>)
  402870:	e006      	b.n	402880 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402872:	4b08      	ldr	r3, [pc, #32]	; (402894 <osc_get_rate+0x70>)
  402874:	e004      	b.n	402880 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402876:	4b07      	ldr	r3, [pc, #28]	; (402894 <osc_get_rate+0x70>)
  402878:	e002      	b.n	402880 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40287a:	4b06      	ldr	r3, [pc, #24]	; (402894 <osc_get_rate+0x70>)
  40287c:	e000      	b.n	402880 <osc_get_rate+0x5c>
	return 0;
  40287e:	2300      	movs	r3, #0
}
  402880:	4618      	mov	r0, r3
  402882:	370c      	adds	r7, #12
  402884:	46bd      	mov	sp, r7
  402886:	bc80      	pop	{r7}
  402888:	4770      	bx	lr
  40288a:	bf00      	nop
  40288c:	003d0900 	.word	0x003d0900
  402890:	007a1200 	.word	0x007a1200
  402894:	00b71b00 	.word	0x00b71b00

00402898 <sysclk_get_main_hz>:
{
  402898:	b580      	push	{r7, lr}
  40289a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40289c:	2006      	movs	r0, #6
  40289e:	4b04      	ldr	r3, [pc, #16]	; (4028b0 <sysclk_get_main_hz+0x18>)
  4028a0:	4798      	blx	r3
  4028a2:	4602      	mov	r2, r0
  4028a4:	4613      	mov	r3, r2
  4028a6:	009b      	lsls	r3, r3, #2
  4028a8:	4413      	add	r3, r2
  4028aa:	009b      	lsls	r3, r3, #2
}
  4028ac:	4618      	mov	r0, r3
  4028ae:	bd80      	pop	{r7, pc}
  4028b0:	00402825 	.word	0x00402825

004028b4 <sysclk_get_cpu_hz>:
{
  4028b4:	b580      	push	{r7, lr}
  4028b6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4028b8:	4b02      	ldr	r3, [pc, #8]	; (4028c4 <sysclk_get_cpu_hz+0x10>)
  4028ba:	4798      	blx	r3
  4028bc:	4603      	mov	r3, r0
  4028be:	085b      	lsrs	r3, r3, #1
}
  4028c0:	4618      	mov	r0, r3
  4028c2:	bd80      	pop	{r7, pc}
  4028c4:	00402899 	.word	0x00402899

004028c8 <main>:
// Global variables because 2/3 of us are mechanical engineers and that's just how we roll
volatile uint32_t receivedMessage;


int main (void)
{
  4028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028cc:	b089      	sub	sp, #36	; 0x24
  4028ce:	af00      	add	r7, sp, #0
	// boilerplate
	sysclk_init();
  4028d0:	4b51      	ldr	r3, [pc, #324]	; (402a18 <main+0x150>)
  4028d2:	4798      	blx	r3
	wdt_disable(WDT);
  4028d4:	4851      	ldr	r0, [pc, #324]	; (402a1c <main+0x154>)
  4028d6:	4b52      	ldr	r3, [pc, #328]	; (402a20 <main+0x158>)
  4028d8:	4798      	blx	r3
	board_init();
  4028da:	4b52      	ldr	r3, [pc, #328]	; (402a24 <main+0x15c>)
  4028dc:	4798      	blx	r3
	
	
	// start the clock that counts the seconds
	configure_tc();
  4028de:	4b52      	ldr	r3, [pc, #328]	; (402a28 <main+0x160>)
  4028e0:	4798      	blx	r3
	tc_start(TC0, 0);
  4028e2:	2100      	movs	r1, #0
  4028e4:	4851      	ldr	r0, [pc, #324]	; (402a2c <main+0x164>)
  4028e6:	4b52      	ldr	r3, [pc, #328]	; (402a30 <main+0x168>)
  4028e8:	4798      	blx	r3

	// Configure the Wifi UART communication stuff
	configure_usart_wifi();
  4028ea:	4b52      	ldr	r3, [pc, #328]	; (402a34 <main+0x16c>)
  4028ec:	4798      	blx	r3
	configure_wifi_comm_pin();
  4028ee:	4b52      	ldr	r3, [pc, #328]	; (402a38 <main+0x170>)
  4028f0:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  4028f2:	4b52      	ldr	r3, [pc, #328]	; (402a3c <main+0x174>)
  4028f4:	4798      	blx	r3
	
	// Configure SWD Stuff
	setupSWDPins();
  4028f6:	4b52      	ldr	r3, [pc, #328]	; (402a40 <main+0x178>)
  4028f8:	4798      	blx	r3
	
	// Reset the wifi
	resetWifi();
  4028fa:	4b52      	ldr	r3, [pc, #328]	; (402a44 <main+0x17c>)
  4028fc:	4798      	blx	r3
	delay_ms(8000);
  4028fe:	4b52      	ldr	r3, [pc, #328]	; (402a48 <main+0x180>)
  402900:	4798      	blx	r3
  402902:	4603      	mov	r3, r0
  402904:	4619      	mov	r1, r3
  402906:	f04f 0200 	mov.w	r2, #0
  40290a:	460b      	mov	r3, r1
  40290c:	4614      	mov	r4, r2
  40290e:	0166      	lsls	r6, r4, #5
  402910:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402914:	015d      	lsls	r5, r3, #5
  402916:	462b      	mov	r3, r5
  402918:	4634      	mov	r4, r6
  40291a:	1a5b      	subs	r3, r3, r1
  40291c:	eb64 0402 	sbc.w	r4, r4, r2
  402920:	ea4f 0984 	mov.w	r9, r4, lsl #2
  402924:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  402928:	ea4f 0883 	mov.w	r8, r3, lsl #2
  40292c:	4643      	mov	r3, r8
  40292e:	464c      	mov	r4, r9
  402930:	185b      	adds	r3, r3, r1
  402932:	eb44 0402 	adc.w	r4, r4, r2
  402936:	ea4f 1b84 	mov.w	fp, r4, lsl #6
  40293a:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
  40293e:	ea4f 1a83 	mov.w	sl, r3, lsl #6
  402942:	4653      	mov	r3, sl
  402944:	465c      	mov	r4, fp
  402946:	4619      	mov	r1, r3
  402948:	4622      	mov	r2, r4
  40294a:	f243 63af 	movw	r3, #13999	; 0x36af
  40294e:	f04f 0400 	mov.w	r4, #0
  402952:	18cd      	adds	r5, r1, r3
  402954:	eb42 0604 	adc.w	r6, r2, r4
  402958:	4628      	mov	r0, r5
  40295a:	4631      	mov	r1, r6
  40295c:	4c3b      	ldr	r4, [pc, #236]	; (402a4c <main+0x184>)
  40295e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402962:	f04f 0300 	mov.w	r3, #0
  402966:	47a0      	blx	r4
  402968:	4603      	mov	r3, r0
  40296a:	460c      	mov	r4, r1
  40296c:	4618      	mov	r0, r3
  40296e:	4b38      	ldr	r3, [pc, #224]	; (402a50 <main+0x188>)
  402970:	4798      	blx	r3
		// If GoFile says go, then do things, otherwise wait
		//if(checkGoFile()){
		if(1){
			//Load_Hex_File();
			//Clear_Target();
			SWD_Start();
  402972:	4b38      	ldr	r3, [pc, #224]	; (402a54 <main+0x18c>)
  402974:	4798      	blx	r3
			//SWD_Cleanup();
		}
		else{
			delay_ms(5000);
		}
		delay_ms(5000);///xxxxxxxxxxxxxxxxxxxxxDELETE_MExxxxxxxxxxxxx
  402976:	4b34      	ldr	r3, [pc, #208]	; (402a48 <main+0x180>)
  402978:	4798      	blx	r3
  40297a:	4603      	mov	r3, r0
  40297c:	4619      	mov	r1, r3
  40297e:	f04f 0200 	mov.w	r2, #0
  402982:	460b      	mov	r3, r1
  402984:	4614      	mov	r4, r2
  402986:	00a0      	lsls	r0, r4, #2
  402988:	61f8      	str	r0, [r7, #28]
  40298a:	69f8      	ldr	r0, [r7, #28]
  40298c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  402990:	61f8      	str	r0, [r7, #28]
  402992:	009b      	lsls	r3, r3, #2
  402994:	61bb      	str	r3, [r7, #24]
  402996:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  40299a:	185b      	adds	r3, r3, r1
  40299c:	eb44 0402 	adc.w	r4, r4, r2
  4029a0:	00e0      	lsls	r0, r4, #3
  4029a2:	6178      	str	r0, [r7, #20]
  4029a4:	6978      	ldr	r0, [r7, #20]
  4029a6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  4029aa:	6178      	str	r0, [r7, #20]
  4029ac:	00db      	lsls	r3, r3, #3
  4029ae:	613b      	str	r3, [r7, #16]
  4029b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  4029b4:	1a5b      	subs	r3, r3, r1
  4029b6:	eb64 0402 	sbc.w	r4, r4, r2
  4029ba:	0120      	lsls	r0, r4, #4
  4029bc:	60f8      	str	r0, [r7, #12]
  4029be:	68f8      	ldr	r0, [r7, #12]
  4029c0:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  4029c4:	60f8      	str	r0, [r7, #12]
  4029c6:	011b      	lsls	r3, r3, #4
  4029c8:	60bb      	str	r3, [r7, #8]
  4029ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4029ce:	185b      	adds	r3, r3, r1
  4029d0:	eb44 0402 	adc.w	r4, r4, r2
  4029d4:	00e2      	lsls	r2, r4, #3
  4029d6:	607a      	str	r2, [r7, #4]
  4029d8:	687a      	ldr	r2, [r7, #4]
  4029da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  4029de:	607a      	str	r2, [r7, #4]
  4029e0:	00db      	lsls	r3, r3, #3
  4029e2:	603b      	str	r3, [r7, #0]
  4029e4:	e9d7 3400 	ldrd	r3, r4, [r7]
  4029e8:	4619      	mov	r1, r3
  4029ea:	4622      	mov	r2, r4
  4029ec:	f243 63af 	movw	r3, #13999	; 0x36af
  4029f0:	f04f 0400 	mov.w	r4, #0
  4029f4:	18cd      	adds	r5, r1, r3
  4029f6:	eb42 0604 	adc.w	r6, r2, r4
  4029fa:	4628      	mov	r0, r5
  4029fc:	4631      	mov	r1, r6
  4029fe:	4c13      	ldr	r4, [pc, #76]	; (402a4c <main+0x184>)
  402a00:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402a04:	f04f 0300 	mov.w	r3, #0
  402a08:	47a0      	blx	r4
  402a0a:	4603      	mov	r3, r0
  402a0c:	460c      	mov	r4, r1
  402a0e:	4618      	mov	r0, r3
  402a10:	4b0f      	ldr	r3, [pc, #60]	; (402a50 <main+0x188>)
  402a12:	4798      	blx	r3
		if(1){
  402a14:	e7ad      	b.n	402972 <main+0xaa>
  402a16:	bf00      	nop
  402a18:	00401a2d 	.word	0x00401a2d
  402a1c:	400e1450 	.word	0x400e1450
  402a20:	004005d5 	.word	0x004005d5
  402a24:	004024e9 	.word	0x004024e9
  402a28:	00401099 	.word	0x00401099
  402a2c:	40010000 	.word	0x40010000
  402a30:	00402295 	.word	0x00402295
  402a34:	00401499 	.word	0x00401499
  402a38:	00401561 	.word	0x00401561
  402a3c:	004015c1 	.word	0x004015c1
  402a40:	004008ed 	.word	0x004008ed
  402a44:	00401619 	.word	0x00401619
  402a48:	004028b5 	.word	0x004028b5
  402a4c:	00402a59 	.word	0x00402a59
  402a50:	20000001 	.word	0x20000001
  402a54:	00400e9d 	.word	0x00400e9d

00402a58 <__aeabi_uldivmod>:
  402a58:	b953      	cbnz	r3, 402a70 <__aeabi_uldivmod+0x18>
  402a5a:	b94a      	cbnz	r2, 402a70 <__aeabi_uldivmod+0x18>
  402a5c:	2900      	cmp	r1, #0
  402a5e:	bf08      	it	eq
  402a60:	2800      	cmpeq	r0, #0
  402a62:	bf1c      	itt	ne
  402a64:	f04f 31ff 	movne.w	r1, #4294967295
  402a68:	f04f 30ff 	movne.w	r0, #4294967295
  402a6c:	f000 b97a 	b.w	402d64 <__aeabi_idiv0>
  402a70:	f1ad 0c08 	sub.w	ip, sp, #8
  402a74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402a78:	f000 f806 	bl	402a88 <__udivmoddi4>
  402a7c:	f8dd e004 	ldr.w	lr, [sp, #4]
  402a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402a84:	b004      	add	sp, #16
  402a86:	4770      	bx	lr

00402a88 <__udivmoddi4>:
  402a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a8c:	468c      	mov	ip, r1
  402a8e:	460d      	mov	r5, r1
  402a90:	4604      	mov	r4, r0
  402a92:	9e08      	ldr	r6, [sp, #32]
  402a94:	2b00      	cmp	r3, #0
  402a96:	d151      	bne.n	402b3c <__udivmoddi4+0xb4>
  402a98:	428a      	cmp	r2, r1
  402a9a:	4617      	mov	r7, r2
  402a9c:	d96d      	bls.n	402b7a <__udivmoddi4+0xf2>
  402a9e:	fab2 fe82 	clz	lr, r2
  402aa2:	f1be 0f00 	cmp.w	lr, #0
  402aa6:	d00b      	beq.n	402ac0 <__udivmoddi4+0x38>
  402aa8:	f1ce 0c20 	rsb	ip, lr, #32
  402aac:	fa01 f50e 	lsl.w	r5, r1, lr
  402ab0:	fa20 fc0c 	lsr.w	ip, r0, ip
  402ab4:	fa02 f70e 	lsl.w	r7, r2, lr
  402ab8:	ea4c 0c05 	orr.w	ip, ip, r5
  402abc:	fa00 f40e 	lsl.w	r4, r0, lr
  402ac0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402ac4:	0c25      	lsrs	r5, r4, #16
  402ac6:	fbbc f8fa 	udiv	r8, ip, sl
  402aca:	fa1f f987 	uxth.w	r9, r7
  402ace:	fb0a cc18 	mls	ip, sl, r8, ip
  402ad2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402ad6:	fb08 f309 	mul.w	r3, r8, r9
  402ada:	42ab      	cmp	r3, r5
  402adc:	d90a      	bls.n	402af4 <__udivmoddi4+0x6c>
  402ade:	19ed      	adds	r5, r5, r7
  402ae0:	f108 32ff 	add.w	r2, r8, #4294967295
  402ae4:	f080 8123 	bcs.w	402d2e <__udivmoddi4+0x2a6>
  402ae8:	42ab      	cmp	r3, r5
  402aea:	f240 8120 	bls.w	402d2e <__udivmoddi4+0x2a6>
  402aee:	f1a8 0802 	sub.w	r8, r8, #2
  402af2:	443d      	add	r5, r7
  402af4:	1aed      	subs	r5, r5, r3
  402af6:	b2a4      	uxth	r4, r4
  402af8:	fbb5 f0fa 	udiv	r0, r5, sl
  402afc:	fb0a 5510 	mls	r5, sl, r0, r5
  402b00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402b04:	fb00 f909 	mul.w	r9, r0, r9
  402b08:	45a1      	cmp	r9, r4
  402b0a:	d909      	bls.n	402b20 <__udivmoddi4+0x98>
  402b0c:	19e4      	adds	r4, r4, r7
  402b0e:	f100 33ff 	add.w	r3, r0, #4294967295
  402b12:	f080 810a 	bcs.w	402d2a <__udivmoddi4+0x2a2>
  402b16:	45a1      	cmp	r9, r4
  402b18:	f240 8107 	bls.w	402d2a <__udivmoddi4+0x2a2>
  402b1c:	3802      	subs	r0, #2
  402b1e:	443c      	add	r4, r7
  402b20:	eba4 0409 	sub.w	r4, r4, r9
  402b24:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402b28:	2100      	movs	r1, #0
  402b2a:	2e00      	cmp	r6, #0
  402b2c:	d061      	beq.n	402bf2 <__udivmoddi4+0x16a>
  402b2e:	fa24 f40e 	lsr.w	r4, r4, lr
  402b32:	2300      	movs	r3, #0
  402b34:	6034      	str	r4, [r6, #0]
  402b36:	6073      	str	r3, [r6, #4]
  402b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b3c:	428b      	cmp	r3, r1
  402b3e:	d907      	bls.n	402b50 <__udivmoddi4+0xc8>
  402b40:	2e00      	cmp	r6, #0
  402b42:	d054      	beq.n	402bee <__udivmoddi4+0x166>
  402b44:	2100      	movs	r1, #0
  402b46:	e886 0021 	stmia.w	r6, {r0, r5}
  402b4a:	4608      	mov	r0, r1
  402b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b50:	fab3 f183 	clz	r1, r3
  402b54:	2900      	cmp	r1, #0
  402b56:	f040 808e 	bne.w	402c76 <__udivmoddi4+0x1ee>
  402b5a:	42ab      	cmp	r3, r5
  402b5c:	d302      	bcc.n	402b64 <__udivmoddi4+0xdc>
  402b5e:	4282      	cmp	r2, r0
  402b60:	f200 80fa 	bhi.w	402d58 <__udivmoddi4+0x2d0>
  402b64:	1a84      	subs	r4, r0, r2
  402b66:	eb65 0503 	sbc.w	r5, r5, r3
  402b6a:	2001      	movs	r0, #1
  402b6c:	46ac      	mov	ip, r5
  402b6e:	2e00      	cmp	r6, #0
  402b70:	d03f      	beq.n	402bf2 <__udivmoddi4+0x16a>
  402b72:	e886 1010 	stmia.w	r6, {r4, ip}
  402b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b7a:	b912      	cbnz	r2, 402b82 <__udivmoddi4+0xfa>
  402b7c:	2701      	movs	r7, #1
  402b7e:	fbb7 f7f2 	udiv	r7, r7, r2
  402b82:	fab7 fe87 	clz	lr, r7
  402b86:	f1be 0f00 	cmp.w	lr, #0
  402b8a:	d134      	bne.n	402bf6 <__udivmoddi4+0x16e>
  402b8c:	1beb      	subs	r3, r5, r7
  402b8e:	0c3a      	lsrs	r2, r7, #16
  402b90:	fa1f fc87 	uxth.w	ip, r7
  402b94:	2101      	movs	r1, #1
  402b96:	fbb3 f8f2 	udiv	r8, r3, r2
  402b9a:	0c25      	lsrs	r5, r4, #16
  402b9c:	fb02 3318 	mls	r3, r2, r8, r3
  402ba0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402ba4:	fb0c f308 	mul.w	r3, ip, r8
  402ba8:	42ab      	cmp	r3, r5
  402baa:	d907      	bls.n	402bbc <__udivmoddi4+0x134>
  402bac:	19ed      	adds	r5, r5, r7
  402bae:	f108 30ff 	add.w	r0, r8, #4294967295
  402bb2:	d202      	bcs.n	402bba <__udivmoddi4+0x132>
  402bb4:	42ab      	cmp	r3, r5
  402bb6:	f200 80d1 	bhi.w	402d5c <__udivmoddi4+0x2d4>
  402bba:	4680      	mov	r8, r0
  402bbc:	1aed      	subs	r5, r5, r3
  402bbe:	b2a3      	uxth	r3, r4
  402bc0:	fbb5 f0f2 	udiv	r0, r5, r2
  402bc4:	fb02 5510 	mls	r5, r2, r0, r5
  402bc8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402bcc:	fb0c fc00 	mul.w	ip, ip, r0
  402bd0:	45a4      	cmp	ip, r4
  402bd2:	d907      	bls.n	402be4 <__udivmoddi4+0x15c>
  402bd4:	19e4      	adds	r4, r4, r7
  402bd6:	f100 33ff 	add.w	r3, r0, #4294967295
  402bda:	d202      	bcs.n	402be2 <__udivmoddi4+0x15a>
  402bdc:	45a4      	cmp	ip, r4
  402bde:	f200 80b8 	bhi.w	402d52 <__udivmoddi4+0x2ca>
  402be2:	4618      	mov	r0, r3
  402be4:	eba4 040c 	sub.w	r4, r4, ip
  402be8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402bec:	e79d      	b.n	402b2a <__udivmoddi4+0xa2>
  402bee:	4631      	mov	r1, r6
  402bf0:	4630      	mov	r0, r6
  402bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bf6:	f1ce 0420 	rsb	r4, lr, #32
  402bfa:	fa05 f30e 	lsl.w	r3, r5, lr
  402bfe:	fa07 f70e 	lsl.w	r7, r7, lr
  402c02:	fa20 f804 	lsr.w	r8, r0, r4
  402c06:	0c3a      	lsrs	r2, r7, #16
  402c08:	fa25 f404 	lsr.w	r4, r5, r4
  402c0c:	ea48 0803 	orr.w	r8, r8, r3
  402c10:	fbb4 f1f2 	udiv	r1, r4, r2
  402c14:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402c18:	fb02 4411 	mls	r4, r2, r1, r4
  402c1c:	fa1f fc87 	uxth.w	ip, r7
  402c20:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402c24:	fb01 f30c 	mul.w	r3, r1, ip
  402c28:	42ab      	cmp	r3, r5
  402c2a:	fa00 f40e 	lsl.w	r4, r0, lr
  402c2e:	d909      	bls.n	402c44 <__udivmoddi4+0x1bc>
  402c30:	19ed      	adds	r5, r5, r7
  402c32:	f101 30ff 	add.w	r0, r1, #4294967295
  402c36:	f080 808a 	bcs.w	402d4e <__udivmoddi4+0x2c6>
  402c3a:	42ab      	cmp	r3, r5
  402c3c:	f240 8087 	bls.w	402d4e <__udivmoddi4+0x2c6>
  402c40:	3902      	subs	r1, #2
  402c42:	443d      	add	r5, r7
  402c44:	1aeb      	subs	r3, r5, r3
  402c46:	fa1f f588 	uxth.w	r5, r8
  402c4a:	fbb3 f0f2 	udiv	r0, r3, r2
  402c4e:	fb02 3310 	mls	r3, r2, r0, r3
  402c52:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402c56:	fb00 f30c 	mul.w	r3, r0, ip
  402c5a:	42ab      	cmp	r3, r5
  402c5c:	d907      	bls.n	402c6e <__udivmoddi4+0x1e6>
  402c5e:	19ed      	adds	r5, r5, r7
  402c60:	f100 38ff 	add.w	r8, r0, #4294967295
  402c64:	d26f      	bcs.n	402d46 <__udivmoddi4+0x2be>
  402c66:	42ab      	cmp	r3, r5
  402c68:	d96d      	bls.n	402d46 <__udivmoddi4+0x2be>
  402c6a:	3802      	subs	r0, #2
  402c6c:	443d      	add	r5, r7
  402c6e:	1aeb      	subs	r3, r5, r3
  402c70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402c74:	e78f      	b.n	402b96 <__udivmoddi4+0x10e>
  402c76:	f1c1 0720 	rsb	r7, r1, #32
  402c7a:	fa22 f807 	lsr.w	r8, r2, r7
  402c7e:	408b      	lsls	r3, r1
  402c80:	fa05 f401 	lsl.w	r4, r5, r1
  402c84:	ea48 0303 	orr.w	r3, r8, r3
  402c88:	fa20 fe07 	lsr.w	lr, r0, r7
  402c8c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402c90:	40fd      	lsrs	r5, r7
  402c92:	ea4e 0e04 	orr.w	lr, lr, r4
  402c96:	fbb5 f9fc 	udiv	r9, r5, ip
  402c9a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402c9e:	fb0c 5519 	mls	r5, ip, r9, r5
  402ca2:	fa1f f883 	uxth.w	r8, r3
  402ca6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402caa:	fb09 f408 	mul.w	r4, r9, r8
  402cae:	42ac      	cmp	r4, r5
  402cb0:	fa02 f201 	lsl.w	r2, r2, r1
  402cb4:	fa00 fa01 	lsl.w	sl, r0, r1
  402cb8:	d908      	bls.n	402ccc <__udivmoddi4+0x244>
  402cba:	18ed      	adds	r5, r5, r3
  402cbc:	f109 30ff 	add.w	r0, r9, #4294967295
  402cc0:	d243      	bcs.n	402d4a <__udivmoddi4+0x2c2>
  402cc2:	42ac      	cmp	r4, r5
  402cc4:	d941      	bls.n	402d4a <__udivmoddi4+0x2c2>
  402cc6:	f1a9 0902 	sub.w	r9, r9, #2
  402cca:	441d      	add	r5, r3
  402ccc:	1b2d      	subs	r5, r5, r4
  402cce:	fa1f fe8e 	uxth.w	lr, lr
  402cd2:	fbb5 f0fc 	udiv	r0, r5, ip
  402cd6:	fb0c 5510 	mls	r5, ip, r0, r5
  402cda:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402cde:	fb00 f808 	mul.w	r8, r0, r8
  402ce2:	45a0      	cmp	r8, r4
  402ce4:	d907      	bls.n	402cf6 <__udivmoddi4+0x26e>
  402ce6:	18e4      	adds	r4, r4, r3
  402ce8:	f100 35ff 	add.w	r5, r0, #4294967295
  402cec:	d229      	bcs.n	402d42 <__udivmoddi4+0x2ba>
  402cee:	45a0      	cmp	r8, r4
  402cf0:	d927      	bls.n	402d42 <__udivmoddi4+0x2ba>
  402cf2:	3802      	subs	r0, #2
  402cf4:	441c      	add	r4, r3
  402cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402cfa:	eba4 0408 	sub.w	r4, r4, r8
  402cfe:	fba0 8902 	umull	r8, r9, r0, r2
  402d02:	454c      	cmp	r4, r9
  402d04:	46c6      	mov	lr, r8
  402d06:	464d      	mov	r5, r9
  402d08:	d315      	bcc.n	402d36 <__udivmoddi4+0x2ae>
  402d0a:	d012      	beq.n	402d32 <__udivmoddi4+0x2aa>
  402d0c:	b156      	cbz	r6, 402d24 <__udivmoddi4+0x29c>
  402d0e:	ebba 030e 	subs.w	r3, sl, lr
  402d12:	eb64 0405 	sbc.w	r4, r4, r5
  402d16:	fa04 f707 	lsl.w	r7, r4, r7
  402d1a:	40cb      	lsrs	r3, r1
  402d1c:	431f      	orrs	r7, r3
  402d1e:	40cc      	lsrs	r4, r1
  402d20:	6037      	str	r7, [r6, #0]
  402d22:	6074      	str	r4, [r6, #4]
  402d24:	2100      	movs	r1, #0
  402d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d2a:	4618      	mov	r0, r3
  402d2c:	e6f8      	b.n	402b20 <__udivmoddi4+0x98>
  402d2e:	4690      	mov	r8, r2
  402d30:	e6e0      	b.n	402af4 <__udivmoddi4+0x6c>
  402d32:	45c2      	cmp	sl, r8
  402d34:	d2ea      	bcs.n	402d0c <__udivmoddi4+0x284>
  402d36:	ebb8 0e02 	subs.w	lr, r8, r2
  402d3a:	eb69 0503 	sbc.w	r5, r9, r3
  402d3e:	3801      	subs	r0, #1
  402d40:	e7e4      	b.n	402d0c <__udivmoddi4+0x284>
  402d42:	4628      	mov	r0, r5
  402d44:	e7d7      	b.n	402cf6 <__udivmoddi4+0x26e>
  402d46:	4640      	mov	r0, r8
  402d48:	e791      	b.n	402c6e <__udivmoddi4+0x1e6>
  402d4a:	4681      	mov	r9, r0
  402d4c:	e7be      	b.n	402ccc <__udivmoddi4+0x244>
  402d4e:	4601      	mov	r1, r0
  402d50:	e778      	b.n	402c44 <__udivmoddi4+0x1bc>
  402d52:	3802      	subs	r0, #2
  402d54:	443c      	add	r4, r7
  402d56:	e745      	b.n	402be4 <__udivmoddi4+0x15c>
  402d58:	4608      	mov	r0, r1
  402d5a:	e708      	b.n	402b6e <__udivmoddi4+0xe6>
  402d5c:	f1a8 0802 	sub.w	r8, r8, #2
  402d60:	443d      	add	r5, r7
  402d62:	e72b      	b.n	402bbc <__udivmoddi4+0x134>

00402d64 <__aeabi_idiv0>:
  402d64:	4770      	bx	lr
  402d66:	bf00      	nop

00402d68 <__libc_init_array>:
  402d68:	b570      	push	{r4, r5, r6, lr}
  402d6a:	4e0f      	ldr	r6, [pc, #60]	; (402da8 <__libc_init_array+0x40>)
  402d6c:	4d0f      	ldr	r5, [pc, #60]	; (402dac <__libc_init_array+0x44>)
  402d6e:	1b76      	subs	r6, r6, r5
  402d70:	10b6      	asrs	r6, r6, #2
  402d72:	bf18      	it	ne
  402d74:	2400      	movne	r4, #0
  402d76:	d005      	beq.n	402d84 <__libc_init_array+0x1c>
  402d78:	3401      	adds	r4, #1
  402d7a:	f855 3b04 	ldr.w	r3, [r5], #4
  402d7e:	4798      	blx	r3
  402d80:	42a6      	cmp	r6, r4
  402d82:	d1f9      	bne.n	402d78 <__libc_init_array+0x10>
  402d84:	4e0a      	ldr	r6, [pc, #40]	; (402db0 <__libc_init_array+0x48>)
  402d86:	4d0b      	ldr	r5, [pc, #44]	; (402db4 <__libc_init_array+0x4c>)
  402d88:	1b76      	subs	r6, r6, r5
  402d8a:	f000 fd31 	bl	4037f0 <_init>
  402d8e:	10b6      	asrs	r6, r6, #2
  402d90:	bf18      	it	ne
  402d92:	2400      	movne	r4, #0
  402d94:	d006      	beq.n	402da4 <__libc_init_array+0x3c>
  402d96:	3401      	adds	r4, #1
  402d98:	f855 3b04 	ldr.w	r3, [r5], #4
  402d9c:	4798      	blx	r3
  402d9e:	42a6      	cmp	r6, r4
  402da0:	d1f9      	bne.n	402d96 <__libc_init_array+0x2e>
  402da2:	bd70      	pop	{r4, r5, r6, pc}
  402da4:	bd70      	pop	{r4, r5, r6, pc}
  402da6:	bf00      	nop
  402da8:	004037fc 	.word	0x004037fc
  402dac:	004037fc 	.word	0x004037fc
  402db0:	00403804 	.word	0x00403804
  402db4:	004037fc 	.word	0x004037fc

00402db8 <strcpy>:
  402db8:	ea80 0201 	eor.w	r2, r0, r1
  402dbc:	4684      	mov	ip, r0
  402dbe:	f012 0f03 	tst.w	r2, #3
  402dc2:	d14f      	bne.n	402e64 <strcpy+0xac>
  402dc4:	f011 0f03 	tst.w	r1, #3
  402dc8:	d132      	bne.n	402e30 <strcpy+0x78>
  402dca:	f84d 4d04 	str.w	r4, [sp, #-4]!
  402dce:	f011 0f04 	tst.w	r1, #4
  402dd2:	f851 3b04 	ldr.w	r3, [r1], #4
  402dd6:	d00b      	beq.n	402df0 <strcpy+0x38>
  402dd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402ddc:	439a      	bics	r2, r3
  402dde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402de2:	bf04      	itt	eq
  402de4:	f84c 3b04 	streq.w	r3, [ip], #4
  402de8:	f851 3b04 	ldreq.w	r3, [r1], #4
  402dec:	d116      	bne.n	402e1c <strcpy+0x64>
  402dee:	bf00      	nop
  402df0:	f851 4b04 	ldr.w	r4, [r1], #4
  402df4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402df8:	439a      	bics	r2, r3
  402dfa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402dfe:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  402e02:	d10b      	bne.n	402e1c <strcpy+0x64>
  402e04:	f84c 3b04 	str.w	r3, [ip], #4
  402e08:	43a2      	bics	r2, r4
  402e0a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e0e:	bf04      	itt	eq
  402e10:	f851 3b04 	ldreq.w	r3, [r1], #4
  402e14:	f84c 4b04 	streq.w	r4, [ip], #4
  402e18:	d0ea      	beq.n	402df0 <strcpy+0x38>
  402e1a:	4623      	mov	r3, r4
  402e1c:	f80c 3b01 	strb.w	r3, [ip], #1
  402e20:	f013 0fff 	tst.w	r3, #255	; 0xff
  402e24:	ea4f 2333 	mov.w	r3, r3, ror #8
  402e28:	d1f8      	bne.n	402e1c <strcpy+0x64>
  402e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  402e2e:	4770      	bx	lr
  402e30:	f011 0f01 	tst.w	r1, #1
  402e34:	d006      	beq.n	402e44 <strcpy+0x8c>
  402e36:	f811 2b01 	ldrb.w	r2, [r1], #1
  402e3a:	f80c 2b01 	strb.w	r2, [ip], #1
  402e3e:	2a00      	cmp	r2, #0
  402e40:	bf08      	it	eq
  402e42:	4770      	bxeq	lr
  402e44:	f011 0f02 	tst.w	r1, #2
  402e48:	d0bf      	beq.n	402dca <strcpy+0x12>
  402e4a:	f831 2b02 	ldrh.w	r2, [r1], #2
  402e4e:	f012 0fff 	tst.w	r2, #255	; 0xff
  402e52:	bf16      	itet	ne
  402e54:	f82c 2b02 	strhne.w	r2, [ip], #2
  402e58:	f88c 2000 	strbeq.w	r2, [ip]
  402e5c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  402e60:	d1b3      	bne.n	402dca <strcpy+0x12>
  402e62:	4770      	bx	lr
  402e64:	f811 2b01 	ldrb.w	r2, [r1], #1
  402e68:	f80c 2b01 	strb.w	r2, [ip], #1
  402e6c:	2a00      	cmp	r2, #0
  402e6e:	d1f9      	bne.n	402e64 <strcpy+0xac>
  402e70:	4770      	bx	lr
  402e72:	bf00      	nop

00402e74 <critical_factorization>:
  402e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e78:	f04f 0e01 	mov.w	lr, #1
  402e7c:	4674      	mov	r4, lr
  402e7e:	2500      	movs	r5, #0
  402e80:	f04f 36ff 	mov.w	r6, #4294967295
  402e84:	192b      	adds	r3, r5, r4
  402e86:	428b      	cmp	r3, r1
  402e88:	eb00 0706 	add.w	r7, r0, r6
  402e8c:	d20d      	bcs.n	402eaa <critical_factorization+0x36>
  402e8e:	5d3f      	ldrb	r7, [r7, r4]
  402e90:	f810 c003 	ldrb.w	ip, [r0, r3]
  402e94:	45bc      	cmp	ip, r7
  402e96:	d22d      	bcs.n	402ef4 <critical_factorization+0x80>
  402e98:	461d      	mov	r5, r3
  402e9a:	2401      	movs	r4, #1
  402e9c:	eba3 0e06 	sub.w	lr, r3, r6
  402ea0:	192b      	adds	r3, r5, r4
  402ea2:	428b      	cmp	r3, r1
  402ea4:	eb00 0706 	add.w	r7, r0, r6
  402ea8:	d3f1      	bcc.n	402e8e <critical_factorization+0x1a>
  402eaa:	f04f 0801 	mov.w	r8, #1
  402eae:	f8c2 e000 	str.w	lr, [r2]
  402eb2:	4644      	mov	r4, r8
  402eb4:	2500      	movs	r5, #0
  402eb6:	f04f 37ff 	mov.w	r7, #4294967295
  402eba:	192b      	adds	r3, r5, r4
  402ebc:	4299      	cmp	r1, r3
  402ebe:	eb00 0e07 	add.w	lr, r0, r7
  402ec2:	d90e      	bls.n	402ee2 <critical_factorization+0x6e>
  402ec4:	f81e e004 	ldrb.w	lr, [lr, r4]
  402ec8:	f810 c003 	ldrb.w	ip, [r0, r3]
  402ecc:	45f4      	cmp	ip, lr
  402ece:	d918      	bls.n	402f02 <critical_factorization+0x8e>
  402ed0:	461d      	mov	r5, r3
  402ed2:	2401      	movs	r4, #1
  402ed4:	eba3 0807 	sub.w	r8, r3, r7
  402ed8:	192b      	adds	r3, r5, r4
  402eda:	4299      	cmp	r1, r3
  402edc:	eb00 0e07 	add.w	lr, r0, r7
  402ee0:	d8f0      	bhi.n	402ec4 <critical_factorization+0x50>
  402ee2:	3701      	adds	r7, #1
  402ee4:	1c70      	adds	r0, r6, #1
  402ee6:	4287      	cmp	r7, r0
  402ee8:	bf24      	itt	cs
  402eea:	f8c2 8000 	strcs.w	r8, [r2]
  402eee:	4638      	movcs	r0, r7
  402ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ef4:	d00c      	beq.n	402f10 <critical_factorization+0x9c>
  402ef6:	f04f 0e01 	mov.w	lr, #1
  402efa:	462e      	mov	r6, r5
  402efc:	4674      	mov	r4, lr
  402efe:	4475      	add	r5, lr
  402f00:	e7c0      	b.n	402e84 <critical_factorization+0x10>
  402f02:	d00b      	beq.n	402f1c <critical_factorization+0xa8>
  402f04:	f04f 0801 	mov.w	r8, #1
  402f08:	462f      	mov	r7, r5
  402f0a:	4644      	mov	r4, r8
  402f0c:	4445      	add	r5, r8
  402f0e:	e7d4      	b.n	402eba <critical_factorization+0x46>
  402f10:	4574      	cmp	r4, lr
  402f12:	bf12      	itee	ne
  402f14:	3401      	addne	r4, #1
  402f16:	461d      	moveq	r5, r3
  402f18:	2401      	moveq	r4, #1
  402f1a:	e7b3      	b.n	402e84 <critical_factorization+0x10>
  402f1c:	4544      	cmp	r4, r8
  402f1e:	bf12      	itee	ne
  402f20:	3401      	addne	r4, #1
  402f22:	461d      	moveq	r5, r3
  402f24:	2401      	moveq	r4, #1
  402f26:	e7c8      	b.n	402eba <critical_factorization+0x46>

00402f28 <two_way_long_needle>:
  402f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f2c:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  402f30:	4616      	mov	r6, r2
  402f32:	4605      	mov	r5, r0
  402f34:	468b      	mov	fp, r1
  402f36:	4610      	mov	r0, r2
  402f38:	4619      	mov	r1, r3
  402f3a:	aa03      	add	r2, sp, #12
  402f3c:	461c      	mov	r4, r3
  402f3e:	f7ff ff99 	bl	402e74 <critical_factorization>
  402f42:	ab03      	add	r3, sp, #12
  402f44:	4681      	mov	r9, r0
  402f46:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  402f4a:	f843 4f04 	str.w	r4, [r3, #4]!
  402f4e:	4293      	cmp	r3, r2
  402f50:	d1fb      	bne.n	402f4a <two_way_long_needle+0x22>
  402f52:	b14c      	cbz	r4, 402f68 <two_way_long_needle+0x40>
  402f54:	1e63      	subs	r3, r4, #1
  402f56:	1e72      	subs	r2, r6, #1
  402f58:	a804      	add	r0, sp, #16
  402f5a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402f5e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  402f62:	f113 33ff 	adds.w	r3, r3, #4294967295
  402f66:	d2f8      	bcs.n	402f5a <two_way_long_needle+0x32>
  402f68:	9903      	ldr	r1, [sp, #12]
  402f6a:	464a      	mov	r2, r9
  402f6c:	4431      	add	r1, r6
  402f6e:	4630      	mov	r0, r6
  402f70:	f000 fa66 	bl	403440 <memcmp>
  402f74:	2800      	cmp	r0, #0
  402f76:	d16f      	bne.n	403058 <two_way_long_needle+0x130>
  402f78:	f109 33ff 	add.w	r3, r9, #4294967295
  402f7c:	9300      	str	r3, [sp, #0]
  402f7e:	18f3      	adds	r3, r6, r3
  402f80:	4682      	mov	sl, r0
  402f82:	9301      	str	r3, [sp, #4]
  402f84:	4623      	mov	r3, r4
  402f86:	4680      	mov	r8, r0
  402f88:	4654      	mov	r4, sl
  402f8a:	4658      	mov	r0, fp
  402f8c:	469a      	mov	sl, r3
  402f8e:	eb08 070a 	add.w	r7, r8, sl
  402f92:	1a3a      	subs	r2, r7, r0
  402f94:	2100      	movs	r1, #0
  402f96:	4428      	add	r0, r5
  402f98:	f000 fa02 	bl	4033a0 <memchr>
  402f9c:	2800      	cmp	r0, #0
  402f9e:	d156      	bne.n	40304e <two_way_long_needle+0x126>
  402fa0:	2f00      	cmp	r7, #0
  402fa2:	d054      	beq.n	40304e <two_way_long_needle+0x126>
  402fa4:	19eb      	adds	r3, r5, r7
  402fa6:	aa04      	add	r2, sp, #16
  402fa8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402fb0:	b14b      	cbz	r3, 402fc6 <two_way_long_needle+0x9e>
  402fb2:	b124      	cbz	r4, 402fbe <two_way_long_needle+0x96>
  402fb4:	9a03      	ldr	r2, [sp, #12]
  402fb6:	4293      	cmp	r3, r2
  402fb8:	d201      	bcs.n	402fbe <two_way_long_needle+0x96>
  402fba:	ebaa 0302 	sub.w	r3, sl, r2
  402fbe:	4498      	add	r8, r3
  402fc0:	2400      	movs	r4, #0
  402fc2:	4638      	mov	r0, r7
  402fc4:	e7e3      	b.n	402f8e <two_way_long_needle+0x66>
  402fc6:	454c      	cmp	r4, r9
  402fc8:	4623      	mov	r3, r4
  402fca:	f10a 3eff 	add.w	lr, sl, #4294967295
  402fce:	bf38      	it	cc
  402fd0:	464b      	movcc	r3, r9
  402fd2:	4573      	cmp	r3, lr
  402fd4:	d213      	bcs.n	402ffe <two_way_long_needle+0xd6>
  402fd6:	eb08 0203 	add.w	r2, r8, r3
  402fda:	f816 c003 	ldrb.w	ip, [r6, r3]
  402fde:	5ca8      	ldrb	r0, [r5, r2]
  402fe0:	4584      	cmp	ip, r0
  402fe2:	442a      	add	r2, r5
  402fe4:	eb06 0103 	add.w	r1, r6, r3
  402fe8:	d006      	beq.n	402ff8 <two_way_long_needle+0xd0>
  402fea:	e02c      	b.n	403046 <two_way_long_needle+0x11e>
  402fec:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  402ff0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402ff4:	4584      	cmp	ip, r0
  402ff6:	d126      	bne.n	403046 <two_way_long_needle+0x11e>
  402ff8:	3301      	adds	r3, #1
  402ffa:	4573      	cmp	r3, lr
  402ffc:	d3f6      	bcc.n	402fec <two_way_long_needle+0xc4>
  402ffe:	454c      	cmp	r4, r9
  403000:	9900      	ldr	r1, [sp, #0]
  403002:	f080 8089 	bcs.w	403118 <two_way_long_needle+0x1f0>
  403006:	9b00      	ldr	r3, [sp, #0]
  403008:	eb08 0203 	add.w	r2, r8, r3
  40300c:	9b01      	ldr	r3, [sp, #4]
  40300e:	5ca8      	ldrb	r0, [r5, r2]
  403010:	781b      	ldrb	r3, [r3, #0]
  403012:	4298      	cmp	r0, r3
  403014:	442a      	add	r2, r5
  403016:	d17f      	bne.n	403118 <two_way_long_needle+0x1f0>
  403018:	9801      	ldr	r0, [sp, #4]
  40301a:	f104 3bff 	add.w	fp, r4, #4294967295
  40301e:	e006      	b.n	40302e <two_way_long_needle+0x106>
  403020:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403024:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403028:	45f4      	cmp	ip, lr
  40302a:	d103      	bne.n	403034 <two_way_long_needle+0x10c>
  40302c:	4619      	mov	r1, r3
  40302e:	1e4b      	subs	r3, r1, #1
  403030:	459b      	cmp	fp, r3
  403032:	d1f5      	bne.n	403020 <two_way_long_needle+0xf8>
  403034:	3401      	adds	r4, #1
  403036:	428c      	cmp	r4, r1
  403038:	d870      	bhi.n	40311c <two_way_long_needle+0x1f4>
  40303a:	9c03      	ldr	r4, [sp, #12]
  40303c:	4638      	mov	r0, r7
  40303e:	44a0      	add	r8, r4
  403040:	ebaa 0404 	sub.w	r4, sl, r4
  403044:	e7a3      	b.n	402f8e <two_way_long_needle+0x66>
  403046:	f1c9 0201 	rsb	r2, r9, #1
  40304a:	4490      	add	r8, r2
  40304c:	e7b7      	b.n	402fbe <two_way_long_needle+0x96>
  40304e:	2000      	movs	r0, #0
  403050:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403058:	eba4 0309 	sub.w	r3, r4, r9
  40305c:	454b      	cmp	r3, r9
  40305e:	bf38      	it	cc
  403060:	464b      	movcc	r3, r9
  403062:	3301      	adds	r3, #1
  403064:	f109 38ff 	add.w	r8, r9, #4294967295
  403068:	9303      	str	r3, [sp, #12]
  40306a:	eb06 0308 	add.w	r3, r6, r8
  40306e:	4658      	mov	r0, fp
  403070:	f04f 0a00 	mov.w	sl, #0
  403074:	46cb      	mov	fp, r9
  403076:	4699      	mov	r9, r3
  403078:	eb0a 0704 	add.w	r7, sl, r4
  40307c:	1a3a      	subs	r2, r7, r0
  40307e:	2100      	movs	r1, #0
  403080:	4428      	add	r0, r5
  403082:	f000 f98d 	bl	4033a0 <memchr>
  403086:	2800      	cmp	r0, #0
  403088:	d1e1      	bne.n	40304e <two_way_long_needle+0x126>
  40308a:	2f00      	cmp	r7, #0
  40308c:	d0df      	beq.n	40304e <two_way_long_needle+0x126>
  40308e:	19eb      	adds	r3, r5, r7
  403090:	aa04      	add	r2, sp, #16
  403092:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40309a:	bba3      	cbnz	r3, 403106 <two_way_long_needle+0x1de>
  40309c:	1e61      	subs	r1, r4, #1
  40309e:	458b      	cmp	fp, r1
  4030a0:	d215      	bcs.n	4030ce <two_way_long_needle+0x1a6>
  4030a2:	eb0a 020b 	add.w	r2, sl, fp
  4030a6:	f816 300b 	ldrb.w	r3, [r6, fp]
  4030aa:	f815 e002 	ldrb.w	lr, [r5, r2]
  4030ae:	459e      	cmp	lr, r3
  4030b0:	442a      	add	r2, r5
  4030b2:	eb06 000b 	add.w	r0, r6, fp
  4030b6:	465b      	mov	r3, fp
  4030b8:	d006      	beq.n	4030c8 <two_way_long_needle+0x1a0>
  4030ba:	e027      	b.n	40310c <two_way_long_needle+0x1e4>
  4030bc:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4030c0:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4030c4:	45f4      	cmp	ip, lr
  4030c6:	d121      	bne.n	40310c <two_way_long_needle+0x1e4>
  4030c8:	3301      	adds	r3, #1
  4030ca:	428b      	cmp	r3, r1
  4030cc:	d3f6      	bcc.n	4030bc <two_way_long_needle+0x194>
  4030ce:	f1b8 3fff 	cmp.w	r8, #4294967295
  4030d2:	d011      	beq.n	4030f8 <two_way_long_needle+0x1d0>
  4030d4:	eb0a 0208 	add.w	r2, sl, r8
  4030d8:	f899 1000 	ldrb.w	r1, [r9]
  4030dc:	5cab      	ldrb	r3, [r5, r2]
  4030de:	4299      	cmp	r1, r3
  4030e0:	442a      	add	r2, r5
  4030e2:	d10f      	bne.n	403104 <two_way_long_needle+0x1dc>
  4030e4:	464b      	mov	r3, r9
  4030e6:	e005      	b.n	4030f4 <two_way_long_needle+0x1cc>
  4030e8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4030ec:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4030f0:	4288      	cmp	r0, r1
  4030f2:	d107      	bne.n	403104 <two_way_long_needle+0x1dc>
  4030f4:	42b3      	cmp	r3, r6
  4030f6:	d1f7      	bne.n	4030e8 <two_way_long_needle+0x1c0>
  4030f8:	eb05 000a 	add.w	r0, r5, sl
  4030fc:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403104:	9b03      	ldr	r3, [sp, #12]
  403106:	449a      	add	sl, r3
  403108:	4638      	mov	r0, r7
  40310a:	e7b5      	b.n	403078 <two_way_long_needle+0x150>
  40310c:	f1cb 0201 	rsb	r2, fp, #1
  403110:	4492      	add	sl, r2
  403112:	449a      	add	sl, r3
  403114:	4638      	mov	r0, r7
  403116:	e7af      	b.n	403078 <two_way_long_needle+0x150>
  403118:	4649      	mov	r1, r9
  40311a:	e78b      	b.n	403034 <two_way_long_needle+0x10c>
  40311c:	eb05 0008 	add.w	r0, r5, r8
  403120:	e796      	b.n	403050 <two_way_long_needle+0x128>
  403122:	bf00      	nop

00403124 <strstr>:
  403124:	7802      	ldrb	r2, [r0, #0]
  403126:	2a00      	cmp	r2, #0
  403128:	f000 8101 	beq.w	40332e <strstr+0x20a>
  40312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403130:	f891 8000 	ldrb.w	r8, [r1]
  403134:	b085      	sub	sp, #20
  403136:	4644      	mov	r4, r8
  403138:	f1b8 0f00 	cmp.w	r8, #0
  40313c:	d016      	beq.n	40316c <strstr+0x48>
  40313e:	4686      	mov	lr, r0
  403140:	f101 0c01 	add.w	ip, r1, #1
  403144:	2701      	movs	r7, #1
  403146:	e003      	b.n	403150 <strstr+0x2c>
  403148:	f813 4b01 	ldrb.w	r4, [r3], #1
  40314c:	b16c      	cbz	r4, 40316a <strstr+0x46>
  40314e:	469c      	mov	ip, r3
  403150:	42a2      	cmp	r2, r4
  403152:	bf14      	ite	ne
  403154:	2700      	movne	r7, #0
  403156:	f007 0701 	andeq.w	r7, r7, #1
  40315a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  40315e:	4663      	mov	r3, ip
  403160:	2a00      	cmp	r2, #0
  403162:	d1f1      	bne.n	403148 <strstr+0x24>
  403164:	f89c 3000 	ldrb.w	r3, [ip]
  403168:	b9fb      	cbnz	r3, 4031aa <strstr+0x86>
  40316a:	b117      	cbz	r7, 403172 <strstr+0x4e>
  40316c:	b005      	add	sp, #20
  40316e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403172:	460e      	mov	r6, r1
  403174:	4605      	mov	r5, r0
  403176:	4641      	mov	r1, r8
  403178:	3001      	adds	r0, #1
  40317a:	ebac 0406 	sub.w	r4, ip, r6
  40317e:	f000 f98f 	bl	4034a0 <strchr>
  403182:	4607      	mov	r7, r0
  403184:	b188      	cbz	r0, 4031aa <strstr+0x86>
  403186:	2c01      	cmp	r4, #1
  403188:	d0f0      	beq.n	40316c <strstr+0x48>
  40318a:	1928      	adds	r0, r5, r4
  40318c:	4287      	cmp	r7, r0
  40318e:	bf94      	ite	ls
  403190:	1bc1      	subls	r1, r0, r7
  403192:	2101      	movhi	r1, #1
  403194:	2c1f      	cmp	r4, #31
  403196:	468b      	mov	fp, r1
  403198:	d90b      	bls.n	4031b2 <strstr+0x8e>
  40319a:	4623      	mov	r3, r4
  40319c:	4632      	mov	r2, r6
  40319e:	4638      	mov	r0, r7
  4031a0:	f7ff fec2 	bl	402f28 <two_way_long_needle>
  4031a4:	b005      	add	sp, #20
  4031a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031aa:	2000      	movs	r0, #0
  4031ac:	b005      	add	sp, #20
  4031ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031b2:	aa03      	add	r2, sp, #12
  4031b4:	4621      	mov	r1, r4
  4031b6:	4630      	mov	r0, r6
  4031b8:	f7ff fe5c 	bl	402e74 <critical_factorization>
  4031bc:	9903      	ldr	r1, [sp, #12]
  4031be:	4680      	mov	r8, r0
  4031c0:	4602      	mov	r2, r0
  4031c2:	4431      	add	r1, r6
  4031c4:	4630      	mov	r0, r6
  4031c6:	f000 f93b 	bl	403440 <memcmp>
  4031ca:	2800      	cmp	r0, #0
  4031cc:	d157      	bne.n	40327e <strstr+0x15a>
  4031ce:	f108 33ff 	add.w	r3, r8, #4294967295
  4031d2:	9300      	str	r3, [sp, #0]
  4031d4:	18f3      	adds	r3, r6, r3
  4031d6:	4681      	mov	r9, r0
  4031d8:	4605      	mov	r5, r0
  4031da:	9301      	str	r3, [sp, #4]
  4031dc:	4658      	mov	r0, fp
  4031de:	46b2      	mov	sl, r6
  4031e0:	1966      	adds	r6, r4, r5
  4031e2:	1a32      	subs	r2, r6, r0
  4031e4:	2100      	movs	r1, #0
  4031e6:	4438      	add	r0, r7
  4031e8:	f000 f8da 	bl	4033a0 <memchr>
  4031ec:	2800      	cmp	r0, #0
  4031ee:	d1dc      	bne.n	4031aa <strstr+0x86>
  4031f0:	2e00      	cmp	r6, #0
  4031f2:	d0da      	beq.n	4031aa <strstr+0x86>
  4031f4:	45c8      	cmp	r8, r9
  4031f6:	4643      	mov	r3, r8
  4031f8:	bf38      	it	cc
  4031fa:	464b      	movcc	r3, r9
  4031fc:	429c      	cmp	r4, r3
  4031fe:	d912      	bls.n	403226 <strstr+0x102>
  403200:	195a      	adds	r2, r3, r5
  403202:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403206:	5cb8      	ldrb	r0, [r7, r2]
  403208:	4281      	cmp	r1, r0
  40320a:	443a      	add	r2, r7
  40320c:	eb0a 0e03 	add.w	lr, sl, r3
  403210:	d006      	beq.n	403220 <strstr+0xfc>
  403212:	e02c      	b.n	40326e <strstr+0x14a>
  403214:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403218:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40321c:	4288      	cmp	r0, r1
  40321e:	d126      	bne.n	40326e <strstr+0x14a>
  403220:	3301      	adds	r3, #1
  403222:	429c      	cmp	r4, r3
  403224:	d1f6      	bne.n	403214 <strstr+0xf0>
  403226:	45c8      	cmp	r8, r9
  403228:	9900      	ldr	r1, [sp, #0]
  40322a:	f240 8083 	bls.w	403334 <strstr+0x210>
  40322e:	9b00      	ldr	r3, [sp, #0]
  403230:	18ea      	adds	r2, r5, r3
  403232:	9b01      	ldr	r3, [sp, #4]
  403234:	5cb8      	ldrb	r0, [r7, r2]
  403236:	781b      	ldrb	r3, [r3, #0]
  403238:	4298      	cmp	r0, r3
  40323a:	443a      	add	r2, r7
  40323c:	d17a      	bne.n	403334 <strstr+0x210>
  40323e:	9801      	ldr	r0, [sp, #4]
  403240:	f109 3bff 	add.w	fp, r9, #4294967295
  403244:	e006      	b.n	403254 <strstr+0x130>
  403246:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40324a:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40324e:	45f4      	cmp	ip, lr
  403250:	d103      	bne.n	40325a <strstr+0x136>
  403252:	4619      	mov	r1, r3
  403254:	1e4b      	subs	r3, r1, #1
  403256:	455b      	cmp	r3, fp
  403258:	d1f5      	bne.n	403246 <strstr+0x122>
  40325a:	f109 0901 	add.w	r9, r9, #1
  40325e:	4589      	cmp	r9, r1
  403260:	d857      	bhi.n	403312 <strstr+0x1ee>
  403262:	9b03      	ldr	r3, [sp, #12]
  403264:	4630      	mov	r0, r6
  403266:	441d      	add	r5, r3
  403268:	eba4 0903 	sub.w	r9, r4, r3
  40326c:	e7b8      	b.n	4031e0 <strstr+0xbc>
  40326e:	f1c8 0201 	rsb	r2, r8, #1
  403272:	4415      	add	r5, r2
  403274:	441d      	add	r5, r3
  403276:	f04f 0900 	mov.w	r9, #0
  40327a:	4630      	mov	r0, r6
  40327c:	e7b0      	b.n	4031e0 <strstr+0xbc>
  40327e:	eba4 0308 	sub.w	r3, r4, r8
  403282:	4543      	cmp	r3, r8
  403284:	bf38      	it	cc
  403286:	4643      	movcc	r3, r8
  403288:	3301      	adds	r3, #1
  40328a:	f108 39ff 	add.w	r9, r8, #4294967295
  40328e:	9303      	str	r3, [sp, #12]
  403290:	eb06 0309 	add.w	r3, r6, r9
  403294:	4658      	mov	r0, fp
  403296:	2500      	movs	r5, #0
  403298:	46bb      	mov	fp, r7
  40329a:	469a      	mov	sl, r3
  40329c:	1967      	adds	r7, r4, r5
  40329e:	1a3a      	subs	r2, r7, r0
  4032a0:	2100      	movs	r1, #0
  4032a2:	4458      	add	r0, fp
  4032a4:	f000 f87c 	bl	4033a0 <memchr>
  4032a8:	2800      	cmp	r0, #0
  4032aa:	f47f af7e 	bne.w	4031aa <strstr+0x86>
  4032ae:	2f00      	cmp	r7, #0
  4032b0:	f43f af7b 	beq.w	4031aa <strstr+0x86>
  4032b4:	4544      	cmp	r4, r8
  4032b6:	d915      	bls.n	4032e4 <strstr+0x1c0>
  4032b8:	eb08 0205 	add.w	r2, r8, r5
  4032bc:	f816 3008 	ldrb.w	r3, [r6, r8]
  4032c0:	f81b 0002 	ldrb.w	r0, [fp, r2]
  4032c4:	4298      	cmp	r0, r3
  4032c6:	445a      	add	r2, fp
  4032c8:	eb06 0108 	add.w	r1, r6, r8
  4032cc:	4643      	mov	r3, r8
  4032ce:	d006      	beq.n	4032de <strstr+0x1ba>
  4032d0:	e023      	b.n	40331a <strstr+0x1f6>
  4032d2:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  4032d6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4032da:	4586      	cmp	lr, r0
  4032dc:	d11d      	bne.n	40331a <strstr+0x1f6>
  4032de:	3301      	adds	r3, #1
  4032e0:	429c      	cmp	r4, r3
  4032e2:	d1f6      	bne.n	4032d2 <strstr+0x1ae>
  4032e4:	f1b9 3fff 	cmp.w	r9, #4294967295
  4032e8:	d012      	beq.n	403310 <strstr+0x1ec>
  4032ea:	eb05 0209 	add.w	r2, r5, r9
  4032ee:	f89a 3000 	ldrb.w	r3, [sl]
  4032f2:	f81b 1002 	ldrb.w	r1, [fp, r2]
  4032f6:	4299      	cmp	r1, r3
  4032f8:	445a      	add	r2, fp
  4032fa:	d114      	bne.n	403326 <strstr+0x202>
  4032fc:	4653      	mov	r3, sl
  4032fe:	e005      	b.n	40330c <strstr+0x1e8>
  403300:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403304:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403308:	4288      	cmp	r0, r1
  40330a:	d10c      	bne.n	403326 <strstr+0x202>
  40330c:	42b3      	cmp	r3, r6
  40330e:	d1f7      	bne.n	403300 <strstr+0x1dc>
  403310:	465f      	mov	r7, fp
  403312:	1978      	adds	r0, r7, r5
  403314:	b005      	add	sp, #20
  403316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40331a:	f1c8 0201 	rsb	r2, r8, #1
  40331e:	4415      	add	r5, r2
  403320:	441d      	add	r5, r3
  403322:	4638      	mov	r0, r7
  403324:	e7ba      	b.n	40329c <strstr+0x178>
  403326:	9b03      	ldr	r3, [sp, #12]
  403328:	4638      	mov	r0, r7
  40332a:	441d      	add	r5, r3
  40332c:	e7b6      	b.n	40329c <strstr+0x178>
  40332e:	780b      	ldrb	r3, [r1, #0]
  403330:	b913      	cbnz	r3, 403338 <strstr+0x214>
  403332:	4770      	bx	lr
  403334:	4641      	mov	r1, r8
  403336:	e790      	b.n	40325a <strstr+0x136>
  403338:	2000      	movs	r0, #0
  40333a:	4770      	bx	lr

0040333c <register_fini>:
  40333c:	4b02      	ldr	r3, [pc, #8]	; (403348 <register_fini+0xc>)
  40333e:	b113      	cbz	r3, 403346 <register_fini+0xa>
  403340:	4802      	ldr	r0, [pc, #8]	; (40334c <register_fini+0x10>)
  403342:	f000 b805 	b.w	403350 <atexit>
  403346:	4770      	bx	lr
  403348:	00000000 	.word	0x00000000
  40334c:	0040335d 	.word	0x0040335d

00403350 <atexit>:
  403350:	2300      	movs	r3, #0
  403352:	4601      	mov	r1, r0
  403354:	461a      	mov	r2, r3
  403356:	4618      	mov	r0, r3
  403358:	f000 b916 	b.w	403588 <__register_exitproc>

0040335c <__libc_fini_array>:
  40335c:	b538      	push	{r3, r4, r5, lr}
  40335e:	4c0a      	ldr	r4, [pc, #40]	; (403388 <__libc_fini_array+0x2c>)
  403360:	4d0a      	ldr	r5, [pc, #40]	; (40338c <__libc_fini_array+0x30>)
  403362:	1b64      	subs	r4, r4, r5
  403364:	10a4      	asrs	r4, r4, #2
  403366:	d00a      	beq.n	40337e <__libc_fini_array+0x22>
  403368:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40336c:	3b01      	subs	r3, #1
  40336e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403372:	3c01      	subs	r4, #1
  403374:	f855 3904 	ldr.w	r3, [r5], #-4
  403378:	4798      	blx	r3
  40337a:	2c00      	cmp	r4, #0
  40337c:	d1f9      	bne.n	403372 <__libc_fini_array+0x16>
  40337e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403382:	f000 ba3f 	b.w	403804 <_fini>
  403386:	bf00      	nop
  403388:	00403814 	.word	0x00403814
  40338c:	00403810 	.word	0x00403810

00403390 <__retarget_lock_acquire_recursive>:
  403390:	4770      	bx	lr
  403392:	bf00      	nop

00403394 <__retarget_lock_release_recursive>:
  403394:	4770      	bx	lr
  403396:	bf00      	nop
	...

004033a0 <memchr>:
  4033a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4033a4:	2a10      	cmp	r2, #16
  4033a6:	db2b      	blt.n	403400 <memchr+0x60>
  4033a8:	f010 0f07 	tst.w	r0, #7
  4033ac:	d008      	beq.n	4033c0 <memchr+0x20>
  4033ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4033b2:	3a01      	subs	r2, #1
  4033b4:	428b      	cmp	r3, r1
  4033b6:	d02d      	beq.n	403414 <memchr+0x74>
  4033b8:	f010 0f07 	tst.w	r0, #7
  4033bc:	b342      	cbz	r2, 403410 <memchr+0x70>
  4033be:	d1f6      	bne.n	4033ae <memchr+0xe>
  4033c0:	b4f0      	push	{r4, r5, r6, r7}
  4033c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4033c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4033ca:	f022 0407 	bic.w	r4, r2, #7
  4033ce:	f07f 0700 	mvns.w	r7, #0
  4033d2:	2300      	movs	r3, #0
  4033d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4033d8:	3c08      	subs	r4, #8
  4033da:	ea85 0501 	eor.w	r5, r5, r1
  4033de:	ea86 0601 	eor.w	r6, r6, r1
  4033e2:	fa85 f547 	uadd8	r5, r5, r7
  4033e6:	faa3 f587 	sel	r5, r3, r7
  4033ea:	fa86 f647 	uadd8	r6, r6, r7
  4033ee:	faa5 f687 	sel	r6, r5, r7
  4033f2:	b98e      	cbnz	r6, 403418 <memchr+0x78>
  4033f4:	d1ee      	bne.n	4033d4 <memchr+0x34>
  4033f6:	bcf0      	pop	{r4, r5, r6, r7}
  4033f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4033fc:	f002 0207 	and.w	r2, r2, #7
  403400:	b132      	cbz	r2, 403410 <memchr+0x70>
  403402:	f810 3b01 	ldrb.w	r3, [r0], #1
  403406:	3a01      	subs	r2, #1
  403408:	ea83 0301 	eor.w	r3, r3, r1
  40340c:	b113      	cbz	r3, 403414 <memchr+0x74>
  40340e:	d1f8      	bne.n	403402 <memchr+0x62>
  403410:	2000      	movs	r0, #0
  403412:	4770      	bx	lr
  403414:	3801      	subs	r0, #1
  403416:	4770      	bx	lr
  403418:	2d00      	cmp	r5, #0
  40341a:	bf06      	itte	eq
  40341c:	4635      	moveq	r5, r6
  40341e:	3803      	subeq	r0, #3
  403420:	3807      	subne	r0, #7
  403422:	f015 0f01 	tst.w	r5, #1
  403426:	d107      	bne.n	403438 <memchr+0x98>
  403428:	3001      	adds	r0, #1
  40342a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40342e:	bf02      	ittt	eq
  403430:	3001      	addeq	r0, #1
  403432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403436:	3001      	addeq	r0, #1
  403438:	bcf0      	pop	{r4, r5, r6, r7}
  40343a:	3801      	subs	r0, #1
  40343c:	4770      	bx	lr
  40343e:	bf00      	nop

00403440 <memcmp>:
  403440:	2a03      	cmp	r2, #3
  403442:	b470      	push	{r4, r5, r6}
  403444:	d922      	bls.n	40348c <memcmp+0x4c>
  403446:	ea40 0301 	orr.w	r3, r0, r1
  40344a:	079b      	lsls	r3, r3, #30
  40344c:	d011      	beq.n	403472 <memcmp+0x32>
  40344e:	7803      	ldrb	r3, [r0, #0]
  403450:	780c      	ldrb	r4, [r1, #0]
  403452:	42a3      	cmp	r3, r4
  403454:	d11d      	bne.n	403492 <memcmp+0x52>
  403456:	440a      	add	r2, r1
  403458:	3101      	adds	r1, #1
  40345a:	e005      	b.n	403468 <memcmp+0x28>
  40345c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403460:	f811 4b01 	ldrb.w	r4, [r1], #1
  403464:	42a3      	cmp	r3, r4
  403466:	d114      	bne.n	403492 <memcmp+0x52>
  403468:	4291      	cmp	r1, r2
  40346a:	d1f7      	bne.n	40345c <memcmp+0x1c>
  40346c:	2000      	movs	r0, #0
  40346e:	bc70      	pop	{r4, r5, r6}
  403470:	4770      	bx	lr
  403472:	680d      	ldr	r5, [r1, #0]
  403474:	6806      	ldr	r6, [r0, #0]
  403476:	42ae      	cmp	r6, r5
  403478:	460c      	mov	r4, r1
  40347a:	4603      	mov	r3, r0
  40347c:	f101 0104 	add.w	r1, r1, #4
  403480:	f100 0004 	add.w	r0, r0, #4
  403484:	d108      	bne.n	403498 <memcmp+0x58>
  403486:	3a04      	subs	r2, #4
  403488:	2a03      	cmp	r2, #3
  40348a:	d8f2      	bhi.n	403472 <memcmp+0x32>
  40348c:	2a00      	cmp	r2, #0
  40348e:	d1de      	bne.n	40344e <memcmp+0xe>
  403490:	e7ec      	b.n	40346c <memcmp+0x2c>
  403492:	1b18      	subs	r0, r3, r4
  403494:	bc70      	pop	{r4, r5, r6}
  403496:	4770      	bx	lr
  403498:	4621      	mov	r1, r4
  40349a:	4618      	mov	r0, r3
  40349c:	e7d7      	b.n	40344e <memcmp+0xe>
  40349e:	bf00      	nop

004034a0 <strchr>:
  4034a0:	b2c9      	uxtb	r1, r1
  4034a2:	2900      	cmp	r1, #0
  4034a4:	d041      	beq.n	40352a <strchr+0x8a>
  4034a6:	0782      	lsls	r2, r0, #30
  4034a8:	b4f0      	push	{r4, r5, r6, r7}
  4034aa:	d067      	beq.n	40357c <strchr+0xdc>
  4034ac:	7803      	ldrb	r3, [r0, #0]
  4034ae:	2b00      	cmp	r3, #0
  4034b0:	d068      	beq.n	403584 <strchr+0xe4>
  4034b2:	4299      	cmp	r1, r3
  4034b4:	d037      	beq.n	403526 <strchr+0x86>
  4034b6:	1c43      	adds	r3, r0, #1
  4034b8:	e004      	b.n	4034c4 <strchr+0x24>
  4034ba:	f813 0b01 	ldrb.w	r0, [r3], #1
  4034be:	b390      	cbz	r0, 403526 <strchr+0x86>
  4034c0:	4281      	cmp	r1, r0
  4034c2:	d02f      	beq.n	403524 <strchr+0x84>
  4034c4:	079a      	lsls	r2, r3, #30
  4034c6:	461c      	mov	r4, r3
  4034c8:	d1f7      	bne.n	4034ba <strchr+0x1a>
  4034ca:	6825      	ldr	r5, [r4, #0]
  4034cc:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  4034d0:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  4034d4:	ea83 0605 	eor.w	r6, r3, r5
  4034d8:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  4034dc:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4034e0:	ea20 0006 	bic.w	r0, r0, r6
  4034e4:	ea22 0205 	bic.w	r2, r2, r5
  4034e8:	4302      	orrs	r2, r0
  4034ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4034ee:	d111      	bne.n	403514 <strchr+0x74>
  4034f0:	4620      	mov	r0, r4
  4034f2:	f850 6f04 	ldr.w	r6, [r0, #4]!
  4034f6:	ea83 0706 	eor.w	r7, r3, r6
  4034fa:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  4034fe:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  403502:	ea25 0507 	bic.w	r5, r5, r7
  403506:	ea22 0206 	bic.w	r2, r2, r6
  40350a:	432a      	orrs	r2, r5
  40350c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403510:	d0ef      	beq.n	4034f2 <strchr+0x52>
  403512:	4604      	mov	r4, r0
  403514:	7820      	ldrb	r0, [r4, #0]
  403516:	b918      	cbnz	r0, 403520 <strchr+0x80>
  403518:	e005      	b.n	403526 <strchr+0x86>
  40351a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40351e:	b110      	cbz	r0, 403526 <strchr+0x86>
  403520:	4281      	cmp	r1, r0
  403522:	d1fa      	bne.n	40351a <strchr+0x7a>
  403524:	4620      	mov	r0, r4
  403526:	bcf0      	pop	{r4, r5, r6, r7}
  403528:	4770      	bx	lr
  40352a:	0783      	lsls	r3, r0, #30
  40352c:	d024      	beq.n	403578 <strchr+0xd8>
  40352e:	7803      	ldrb	r3, [r0, #0]
  403530:	2b00      	cmp	r3, #0
  403532:	d0f9      	beq.n	403528 <strchr+0x88>
  403534:	1c43      	adds	r3, r0, #1
  403536:	e003      	b.n	403540 <strchr+0xa0>
  403538:	7802      	ldrb	r2, [r0, #0]
  40353a:	3301      	adds	r3, #1
  40353c:	2a00      	cmp	r2, #0
  40353e:	d0f3      	beq.n	403528 <strchr+0x88>
  403540:	0799      	lsls	r1, r3, #30
  403542:	4618      	mov	r0, r3
  403544:	d1f8      	bne.n	403538 <strchr+0x98>
  403546:	6819      	ldr	r1, [r3, #0]
  403548:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40354c:	ea22 0201 	bic.w	r2, r2, r1
  403550:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403554:	d108      	bne.n	403568 <strchr+0xc8>
  403556:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40355a:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40355e:	ea22 0201 	bic.w	r2, r2, r1
  403562:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403566:	d0f6      	beq.n	403556 <strchr+0xb6>
  403568:	781a      	ldrb	r2, [r3, #0]
  40356a:	4618      	mov	r0, r3
  40356c:	b142      	cbz	r2, 403580 <strchr+0xe0>
  40356e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403572:	2b00      	cmp	r3, #0
  403574:	d1fb      	bne.n	40356e <strchr+0xce>
  403576:	4770      	bx	lr
  403578:	4603      	mov	r3, r0
  40357a:	e7e4      	b.n	403546 <strchr+0xa6>
  40357c:	4604      	mov	r4, r0
  40357e:	e7a4      	b.n	4034ca <strchr+0x2a>
  403580:	4618      	mov	r0, r3
  403582:	4770      	bx	lr
  403584:	4618      	mov	r0, r3
  403586:	e7ce      	b.n	403526 <strchr+0x86>

00403588 <__register_exitproc>:
  403588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40358c:	4d2c      	ldr	r5, [pc, #176]	; (403640 <__register_exitproc+0xb8>)
  40358e:	4606      	mov	r6, r0
  403590:	6828      	ldr	r0, [r5, #0]
  403592:	4698      	mov	r8, r3
  403594:	460f      	mov	r7, r1
  403596:	4691      	mov	r9, r2
  403598:	f7ff fefa 	bl	403390 <__retarget_lock_acquire_recursive>
  40359c:	4b29      	ldr	r3, [pc, #164]	; (403644 <__register_exitproc+0xbc>)
  40359e:	681c      	ldr	r4, [r3, #0]
  4035a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4035a4:	2b00      	cmp	r3, #0
  4035a6:	d03e      	beq.n	403626 <__register_exitproc+0x9e>
  4035a8:	685a      	ldr	r2, [r3, #4]
  4035aa:	2a1f      	cmp	r2, #31
  4035ac:	dc1c      	bgt.n	4035e8 <__register_exitproc+0x60>
  4035ae:	f102 0e01 	add.w	lr, r2, #1
  4035b2:	b176      	cbz	r6, 4035d2 <__register_exitproc+0x4a>
  4035b4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4035b8:	2401      	movs	r4, #1
  4035ba:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4035be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4035c2:	4094      	lsls	r4, r2
  4035c4:	4320      	orrs	r0, r4
  4035c6:	2e02      	cmp	r6, #2
  4035c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4035cc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4035d0:	d023      	beq.n	40361a <__register_exitproc+0x92>
  4035d2:	3202      	adds	r2, #2
  4035d4:	f8c3 e004 	str.w	lr, [r3, #4]
  4035d8:	6828      	ldr	r0, [r5, #0]
  4035da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4035de:	f7ff fed9 	bl	403394 <__retarget_lock_release_recursive>
  4035e2:	2000      	movs	r0, #0
  4035e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4035e8:	4b17      	ldr	r3, [pc, #92]	; (403648 <__register_exitproc+0xc0>)
  4035ea:	b30b      	cbz	r3, 403630 <__register_exitproc+0xa8>
  4035ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4035f0:	f3af 8000 	nop.w
  4035f4:	4603      	mov	r3, r0
  4035f6:	b1d8      	cbz	r0, 403630 <__register_exitproc+0xa8>
  4035f8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4035fc:	6002      	str	r2, [r0, #0]
  4035fe:	2100      	movs	r1, #0
  403600:	6041      	str	r1, [r0, #4]
  403602:	460a      	mov	r2, r1
  403604:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403608:	f04f 0e01 	mov.w	lr, #1
  40360c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403610:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403614:	2e00      	cmp	r6, #0
  403616:	d0dc      	beq.n	4035d2 <__register_exitproc+0x4a>
  403618:	e7cc      	b.n	4035b4 <__register_exitproc+0x2c>
  40361a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40361e:	430c      	orrs	r4, r1
  403620:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403624:	e7d5      	b.n	4035d2 <__register_exitproc+0x4a>
  403626:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40362a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40362e:	e7bb      	b.n	4035a8 <__register_exitproc+0x20>
  403630:	6828      	ldr	r0, [r5, #0]
  403632:	f7ff feaf 	bl	403394 <__retarget_lock_release_recursive>
  403636:	f04f 30ff 	mov.w	r0, #4294967295
  40363a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40363e:	bf00      	nop
  403640:	20000438 	.word	0x20000438
  403644:	004037ec 	.word	0x004037ec
  403648:	00000000 	.word	0x00000000
  40364c:	72617453 	.word	0x72617453
  403650:	72742074 	.word	0x72742074
  403654:	66736e61 	.word	0x66736e61
  403658:	00007265 	.word	0x00007265
  40365c:	65696c43 	.word	0x65696c43
  403660:	6e20746e 	.word	0x6e20746e
  403664:	6320746f 	.word	0x6320746f
  403668:	656e6e6f 	.word	0x656e6e6f
  40366c:	64657463 	.word	0x64657463
  403670:	00000000 	.word	0x00000000
  403674:	6d6d6f43 	.word	0x6d6d6f43
  403678:	20646e61 	.word	0x20646e61
  40367c:	6c696166 	.word	0x6c696166
  403680:	00006465 	.word	0x00006465
  403684:	656e6f4e 	.word	0x656e6f4e
  403688:	00000000 	.word	0x00000000
  40368c:	0001c200 	.word	0x0001c200
  403690:	000000c0 	.word	0x000000c0
  403694:	00000800 	.word	0x00000800
	...
  4036a4:	20746573 	.word	0x20746573
  4036a8:	74737973 	.word	0x74737973
  4036ac:	632e6d65 	.word	0x632e6d65
  4036b0:	652e646d 	.word	0x652e646d
  4036b4:	206f6863 	.word	0x206f6863
  4036b8:	0d66666f 	.word	0x0d66666f
  4036bc:	0000000a 	.word	0x0000000a
  4036c0:	20746573 	.word	0x20746573
  4036c4:	74726175 	.word	0x74726175
  4036c8:	6f6c662e 	.word	0x6f6c662e
  4036cc:	20302077 	.word	0x20302077
  4036d0:	0a0d6e6f 	.word	0x0a0d6e6f
  4036d4:	00000000 	.word	0x00000000
  4036d8:	20746573 	.word	0x20746573
  4036dc:	63207562 	.word	0x63207562
  4036e0:	31207220 	.word	0x31207220
  4036e4:	30303030 	.word	0x30303030
  4036e8:	00000a0d 	.word	0x00000a0d
  4036ec:	20746573 	.word	0x20746573
  4036f0:	74737973 	.word	0x74737973
  4036f4:	692e6d65 	.word	0x692e6d65
  4036f8:	6369646e 	.word	0x6369646e
  4036fc:	726f7461 	.word	0x726f7461
  403700:	6970672e 	.word	0x6970672e
  403704:	6c77206f 	.word	0x6c77206f
  403708:	32206e61 	.word	0x32206e61
  40370c:	000a0d30 	.word	0x000a0d30
  403710:	20746573 	.word	0x20746573
  403714:	74737973 	.word	0x74737973
  403718:	692e6d65 	.word	0x692e6d65
  40371c:	6369646e 	.word	0x6369646e
  403720:	726f7461 	.word	0x726f7461
  403724:	6970672e 	.word	0x6970672e
  403728:	656e206f 	.word	0x656e206f
  40372c:	726f7774 	.word	0x726f7774
  403730:	3831206b 	.word	0x3831206b
  403734:	00000a0d 	.word	0x00000a0d
  403738:	20746573 	.word	0x20746573
  40373c:	74737973 	.word	0x74737973
  403740:	692e6d65 	.word	0x692e6d65
  403744:	6369646e 	.word	0x6369646e
  403748:	726f7461 	.word	0x726f7461
  40374c:	6970672e 	.word	0x6970672e
  403750:	6f73206f 	.word	0x6f73206f
  403754:	70617466 	.word	0x70617466
  403758:	0d313220 	.word	0x0d313220
  40375c:	0000000a 	.word	0x0000000a
  403760:	20746573 	.word	0x20746573
  403764:	74737973 	.word	0x74737973
  403768:	632e6d65 	.word	0x632e6d65
  40376c:	672e646d 	.word	0x672e646d
  403770:	206f6970 	.word	0x206f6970
  403774:	0a0d3631 	.word	0x0a0d3631
  403778:	00000000 	.word	0x00000000
  40377c:	20746573 	.word	0x20746573
  403780:	6e616c77 	.word	0x6e616c77
  403784:	74656e2e 	.word	0x74656e2e
  403788:	6b726f77 	.word	0x6b726f77
  40378c:	6174732e 	.word	0x6174732e
  403790:	5f737574 	.word	0x5f737574
  403794:	6f697067 	.word	0x6f697067
  403798:	0d343120 	.word	0x0d343120
  40379c:	0000000a 	.word	0x0000000a
  4037a0:	65766173 	.word	0x65766173
  4037a4:	00000a0d 	.word	0x00000a0d
  4037a8:	75746573 	.word	0x75746573
  4037ac:	65772070 	.word	0x65772070
  4037b0:	000a0d62 	.word	0x000a0d62
  4037b4:	706d7562 	.word	0x706d7562
  4037b8:	00000a0d 	.word	0x00000a0d
  4037bc:	20706f66 	.word	0x20706f66
  4037c0:	74736574 	.word	0x74736574
  4037c4:	7478742e 	.word	0x7478742e
  4037c8:	00000a0d 	.word	0x00000a0d
  4037cc:	20747366 	.word	0x20747366
  4037d0:	74736574 	.word	0x74736574
  4037d4:	7478742e 	.word	0x7478742e
  4037d8:	00000a0d 	.word	0x00000a0d
  4037dc:	64616572 	.word	0x64616572
  4037e0:	00000020 	.word	0x00000020
  4037e4:	72746550 	.word	0x72746550
  4037e8:	00007361 	.word	0x00007361

004037ec <_global_impure_ptr>:
  4037ec:	20000010                                ... 

004037f0 <_init>:
  4037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4037f2:	bf00      	nop
  4037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4037f6:	bc08      	pop	{r3}
  4037f8:	469e      	mov	lr, r3
  4037fa:	4770      	bx	lr

004037fc <__init_array_start>:
  4037fc:	0040333d 	.word	0x0040333d

00403800 <__frame_dummy_init_array_entry>:
  403800:	004000f1                                ..@.

00403804 <_fini>:
  403804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403806:	bf00      	nop
  403808:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40380a:	bc08      	pop	{r3}
  40380c:	469e      	mov	lr, r3
  40380e:	4770      	bx	lr

00403810 <__fini_array_start>:
  403810:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	8fb4 2001                                   ... 
