
NetworkedProgrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003884  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403884  00403884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  0040388c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00018b9c  2000043c  00403cc8  0002043c  2**2
                  ALLOC
  4 .stack        00003000  20018fd8  0041c864  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012528  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026dd  00000000  00000000  000329e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000061f4  00000000  00000000  000350c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ad0  00000000  00000000  0003b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a58  00000000  00000000  0003bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005fbf  00000000  00000000  0003c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c9b3  00000000  00000000  0004279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004ce21  00000000  00000000  0004f152  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003128  00000000  00000000  0009bf74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 bf 01 20 a1 25 40 00 69 26 40 00 69 26 40 00     ... .%@.i&@.i&@.
  400010:	69 26 40 00 69 26 40 00 69 26 40 00 00 00 00 00     i&@.i&@.i&@.....
	...
  40002c:	69 26 40 00 69 26 40 00 00 00 00 00 69 26 40 00     i&@.i&@.....i&@.
  40003c:	69 26 40 00 69 26 40 00 69 26 40 00 69 26 40 00     i&@.i&@.i&@.i&@.
  40004c:	69 26 40 00 69 26 40 00 69 26 40 00 69 26 40 00     i&@.i&@.i&@.i&@.
  40005c:	00 00 00 00 69 26 40 00 69 26 40 00 00 00 00 00     ....i&@.i&@.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 91 13 40 00     ..@...@.......@.
  40007c:	69 26 40 00 00 00 00 00 00 00 00 00 69 26 40 00     i&@.........i&@.
  40008c:	69 26 40 00 69 26 40 00 69 26 40 00 69 26 40 00     i&@.i&@.i&@.i&@.
  40009c:	d5 10 40 00 69 26 40 00 69 26 40 00 00 00 00 00     ..@.i&@.i&@.....
	...
  4000b4:	69 26 40 00 69 26 40 00 69 26 40 00 69 26 40 00     i&@.i&@.i&@.i&@.
  4000c4:	69 26 40 00 69 26 40 00                             i&@.i&@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040388c 	.word	0x0040388c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040388c 	.word	0x0040388c
  40012c:	20000440 	.word	0x20000440
  400130:	0040388c 	.word	0x0040388c
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	00401e07 	.word	0x00401e07
  4001fc:	00401e1d 	.word	0x00401e1d
  400200:	20000458 	.word	0x20000458
  400204:	20018fb0 	.word	0x20018fb0
  400208:	200004cc 	.word	0x200004cc

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	200004c8 	.word	0x200004c8
  4002a4:	20000458 	.word	0x20000458
  4002a8:	00401d69 	.word	0x00401d69

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4002dc:	b480      	push	{r7}
  4002de:	b089      	sub	sp, #36	; 0x24
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	60f8      	str	r0, [r7, #12]
  4002e4:	60b9      	str	r1, [r7, #8]
  4002e6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4002e8:	68bb      	ldr	r3, [r7, #8]
  4002ea:	011a      	lsls	r2, r3, #4
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	429a      	cmp	r2, r3
  4002f0:	d802      	bhi.n	4002f8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4002f2:	2310      	movs	r3, #16
  4002f4:	61fb      	str	r3, [r7, #28]
  4002f6:	e001      	b.n	4002fc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4002f8:	2308      	movs	r3, #8
  4002fa:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4002fc:	687b      	ldr	r3, [r7, #4]
  4002fe:	00da      	lsls	r2, r3, #3
  400300:	69fb      	ldr	r3, [r7, #28]
  400302:	68b9      	ldr	r1, [r7, #8]
  400304:	fb01 f303 	mul.w	r3, r1, r3
  400308:	085b      	lsrs	r3, r3, #1
  40030a:	441a      	add	r2, r3
  40030c:	69fb      	ldr	r3, [r7, #28]
  40030e:	68b9      	ldr	r1, [r7, #8]
  400310:	fb01 f303 	mul.w	r3, r1, r3
  400314:	fbb2 f3f3 	udiv	r3, r2, r3
  400318:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40031a:	69bb      	ldr	r3, [r7, #24]
  40031c:	08db      	lsrs	r3, r3, #3
  40031e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400320:	69bb      	ldr	r3, [r7, #24]
  400322:	f003 0307 	and.w	r3, r3, #7
  400326:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400328:	697b      	ldr	r3, [r7, #20]
  40032a:	2b00      	cmp	r3, #0
  40032c:	d003      	beq.n	400336 <usart_set_async_baudrate+0x5a>
  40032e:	697b      	ldr	r3, [r7, #20]
  400330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400334:	d301      	bcc.n	40033a <usart_set_async_baudrate+0x5e>
		return 1;
  400336:	2301      	movs	r3, #1
  400338:	e00f      	b.n	40035a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40033a:	69fb      	ldr	r3, [r7, #28]
  40033c:	2b08      	cmp	r3, #8
  40033e:	d105      	bne.n	40034c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400340:	68fb      	ldr	r3, [r7, #12]
  400342:	685b      	ldr	r3, [r3, #4]
  400344:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400348:	68fb      	ldr	r3, [r7, #12]
  40034a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40034c:	693b      	ldr	r3, [r7, #16]
  40034e:	041a      	lsls	r2, r3, #16
  400350:	697b      	ldr	r3, [r7, #20]
  400352:	431a      	orrs	r2, r3
  400354:	68fb      	ldr	r3, [r7, #12]
  400356:	621a      	str	r2, [r3, #32]

	return 0;
  400358:	2300      	movs	r3, #0
}
  40035a:	4618      	mov	r0, r3
  40035c:	3724      	adds	r7, #36	; 0x24
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400364:	b580      	push	{r7, lr}
  400366:	b082      	sub	sp, #8
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40036c:	6878      	ldr	r0, [r7, #4]
  40036e:	4b0f      	ldr	r3, [pc, #60]	; (4003ac <usart_reset+0x48>)
  400370:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	2200      	movs	r2, #0
  400376:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	2200      	movs	r2, #0
  40037c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	2200      	movs	r2, #0
  400382:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400384:	6878      	ldr	r0, [r7, #4]
  400386:	4b0a      	ldr	r3, [pc, #40]	; (4003b0 <usart_reset+0x4c>)
  400388:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40038a:	6878      	ldr	r0, [r7, #4]
  40038c:	4b09      	ldr	r3, [pc, #36]	; (4003b4 <usart_reset+0x50>)
  40038e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400390:	6878      	ldr	r0, [r7, #4]
  400392:	4b09      	ldr	r3, [pc, #36]	; (4003b8 <usart_reset+0x54>)
  400394:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400396:	6878      	ldr	r0, [r7, #4]
  400398:	4b08      	ldr	r3, [pc, #32]	; (4003bc <usart_reset+0x58>)
  40039a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b08      	ldr	r3, [pc, #32]	; (4003c0 <usart_reset+0x5c>)
  4003a0:	4798      	blx	r3
#endif
}
  4003a2:	bf00      	nop
  4003a4:	3708      	adds	r7, #8
  4003a6:	46bd      	mov	sp, r7
  4003a8:	bd80      	pop	{r7, pc}
  4003aa:	bf00      	nop
  4003ac:	004005b5 	.word	0x004005b5
  4003b0:	004004a1 	.word	0x004004a1
  4003b4:	004004d1 	.word	0x004004d1
  4003b8:	00400533 	.word	0x00400533
  4003bc:	00400567 	.word	0x00400567
  4003c0:	0040054d 	.word	0x0040054d

004003c4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4003c4:	b580      	push	{r7, lr}
  4003c6:	b084      	sub	sp, #16
  4003c8:	af00      	add	r7, sp, #0
  4003ca:	60f8      	str	r0, [r7, #12]
  4003cc:	60b9      	str	r1, [r7, #8]
  4003ce:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4003d0:	68f8      	ldr	r0, [r7, #12]
  4003d2:	4b1a      	ldr	r3, [pc, #104]	; (40043c <usart_init_rs232+0x78>)
  4003d4:	4798      	blx	r3

	ul_reg_val = 0;
  4003d6:	4b1a      	ldr	r3, [pc, #104]	; (400440 <usart_init_rs232+0x7c>)
  4003d8:	2200      	movs	r2, #0
  4003da:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4003dc:	68bb      	ldr	r3, [r7, #8]
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d009      	beq.n	4003f6 <usart_init_rs232+0x32>
  4003e2:	68bb      	ldr	r3, [r7, #8]
  4003e4:	681b      	ldr	r3, [r3, #0]
  4003e6:	687a      	ldr	r2, [r7, #4]
  4003e8:	4619      	mov	r1, r3
  4003ea:	68f8      	ldr	r0, [r7, #12]
  4003ec:	4b15      	ldr	r3, [pc, #84]	; (400444 <usart_init_rs232+0x80>)
  4003ee:	4798      	blx	r3
  4003f0:	4603      	mov	r3, r0
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d001      	beq.n	4003fa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4003f6:	2301      	movs	r3, #1
  4003f8:	e01b      	b.n	400432 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4003fa:	68bb      	ldr	r3, [r7, #8]
  4003fc:	685a      	ldr	r2, [r3, #4]
  4003fe:	68bb      	ldr	r3, [r7, #8]
  400400:	689b      	ldr	r3, [r3, #8]
  400402:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400404:	68bb      	ldr	r3, [r7, #8]
  400406:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400408:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40040a:	68bb      	ldr	r3, [r7, #8]
  40040c:	68db      	ldr	r3, [r3, #12]
  40040e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400410:	4b0b      	ldr	r3, [pc, #44]	; (400440 <usart_init_rs232+0x7c>)
  400412:	681b      	ldr	r3, [r3, #0]
  400414:	4313      	orrs	r3, r2
  400416:	4a0a      	ldr	r2, [pc, #40]	; (400440 <usart_init_rs232+0x7c>)
  400418:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40041a:	4b09      	ldr	r3, [pc, #36]	; (400440 <usart_init_rs232+0x7c>)
  40041c:	681b      	ldr	r3, [r3, #0]
  40041e:	4a08      	ldr	r2, [pc, #32]	; (400440 <usart_init_rs232+0x7c>)
  400420:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400422:	68fb      	ldr	r3, [r7, #12]
  400424:	685a      	ldr	r2, [r3, #4]
  400426:	4b06      	ldr	r3, [pc, #24]	; (400440 <usart_init_rs232+0x7c>)
  400428:	681b      	ldr	r3, [r3, #0]
  40042a:	431a      	orrs	r2, r3
  40042c:	68fb      	ldr	r3, [r7, #12]
  40042e:	605a      	str	r2, [r3, #4]

	return 0;
  400430:	2300      	movs	r3, #0
}
  400432:	4618      	mov	r0, r3
  400434:	3710      	adds	r7, #16
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	00400365 	.word	0x00400365
  400440:	200004d0 	.word	0x200004d0
  400444:	004002dd 	.word	0x004002dd

00400448 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400448:	b580      	push	{r7, lr}
  40044a:	b084      	sub	sp, #16
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400454:	687a      	ldr	r2, [r7, #4]
  400456:	68b9      	ldr	r1, [r7, #8]
  400458:	68f8      	ldr	r0, [r7, #12]
  40045a:	4b0a      	ldr	r3, [pc, #40]	; (400484 <usart_init_hw_handshaking+0x3c>)
  40045c:	4798      	blx	r3
  40045e:	4603      	mov	r3, r0
  400460:	2b00      	cmp	r3, #0
  400462:	d001      	beq.n	400468 <usart_init_hw_handshaking+0x20>
		return 1;
  400464:	2301      	movs	r3, #1
  400466:	e008      	b.n	40047a <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400468:	68fb      	ldr	r3, [r7, #12]
  40046a:	685b      	ldr	r3, [r3, #4]
  40046c:	f023 030f 	bic.w	r3, r3, #15
  400470:	f043 0202 	orr.w	r2, r3, #2
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400478:	2300      	movs	r3, #0
}
  40047a:	4618      	mov	r0, r3
  40047c:	3710      	adds	r7, #16
  40047e:	46bd      	mov	sp, r7
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	004003c5 	.word	0x004003c5

00400488 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400488:	b480      	push	{r7}
  40048a:	b083      	sub	sp, #12
  40048c:	af00      	add	r7, sp, #0
  40048e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2240      	movs	r2, #64	; 0x40
  400494:	601a      	str	r2, [r3, #0]
}
  400496:	bf00      	nop
  400498:	370c      	adds	r7, #12
  40049a:	46bd      	mov	sp, r7
  40049c:	bc80      	pop	{r7}
  40049e:	4770      	bx	lr

004004a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b083      	sub	sp, #12
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4004a8:	687b      	ldr	r3, [r7, #4]
  4004aa:	2288      	movs	r2, #136	; 0x88
  4004ac:	601a      	str	r2, [r3, #0]
}
  4004ae:	bf00      	nop
  4004b0:	370c      	adds	r7, #12
  4004b2:	46bd      	mov	sp, r7
  4004b4:	bc80      	pop	{r7}
  4004b6:	4770      	bx	lr

004004b8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4004b8:	b480      	push	{r7}
  4004ba:	b083      	sub	sp, #12
  4004bc:	af00      	add	r7, sp, #0
  4004be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4004c0:	687b      	ldr	r3, [r7, #4]
  4004c2:	2210      	movs	r2, #16
  4004c4:	601a      	str	r2, [r3, #0]
}
  4004c6:	bf00      	nop
  4004c8:	370c      	adds	r7, #12
  4004ca:	46bd      	mov	sp, r7
  4004cc:	bc80      	pop	{r7}
  4004ce:	4770      	bx	lr

004004d0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4004d0:	b480      	push	{r7}
  4004d2:	b083      	sub	sp, #12
  4004d4:	af00      	add	r7, sp, #0
  4004d6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4004d8:	687b      	ldr	r3, [r7, #4]
  4004da:	2224      	movs	r2, #36	; 0x24
  4004dc:	601a      	str	r2, [r3, #0]
}
  4004de:	bf00      	nop
  4004e0:	370c      	adds	r7, #12
  4004e2:	46bd      	mov	sp, r7
  4004e4:	bc80      	pop	{r7}
  4004e6:	4770      	bx	lr

004004e8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4004e8:	b480      	push	{r7}
  4004ea:	b083      	sub	sp, #12
  4004ec:	af00      	add	r7, sp, #0
  4004ee:	6078      	str	r0, [r7, #4]
  4004f0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4004f2:	687b      	ldr	r3, [r7, #4]
  4004f4:	683a      	ldr	r2, [r7, #0]
  4004f6:	609a      	str	r2, [r3, #8]
}
  4004f8:	bf00      	nop
  4004fa:	370c      	adds	r7, #12
  4004fc:	46bd      	mov	sp, r7
  4004fe:	bc80      	pop	{r7}
  400500:	4770      	bx	lr

00400502 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400502:	b480      	push	{r7}
  400504:	b083      	sub	sp, #12
  400506:	af00      	add	r7, sp, #0
  400508:	6078      	str	r0, [r7, #4]
  40050a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40050c:	687b      	ldr	r3, [r7, #4]
  40050e:	683a      	ldr	r2, [r7, #0]
  400510:	60da      	str	r2, [r3, #12]
}
  400512:	bf00      	nop
  400514:	370c      	adds	r7, #12
  400516:	46bd      	mov	sp, r7
  400518:	bc80      	pop	{r7}
  40051a:	4770      	bx	lr

0040051c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40051c:	b480      	push	{r7}
  40051e:	b083      	sub	sp, #12
  400520:	af00      	add	r7, sp, #0
  400522:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	695b      	ldr	r3, [r3, #20]
}
  400528:	4618      	mov	r0, r3
  40052a:	370c      	adds	r7, #12
  40052c:	46bd      	mov	sp, r7
  40052e:	bc80      	pop	{r7}
  400530:	4770      	bx	lr

00400532 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400532:	b480      	push	{r7}
  400534:	b083      	sub	sp, #12
  400536:	af00      	add	r7, sp, #0
  400538:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40053a:	687b      	ldr	r3, [r7, #4]
  40053c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400540:	601a      	str	r2, [r3, #0]
}
  400542:	bf00      	nop
  400544:	370c      	adds	r7, #12
  400546:	46bd      	mov	sp, r7
  400548:	bc80      	pop	{r7}
  40054a:	4770      	bx	lr

0040054c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40054c:	b480      	push	{r7}
  40054e:	b083      	sub	sp, #12
  400550:	af00      	add	r7, sp, #0
  400552:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40055a:	601a      	str	r2, [r3, #0]
}
  40055c:	bf00      	nop
  40055e:	370c      	adds	r7, #12
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr

00400566 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400566:	b480      	push	{r7}
  400568:	b083      	sub	sp, #12
  40056a:	af00      	add	r7, sp, #0
  40056c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40056e:	687b      	ldr	r3, [r7, #4]
  400570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400574:	601a      	str	r2, [r3, #0]
}
  400576:	bf00      	nop
  400578:	370c      	adds	r7, #12
  40057a:	46bd      	mov	sp, r7
  40057c:	bc80      	pop	{r7}
  40057e:	4770      	bx	lr

00400580 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	6078      	str	r0, [r7, #4]
  400588:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40058a:	687b      	ldr	r3, [r7, #4]
  40058c:	695b      	ldr	r3, [r3, #20]
  40058e:	f003 0301 	and.w	r3, r3, #1
  400592:	2b00      	cmp	r3, #0
  400594:	d101      	bne.n	40059a <usart_read+0x1a>
		return 1;
  400596:	2301      	movs	r3, #1
  400598:	e006      	b.n	4005a8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40059a:	687b      	ldr	r3, [r7, #4]
  40059c:	699b      	ldr	r3, [r3, #24]
  40059e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4005a2:	683b      	ldr	r3, [r7, #0]
  4005a4:	601a      	str	r2, [r3, #0]

	return 0;
  4005a6:	2300      	movs	r3, #0
}
  4005a8:	4618      	mov	r0, r3
  4005aa:	370c      	adds	r7, #12
  4005ac:	46bd      	mov	sp, r7
  4005ae:	bc80      	pop	{r7}
  4005b0:	4770      	bx	lr
	...

004005b4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4005b4:	b480      	push	{r7}
  4005b6:	b083      	sub	sp, #12
  4005b8:	af00      	add	r7, sp, #0
  4005ba:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4005bc:	687b      	ldr	r3, [r7, #4]
  4005be:	4a04      	ldr	r2, [pc, #16]	; (4005d0 <usart_disable_writeprotect+0x1c>)
  4005c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4005c4:	bf00      	nop
  4005c6:	370c      	adds	r7, #12
  4005c8:	46bd      	mov	sp, r7
  4005ca:	bc80      	pop	{r7}
  4005cc:	4770      	bx	lr
  4005ce:	bf00      	nop
  4005d0:	55534100 	.word	0x55534100

004005d4 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  4005d4:	b480      	push	{r7}
  4005d6:	b083      	sub	sp, #12
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4005e2:	605a      	str	r2, [r3, #4]

}
  4005e4:	bf00      	nop
  4005e6:	370c      	adds	r7, #12
  4005e8:	46bd      	mov	sp, r7
  4005ea:	bc80      	pop	{r7}
  4005ec:	4770      	bx	lr
	...

004005f0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4005f0:	b480      	push	{r7}
  4005f2:	b083      	sub	sp, #12
  4005f4:	af00      	add	r7, sp, #0
  4005f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	2b07      	cmp	r3, #7
  4005fc:	d825      	bhi.n	40064a <osc_get_rate+0x5a>
  4005fe:	a201      	add	r2, pc, #4	; (adr r2, 400604 <osc_get_rate+0x14>)
  400600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400604:	00400625 	.word	0x00400625
  400608:	0040062b 	.word	0x0040062b
  40060c:	00400631 	.word	0x00400631
  400610:	00400637 	.word	0x00400637
  400614:	0040063b 	.word	0x0040063b
  400618:	0040063f 	.word	0x0040063f
  40061c:	00400643 	.word	0x00400643
  400620:	00400647 	.word	0x00400647
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400624:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400628:	e010      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40062a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40062e:	e00d      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400634:	e00a      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400636:	4b08      	ldr	r3, [pc, #32]	; (400658 <osc_get_rate+0x68>)
  400638:	e008      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40063a:	4b08      	ldr	r3, [pc, #32]	; (40065c <osc_get_rate+0x6c>)
  40063c:	e006      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40063e:	4b08      	ldr	r3, [pc, #32]	; (400660 <osc_get_rate+0x70>)
  400640:	e004      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400642:	4b07      	ldr	r3, [pc, #28]	; (400660 <osc_get_rate+0x70>)
  400644:	e002      	b.n	40064c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400646:	4b06      	ldr	r3, [pc, #24]	; (400660 <osc_get_rate+0x70>)
  400648:	e000      	b.n	40064c <osc_get_rate+0x5c>
	}

	return 0;
  40064a:	2300      	movs	r3, #0
}
  40064c:	4618      	mov	r0, r3
  40064e:	370c      	adds	r7, #12
  400650:	46bd      	mov	sp, r7
  400652:	bc80      	pop	{r7}
  400654:	4770      	bx	lr
  400656:	bf00      	nop
  400658:	003d0900 	.word	0x003d0900
  40065c:	007a1200 	.word	0x007a1200
  400660:	00b71b00 	.word	0x00b71b00

00400664 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400664:	b580      	push	{r7, lr}
  400666:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400668:	2006      	movs	r0, #6
  40066a:	4b04      	ldr	r3, [pc, #16]	; (40067c <sysclk_get_main_hz+0x18>)
  40066c:	4798      	blx	r3
  40066e:	4602      	mov	r2, r0
  400670:	4613      	mov	r3, r2
  400672:	009b      	lsls	r3, r3, #2
  400674:	4413      	add	r3, r2
  400676:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400678:	4618      	mov	r0, r3
  40067a:	bd80      	pop	{r7, pc}
  40067c:	004005f1 	.word	0x004005f1

00400680 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400680:	b580      	push	{r7, lr}
  400682:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400684:	4b02      	ldr	r3, [pc, #8]	; (400690 <sysclk_get_cpu_hz+0x10>)
  400686:	4798      	blx	r3
  400688:	4603      	mov	r3, r0
  40068a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40068c:	4618      	mov	r0, r3
  40068e:	bd80      	pop	{r7, pc}
  400690:	00400665 	.word	0x00400665

00400694 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400694:	b480      	push	{r7}
  400696:	b08d      	sub	sp, #52	; 0x34
  400698:	af00      	add	r7, sp, #0
  40069a:	6078      	str	r0, [r7, #4]
  40069c:	6039      	str	r1, [r7, #0]
  40069e:	687b      	ldr	r3, [r7, #4]
  4006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006a2:	683b      	ldr	r3, [r7, #0]
  4006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  4006a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006a8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006ac:	095a      	lsrs	r2, r3, #5
  4006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006b0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4006b2:	6a3b      	ldr	r3, [r7, #32]
  4006b4:	f003 031f 	and.w	r3, r3, #31
  4006b8:	2101      	movs	r1, #1
  4006ba:	fa01 f303 	lsl.w	r3, r1, r3
  4006be:	61fa      	str	r2, [r7, #28]
  4006c0:	61bb      	str	r3, [r7, #24]
  4006c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4006c4:	617b      	str	r3, [r7, #20]
  4006c6:	69fb      	ldr	r3, [r7, #28]
  4006c8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ca:	693b      	ldr	r3, [r7, #16]
  4006cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4006d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4006d4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006d6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	f003 0308 	and.w	r3, r3, #8
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d003      	beq.n	4006ea <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	69ba      	ldr	r2, [r7, #24]
  4006e6:	665a      	str	r2, [r3, #100]	; 0x64
  4006e8:	e002      	b.n	4006f0 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4006ea:	68fb      	ldr	r3, [r7, #12]
  4006ec:	69ba      	ldr	r2, [r7, #24]
  4006ee:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006f0:	697b      	ldr	r3, [r7, #20]
  4006f2:	f003 0310 	and.w	r3, r3, #16
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d004      	beq.n	400704 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	69ba      	ldr	r2, [r7, #24]
  4006fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400702:	e003      	b.n	40070c <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	69ba      	ldr	r2, [r7, #24]
  400708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	f003 0320 	and.w	r3, r3, #32
  400712:	2b00      	cmp	r3, #0
  400714:	d003      	beq.n	40071e <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	69ba      	ldr	r2, [r7, #24]
  40071a:	651a      	str	r2, [r3, #80]	; 0x50
  40071c:	e002      	b.n	400724 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  40071e:	68fb      	ldr	r3, [r7, #12]
  400720:	69ba      	ldr	r2, [r7, #24]
  400722:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40072a:	2b00      	cmp	r3, #0
  40072c:	d003      	beq.n	400736 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40072e:	68fb      	ldr	r3, [r7, #12]
  400730:	69ba      	ldr	r2, [r7, #24]
  400732:	621a      	str	r2, [r3, #32]
  400734:	e002      	b.n	40073c <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  400736:	68fb      	ldr	r3, [r7, #12]
  400738:	69ba      	ldr	r2, [r7, #24]
  40073a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400742:	2b00      	cmp	r3, #0
  400744:	d004      	beq.n	400750 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400746:	68fb      	ldr	r3, [r7, #12]
  400748:	69ba      	ldr	r2, [r7, #24]
  40074a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40074e:	e003      	b.n	400758 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400750:	68fb      	ldr	r3, [r7, #12]
  400752:	69ba      	ldr	r2, [r7, #24]
  400754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	f003 0301 	and.w	r3, r3, #1
  40075e:	2b00      	cmp	r3, #0
  400760:	d006      	beq.n	400770 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  400762:	68fb      	ldr	r3, [r7, #12]
  400764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400766:	69bb      	ldr	r3, [r7, #24]
  400768:	431a      	orrs	r2, r3
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	671a      	str	r2, [r3, #112]	; 0x70
  40076e:	e006      	b.n	40077e <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400770:	68fb      	ldr	r3, [r7, #12]
  400772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400774:	69bb      	ldr	r3, [r7, #24]
  400776:	43db      	mvns	r3, r3
  400778:	401a      	ands	r2, r3
  40077a:	68fb      	ldr	r3, [r7, #12]
  40077c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	f003 0302 	and.w	r3, r3, #2
  400784:	2b00      	cmp	r3, #0
  400786:	d006      	beq.n	400796 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  400788:	68fb      	ldr	r3, [r7, #12]
  40078a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40078c:	69bb      	ldr	r3, [r7, #24]
  40078e:	431a      	orrs	r2, r3
  400790:	68fb      	ldr	r3, [r7, #12]
  400792:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400794:	e006      	b.n	4007a4 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400796:	68fb      	ldr	r3, [r7, #12]
  400798:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40079a:	69bb      	ldr	r3, [r7, #24]
  40079c:	43db      	mvns	r3, r3
  40079e:	401a      	ands	r2, r3
  4007a0:	68fb      	ldr	r3, [r7, #12]
  4007a2:	675a      	str	r2, [r3, #116]	; 0x74
  4007a4:	bf00      	nop
  4007a6:	3734      	adds	r7, #52	; 0x34
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bc80      	pop	{r7}
  4007ac:	4770      	bx	lr

004007ae <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4007ae:	b480      	push	{r7}
  4007b0:	b08d      	sub	sp, #52	; 0x34
  4007b2:	af00      	add	r7, sp, #0
  4007b4:	6078      	str	r0, [r7, #4]
  4007b6:	460b      	mov	r3, r1
  4007b8:	70fb      	strb	r3, [r7, #3]
  4007ba:	687b      	ldr	r3, [r7, #4]
  4007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007be:	78fb      	ldrb	r3, [r7, #3]
  4007c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007c6:	627b      	str	r3, [r7, #36]	; 0x24
  4007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007ca:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4007cc:	6a3b      	ldr	r3, [r7, #32]
  4007ce:	095b      	lsrs	r3, r3, #5
  4007d0:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007d2:	69fb      	ldr	r3, [r7, #28]
  4007d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4007d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4007dc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007de:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4007e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007e4:	2b01      	cmp	r3, #1
  4007e6:	d109      	bne.n	4007fc <ioport_set_pin_dir+0x4e>
  4007e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ea:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4007ec:	697b      	ldr	r3, [r7, #20]
  4007ee:	f003 031f 	and.w	r3, r3, #31
  4007f2:	2201      	movs	r2, #1
  4007f4:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007f6:	69bb      	ldr	r3, [r7, #24]
  4007f8:	611a      	str	r2, [r3, #16]
  4007fa:	e00c      	b.n	400816 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4007fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400800:	2b00      	cmp	r3, #0
  400802:	d108      	bne.n	400816 <ioport_set_pin_dir+0x68>
  400804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400806:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400808:	693b      	ldr	r3, [r7, #16]
  40080a:	f003 031f 	and.w	r3, r3, #31
  40080e:	2201      	movs	r2, #1
  400810:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400812:	69bb      	ldr	r3, [r7, #24]
  400814:	615a      	str	r2, [r3, #20]
  400816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400818:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40081a:	68fb      	ldr	r3, [r7, #12]
  40081c:	f003 031f 	and.w	r3, r3, #31
  400820:	2201      	movs	r2, #1
  400822:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400824:	69bb      	ldr	r3, [r7, #24]
  400826:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40082a:	bf00      	nop
  40082c:	3734      	adds	r7, #52	; 0x34
  40082e:	46bd      	mov	sp, r7
  400830:	bc80      	pop	{r7}
  400832:	4770      	bx	lr

00400834 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400834:	b480      	push	{r7}
  400836:	b08b      	sub	sp, #44	; 0x2c
  400838:	af00      	add	r7, sp, #0
  40083a:	6078      	str	r0, [r7, #4]
  40083c:	460b      	mov	r3, r1
  40083e:	70fb      	strb	r3, [r7, #3]
  400840:	687b      	ldr	r3, [r7, #4]
  400842:	627b      	str	r3, [r7, #36]	; 0x24
  400844:	78fb      	ldrb	r3, [r7, #3]
  400846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40084c:	61fb      	str	r3, [r7, #28]
  40084e:	69fb      	ldr	r3, [r7, #28]
  400850:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400852:	69bb      	ldr	r3, [r7, #24]
  400854:	095b      	lsrs	r3, r3, #5
  400856:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400858:	697b      	ldr	r3, [r7, #20]
  40085a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40085e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400862:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400864:	613b      	str	r3, [r7, #16]

	if (level) {
  400866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40086a:	2b00      	cmp	r3, #0
  40086c:	d009      	beq.n	400882 <ioport_set_pin_level+0x4e>
  40086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400870:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	f003 031f 	and.w	r3, r3, #31
  400878:	2201      	movs	r2, #1
  40087a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40087c:	693b      	ldr	r3, [r7, #16]
  40087e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400880:	e008      	b.n	400894 <ioport_set_pin_level+0x60>
  400882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400884:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400886:	68bb      	ldr	r3, [r7, #8]
  400888:	f003 031f 	and.w	r3, r3, #31
  40088c:	2201      	movs	r2, #1
  40088e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400890:	693b      	ldr	r3, [r7, #16]
  400892:	635a      	str	r2, [r3, #52]	; 0x34
  400894:	bf00      	nop
  400896:	372c      	adds	r7, #44	; 0x2c
  400898:	46bd      	mov	sp, r7
  40089a:	bc80      	pop	{r7}
  40089c:	4770      	bx	lr

0040089e <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40089e:	b480      	push	{r7}
  4008a0:	b089      	sub	sp, #36	; 0x24
  4008a2:	af00      	add	r7, sp, #0
  4008a4:	6078      	str	r0, [r7, #4]
  4008a6:	687b      	ldr	r3, [r7, #4]
  4008a8:	61fb      	str	r3, [r7, #28]
  4008aa:	69fb      	ldr	r3, [r7, #28]
  4008ac:	61bb      	str	r3, [r7, #24]
  4008ae:	69bb      	ldr	r3, [r7, #24]
  4008b0:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  4008b2:	697b      	ldr	r3, [r7, #20]
  4008b4:	095b      	lsrs	r3, r3, #5
  4008b6:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008b8:	693b      	ldr	r3, [r7, #16]
  4008ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4008be:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4008c2:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4008c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4008c6:	69fb      	ldr	r3, [r7, #28]
  4008c8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4008ca:	68fb      	ldr	r3, [r7, #12]
  4008cc:	f003 031f 	and.w	r3, r3, #31
  4008d0:	2101      	movs	r1, #1
  4008d2:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4008d6:	4013      	ands	r3, r2
  4008d8:	2b00      	cmp	r3, #0
  4008da:	bf14      	ite	ne
  4008dc:	2301      	movne	r3, #1
  4008de:	2300      	moveq	r3, #0
  4008e0:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4008e2:	4618      	mov	r0, r3
  4008e4:	3724      	adds	r7, #36	; 0x24
  4008e6:	46bd      	mov	sp, r7
  4008e8:	bc80      	pop	{r7}
  4008ea:	4770      	bx	lr

004008ec <setupSWDPins>:
// Global Variables


// Functions /////////////////////////////////////////////
// Setup Pins
void setupSWDPins(void){
  4008ec:	b580      	push	{r7, lr}
  4008ee:	af00      	add	r7, sp, #0
	// Set all pins as output, low
	ioport_set_pin_dir(SWCLK_PIN, IOPORT_DIR_OUTPUT);
  4008f0:	2101      	movs	r1, #1
  4008f2:	2002      	movs	r0, #2
  4008f4:	4b0f      	ldr	r3, [pc, #60]	; (400934 <setupSWDPins+0x48>)
  4008f6:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN, LOW);
  4008f8:	2100      	movs	r1, #0
  4008fa:	2002      	movs	r0, #2
  4008fc:	4b0e      	ldr	r3, [pc, #56]	; (400938 <setupSWDPins+0x4c>)
  4008fe:	4798      	blx	r3
	
	ioport_set_pin_dir(SWIO_PIN, IOPORT_DIR_OUTPUT);
  400900:	2101      	movs	r1, #1
  400902:	2003      	movs	r0, #3
  400904:	4b0b      	ldr	r3, [pc, #44]	; (400934 <setupSWDPins+0x48>)
  400906:	4798      	blx	r3
	ioport_set_pin_level(SWIO_PIN, LOW);
  400908:	2100      	movs	r1, #0
  40090a:	2003      	movs	r0, #3
  40090c:	4b0a      	ldr	r3, [pc, #40]	; (400938 <setupSWDPins+0x4c>)
  40090e:	4798      	blx	r3
	
	ioport_set_pin_dir(MEMCLR_PIN, IOPORT_DIR_OUTPUT);
  400910:	2101      	movs	r1, #1
  400912:	2001      	movs	r0, #1
  400914:	4b07      	ldr	r3, [pc, #28]	; (400934 <setupSWDPins+0x48>)
  400916:	4798      	blx	r3
	ioport_set_pin_level(MEMCLR_PIN, LOW);
  400918:	2100      	movs	r1, #0
  40091a:	2001      	movs	r0, #1
  40091c:	4b06      	ldr	r3, [pc, #24]	; (400938 <setupSWDPins+0x4c>)
  40091e:	4798      	blx	r3
	
	ioport_set_pin_dir(FORCERST_PIN, IOPORT_DIR_OUTPUT);
  400920:	2101      	movs	r1, #1
  400922:	2000      	movs	r0, #0
  400924:	4b03      	ldr	r3, [pc, #12]	; (400934 <setupSWDPins+0x48>)
  400926:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN, LOW);
  400928:	2100      	movs	r1, #0
  40092a:	2002      	movs	r0, #2
  40092c:	4b02      	ldr	r3, [pc, #8]	; (400938 <setupSWDPins+0x4c>)
  40092e:	4798      	blx	r3
}
  400930:	bf00      	nop
  400932:	bd80      	pop	{r7, pc}
  400934:	004007af 	.word	0x004007af
  400938:	00400835 	.word	0x00400835

0040093c <configSWDPinsInput>:

// Configure SWD pins to be inputs
void configSWDPinsInput(void){
  40093c:	b580      	push	{r7, lr}
  40093e:	af00      	add	r7, sp, #0
	// Communication Pins Input: SWIO
	ioport_set_pin_dir(SWIO_PIN, IOPORT_DIR_INPUT);
  400940:	2100      	movs	r1, #0
  400942:	2003      	movs	r0, #3
  400944:	4b03      	ldr	r3, [pc, #12]	; (400954 <configSWDPinsInput+0x18>)
  400946:	4798      	blx	r3
	ioport_set_pin_mode(SWIO_PIN, IOPORT_MODE_PULLUP);
  400948:	2108      	movs	r1, #8
  40094a:	2003      	movs	r0, #3
  40094c:	4b02      	ldr	r3, [pc, #8]	; (400958 <configSWDPinsInput+0x1c>)
  40094e:	4798      	blx	r3
	
}
  400950:	bf00      	nop
  400952:	bd80      	pop	{r7, pc}
  400954:	004007af 	.word	0x004007af
  400958:	00400695 	.word	0x00400695

0040095c <configSWDPinsOutput>:

// Configure SWD pins to be outputs
void configSWDPinsOutput(void){
  40095c:	b580      	push	{r7, lr}
  40095e:	af00      	add	r7, sp, #0
	// Communication Pins Output: SWIO
	ioport_set_pin_dir(SWCLK_PIN, IOPORT_DIR_OUTPUT);
  400960:	2101      	movs	r1, #1
  400962:	2002      	movs	r0, #2
  400964:	4b03      	ldr	r3, [pc, #12]	; (400974 <configSWDPinsOutput+0x18>)
  400966:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN, LOW);
  400968:	2100      	movs	r1, #0
  40096a:	2002      	movs	r0, #2
  40096c:	4b02      	ldr	r3, [pc, #8]	; (400978 <configSWDPinsOutput+0x1c>)
  40096e:	4798      	blx	r3
}
  400970:	bf00      	nop
  400972:	bd80      	pop	{r7, pc}
  400974:	004007af 	.word	0x004007af
  400978:	00400835 	.word	0x00400835
  40097c:	00000000 	.word	0x00000000

00400980 <SWD_bitOut>:

// Bit-Bang Functions //////////////////////////////////////
// Bitbang: Write Bit over SWD
void SWD_bitOut(Bool outBit){
  400980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400984:	b083      	sub	sp, #12
  400986:	af00      	add	r7, sp, #0
  400988:	4603      	mov	r3, r0
  40098a:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SWIO_PIN,outBit);
  40098c:	79fb      	ldrb	r3, [r7, #7]
  40098e:	2b00      	cmp	r3, #0
  400990:	bf14      	ite	ne
  400992:	2301      	movne	r3, #1
  400994:	2300      	moveq	r3, #0
  400996:	b2db      	uxtb	r3, r3
  400998:	4619      	mov	r1, r3
  40099a:	2003      	movs	r0, #3
  40099c:	4b36      	ldr	r3, [pc, #216]	; (400a78 <SWD_bitOut+0xf8>)
  40099e:	4798      	blx	r3
	ioport_set_pin_level(SWCLK_PIN,HIGH);
  4009a0:	2101      	movs	r1, #1
  4009a2:	2002      	movs	r0, #2
  4009a4:	4b34      	ldr	r3, [pc, #208]	; (400a78 <SWD_bitOut+0xf8>)
  4009a6:	4798      	blx	r3
	delay_us(DURATION_SWCLK_HIGH);
  4009a8:	4b34      	ldr	r3, [pc, #208]	; (400a7c <SWD_bitOut+0xfc>)
  4009aa:	4798      	blx	r3
  4009ac:	4603      	mov	r3, r0
  4009ae:	4618      	mov	r0, r3
  4009b0:	f04f 0100 	mov.w	r1, #0
  4009b4:	4602      	mov	r2, r0
  4009b6:	460b      	mov	r3, r1
  4009b8:	ea4f 0983 	mov.w	r9, r3, lsl #2
  4009bc:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  4009c0:	ea4f 0882 	mov.w	r8, r2, lsl #2
  4009c4:	4642      	mov	r2, r8
  4009c6:	464b      	mov	r3, r9
  4009c8:	1812      	adds	r2, r2, r0
  4009ca:	eb43 0301 	adc.w	r3, r3, r1
  4009ce:	1892      	adds	r2, r2, r2
  4009d0:	eb43 0303 	adc.w	r3, r3, r3
  4009d4:	4610      	mov	r0, r2
  4009d6:	4619      	mov	r1, r3
  4009d8:	a325      	add	r3, pc, #148	; (adr r3, 400a70 <SWD_bitOut+0xf0>)
  4009da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4009de:	1880      	adds	r0, r0, r2
  4009e0:	eb41 0103 	adc.w	r1, r1, r3
  4009e4:	4e26      	ldr	r6, [pc, #152]	; (400a80 <SWD_bitOut+0x100>)
  4009e6:	4a27      	ldr	r2, [pc, #156]	; (400a84 <SWD_bitOut+0x104>)
  4009e8:	f04f 0300 	mov.w	r3, #0
  4009ec:	47b0      	blx	r6
  4009ee:	4602      	mov	r2, r0
  4009f0:	460b      	mov	r3, r1
  4009f2:	4613      	mov	r3, r2
  4009f4:	4618      	mov	r0, r3
  4009f6:	4b24      	ldr	r3, [pc, #144]	; (400a88 <SWD_bitOut+0x108>)
  4009f8:	4798      	blx	r3
	
	ioport_set_pin_level(SWCLK_PIN,LOW);
  4009fa:	2100      	movs	r1, #0
  4009fc:	2002      	movs	r0, #2
  4009fe:	4b1e      	ldr	r3, [pc, #120]	; (400a78 <SWD_bitOut+0xf8>)
  400a00:	4798      	blx	r3
	delay_us(DURATION_SWCLK_LOW);
  400a02:	4b1e      	ldr	r3, [pc, #120]	; (400a7c <SWD_bitOut+0xfc>)
  400a04:	4798      	blx	r3
  400a06:	4603      	mov	r3, r0
  400a08:	4618      	mov	r0, r3
  400a0a:	f04f 0100 	mov.w	r1, #0
  400a0e:	4602      	mov	r2, r0
  400a10:	460b      	mov	r3, r1
  400a12:	1892      	adds	r2, r2, r2
  400a14:	eb43 0303 	adc.w	r3, r3, r3
  400a18:	1812      	adds	r2, r2, r0
  400a1a:	eb43 0301 	adc.w	r3, r3, r1
  400a1e:	011d      	lsls	r5, r3, #4
  400a20:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
  400a24:	0114      	lsls	r4, r2, #4
  400a26:	1aa4      	subs	r4, r4, r2
  400a28:	eb65 0503 	sbc.w	r5, r5, r3
  400a2c:	1922      	adds	r2, r4, r4
  400a2e:	eb45 0305 	adc.w	r3, r5, r5
  400a32:	461c      	mov	r4, r3
  400a34:	4613      	mov	r3, r2
  400a36:	4625      	mov	r5, r4
  400a38:	461c      	mov	r4, r3
  400a3a:	4621      	mov	r1, r4
  400a3c:	462a      	mov	r2, r5
  400a3e:	a40c      	add	r4, pc, #48	; (adr r4, 400a70 <SWD_bitOut+0xf0>)
  400a40:	e9d4 3400 	ldrd	r3, r4, [r4]
  400a44:	18cd      	adds	r5, r1, r3
  400a46:	eb42 0604 	adc.w	r6, r2, r4
  400a4a:	4628      	mov	r0, r5
  400a4c:	4631      	mov	r1, r6
  400a4e:	4c0c      	ldr	r4, [pc, #48]	; (400a80 <SWD_bitOut+0x100>)
  400a50:	4a0c      	ldr	r2, [pc, #48]	; (400a84 <SWD_bitOut+0x104>)
  400a52:	f04f 0300 	mov.w	r3, #0
  400a56:	47a0      	blx	r4
  400a58:	4603      	mov	r3, r0
  400a5a:	460c      	mov	r4, r1
  400a5c:	4618      	mov	r0, r3
  400a5e:	4b0a      	ldr	r3, [pc, #40]	; (400a88 <SWD_bitOut+0x108>)
  400a60:	4798      	blx	r3
}
  400a62:	bf00      	nop
  400a64:	370c      	adds	r7, #12
  400a66:	46bd      	mov	sp, r7
  400a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400a6c:	f3af 8000 	nop.w
  400a70:	00d59f7f 	.word	0x00d59f7f
  400a74:	00000000 	.word	0x00000000
  400a78:	00400835 	.word	0x00400835
  400a7c:	00400681 	.word	0x00400681
  400a80:	00402ad1 	.word	0x00402ad1
  400a84:	00d59f80 	.word	0x00d59f80
  400a88:	20000001 	.word	0x20000001
  400a8c:	00000000 	.word	0x00000000

00400a90 <SWD_bitIn>:

// Bitbang: Read Bit over SWD
uint8_t SWD_bitIn(void){
  400a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400a94:	b083      	sub	sp, #12
  400a96:	af00      	add	r7, sp, #0
	ioport_set_pin_level(SWCLK_PIN,HIGH);
  400a98:	2101      	movs	r1, #1
  400a9a:	2002      	movs	r0, #2
  400a9c:	4b36      	ldr	r3, [pc, #216]	; (400b78 <SWD_bitIn+0xe8>)
  400a9e:	4798      	blx	r3
	delay_us(DURATION_SWCLK_HIGH);
  400aa0:	4b36      	ldr	r3, [pc, #216]	; (400b7c <SWD_bitIn+0xec>)
  400aa2:	4798      	blx	r3
  400aa4:	4603      	mov	r3, r0
  400aa6:	4618      	mov	r0, r3
  400aa8:	f04f 0100 	mov.w	r1, #0
  400aac:	4602      	mov	r2, r0
  400aae:	460b      	mov	r3, r1
  400ab0:	ea4f 0983 	mov.w	r9, r3, lsl #2
  400ab4:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  400ab8:	ea4f 0882 	mov.w	r8, r2, lsl #2
  400abc:	4642      	mov	r2, r8
  400abe:	464b      	mov	r3, r9
  400ac0:	1812      	adds	r2, r2, r0
  400ac2:	eb43 0301 	adc.w	r3, r3, r1
  400ac6:	1892      	adds	r2, r2, r2
  400ac8:	eb43 0303 	adc.w	r3, r3, r3
  400acc:	4610      	mov	r0, r2
  400ace:	4619      	mov	r1, r3
  400ad0:	a327      	add	r3, pc, #156	; (adr r3, 400b70 <SWD_bitIn+0xe0>)
  400ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
  400ad6:	1880      	adds	r0, r0, r2
  400ad8:	eb41 0103 	adc.w	r1, r1, r3
  400adc:	4e28      	ldr	r6, [pc, #160]	; (400b80 <SWD_bitIn+0xf0>)
  400ade:	4a29      	ldr	r2, [pc, #164]	; (400b84 <SWD_bitIn+0xf4>)
  400ae0:	f04f 0300 	mov.w	r3, #0
  400ae4:	47b0      	blx	r6
  400ae6:	4602      	mov	r2, r0
  400ae8:	460b      	mov	r3, r1
  400aea:	4613      	mov	r3, r2
  400aec:	4618      	mov	r0, r3
  400aee:	4b26      	ldr	r3, [pc, #152]	; (400b88 <SWD_bitIn+0xf8>)
  400af0:	4798      	blx	r3
	
	uint8_t reportLevel = ioport_get_pin_level(SWIO_PIN);
  400af2:	2003      	movs	r0, #3
  400af4:	4b25      	ldr	r3, [pc, #148]	; (400b8c <SWD_bitIn+0xfc>)
  400af6:	4798      	blx	r3
  400af8:	4603      	mov	r3, r0
  400afa:	71fb      	strb	r3, [r7, #7]
	
	ioport_set_pin_level(SWCLK_PIN,LOW);
  400afc:	2100      	movs	r1, #0
  400afe:	2002      	movs	r0, #2
  400b00:	4b1d      	ldr	r3, [pc, #116]	; (400b78 <SWD_bitIn+0xe8>)
  400b02:	4798      	blx	r3
	delay_us(DURATION_SWCLK_LOW);
  400b04:	4b1d      	ldr	r3, [pc, #116]	; (400b7c <SWD_bitIn+0xec>)
  400b06:	4798      	blx	r3
  400b08:	4603      	mov	r3, r0
  400b0a:	4618      	mov	r0, r3
  400b0c:	f04f 0100 	mov.w	r1, #0
  400b10:	4602      	mov	r2, r0
  400b12:	460b      	mov	r3, r1
  400b14:	1892      	adds	r2, r2, r2
  400b16:	eb43 0303 	adc.w	r3, r3, r3
  400b1a:	1812      	adds	r2, r2, r0
  400b1c:	eb43 0301 	adc.w	r3, r3, r1
  400b20:	011d      	lsls	r5, r3, #4
  400b22:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
  400b26:	0114      	lsls	r4, r2, #4
  400b28:	1aa4      	subs	r4, r4, r2
  400b2a:	eb65 0503 	sbc.w	r5, r5, r3
  400b2e:	1922      	adds	r2, r4, r4
  400b30:	eb45 0305 	adc.w	r3, r5, r5
  400b34:	461c      	mov	r4, r3
  400b36:	4613      	mov	r3, r2
  400b38:	4625      	mov	r5, r4
  400b3a:	461c      	mov	r4, r3
  400b3c:	4621      	mov	r1, r4
  400b3e:	462a      	mov	r2, r5
  400b40:	a40b      	add	r4, pc, #44	; (adr r4, 400b70 <SWD_bitIn+0xe0>)
  400b42:	e9d4 3400 	ldrd	r3, r4, [r4]
  400b46:	18cd      	adds	r5, r1, r3
  400b48:	eb42 0604 	adc.w	r6, r2, r4
  400b4c:	4628      	mov	r0, r5
  400b4e:	4631      	mov	r1, r6
  400b50:	4c0b      	ldr	r4, [pc, #44]	; (400b80 <SWD_bitIn+0xf0>)
  400b52:	4a0c      	ldr	r2, [pc, #48]	; (400b84 <SWD_bitIn+0xf4>)
  400b54:	f04f 0300 	mov.w	r3, #0
  400b58:	47a0      	blx	r4
  400b5a:	4603      	mov	r3, r0
  400b5c:	460c      	mov	r4, r1
  400b5e:	4618      	mov	r0, r3
  400b60:	4b09      	ldr	r3, [pc, #36]	; (400b88 <SWD_bitIn+0xf8>)
  400b62:	4798      	blx	r3
	
	return reportLevel;
  400b64:	79fb      	ldrb	r3, [r7, #7]
}
  400b66:	4618      	mov	r0, r3
  400b68:	370c      	adds	r7, #12
  400b6a:	46bd      	mov	sp, r7
  400b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400b70:	00d59f7f 	.word	0x00d59f7f
  400b74:	00000000 	.word	0x00000000
  400b78:	00400835 	.word	0x00400835
  400b7c:	00400681 	.word	0x00400681
  400b80:	00402ad1 	.word	0x00402ad1
  400b84:	00d59f80 	.word	0x00d59f80
  400b88:	20000001 	.word	0x20000001
  400b8c:	0040089f 	.word	0x0040089f

00400b90 <SWD_bitTurn>:

// Bitbang: Turnaround Bit
void SWD_bitTurn(void){
  400b90:	b580      	push	{r7, lr}
  400b92:	af00      	add	r7, sp, #0
	SWD_bitOut(HIGH);
  400b94:	2001      	movs	r0, #1
  400b96:	4b02      	ldr	r3, [pc, #8]	; (400ba0 <SWD_bitTurn+0x10>)
  400b98:	4798      	blx	r3
}
  400b9a:	bf00      	nop
  400b9c:	bd80      	pop	{r7, pc}
  400b9e:	bf00      	nop
  400ba0:	00400981 	.word	0x00400981

00400ba4 <ithBitLevel>:

// Return the level of the ith bit of a given value
Bool ithBitLevel(uint32_t checkByte, uint8_t ii){
  400ba4:	b480      	push	{r7}
  400ba6:	b083      	sub	sp, #12
  400ba8:	af00      	add	r7, sp, #0
  400baa:	6078      	str	r0, [r7, #4]
  400bac:	460b      	mov	r3, r1
  400bae:	70fb      	strb	r3, [r7, #3]
	// Bit shift the checkByte right, then use bit mask
	return (((checkByte >> ii)&&MASK_32BIT_1)!=0);
  400bb0:	78fb      	ldrb	r3, [r7, #3]
  400bb2:	687a      	ldr	r2, [r7, #4]
  400bb4:	fa22 f303 	lsr.w	r3, r2, r3
  400bb8:	2b00      	cmp	r3, #0
  400bba:	bf14      	ite	ne
  400bbc:	2301      	movne	r3, #1
  400bbe:	2300      	moveq	r3, #0
  400bc0:	b2db      	uxtb	r3, r3
}
  400bc2:	4618      	mov	r0, r3
  400bc4:	370c      	adds	r7, #12
  400bc6:	46bd      	mov	sp, r7
  400bc8:	bc80      	pop	{r7}
  400bca:	4770      	bx	lr

00400bcc <SWD_sendRequest>:

// Bitbang: SWD Request
void SWD_sendRequest(uint8_t requestByte){
  400bcc:	b580      	push	{r7, lr}
  400bce:	b084      	sub	sp, #16
  400bd0:	af00      	add	r7, sp, #0
  400bd2:	4603      	mov	r3, r0
  400bd4:	71fb      	strb	r3, [r7, #7]
	// Set all pins to output
	configSWDPinsOutput();
  400bd6:	4b0f      	ldr	r3, [pc, #60]	; (400c14 <SWD_sendRequest+0x48>)
  400bd8:	4798      	blx	r3
	
	// Send the bits in sequence, LSB first
	for(int ii = 0; ii<LENGTH_SWD_REQUEST;ii++){
  400bda:	2300      	movs	r3, #0
  400bdc:	60fb      	str	r3, [r7, #12]
  400bde:	e012      	b.n	400c06 <SWD_sendRequest+0x3a>
		Bool sendBit = ithBitLevel(requestByte,LENGTH_SWD_REQUEST-1-ii);
  400be0:	79fa      	ldrb	r2, [r7, #7]
  400be2:	68fb      	ldr	r3, [r7, #12]
  400be4:	b2db      	uxtb	r3, r3
  400be6:	f1c3 0307 	rsb	r3, r3, #7
  400bea:	b2db      	uxtb	r3, r3
  400bec:	4619      	mov	r1, r3
  400bee:	4610      	mov	r0, r2
  400bf0:	4b09      	ldr	r3, [pc, #36]	; (400c18 <SWD_sendRequest+0x4c>)
  400bf2:	4798      	blx	r3
  400bf4:	4603      	mov	r3, r0
  400bf6:	72fb      	strb	r3, [r7, #11]
		SWD_bitOut(sendBit);
  400bf8:	7afb      	ldrb	r3, [r7, #11]
  400bfa:	4618      	mov	r0, r3
  400bfc:	4b07      	ldr	r3, [pc, #28]	; (400c1c <SWD_sendRequest+0x50>)
  400bfe:	4798      	blx	r3
	for(int ii = 0; ii<LENGTH_SWD_REQUEST;ii++){
  400c00:	68fb      	ldr	r3, [r7, #12]
  400c02:	3301      	adds	r3, #1
  400c04:	60fb      	str	r3, [r7, #12]
  400c06:	68fb      	ldr	r3, [r7, #12]
  400c08:	2b07      	cmp	r3, #7
  400c0a:	dde9      	ble.n	400be0 <SWD_sendRequest+0x14>
	}
}
  400c0c:	bf00      	nop
  400c0e:	3710      	adds	r7, #16
  400c10:	46bd      	mov	sp, r7
  400c12:	bd80      	pop	{r7, pc}
  400c14:	0040095d 	.word	0x0040095d
  400c18:	00400ba5 	.word	0x00400ba5
  400c1c:	00400981 	.word	0x00400981

00400c20 <SWD_AckGet>:

// Bitbang: SWD Ack Read
uint8_t SWD_AckGet(void){
  400c20:	b580      	push	{r7, lr}
  400c22:	b082      	sub	sp, #8
  400c24:	af00      	add	r7, sp, #0
	uint8_t messageIn = 0;
  400c26:	2300      	movs	r3, #0
  400c28:	71fb      	strb	r3, [r7, #7]
	
	// Take in the three Ack Bits. Data comes in LSB first
	for(uint8_t ii = 0; ii<LENGTH_SWD_ACK; ii++){
  400c2a:	2300      	movs	r3, #0
  400c2c:	71bb      	strb	r3, [r7, #6]
  400c2e:	e016      	b.n	400c5e <SWD_AckGet+0x3e>
		messageIn = messageIn||((SWD_bitIn()&&MASK_8BIT_1)<<ii);
  400c30:	79fb      	ldrb	r3, [r7, #7]
  400c32:	2b00      	cmp	r3, #0
  400c34:	d10c      	bne.n	400c50 <SWD_AckGet+0x30>
  400c36:	4b0e      	ldr	r3, [pc, #56]	; (400c70 <SWD_AckGet+0x50>)
  400c38:	4798      	blx	r3
  400c3a:	4603      	mov	r3, r0
  400c3c:	2b00      	cmp	r3, #0
  400c3e:	d001      	beq.n	400c44 <SWD_AckGet+0x24>
  400c40:	2201      	movs	r2, #1
  400c42:	e000      	b.n	400c46 <SWD_AckGet+0x26>
  400c44:	2200      	movs	r2, #0
  400c46:	79bb      	ldrb	r3, [r7, #6]
  400c48:	fa02 f303 	lsl.w	r3, r2, r3
  400c4c:	2b00      	cmp	r3, #0
  400c4e:	d001      	beq.n	400c54 <SWD_AckGet+0x34>
  400c50:	2301      	movs	r3, #1
  400c52:	e000      	b.n	400c56 <SWD_AckGet+0x36>
  400c54:	2300      	movs	r3, #0
  400c56:	71fb      	strb	r3, [r7, #7]
	for(uint8_t ii = 0; ii<LENGTH_SWD_ACK; ii++){
  400c58:	79bb      	ldrb	r3, [r7, #6]
  400c5a:	3301      	adds	r3, #1
  400c5c:	71bb      	strb	r3, [r7, #6]
  400c5e:	79bb      	ldrb	r3, [r7, #6]
  400c60:	2b02      	cmp	r3, #2
  400c62:	d9e5      	bls.n	400c30 <SWD_AckGet+0x10>
	}
	
	// Behavior changes due to Ack message processed in higher function
	return messageIn;
  400c64:	79fb      	ldrb	r3, [r7, #7]
	
}
  400c66:	4618      	mov	r0, r3
  400c68:	3708      	adds	r7, #8
  400c6a:	46bd      	mov	sp, r7
  400c6c:	bd80      	pop	{r7, pc}
  400c6e:	bf00      	nop
  400c70:	00400a91 	.word	0x00400a91

00400c74 <SWD_DataWrite>:

// Bitbang: Write Data
void SWD_DataWrite(uint32_t dataToSend){
  400c74:	b580      	push	{r7, lr}
  400c76:	b086      	sub	sp, #24
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
	// Set all pins to output
	configSWDPinsOutput();
  400c7c:	4b16      	ldr	r3, [pc, #88]	; (400cd8 <SWD_DataWrite+0x64>)
  400c7e:	4798      	blx	r3
	
	uint8_t checksumValue = 0;
  400c80:	2300      	movs	r3, #0
  400c82:	75fb      	strb	r3, [r7, #23]
	
	// Send the bits in sequence, LSB first. Track checksum
	for(int ii = 0; ii<LENGTH_SWD_DATA;ii++){
  400c84:	2300      	movs	r3, #0
  400c86:	613b      	str	r3, [r7, #16]
  400c88:	e015      	b.n	400cb6 <SWD_DataWrite+0x42>
		Bool sendBit = ithBitLevel(dataToSend,LENGTH_SWD_DATA-1-ii);
  400c8a:	693b      	ldr	r3, [r7, #16]
  400c8c:	b2db      	uxtb	r3, r3
  400c8e:	f1c3 031f 	rsb	r3, r3, #31
  400c92:	b2db      	uxtb	r3, r3
  400c94:	4619      	mov	r1, r3
  400c96:	6878      	ldr	r0, [r7, #4]
  400c98:	4b10      	ldr	r3, [pc, #64]	; (400cdc <SWD_DataWrite+0x68>)
  400c9a:	4798      	blx	r3
  400c9c:	4603      	mov	r3, r0
  400c9e:	73fb      	strb	r3, [r7, #15]
		SWD_bitOut(sendBit);
  400ca0:	7bfb      	ldrb	r3, [r7, #15]
  400ca2:	4618      	mov	r0, r3
  400ca4:	4b0e      	ldr	r3, [pc, #56]	; (400ce0 <SWD_DataWrite+0x6c>)
  400ca6:	4798      	blx	r3
		checksumValue+=sendBit;
  400ca8:	7dfa      	ldrb	r2, [r7, #23]
  400caa:	7bfb      	ldrb	r3, [r7, #15]
  400cac:	4413      	add	r3, r2
  400cae:	75fb      	strb	r3, [r7, #23]
	for(int ii = 0; ii<LENGTH_SWD_DATA;ii++){
  400cb0:	693b      	ldr	r3, [r7, #16]
  400cb2:	3301      	adds	r3, #1
  400cb4:	613b      	str	r3, [r7, #16]
  400cb6:	693b      	ldr	r3, [r7, #16]
  400cb8:	2b1f      	cmp	r3, #31
  400cba:	dde6      	ble.n	400c8a <SWD_DataWrite+0x16>
	}
	
	// Implement the checksum bit: if odd, send 1, if even, send 0
	if(checksumValue&&MASK_8BIT_1){
  400cbc:	7dfb      	ldrb	r3, [r7, #23]
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d003      	beq.n	400cca <SWD_DataWrite+0x56>
		SWD_bitOut(1);
  400cc2:	2001      	movs	r0, #1
  400cc4:	4b06      	ldr	r3, [pc, #24]	; (400ce0 <SWD_DataWrite+0x6c>)
  400cc6:	4798      	blx	r3
	}
	else{
		SWD_bitOut(0);
	}
}
  400cc8:	e002      	b.n	400cd0 <SWD_DataWrite+0x5c>
		SWD_bitOut(0);
  400cca:	2000      	movs	r0, #0
  400ccc:	4b04      	ldr	r3, [pc, #16]	; (400ce0 <SWD_DataWrite+0x6c>)
  400cce:	4798      	blx	r3
}
  400cd0:	bf00      	nop
  400cd2:	3718      	adds	r7, #24
  400cd4:	46bd      	mov	sp, r7
  400cd6:	bd80      	pop	{r7, pc}
  400cd8:	0040095d 	.word	0x0040095d
  400cdc:	00400ba5 	.word	0x00400ba5
  400ce0:	00400981 	.word	0x00400981

00400ce4 <SWD_DataRead>:

//Bitbang: Read Data
uint32_t SWD_DataRead(void){
  400ce4:	b580      	push	{r7, lr}
  400ce6:	b082      	sub	sp, #8
  400ce8:	af00      	add	r7, sp, #0
	uint32_t dataIn = 0;
  400cea:	2300      	movs	r3, #0
  400cec:	607b      	str	r3, [r7, #4]
	
	// Take in data Bits. Data comes in LSB first
	for(uint8_t ii = 0; ii<LENGTH_SWD_DATA; ii++){
  400cee:	2300      	movs	r3, #0
  400cf0:	70fb      	strb	r3, [r7, #3]
  400cf2:	e016      	b.n	400d22 <SWD_DataRead+0x3e>
		dataIn = dataIn||((SWD_bitIn()&&MASK_32BIT_1)<<ii);
  400cf4:	687b      	ldr	r3, [r7, #4]
  400cf6:	2b00      	cmp	r3, #0
  400cf8:	d10c      	bne.n	400d14 <SWD_DataRead+0x30>
  400cfa:	4b0f      	ldr	r3, [pc, #60]	; (400d38 <SWD_DataRead+0x54>)
  400cfc:	4798      	blx	r3
  400cfe:	4603      	mov	r3, r0
  400d00:	2b00      	cmp	r3, #0
  400d02:	d001      	beq.n	400d08 <SWD_DataRead+0x24>
  400d04:	2201      	movs	r2, #1
  400d06:	e000      	b.n	400d0a <SWD_DataRead+0x26>
  400d08:	2200      	movs	r2, #0
  400d0a:	78fb      	ldrb	r3, [r7, #3]
  400d0c:	fa02 f303 	lsl.w	r3, r2, r3
  400d10:	2b00      	cmp	r3, #0
  400d12:	d001      	beq.n	400d18 <SWD_DataRead+0x34>
  400d14:	2301      	movs	r3, #1
  400d16:	e000      	b.n	400d1a <SWD_DataRead+0x36>
  400d18:	2300      	movs	r3, #0
  400d1a:	607b      	str	r3, [r7, #4]
	for(uint8_t ii = 0; ii<LENGTH_SWD_DATA; ii++){
  400d1c:	78fb      	ldrb	r3, [r7, #3]
  400d1e:	3301      	adds	r3, #1
  400d20:	70fb      	strb	r3, [r7, #3]
  400d22:	78fb      	ldrb	r3, [r7, #3]
  400d24:	2b1f      	cmp	r3, #31
  400d26:	d9e5      	bls.n	400cf4 <SWD_DataRead+0x10>
	}
	
	// Read one more bit for the parity bit (assume that everything went OK)
	SWD_bitIn();
  400d28:	4b03      	ldr	r3, [pc, #12]	; (400d38 <SWD_DataRead+0x54>)
  400d2a:	4798      	blx	r3
	
	//return the data
	return dataIn;
  400d2c:	687b      	ldr	r3, [r7, #4]
}
  400d2e:	4618      	mov	r0, r3
  400d30:	3708      	adds	r7, #8
  400d32:	46bd      	mov	sp, r7
  400d34:	bd80      	pop	{r7, pc}
  400d36:	bf00      	nop
  400d38:	00400a91 	.word	0x00400a91
  400d3c:	00000000 	.word	0x00000000

00400d40 <SWD_Comm>:


// Generic function to perform an SWD message
uint32_t SWD_Comm(uint8_t command, uint32_t data){
  400d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d44:	b08d      	sub	sp, #52	; 0x34
  400d46:	af00      	add	r7, sp, #0
  400d48:	4603      	mov	r3, r0
  400d4a:	6239      	str	r1, [r7, #32]
  400d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// Determine if Read or Write
	if((command>>5)&&MASK_8BIT_1){
  400d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400d54:	095b      	lsrs	r3, r3, #5
  400d56:	b2db      	uxtb	r3, r3
  400d58:	2b00      	cmp	r3, #0
  400d5a:	d05c      	beq.n	400e16 <SWD_Comm+0xd6>
		// If 1, Read
		uint32_t okFlag = 0;
  400d5c:	2300      	movs	r3, #0
  400d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		
		while(!okFlag){
  400d60:	e052      	b.n	400e08 <SWD_Comm+0xc8>
			configSWDPinsOutput();
  400d62:	4b61      	ldr	r3, [pc, #388]	; (400ee8 <SWD_Comm+0x1a8>)
  400d64:	4798      	blx	r3
			SWD_sendRequest(command);
  400d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400d6a:	4618      	mov	r0, r3
  400d6c:	4b5f      	ldr	r3, [pc, #380]	; (400eec <SWD_Comm+0x1ac>)
  400d6e:	4798      	blx	r3
			
			SWD_bitTurn();
  400d70:	4b5f      	ldr	r3, [pc, #380]	; (400ef0 <SWD_Comm+0x1b0>)
  400d72:	4798      	blx	r3
			configSWDPinsInput();
  400d74:	4b5f      	ldr	r3, [pc, #380]	; (400ef4 <SWD_Comm+0x1b4>)
  400d76:	4798      	blx	r3
			
			// Will break out if get Ack ok otherwise will have to repeat
			if(SWD_AckGet()==MSG_ACK_OK){
  400d78:	4b5f      	ldr	r3, [pc, #380]	; (400ef8 <SWD_Comm+0x1b8>)
  400d7a:	4798      	blx	r3
  400d7c:	4603      	mov	r3, r0
  400d7e:	2b01      	cmp	r3, #1
  400d80:	d102      	bne.n	400d88 <SWD_Comm+0x48>
				okFlag = 1;
  400d82:	2301      	movs	r3, #1
  400d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  400d86:	e03f      	b.n	400e08 <SWD_Comm+0xc8>
			}
			else{
				delay_us(DURATION_ACKWAIT);
  400d88:	4b5c      	ldr	r3, [pc, #368]	; (400efc <SWD_Comm+0x1bc>)
  400d8a:	4798      	blx	r3
  400d8c:	4603      	mov	r3, r0
  400d8e:	4619      	mov	r1, r3
  400d90:	f04f 0200 	mov.w	r2, #0
  400d94:	460b      	mov	r3, r1
  400d96:	4614      	mov	r4, r2
  400d98:	0160      	lsls	r0, r4, #5
  400d9a:	61f8      	str	r0, [r7, #28]
  400d9c:	69f8      	ldr	r0, [r7, #28]
  400d9e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  400da2:	61f8      	str	r0, [r7, #28]
  400da4:	015b      	lsls	r3, r3, #5
  400da6:	61bb      	str	r3, [r7, #24]
  400da8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  400dac:	1a5b      	subs	r3, r3, r1
  400dae:	eb64 0402 	sbc.w	r4, r4, r2
  400db2:	00a0      	lsls	r0, r4, #2
  400db4:	6178      	str	r0, [r7, #20]
  400db6:	6978      	ldr	r0, [r7, #20]
  400db8:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  400dbc:	6178      	str	r0, [r7, #20]
  400dbe:	009b      	lsls	r3, r3, #2
  400dc0:	613b      	str	r3, [r7, #16]
  400dc2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  400dc6:	185b      	adds	r3, r3, r1
  400dc8:	eb44 0402 	adc.w	r4, r4, r2
  400dcc:	00e2      	lsls	r2, r4, #3
  400dce:	60fa      	str	r2, [r7, #12]
  400dd0:	68fa      	ldr	r2, [r7, #12]
  400dd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  400dd6:	60fa      	str	r2, [r7, #12]
  400dd8:	00db      	lsls	r3, r3, #3
  400dda:	60bb      	str	r3, [r7, #8]
  400ddc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  400de0:	4619      	mov	r1, r3
  400de2:	4622      	mov	r2, r4
  400de4:	a43e      	add	r4, pc, #248	; (adr r4, 400ee0 <SWD_Comm+0x1a0>)
  400de6:	e9d4 3400 	ldrd	r3, r4, [r4]
  400dea:	18cd      	adds	r5, r1, r3
  400dec:	eb42 0604 	adc.w	r6, r2, r4
  400df0:	4628      	mov	r0, r5
  400df2:	4631      	mov	r1, r6
  400df4:	4c42      	ldr	r4, [pc, #264]	; (400f00 <SWD_Comm+0x1c0>)
  400df6:	4a43      	ldr	r2, [pc, #268]	; (400f04 <SWD_Comm+0x1c4>)
  400df8:	f04f 0300 	mov.w	r3, #0
  400dfc:	47a0      	blx	r4
  400dfe:	4603      	mov	r3, r0
  400e00:	460c      	mov	r4, r1
  400e02:	4618      	mov	r0, r3
  400e04:	4b40      	ldr	r3, [pc, #256]	; (400f08 <SWD_Comm+0x1c8>)
  400e06:	4798      	blx	r3
		while(!okFlag){
  400e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d0a9      	beq.n	400d62 <SWD_Comm+0x22>
			}
		}
		// No turn for read
		return SWD_DataRead();
  400e0e:	4b3f      	ldr	r3, [pc, #252]	; (400f0c <SWD_Comm+0x1cc>)
  400e10:	4798      	blx	r3
  400e12:	4603      	mov	r3, r0
  400e14:	e05c      	b.n	400ed0 <SWD_Comm+0x190>
	}
	else{
		// If 0, Write
		uint32_t okFlag = 0;
  400e16:	2300      	movs	r3, #0
  400e18:	62bb      	str	r3, [r7, #40]	; 0x28
		
		while(!okFlag){
  400e1a:	e04e      	b.n	400eba <SWD_Comm+0x17a>
			configSWDPinsOutput();
  400e1c:	4b32      	ldr	r3, [pc, #200]	; (400ee8 <SWD_Comm+0x1a8>)
  400e1e:	4798      	blx	r3
			SWD_sendRequest(command);
  400e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  400e24:	4618      	mov	r0, r3
  400e26:	4b31      	ldr	r3, [pc, #196]	; (400eec <SWD_Comm+0x1ac>)
  400e28:	4798      	blx	r3
			
			SWD_bitTurn();
  400e2a:	4b31      	ldr	r3, [pc, #196]	; (400ef0 <SWD_Comm+0x1b0>)
  400e2c:	4798      	blx	r3
			configSWDPinsInput();
  400e2e:	4b31      	ldr	r3, [pc, #196]	; (400ef4 <SWD_Comm+0x1b4>)
  400e30:	4798      	blx	r3
			
			// Will break out if get Ack ok otherwise will have to repeat
			if(SWD_AckGet()==MSG_ACK_OK){
  400e32:	4b31      	ldr	r3, [pc, #196]	; (400ef8 <SWD_Comm+0x1b8>)
  400e34:	4798      	blx	r3
  400e36:	4603      	mov	r3, r0
  400e38:	2b01      	cmp	r3, #1
  400e3a:	d102      	bne.n	400e42 <SWD_Comm+0x102>
				okFlag = 1;
  400e3c:	2301      	movs	r3, #1
  400e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  400e40:	e03b      	b.n	400eba <SWD_Comm+0x17a>
			}
			else{
				delay_us(DURATION_ACKWAIT);
  400e42:	4b2e      	ldr	r3, [pc, #184]	; (400efc <SWD_Comm+0x1bc>)
  400e44:	4798      	blx	r3
  400e46:	4603      	mov	r3, r0
  400e48:	4619      	mov	r1, r3
  400e4a:	f04f 0200 	mov.w	r2, #0
  400e4e:	460b      	mov	r3, r1
  400e50:	4614      	mov	r4, r2
  400e52:	0160      	lsls	r0, r4, #5
  400e54:	6078      	str	r0, [r7, #4]
  400e56:	6878      	ldr	r0, [r7, #4]
  400e58:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  400e5c:	6078      	str	r0, [r7, #4]
  400e5e:	015b      	lsls	r3, r3, #5
  400e60:	603b      	str	r3, [r7, #0]
  400e62:	e9d7 3400 	ldrd	r3, r4, [r7]
  400e66:	1a5b      	subs	r3, r3, r1
  400e68:	eb64 0402 	sbc.w	r4, r4, r2
  400e6c:	ea4f 0984 	mov.w	r9, r4, lsl #2
  400e70:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  400e74:	ea4f 0883 	mov.w	r8, r3, lsl #2
  400e78:	4643      	mov	r3, r8
  400e7a:	464c      	mov	r4, r9
  400e7c:	185b      	adds	r3, r3, r1
  400e7e:	eb44 0402 	adc.w	r4, r4, r2
  400e82:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  400e86:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  400e8a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  400e8e:	4653      	mov	r3, sl
  400e90:	465c      	mov	r4, fp
  400e92:	4619      	mov	r1, r3
  400e94:	4622      	mov	r2, r4
  400e96:	a412      	add	r4, pc, #72	; (adr r4, 400ee0 <SWD_Comm+0x1a0>)
  400e98:	e9d4 3400 	ldrd	r3, r4, [r4]
  400e9c:	18cd      	adds	r5, r1, r3
  400e9e:	eb42 0604 	adc.w	r6, r2, r4
  400ea2:	4628      	mov	r0, r5
  400ea4:	4631      	mov	r1, r6
  400ea6:	4c16      	ldr	r4, [pc, #88]	; (400f00 <SWD_Comm+0x1c0>)
  400ea8:	4a16      	ldr	r2, [pc, #88]	; (400f04 <SWD_Comm+0x1c4>)
  400eaa:	f04f 0300 	mov.w	r3, #0
  400eae:	47a0      	blx	r4
  400eb0:	4603      	mov	r3, r0
  400eb2:	460c      	mov	r4, r1
  400eb4:	4618      	mov	r0, r3
  400eb6:	4b14      	ldr	r3, [pc, #80]	; (400f08 <SWD_Comm+0x1c8>)
  400eb8:	4798      	blx	r3
		while(!okFlag){
  400eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400ebc:	2b00      	cmp	r3, #0
  400ebe:	d0ad      	beq.n	400e1c <SWD_Comm+0xdc>
			}
		}
		configSWDPinsOutput();
  400ec0:	4b09      	ldr	r3, [pc, #36]	; (400ee8 <SWD_Comm+0x1a8>)
  400ec2:	4798      	blx	r3
		SWD_bitTurn();
  400ec4:	4b0a      	ldr	r3, [pc, #40]	; (400ef0 <SWD_Comm+0x1b0>)
  400ec6:	4798      	blx	r3
		SWD_DataWrite(data);
  400ec8:	6a38      	ldr	r0, [r7, #32]
  400eca:	4b11      	ldr	r3, [pc, #68]	; (400f10 <SWD_Comm+0x1d0>)
  400ecc:	4798      	blx	r3
		return 1;
  400ece:	2301      	movs	r3, #1
	}
}
  400ed0:	4618      	mov	r0, r3
  400ed2:	3734      	adds	r7, #52	; 0x34
  400ed4:	46bd      	mov	sp, r7
  400ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400eda:	bf00      	nop
  400edc:	f3af 8000 	nop.w
  400ee0:	00d59f7f 	.word	0x00d59f7f
  400ee4:	00000000 	.word	0x00000000
  400ee8:	0040095d 	.word	0x0040095d
  400eec:	00400bcd 	.word	0x00400bcd
  400ef0:	00400b91 	.word	0x00400b91
  400ef4:	0040093d 	.word	0x0040093d
  400ef8:	00400c21 	.word	0x00400c21
  400efc:	00400681 	.word	0x00400681
  400f00:	00402ad1 	.word	0x00402ad1
  400f04:	00d59f80 	.word	0x00d59f80
  400f08:	20000001 	.word	0x20000001
  400f0c:	00400ce5 	.word	0x00400ce5
  400f10:	00400c75 	.word	0x00400c75

00400f14 <SWD_Start>:
	delay_ms(DURATION_CLEAR);
}

//High Level SWD Commands /////////////////////////////////////////////////
// Perform all start configurations for SWD
void SWD_Start(void ){
  400f14:	b580      	push	{r7, lr}
  400f16:	b088      	sub	sp, #32
  400f18:	af00      	add	r7, sp, #0
	//////////////////////////////////////////////////////////////////
	// Purely an output operation
	configSWDPinsOutput();
  400f1a:	4b36      	ldr	r3, [pc, #216]	; (400ff4 <SWD_Start+0xe0>)
  400f1c:	4798      	blx	r3
	
	// Go from JTAG to SWD
	// Write the first reset message
	for(uint32_t ii = 0; ii < STARTUP_HIGH_1;ii++){
  400f1e:	2300      	movs	r3, #0
  400f20:	61fb      	str	r3, [r7, #28]
  400f22:	e005      	b.n	400f30 <SWD_Start+0x1c>
		SWD_bitOut(HIGH);
  400f24:	2001      	movs	r0, #1
  400f26:	4b34      	ldr	r3, [pc, #208]	; (400ff8 <SWD_Start+0xe4>)
  400f28:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_HIGH_1;ii++){
  400f2a:	69fb      	ldr	r3, [r7, #28]
  400f2c:	3301      	adds	r3, #1
  400f2e:	61fb      	str	r3, [r7, #28]
  400f30:	69fb      	ldr	r3, [r7, #28]
  400f32:	2b37      	cmp	r3, #55	; 0x37
  400f34:	d9f6      	bls.n	400f24 <SWD_Start+0x10>
	}
	// Write the first message
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_1;ii++){
  400f36:	2300      	movs	r3, #0
  400f38:	61bb      	str	r3, [r7, #24]
  400f3a:	e011      	b.n	400f60 <SWD_Start+0x4c>
		SWD_bitOut(MASK_32BIT_1&&(STARTUP_MSG_1>>(STARTUP_MSGLEN_1-ii)));
  400f3c:	69bb      	ldr	r3, [r7, #24]
  400f3e:	f1c3 030c 	rsb	r3, r3, #12
  400f42:	f640 723c 	movw	r2, #3900	; 0xf3c
  400f46:	fa42 f303 	asr.w	r3, r2, r3
  400f4a:	2b00      	cmp	r3, #0
  400f4c:	bf14      	ite	ne
  400f4e:	2301      	movne	r3, #1
  400f50:	2300      	moveq	r3, #0
  400f52:	b2db      	uxtb	r3, r3
  400f54:	4618      	mov	r0, r3
  400f56:	4b28      	ldr	r3, [pc, #160]	; (400ff8 <SWD_Start+0xe4>)
  400f58:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_1;ii++){
  400f5a:	69bb      	ldr	r3, [r7, #24]
  400f5c:	3301      	adds	r3, #1
  400f5e:	61bb      	str	r3, [r7, #24]
  400f60:	69bb      	ldr	r3, [r7, #24]
  400f62:	2b0b      	cmp	r3, #11
  400f64:	d9ea      	bls.n	400f3c <SWD_Start+0x28>
	}
	
	// Write the second reset message
	for(uint32_t ii = 0; ii < STARTUP_HIGH_2;ii++){
  400f66:	2300      	movs	r3, #0
  400f68:	617b      	str	r3, [r7, #20]
  400f6a:	e005      	b.n	400f78 <SWD_Start+0x64>
		SWD_bitOut(HIGH);
  400f6c:	2001      	movs	r0, #1
  400f6e:	4b22      	ldr	r3, [pc, #136]	; (400ff8 <SWD_Start+0xe4>)
  400f70:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_HIGH_2;ii++){
  400f72:	697b      	ldr	r3, [r7, #20]
  400f74:	3301      	adds	r3, #1
  400f76:	617b      	str	r3, [r7, #20]
  400f78:	697b      	ldr	r3, [r7, #20]
  400f7a:	2b3a      	cmp	r3, #58	; 0x3a
  400f7c:	d9f6      	bls.n	400f6c <SWD_Start+0x58>
	}
	// Write the second message
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_2;ii++){
  400f7e:	2300      	movs	r3, #0
  400f80:	613b      	str	r3, [r7, #16]
  400f82:	e011      	b.n	400fa8 <SWD_Start+0x94>
		SWD_bitOut(MASK_32BIT_1&&(STARTUP_MSG_2>>(STARTUP_MSGLEN_2-ii)));
  400f84:	693b      	ldr	r3, [r7, #16]
  400f86:	f1c3 030d 	rsb	r3, r3, #13
  400f8a:	f640 52b6 	movw	r2, #3510	; 0xdb6
  400f8e:	fa42 f303 	asr.w	r3, r2, r3
  400f92:	2b00      	cmp	r3, #0
  400f94:	bf14      	ite	ne
  400f96:	2301      	movne	r3, #1
  400f98:	2300      	moveq	r3, #0
  400f9a:	b2db      	uxtb	r3, r3
  400f9c:	4618      	mov	r0, r3
  400f9e:	4b16      	ldr	r3, [pc, #88]	; (400ff8 <SWD_Start+0xe4>)
  400fa0:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_2;ii++){
  400fa2:	693b      	ldr	r3, [r7, #16]
  400fa4:	3301      	adds	r3, #1
  400fa6:	613b      	str	r3, [r7, #16]
  400fa8:	693b      	ldr	r3, [r7, #16]
  400faa:	2b0c      	cmp	r3, #12
  400fac:	d9ea      	bls.n	400f84 <SWD_Start+0x70>
	}
	
	// Write the third reset message
	for(uint32_t ii = 0; ii < STARTUP_HIGH_3;ii++){
  400fae:	2300      	movs	r3, #0
  400fb0:	60fb      	str	r3, [r7, #12]
  400fb2:	e005      	b.n	400fc0 <SWD_Start+0xac>
		SWD_bitOut(HIGH);
  400fb4:	2001      	movs	r0, #1
  400fb6:	4b10      	ldr	r3, [pc, #64]	; (400ff8 <SWD_Start+0xe4>)
  400fb8:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_HIGH_3;ii++){
  400fba:	68fb      	ldr	r3, [r7, #12]
  400fbc:	3301      	adds	r3, #1
  400fbe:	60fb      	str	r3, [r7, #12]
  400fc0:	68fb      	ldr	r3, [r7, #12]
  400fc2:	2b3a      	cmp	r3, #58	; 0x3a
  400fc4:	d9f6      	bls.n	400fb4 <SWD_Start+0xa0>
	}
	// Write the third message
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_3;ii++){
  400fc6:	2300      	movs	r3, #0
  400fc8:	60bb      	str	r3, [r7, #8]
  400fca:	e005      	b.n	400fd8 <SWD_Start+0xc4>
		SWD_bitOut(MASK_32BIT_1&&(STARTUP_MSG_3>>(STARTUP_MSGLEN_3-ii)));
  400fcc:	2000      	movs	r0, #0
  400fce:	4b0a      	ldr	r3, [pc, #40]	; (400ff8 <SWD_Start+0xe4>)
  400fd0:	4798      	blx	r3
	for(uint32_t ii = 0; ii < STARTUP_MSGLEN_3;ii++){
  400fd2:	68bb      	ldr	r3, [r7, #8]
  400fd4:	3301      	adds	r3, #1
  400fd6:	60bb      	str	r3, [r7, #8]
  400fd8:	68bb      	ldr	r3, [r7, #8]
  400fda:	2b0f      	cmp	r3, #15
  400fdc:	d9f6      	bls.n	400fcc <SWD_Start+0xb8>
	}
	//////////////////////////////////////////////////////////////////
	// Request device ID
	uint32_t deviceTag = SWD_Comm(RQ_DP_READ_IDCODE, MSG_NULL);
  400fde:	2100      	movs	r1, #0
  400fe0:	20a5      	movs	r0, #165	; 0xa5
  400fe2:	4b06      	ldr	r3, [pc, #24]	; (400ffc <SWD_Start+0xe8>)
  400fe4:	4798      	blx	r3
  400fe6:	6078      	str	r0, [r7, #4]

	deviceTag=0;
  400fe8:	2300      	movs	r3, #0
  400fea:	607b      	str	r3, [r7, #4]

}
  400fec:	bf00      	nop
  400fee:	3720      	adds	r7, #32
  400ff0:	46bd      	mov	sp, r7
  400ff2:	bd80      	pop	{r7, pc}
  400ff4:	0040095d 	.word	0x0040095d
  400ff8:	00400981 	.word	0x00400981
  400ffc:	00400d41 	.word	0x00400d41

00401000 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401000:	b480      	push	{r7}
  401002:	b083      	sub	sp, #12
  401004:	af00      	add	r7, sp, #0
  401006:	4603      	mov	r3, r0
  401008:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40100a:	4908      	ldr	r1, [pc, #32]	; (40102c <NVIC_EnableIRQ+0x2c>)
  40100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401010:	095b      	lsrs	r3, r3, #5
  401012:	79fa      	ldrb	r2, [r7, #7]
  401014:	f002 021f 	and.w	r2, r2, #31
  401018:	2001      	movs	r0, #1
  40101a:	fa00 f202 	lsl.w	r2, r0, r2
  40101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401022:	bf00      	nop
  401024:	370c      	adds	r7, #12
  401026:	46bd      	mov	sp, r7
  401028:	bc80      	pop	{r7}
  40102a:	4770      	bx	lr
  40102c:	e000e100 	.word	0xe000e100

00401030 <osc_get_rate>:
{
  401030:	b480      	push	{r7}
  401032:	b083      	sub	sp, #12
  401034:	af00      	add	r7, sp, #0
  401036:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401038:	687b      	ldr	r3, [r7, #4]
  40103a:	2b07      	cmp	r3, #7
  40103c:	d825      	bhi.n	40108a <osc_get_rate+0x5a>
  40103e:	a201      	add	r2, pc, #4	; (adr r2, 401044 <osc_get_rate+0x14>)
  401040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401044:	00401065 	.word	0x00401065
  401048:	0040106b 	.word	0x0040106b
  40104c:	00401071 	.word	0x00401071
  401050:	00401077 	.word	0x00401077
  401054:	0040107b 	.word	0x0040107b
  401058:	0040107f 	.word	0x0040107f
  40105c:	00401083 	.word	0x00401083
  401060:	00401087 	.word	0x00401087
		return OSC_SLCK_32K_RC_HZ;
  401064:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401068:	e010      	b.n	40108c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40106a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40106e:	e00d      	b.n	40108c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401074:	e00a      	b.n	40108c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401076:	4b08      	ldr	r3, [pc, #32]	; (401098 <osc_get_rate+0x68>)
  401078:	e008      	b.n	40108c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40107a:	4b08      	ldr	r3, [pc, #32]	; (40109c <osc_get_rate+0x6c>)
  40107c:	e006      	b.n	40108c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40107e:	4b08      	ldr	r3, [pc, #32]	; (4010a0 <osc_get_rate+0x70>)
  401080:	e004      	b.n	40108c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401082:	4b07      	ldr	r3, [pc, #28]	; (4010a0 <osc_get_rate+0x70>)
  401084:	e002      	b.n	40108c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401086:	4b06      	ldr	r3, [pc, #24]	; (4010a0 <osc_get_rate+0x70>)
  401088:	e000      	b.n	40108c <osc_get_rate+0x5c>
	return 0;
  40108a:	2300      	movs	r3, #0
}
  40108c:	4618      	mov	r0, r3
  40108e:	370c      	adds	r7, #12
  401090:	46bd      	mov	sp, r7
  401092:	bc80      	pop	{r7}
  401094:	4770      	bx	lr
  401096:	bf00      	nop
  401098:	003d0900 	.word	0x003d0900
  40109c:	007a1200 	.word	0x007a1200
  4010a0:	00b71b00 	.word	0x00b71b00

004010a4 <sysclk_get_main_hz>:
{
  4010a4:	b580      	push	{r7, lr}
  4010a6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4010a8:	2006      	movs	r0, #6
  4010aa:	4b04      	ldr	r3, [pc, #16]	; (4010bc <sysclk_get_main_hz+0x18>)
  4010ac:	4798      	blx	r3
  4010ae:	4602      	mov	r2, r0
  4010b0:	4613      	mov	r3, r2
  4010b2:	009b      	lsls	r3, r3, #2
  4010b4:	4413      	add	r3, r2
  4010b6:	009b      	lsls	r3, r3, #2
}
  4010b8:	4618      	mov	r0, r3
  4010ba:	bd80      	pop	{r7, pc}
  4010bc:	00401031 	.word	0x00401031

004010c0 <sysclk_get_cpu_hz>:
{
  4010c0:	b580      	push	{r7, lr}
  4010c2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4010c4:	4b02      	ldr	r3, [pc, #8]	; (4010d0 <sysclk_get_cpu_hz+0x10>)
  4010c6:	4798      	blx	r3
  4010c8:	4603      	mov	r3, r0
  4010ca:	085b      	lsrs	r3, r3, #1
}
  4010cc:	4618      	mov	r0, r3
  4010ce:	bd80      	pop	{r7, pc}
  4010d0:	004010a5 	.word	0x004010a5

004010d4 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4010d4:	b580      	push	{r7, lr}
  4010d6:	b082      	sub	sp, #8
  4010d8:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  4010da:	2100      	movs	r1, #0
  4010dc:	4809      	ldr	r0, [pc, #36]	; (401104 <TC0_Handler+0x30>)
  4010de:	4b0a      	ldr	r3, [pc, #40]	; (401108 <TC0_Handler+0x34>)
  4010e0:	4798      	blx	r3
  4010e2:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4010e4:	687b      	ldr	r3, [r7, #4]
  4010e6:	f003 0310 	and.w	r3, r3, #16
  4010ea:	2b00      	cmp	r3, #0
  4010ec:	d006      	beq.n	4010fc <TC0_Handler+0x28>
		counts++;
  4010ee:	4b07      	ldr	r3, [pc, #28]	; (40110c <TC0_Handler+0x38>)
  4010f0:	781b      	ldrb	r3, [r3, #0]
  4010f2:	b2db      	uxtb	r3, r3
  4010f4:	3301      	adds	r3, #1
  4010f6:	b2da      	uxtb	r2, r3
  4010f8:	4b04      	ldr	r3, [pc, #16]	; (40110c <TC0_Handler+0x38>)
  4010fa:	701a      	strb	r2, [r3, #0]
	}
}
  4010fc:	bf00      	nop
  4010fe:	3708      	adds	r7, #8
  401100:	46bd      	mov	sp, r7
  401102:	bd80      	pop	{r7, pc}
  401104:	40010000 	.word	0x40010000
  401108:	00402377 	.word	0x00402377
  40110c:	200004e0 	.word	0x200004e0

00401110 <configure_tc>:

void configure_tc(void)
{
  401110:	b590      	push	{r4, r7, lr}
  401112:	b087      	sub	sp, #28
  401114:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  401116:	4b18      	ldr	r3, [pc, #96]	; (401178 <configure_tc+0x68>)
  401118:	4798      	blx	r3
  40111a:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  40111c:	2017      	movs	r0, #23
  40111e:	4b17      	ldr	r3, [pc, #92]	; (40117c <configure_tc+0x6c>)
  401120:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401122:	1d39      	adds	r1, r7, #4
  401124:	f107 0208 	add.w	r2, r7, #8
  401128:	68fb      	ldr	r3, [r7, #12]
  40112a:	9300      	str	r3, [sp, #0]
  40112c:	460b      	mov	r3, r1
  40112e:	68f9      	ldr	r1, [r7, #12]
  401130:	2001      	movs	r0, #1
  401132:	4c13      	ldr	r4, [pc, #76]	; (401180 <configure_tc+0x70>)
  401134:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  401136:	687b      	ldr	r3, [r7, #4]
  401138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40113c:	461a      	mov	r2, r3
  40113e:	2100      	movs	r1, #0
  401140:	4810      	ldr	r0, [pc, #64]	; (401184 <configure_tc+0x74>)
  401142:	4b11      	ldr	r3, [pc, #68]	; (401188 <configure_tc+0x78>)
  401144:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  401146:	68bb      	ldr	r3, [r7, #8]
  401148:	68fa      	ldr	r2, [r7, #12]
  40114a:	fbb2 f3f3 	udiv	r3, r2, r3
  40114e:	461a      	mov	r2, r3
  401150:	2100      	movs	r1, #0
  401152:	480c      	ldr	r0, [pc, #48]	; (401184 <configure_tc+0x74>)
  401154:	4b0d      	ldr	r3, [pc, #52]	; (40118c <configure_tc+0x7c>)
  401156:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  401158:	2017      	movs	r0, #23
  40115a:	4b0d      	ldr	r3, [pc, #52]	; (401190 <configure_tc+0x80>)
  40115c:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40115e:	2210      	movs	r2, #16
  401160:	2100      	movs	r1, #0
  401162:	4808      	ldr	r0, [pc, #32]	; (401184 <configure_tc+0x74>)
  401164:	4b0b      	ldr	r3, [pc, #44]	; (401194 <configure_tc+0x84>)
  401166:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  401168:	2100      	movs	r1, #0
  40116a:	4806      	ldr	r0, [pc, #24]	; (401184 <configure_tc+0x74>)
  40116c:	4b0a      	ldr	r3, [pc, #40]	; (401198 <configure_tc+0x88>)
  40116e:	4798      	blx	r3
  401170:	bf00      	nop
  401172:	3714      	adds	r7, #20
  401174:	46bd      	mov	sp, r7
  401176:	bd90      	pop	{r4, r7, pc}
  401178:	004010c1 	.word	0x004010c1
  40117c:	00402255 	.word	0x00402255
  401180:	00402399 	.word	0x00402399
  401184:	40010000 	.word	0x40010000
  401188:	004022d5 	.word	0x004022d5
  40118c:	0040232d 	.word	0x0040232d
  401190:	00401001 	.word	0x00401001
  401194:	00402351 	.word	0x00402351
  401198:	0040230d 	.word	0x0040230d

0040119c <NVIC_EnableIRQ>:
{
  40119c:	b480      	push	{r7}
  40119e:	b083      	sub	sp, #12
  4011a0:	af00      	add	r7, sp, #0
  4011a2:	4603      	mov	r3, r0
  4011a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4011a6:	4908      	ldr	r1, [pc, #32]	; (4011c8 <NVIC_EnableIRQ+0x2c>)
  4011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4011ac:	095b      	lsrs	r3, r3, #5
  4011ae:	79fa      	ldrb	r2, [r7, #7]
  4011b0:	f002 021f 	and.w	r2, r2, #31
  4011b4:	2001      	movs	r0, #1
  4011b6:	fa00 f202 	lsl.w	r2, r0, r2
  4011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4011be:	bf00      	nop
  4011c0:	370c      	adds	r7, #12
  4011c2:	46bd      	mov	sp, r7
  4011c4:	bc80      	pop	{r7}
  4011c6:	4770      	bx	lr
  4011c8:	e000e100 	.word	0xe000e100

004011cc <osc_get_rate>:
{
  4011cc:	b480      	push	{r7}
  4011ce:	b083      	sub	sp, #12
  4011d0:	af00      	add	r7, sp, #0
  4011d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4011d4:	687b      	ldr	r3, [r7, #4]
  4011d6:	2b07      	cmp	r3, #7
  4011d8:	d825      	bhi.n	401226 <osc_get_rate+0x5a>
  4011da:	a201      	add	r2, pc, #4	; (adr r2, 4011e0 <osc_get_rate+0x14>)
  4011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4011e0:	00401201 	.word	0x00401201
  4011e4:	00401207 	.word	0x00401207
  4011e8:	0040120d 	.word	0x0040120d
  4011ec:	00401213 	.word	0x00401213
  4011f0:	00401217 	.word	0x00401217
  4011f4:	0040121b 	.word	0x0040121b
  4011f8:	0040121f 	.word	0x0040121f
  4011fc:	00401223 	.word	0x00401223
		return OSC_SLCK_32K_RC_HZ;
  401200:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401204:	e010      	b.n	401228 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40120a:	e00d      	b.n	401228 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40120c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401210:	e00a      	b.n	401228 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401212:	4b08      	ldr	r3, [pc, #32]	; (401234 <osc_get_rate+0x68>)
  401214:	e008      	b.n	401228 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401216:	4b08      	ldr	r3, [pc, #32]	; (401238 <osc_get_rate+0x6c>)
  401218:	e006      	b.n	401228 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40121a:	4b08      	ldr	r3, [pc, #32]	; (40123c <osc_get_rate+0x70>)
  40121c:	e004      	b.n	401228 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40121e:	4b07      	ldr	r3, [pc, #28]	; (40123c <osc_get_rate+0x70>)
  401220:	e002      	b.n	401228 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401222:	4b06      	ldr	r3, [pc, #24]	; (40123c <osc_get_rate+0x70>)
  401224:	e000      	b.n	401228 <osc_get_rate+0x5c>
	return 0;
  401226:	2300      	movs	r3, #0
}
  401228:	4618      	mov	r0, r3
  40122a:	370c      	adds	r7, #12
  40122c:	46bd      	mov	sp, r7
  40122e:	bc80      	pop	{r7}
  401230:	4770      	bx	lr
  401232:	bf00      	nop
  401234:	003d0900 	.word	0x003d0900
  401238:	007a1200 	.word	0x007a1200
  40123c:	00b71b00 	.word	0x00b71b00

00401240 <sysclk_get_main_hz>:
{
  401240:	b580      	push	{r7, lr}
  401242:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401244:	2006      	movs	r0, #6
  401246:	4b04      	ldr	r3, [pc, #16]	; (401258 <sysclk_get_main_hz+0x18>)
  401248:	4798      	blx	r3
  40124a:	4602      	mov	r2, r0
  40124c:	4613      	mov	r3, r2
  40124e:	009b      	lsls	r3, r3, #2
  401250:	4413      	add	r3, r2
  401252:	009b      	lsls	r3, r3, #2
}
  401254:	4618      	mov	r0, r3
  401256:	bd80      	pop	{r7, pc}
  401258:	004011cd 	.word	0x004011cd

0040125c <sysclk_get_cpu_hz>:
{
  40125c:	b580      	push	{r7, lr}
  40125e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401260:	4b02      	ldr	r3, [pc, #8]	; (40126c <sysclk_get_cpu_hz+0x10>)
  401262:	4798      	blx	r3
  401264:	4603      	mov	r3, r0
  401266:	085b      	lsrs	r3, r3, #1
}
  401268:	4618      	mov	r0, r3
  40126a:	bd80      	pop	{r7, pc}
  40126c:	00401241 	.word	0x00401241

00401270 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401270:	b580      	push	{r7, lr}
  401272:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401274:	4b02      	ldr	r3, [pc, #8]	; (401280 <sysclk_get_peripheral_hz+0x10>)
  401276:	4798      	blx	r3
  401278:	4603      	mov	r3, r0
  40127a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40127c:	4618      	mov	r0, r3
  40127e:	bd80      	pop	{r7, pc}
  401280:	00401241 	.word	0x00401241

00401284 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401284:	b580      	push	{r7, lr}
  401286:	b082      	sub	sp, #8
  401288:	af00      	add	r7, sp, #0
  40128a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40128c:	6878      	ldr	r0, [r7, #4]
  40128e:	4b03      	ldr	r3, [pc, #12]	; (40129c <sysclk_enable_peripheral_clock+0x18>)
  401290:	4798      	blx	r3
}
  401292:	bf00      	nop
  401294:	3708      	adds	r7, #8
  401296:	46bd      	mov	sp, r7
  401298:	bd80      	pop	{r7, pc}
  40129a:	bf00      	nop
  40129c:	00402255 	.word	0x00402255

004012a0 <ioport_set_pin_dir>:
{
  4012a0:	b480      	push	{r7}
  4012a2:	b08d      	sub	sp, #52	; 0x34
  4012a4:	af00      	add	r7, sp, #0
  4012a6:	6078      	str	r0, [r7, #4]
  4012a8:	460b      	mov	r3, r1
  4012aa:	70fb      	strb	r3, [r7, #3]
  4012ac:	687b      	ldr	r3, [r7, #4]
  4012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4012b0:	78fb      	ldrb	r3, [r7, #3]
  4012b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4012b8:	627b      	str	r3, [r7, #36]	; 0x24
  4012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012bc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4012be:	6a3b      	ldr	r3, [r7, #32]
  4012c0:	095b      	lsrs	r3, r3, #5
  4012c2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4012c4:	69fb      	ldr	r3, [r7, #28]
  4012c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4012ca:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4012ce:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4012d0:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4012d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4012d6:	2b01      	cmp	r3, #1
  4012d8:	d109      	bne.n	4012ee <ioport_set_pin_dir+0x4e>
  4012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4012dc:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4012de:	697b      	ldr	r3, [r7, #20]
  4012e0:	f003 031f 	and.w	r3, r3, #31
  4012e4:	2201      	movs	r2, #1
  4012e6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012e8:	69bb      	ldr	r3, [r7, #24]
  4012ea:	611a      	str	r2, [r3, #16]
  4012ec:	e00c      	b.n	401308 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4012ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	d108      	bne.n	401308 <ioport_set_pin_dir+0x68>
  4012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4012f8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4012fa:	693b      	ldr	r3, [r7, #16]
  4012fc:	f003 031f 	and.w	r3, r3, #31
  401300:	2201      	movs	r2, #1
  401302:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401304:	69bb      	ldr	r3, [r7, #24]
  401306:	615a      	str	r2, [r3, #20]
  401308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40130a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40130c:	68fb      	ldr	r3, [r7, #12]
  40130e:	f003 031f 	and.w	r3, r3, #31
  401312:	2201      	movs	r2, #1
  401314:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401316:	69bb      	ldr	r3, [r7, #24]
  401318:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  40131c:	bf00      	nop
  40131e:	3734      	adds	r7, #52	; 0x34
  401320:	46bd      	mov	sp, r7
  401322:	bc80      	pop	{r7}
  401324:	4770      	bx	lr

00401326 <ioport_set_pin_level>:
{
  401326:	b480      	push	{r7}
  401328:	b08b      	sub	sp, #44	; 0x2c
  40132a:	af00      	add	r7, sp, #0
  40132c:	6078      	str	r0, [r7, #4]
  40132e:	460b      	mov	r3, r1
  401330:	70fb      	strb	r3, [r7, #3]
  401332:	687b      	ldr	r3, [r7, #4]
  401334:	627b      	str	r3, [r7, #36]	; 0x24
  401336:	78fb      	ldrb	r3, [r7, #3]
  401338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40133e:	61fb      	str	r3, [r7, #28]
  401340:	69fb      	ldr	r3, [r7, #28]
  401342:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401344:	69bb      	ldr	r3, [r7, #24]
  401346:	095b      	lsrs	r3, r3, #5
  401348:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40134a:	697b      	ldr	r3, [r7, #20]
  40134c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401350:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401354:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401356:	613b      	str	r3, [r7, #16]
	if (level) {
  401358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40135c:	2b00      	cmp	r3, #0
  40135e:	d009      	beq.n	401374 <ioport_set_pin_level+0x4e>
  401360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401362:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401364:	68fb      	ldr	r3, [r7, #12]
  401366:	f003 031f 	and.w	r3, r3, #31
  40136a:	2201      	movs	r2, #1
  40136c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40136e:	693b      	ldr	r3, [r7, #16]
  401370:	631a      	str	r2, [r3, #48]	; 0x30
}
  401372:	e008      	b.n	401386 <ioport_set_pin_level+0x60>
  401374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401376:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401378:	68bb      	ldr	r3, [r7, #8]
  40137a:	f003 031f 	and.w	r3, r3, #31
  40137e:	2201      	movs	r2, #1
  401380:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401382:	693b      	ldr	r3, [r7, #16]
  401384:	635a      	str	r2, [r3, #52]	; 0x34
  401386:	bf00      	nop
  401388:	372c      	adds	r7, #44	; 0x2c
  40138a:	46bd      	mov	sp, r7
  40138c:	bc80      	pop	{r7}
  40138e:	4770      	bx	lr

00401390 <USART0_Handler>:
/*
Handler for incoming data from the WiFi. Should call
process incoming byte wifi when a new byte arrives
*/
void WIFI_USART_HANDLER(void) 
{
  401390:	b580      	push	{r7, lr}
  401392:	b082      	sub	sp, #8
  401394:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  401396:	480d      	ldr	r0, [pc, #52]	; (4013cc <USART0_Handler+0x3c>)
  401398:	4b0d      	ldr	r3, [pc, #52]	; (4013d0 <USART0_Handler+0x40>)
  40139a:	4798      	blx	r3
  40139c:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  40139e:	687b      	ldr	r3, [r7, #4]
  4013a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4013a4:	2b00      	cmp	r3, #0
  4013a6:	d00c      	beq.n	4013c2 <USART0_Handler+0x32>
		usart_read(BOARD_USART, &received_byte_wifi);
  4013a8:	490a      	ldr	r1, [pc, #40]	; (4013d4 <USART0_Handler+0x44>)
  4013aa:	4808      	ldr	r0, [pc, #32]	; (4013cc <USART0_Handler+0x3c>)
  4013ac:	4b0a      	ldr	r3, [pc, #40]	; (4013d8 <USART0_Handler+0x48>)
  4013ae:	4798      	blx	r3
		new_rx_wifi = true;
  4013b0:	4b0a      	ldr	r3, [pc, #40]	; (4013dc <USART0_Handler+0x4c>)
  4013b2:	2201      	movs	r2, #1
  4013b4:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4013b6:	4b07      	ldr	r3, [pc, #28]	; (4013d4 <USART0_Handler+0x44>)
  4013b8:	681b      	ldr	r3, [r3, #0]
  4013ba:	b2db      	uxtb	r3, r3
  4013bc:	4618      	mov	r0, r3
  4013be:	4b08      	ldr	r3, [pc, #32]	; (4013e0 <USART0_Handler+0x50>)
  4013c0:	4798      	blx	r3
	}
}
  4013c2:	bf00      	nop
  4013c4:	3708      	adds	r7, #8
  4013c6:	46bd      	mov	sp, r7
  4013c8:	bd80      	pop	{r7, pc}
  4013ca:	bf00      	nop
  4013cc:	40024000 	.word	0x40024000
  4013d0:	0040051d 	.word	0x0040051d
  4013d4:	200004d4 	.word	0x200004d4
  4013d8:	00400581 	.word	0x00400581
  4013dc:	200004d8 	.word	0x200004d8
  4013e0:	004013e5 	.word	0x004013e5

004013e4 <process_incoming_byte_wifi>:

/*
Stores every incoming byte (in byte) from the AMW136 in a buffer.
*/
void process_incoming_byte_wifi(uint8_t in_byte) 
{
  4013e4:	b480      	push	{r7}
  4013e6:	b083      	sub	sp, #12
  4013e8:	af00      	add	r7, sp, #0
  4013ea:	4603      	mov	r3, r0
  4013ec:	71fb      	strb	r3, [r7, #7]
	buffer_wifi[input_pos_wifi] = in_byte;
  4013ee:	4b07      	ldr	r3, [pc, #28]	; (40140c <process_incoming_byte_wifi+0x28>)
  4013f0:	681b      	ldr	r3, [r3, #0]
  4013f2:	4907      	ldr	r1, [pc, #28]	; (401410 <process_incoming_byte_wifi+0x2c>)
  4013f4:	79fa      	ldrb	r2, [r7, #7]
  4013f6:	54ca      	strb	r2, [r1, r3]
	input_pos_wifi++;
  4013f8:	4b04      	ldr	r3, [pc, #16]	; (40140c <process_incoming_byte_wifi+0x28>)
  4013fa:	681b      	ldr	r3, [r3, #0]
  4013fc:	3301      	adds	r3, #1
  4013fe:	4a03      	ldr	r2, [pc, #12]	; (40140c <process_incoming_byte_wifi+0x28>)
  401400:	6013      	str	r3, [r2, #0]
}
  401402:	bf00      	nop
  401404:	370c      	adds	r7, #12
  401406:	46bd      	mov	sp, r7
  401408:	bc80      	pop	{r7}
  40140a:	4770      	bx	lr
  40140c:	200004dc 	.word	0x200004dc
  401410:	20018bc4 	.word	0x20018bc4

00401414 <wifi_command_response_handler>:
/*
Handler for command complete rising-edge interrupt from AMW136.
When this is triggered, it is time to process the response of the AMW136.
*/
void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  401414:	b580      	push	{r7, lr}
  401416:	b084      	sub	sp, #16
  401418:	af00      	add	r7, sp, #0
  40141a:	6078      	str	r0, [r7, #4]
  40141c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	process_data_wifi();
  40141e:	4b0c      	ldr	r3, [pc, #48]	; (401450 <wifi_command_response_handler+0x3c>)
  401420:	4798      	blx	r3
	
	// reset the buffer
	input_pos_wifi = 0;
  401422:	4b0c      	ldr	r3, [pc, #48]	; (401454 <wifi_command_response_handler+0x40>)
  401424:	2200      	movs	r2, #0
  401426:	601a      	str	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  401428:	2300      	movs	r3, #0
  40142a:	60fb      	str	r3, [r7, #12]
  40142c:	e007      	b.n	40143e <wifi_command_response_handler+0x2a>
		buffer_wifi[ii] = 0;
  40142e:	4a0a      	ldr	r2, [pc, #40]	; (401458 <wifi_command_response_handler+0x44>)
  401430:	68fb      	ldr	r3, [r7, #12]
  401432:	4413      	add	r3, r2
  401434:	2200      	movs	r2, #0
  401436:	701a      	strb	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  401438:	68fb      	ldr	r3, [r7, #12]
  40143a:	3301      	adds	r3, #1
  40143c:	60fb      	str	r3, [r7, #12]
  40143e:	68fb      	ldr	r3, [r7, #12]
  401440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401444:	d3f3      	bcc.n	40142e <wifi_command_response_handler+0x1a>
	}
	
}
  401446:	bf00      	nop
  401448:	3710      	adds	r7, #16
  40144a:	46bd      	mov	sp, r7
  40144c:	bd80      	pop	{r7, pc}
  40144e:	bf00      	nop
  401450:	0040145d 	.word	0x0040145d
  401454:	200004dc 	.word	0x200004dc
  401458:	20018bc4 	.word	0x20018bc4

0040145c <process_data_wifi>:
filled by process incoming byte wifi. This processing should be looking for certain
responses that the AMW136 should give, such as start transfer when it is ready to
receive the image.
*/
void process_data_wifi (void) 
{
  40145c:	b580      	push	{r7, lr}
  40145e:	af00      	add	r7, sp, #0
	strcpy(rawRecievedMessage,buffer_wifi);
  401460:	491a      	ldr	r1, [pc, #104]	; (4014cc <process_data_wifi+0x70>)
  401462:	481b      	ldr	r0, [pc, #108]	; (4014d0 <process_data_wifi+0x74>)
  401464:	4b1b      	ldr	r3, [pc, #108]	; (4014d4 <process_data_wifi+0x78>)
  401466:	4798      	blx	r3
	// Compare the received string with some other string
	/*if(strstr(buffer_wifi, "StringToCompare")){
		// set receivedMessage variable as appropriate
	}*/
	if(strstr(buffer_wifi,msg_START_TRANSFER)){
  401468:	491b      	ldr	r1, [pc, #108]	; (4014d8 <process_data_wifi+0x7c>)
  40146a:	4818      	ldr	r0, [pc, #96]	; (4014cc <process_data_wifi+0x70>)
  40146c:	4b1b      	ldr	r3, [pc, #108]	; (4014dc <process_data_wifi+0x80>)
  40146e:	4798      	blx	r3
  401470:	4603      	mov	r3, r0
  401472:	2b00      	cmp	r3, #0
  401474:	d003      	beq.n	40147e <process_data_wifi+0x22>
		receivedMessage = START_TRANSFER;
  401476:	4b1a      	ldr	r3, [pc, #104]	; (4014e0 <process_data_wifi+0x84>)
  401478:	2202      	movs	r2, #2
  40147a:	601a      	str	r2, [r3, #0]
					receivedMessage = DEFAULT;
				}
			}
		}
	}
}
  40147c:	e024      	b.n	4014c8 <process_data_wifi+0x6c>
    	if(strstr(buffer_wifi,msg_CLIENT_NOT_CONNECTED)){
  40147e:	4919      	ldr	r1, [pc, #100]	; (4014e4 <process_data_wifi+0x88>)
  401480:	4812      	ldr	r0, [pc, #72]	; (4014cc <process_data_wifi+0x70>)
  401482:	4b16      	ldr	r3, [pc, #88]	; (4014dc <process_data_wifi+0x80>)
  401484:	4798      	blx	r3
  401486:	4603      	mov	r3, r0
  401488:	2b00      	cmp	r3, #0
  40148a:	d003      	beq.n	401494 <process_data_wifi+0x38>
			receivedMessage = CLIENT_NOT_CONNECTED	;
  40148c:	4b14      	ldr	r3, [pc, #80]	; (4014e0 <process_data_wifi+0x84>)
  40148e:	2204      	movs	r2, #4
  401490:	601a      	str	r2, [r3, #0]
}
  401492:	e019      	b.n	4014c8 <process_data_wifi+0x6c>
			if(strstr(buffer_wifi,msg_COMMAND_FAILED)){
  401494:	4914      	ldr	r1, [pc, #80]	; (4014e8 <process_data_wifi+0x8c>)
  401496:	480d      	ldr	r0, [pc, #52]	; (4014cc <process_data_wifi+0x70>)
  401498:	4b10      	ldr	r3, [pc, #64]	; (4014dc <process_data_wifi+0x80>)
  40149a:	4798      	blx	r3
  40149c:	4603      	mov	r3, r0
  40149e:	2b00      	cmp	r3, #0
  4014a0:	d003      	beq.n	4014aa <process_data_wifi+0x4e>
				receivedMessage = COMMAND_FAILED;
  4014a2:	4b0f      	ldr	r3, [pc, #60]	; (4014e0 <process_data_wifi+0x84>)
  4014a4:	2205      	movs	r2, #5
  4014a6:	601a      	str	r2, [r3, #0]
}
  4014a8:	e00e      	b.n	4014c8 <process_data_wifi+0x6c>
				if(strstr(buffer_wifi,msg_RECIEVE_NONE)){
  4014aa:	4910      	ldr	r1, [pc, #64]	; (4014ec <process_data_wifi+0x90>)
  4014ac:	4807      	ldr	r0, [pc, #28]	; (4014cc <process_data_wifi+0x70>)
  4014ae:	4b0b      	ldr	r3, [pc, #44]	; (4014dc <process_data_wifi+0x80>)
  4014b0:	4798      	blx	r3
  4014b2:	4603      	mov	r3, r0
  4014b4:	2b00      	cmp	r3, #0
  4014b6:	d003      	beq.n	4014c0 <process_data_wifi+0x64>
					receivedMessage = RECIEVE_NONE;
  4014b8:	4b09      	ldr	r3, [pc, #36]	; (4014e0 <process_data_wifi+0x84>)
  4014ba:	2206      	movs	r2, #6
  4014bc:	601a      	str	r2, [r3, #0]
}
  4014be:	e003      	b.n	4014c8 <process_data_wifi+0x6c>
					receivedMessage = DEFAULT;
  4014c0:	4b07      	ldr	r3, [pc, #28]	; (4014e0 <process_data_wifi+0x84>)
  4014c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  4014c6:	601a      	str	r2, [r3, #0]
}
  4014c8:	bf00      	nop
  4014ca:	bd80      	pop	{r7, pc}
  4014cc:	20018bc4 	.word	0x20018bc4
  4014d0:	200004ec 	.word	0x200004ec
  4014d4:	00402e31 	.word	0x00402e31
  4014d8:	004036bc 	.word	0x004036bc
  4014dc:	0040319d 	.word	0x0040319d
  4014e0:	200004e4 	.word	0x200004e4
  4014e4:	004036cc 	.word	0x004036cc
  4014e8:	004036e4 	.word	0x004036e4
  4014ec:	004036f4 	.word	0x004036f4

004014f0 <wifi_web_setup_handler>:
/*
Handler for button to initiate web setup of AMW136. Should set a flag indicating a
request to initiate web setup
*/
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  4014f0:	b480      	push	{r7}
  4014f2:	b083      	sub	sp, #12
  4014f4:	af00      	add	r7, sp, #0
  4014f6:	6078      	str	r0, [r7, #4]
  4014f8:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  4014fa:	4b04      	ldr	r3, [pc, #16]	; (40150c <wifi_web_setup_handler+0x1c>)
  4014fc:	2201      	movs	r2, #1
  4014fe:	701a      	strb	r2, [r3, #0]
}
  401500:	bf00      	nop
  401502:	370c      	adds	r7, #12
  401504:	46bd      	mov	sp, r7
  401506:	bc80      	pop	{r7}
  401508:	4770      	bx	lr
  40150a:	bf00      	nop
  40150c:	200004e1 	.word	0x200004e1

00401510 <configure_usart_wifi>:

/*
Configuration of USART port used to communicate with the AMW136.
*/
void configure_usart_wifi(void) 
{
  401510:	b5b0      	push	{r4, r5, r7, lr}
  401512:	b086      	sub	sp, #24
  401514:	af00      	add	r7, sp, #0
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401516:	4b22      	ldr	r3, [pc, #136]	; (4015a0 <configure_usart_wifi+0x90>)
  401518:	463c      	mov	r4, r7
  40151a:	461d      	mov	r5, r3
  40151c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40151e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401520:	e895 0003 	ldmia.w	r5, {r0, r1}
  401524:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401528:	4b1e      	ldr	r3, [pc, #120]	; (4015a4 <configure_usart_wifi+0x94>)
  40152a:	4798      	blx	r3
  40152c:	4602      	mov	r2, r0
  40152e:	4b1e      	ldr	r3, [pc, #120]	; (4015a8 <configure_usart_wifi+0x98>)
  401530:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  401532:	200e      	movs	r0, #14
  401534:	4b1d      	ldr	r3, [pc, #116]	; (4015ac <configure_usart_wifi+0x9c>)
  401536:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  401538:	4b1b      	ldr	r3, [pc, #108]	; (4015a8 <configure_usart_wifi+0x98>)
  40153a:	681a      	ldr	r2, [r3, #0]
  40153c:	463b      	mov	r3, r7
  40153e:	4619      	mov	r1, r3
  401540:	481b      	ldr	r0, [pc, #108]	; (4015b0 <configure_usart_wifi+0xa0>)
  401542:	4b1c      	ldr	r3, [pc, #112]	; (4015b4 <configure_usart_wifi+0xa4>)
  401544:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  401546:	f04f 31ff 	mov.w	r1, #4294967295
  40154a:	4819      	ldr	r0, [pc, #100]	; (4015b0 <configure_usart_wifi+0xa0>)
  40154c:	4b1a      	ldr	r3, [pc, #104]	; (4015b8 <configure_usart_wifi+0xa8>)
  40154e:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401550:	4817      	ldr	r0, [pc, #92]	; (4015b0 <configure_usart_wifi+0xa0>)
  401552:	4b1a      	ldr	r3, [pc, #104]	; (4015bc <configure_usart_wifi+0xac>)
  401554:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  401556:	4816      	ldr	r0, [pc, #88]	; (4015b0 <configure_usart_wifi+0xa0>)
  401558:	4b19      	ldr	r3, [pc, #100]	; (4015c0 <configure_usart_wifi+0xb0>)
  40155a:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  40155c:	2101      	movs	r1, #1
  40155e:	4814      	ldr	r0, [pc, #80]	; (4015b0 <configure_usart_wifi+0xa0>)
  401560:	4b18      	ldr	r3, [pc, #96]	; (4015c4 <configure_usart_wifi+0xb4>)
  401562:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401564:	200e      	movs	r0, #14
  401566:	4b18      	ldr	r3, [pc, #96]	; (4015c8 <configure_usart_wifi+0xb8>)
  401568:	4798      	blx	r3

	// Configure the RX / TX pins
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  40156a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40156e:	2005      	movs	r0, #5
  401570:	4b16      	ldr	r3, [pc, #88]	; (4015cc <configure_usart_wifi+0xbc>)
  401572:	4798      	blx	r3
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401574:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401578:	2006      	movs	r0, #6
  40157a:	4b14      	ldr	r3, [pc, #80]	; (4015cc <configure_usart_wifi+0xbc>)
  40157c:	4798      	blx	r3
	/* Configure USART CTS pin */
	//gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
	ioport_set_pin_dir(PIN_USART0_CTS_IDX,IOPORT_DIR_OUTPUT);
  40157e:	2101      	movs	r1, #1
  401580:	2008      	movs	r0, #8
  401582:	4b13      	ldr	r3, [pc, #76]	; (4015d0 <configure_usart_wifi+0xc0>)
  401584:	4798      	blx	r3
	ioport_set_pin_level(PIN_USART0_CTS_IDX,false);
  401586:	2100      	movs	r1, #0
  401588:	2008      	movs	r0, #8
  40158a:	4b12      	ldr	r3, [pc, #72]	; (4015d4 <configure_usart_wifi+0xc4>)
  40158c:	4798      	blx	r3
	/* Configure USART RTS pin */
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  40158e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401592:	2007      	movs	r0, #7
  401594:	4b0d      	ldr	r3, [pc, #52]	; (4015cc <configure_usart_wifi+0xbc>)
  401596:	4798      	blx	r3
}
  401598:	bf00      	nop
  40159a:	3718      	adds	r7, #24
  40159c:	46bd      	mov	sp, r7
  40159e:	bdb0      	pop	{r4, r5, r7, pc}
  4015a0:	004036fc 	.word	0x004036fc
  4015a4:	00401271 	.word	0x00401271
  4015a8:	200004e8 	.word	0x200004e8
  4015ac:	00401285 	.word	0x00401285
  4015b0:	40024000 	.word	0x40024000
  4015b4:	00400449 	.word	0x00400449
  4015b8:	00400503 	.word	0x00400503
  4015bc:	00400489 	.word	0x00400489
  4015c0:	004004b9 	.word	0x004004b9
  4015c4:	004004e9 	.word	0x004004e9
  4015c8:	0040119d 	.word	0x0040119d
  4015cc:	00401e35 	.word	0x00401e35
  4015d0:	004012a1 	.word	0x004012a1
  4015d4:	00401327 	.word	0x00401327

004015d8 <configure_wifi_comm_pin>:

/*
Configuration of command complete rising-edge interrupt.
*/
void configure_wifi_comm_pin(void) 
{
  4015d8:	b590      	push	{r4, r7, lr}
  4015da:	b083      	sub	sp, #12
  4015dc:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	
	pmc_enable_periph_clk(WIFI_COM_COMPLETE_ID);
  4015de:	200b      	movs	r0, #11
  4015e0:	4b0e      	ldr	r3, [pc, #56]	; (40161c <configure_wifi_comm_pin+0x44>)
  4015e2:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK, 10);
  4015e4:	220a      	movs	r2, #10
  4015e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4015ea:	480d      	ldr	r0, [pc, #52]	; (401620 <configure_wifi_comm_pin+0x48>)
  4015ec:	4b0d      	ldr	r3, [pc, #52]	; (401624 <configure_wifi_comm_pin+0x4c>)
  4015ee:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h	**/
	pio_handler_set(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_ID, WIFI_COM_COMPLETE_MSK,
  4015f0:	4b0d      	ldr	r3, [pc, #52]	; (401628 <configure_wifi_comm_pin+0x50>)
  4015f2:	9300      	str	r3, [sp, #0]
  4015f4:	2371      	movs	r3, #113	; 0x71
  4015f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4015fa:	210b      	movs	r1, #11
  4015fc:	4808      	ldr	r0, [pc, #32]	; (401620 <configure_wifi_comm_pin+0x48>)
  4015fe:	4c0b      	ldr	r4, [pc, #44]	; (40162c <configure_wifi_comm_pin+0x54>)
  401600:	47a0      	blx	r4
			WIFI_COM_COMPLETE_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COM_COMPLETE_ID);
  401602:	200b      	movs	r0, #11
  401604:	4b0a      	ldr	r3, [pc, #40]	; (401630 <configure_wifi_comm_pin+0x58>)
  401606:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK);
  401608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40160c:	4804      	ldr	r0, [pc, #16]	; (401620 <configure_wifi_comm_pin+0x48>)
  40160e:	4b09      	ldr	r3, [pc, #36]	; (401634 <configure_wifi_comm_pin+0x5c>)
  401610:	4798      	blx	r3
}
  401612:	bf00      	nop
  401614:	3704      	adds	r7, #4
  401616:	46bd      	mov	sp, r7
  401618:	bd90      	pop	{r4, r7, pc}
  40161a:	bf00      	nop
  40161c:	00402255 	.word	0x00402255
  401620:	400e0e00 	.word	0x400e0e00
  401624:	00401b3f 	.word	0x00401b3f
  401628:	00401415 	.word	0x00401415
  40162c:	0040020d 	.word	0x0040020d
  401630:	0040119d 	.word	0x0040119d
  401634:	00401dd3 	.word	0x00401dd3

00401638 <configure_wifi_web_setup_pin>:

/*
Configuration of button interrupt to initiate web setup.
*/
void configure_wifi_web_setup_pin(void) 
{
  401638:	b590      	push	{r4, r7, lr}
  40163a:	b083      	sub	sp, #12
  40163c:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  40163e:	200b      	movs	r0, #11
  401640:	4b0c      	ldr	r3, [pc, #48]	; (401674 <configure_wifi_web_setup_pin+0x3c>)
  401642:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  401644:	220a      	movs	r2, #10
  401646:	2101      	movs	r1, #1
  401648:	480b      	ldr	r0, [pc, #44]	; (401678 <configure_wifi_web_setup_pin+0x40>)
  40164a:	4b0c      	ldr	r3, [pc, #48]	; (40167c <configure_wifi_web_setup_pin+0x44>)
  40164c:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  40164e:	4b0c      	ldr	r3, [pc, #48]	; (401680 <configure_wifi_web_setup_pin+0x48>)
  401650:	9300      	str	r3, [sp, #0]
  401652:	2349      	movs	r3, #73	; 0x49
  401654:	2201      	movs	r2, #1
  401656:	210b      	movs	r1, #11
  401658:	4807      	ldr	r0, [pc, #28]	; (401678 <configure_wifi_web_setup_pin+0x40>)
  40165a:	4c0a      	ldr	r4, [pc, #40]	; (401684 <configure_wifi_web_setup_pin+0x4c>)
  40165c:	47a0      	blx	r4
			PUSH_BUTTON_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);
  40165e:	200b      	movs	r0, #11
  401660:	4b09      	ldr	r3, [pc, #36]	; (401688 <configure_wifi_web_setup_pin+0x50>)
  401662:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  401664:	2101      	movs	r1, #1
  401666:	4804      	ldr	r0, [pc, #16]	; (401678 <configure_wifi_web_setup_pin+0x40>)
  401668:	4b08      	ldr	r3, [pc, #32]	; (40168c <configure_wifi_web_setup_pin+0x54>)
  40166a:	4798      	blx	r3
}
  40166c:	bf00      	nop
  40166e:	3704      	adds	r7, #4
  401670:	46bd      	mov	sp, r7
  401672:	bd90      	pop	{r4, r7, pc}
  401674:	00402255 	.word	0x00402255
  401678:	400e0e00 	.word	0x400e0e00
  40167c:	00401b3f 	.word	0x00401b3f
  401680:	004014f1 	.word	0x004014f1
  401684:	0040020d 	.word	0x0040020d
  401688:	0040119d 	.word	0x0040119d
  40168c:	00401dd3 	.word	0x00401dd3

00401690 <resetWifi>:
		dv++;
	}
}

// Simple function to reset the wifi
void resetWifi(void){
  401690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401694:	b087      	sub	sp, #28
  401696:	af00      	add	r7, sp, #0
	// Reset the wifi by pulling the wifi reset pin low, then bringing it back high.
	ioport_set_pin_level(PIN_WIFI_RESET,LOW); //reset WIFI
  401698:	2100      	movs	r1, #0
  40169a:	2021      	movs	r0, #33	; 0x21
  40169c:	4b43      	ldr	r3, [pc, #268]	; (4017ac <resetWifi+0x11c>)
  40169e:	4798      	blx	r3
	delay_ms(1000);
  4016a0:	4b43      	ldr	r3, [pc, #268]	; (4017b0 <resetWifi+0x120>)
  4016a2:	4798      	blx	r3
  4016a4:	4603      	mov	r3, r0
  4016a6:	4619      	mov	r1, r3
  4016a8:	f04f 0200 	mov.w	r2, #0
  4016ac:	460b      	mov	r3, r1
  4016ae:	4614      	mov	r4, r2
  4016b0:	0166      	lsls	r6, r4, #5
  4016b2:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4016b6:	015d      	lsls	r5, r3, #5
  4016b8:	462b      	mov	r3, r5
  4016ba:	4634      	mov	r4, r6
  4016bc:	1a5b      	subs	r3, r3, r1
  4016be:	eb64 0402 	sbc.w	r4, r4, r2
  4016c2:	00a0      	lsls	r0, r4, #2
  4016c4:	6178      	str	r0, [r7, #20]
  4016c6:	6978      	ldr	r0, [r7, #20]
  4016c8:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4016cc:	6178      	str	r0, [r7, #20]
  4016ce:	009b      	lsls	r3, r3, #2
  4016d0:	613b      	str	r3, [r7, #16]
  4016d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  4016d6:	185b      	adds	r3, r3, r1
  4016d8:	eb44 0402 	adc.w	r4, r4, r2
  4016dc:	00e2      	lsls	r2, r4, #3
  4016de:	60fa      	str	r2, [r7, #12]
  4016e0:	68fa      	ldr	r2, [r7, #12]
  4016e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  4016e6:	60fa      	str	r2, [r7, #12]
  4016e8:	00db      	lsls	r3, r3, #3
  4016ea:	60bb      	str	r3, [r7, #8]
  4016ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4016f0:	4619      	mov	r1, r3
  4016f2:	4622      	mov	r2, r4
  4016f4:	f243 63af 	movw	r3, #13999	; 0x36af
  4016f8:	f04f 0400 	mov.w	r4, #0
  4016fc:	18cd      	adds	r5, r1, r3
  4016fe:	eb42 0604 	adc.w	r6, r2, r4
  401702:	4628      	mov	r0, r5
  401704:	4631      	mov	r1, r6
  401706:	4c2b      	ldr	r4, [pc, #172]	; (4017b4 <resetWifi+0x124>)
  401708:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40170c:	f04f 0300 	mov.w	r3, #0
  401710:	47a0      	blx	r4
  401712:	4603      	mov	r3, r0
  401714:	460c      	mov	r4, r1
  401716:	4618      	mov	r0, r3
  401718:	4b27      	ldr	r3, [pc, #156]	; (4017b8 <resetWifi+0x128>)
  40171a:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,HIGH); //turn Wifi Back on
  40171c:	2101      	movs	r1, #1
  40171e:	2021      	movs	r0, #33	; 0x21
  401720:	4b22      	ldr	r3, [pc, #136]	; (4017ac <resetWifi+0x11c>)
  401722:	4798      	blx	r3
	delay_ms(2000); // Account for ~0.7s high during reset
  401724:	4b22      	ldr	r3, [pc, #136]	; (4017b0 <resetWifi+0x120>)
  401726:	4798      	blx	r3
  401728:	4603      	mov	r3, r0
  40172a:	4619      	mov	r1, r3
  40172c:	f04f 0200 	mov.w	r2, #0
  401730:	460b      	mov	r3, r1
  401732:	4614      	mov	r4, r2
  401734:	0160      	lsls	r0, r4, #5
  401736:	6078      	str	r0, [r7, #4]
  401738:	6878      	ldr	r0, [r7, #4]
  40173a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  40173e:	6078      	str	r0, [r7, #4]
  401740:	015b      	lsls	r3, r3, #5
  401742:	603b      	str	r3, [r7, #0]
  401744:	e9d7 3400 	ldrd	r3, r4, [r7]
  401748:	1a5b      	subs	r3, r3, r1
  40174a:	eb64 0402 	sbc.w	r4, r4, r2
  40174e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  401752:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  401756:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  40175a:	4653      	mov	r3, sl
  40175c:	465c      	mov	r4, fp
  40175e:	185b      	adds	r3, r3, r1
  401760:	eb44 0402 	adc.w	r4, r4, r2
  401764:	ea4f 1904 	mov.w	r9, r4, lsl #4
  401768:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  40176c:	ea4f 1803 	mov.w	r8, r3, lsl #4
  401770:	4643      	mov	r3, r8
  401772:	464c      	mov	r4, r9
  401774:	4619      	mov	r1, r3
  401776:	4622      	mov	r2, r4
  401778:	f243 63af 	movw	r3, #13999	; 0x36af
  40177c:	f04f 0400 	mov.w	r4, #0
  401780:	18cd      	adds	r5, r1, r3
  401782:	eb42 0604 	adc.w	r6, r2, r4
  401786:	4628      	mov	r0, r5
  401788:	4631      	mov	r1, r6
  40178a:	4c0a      	ldr	r4, [pc, #40]	; (4017b4 <resetWifi+0x124>)
  40178c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401790:	f04f 0300 	mov.w	r3, #0
  401794:	47a0      	blx	r4
  401796:	4603      	mov	r3, r0
  401798:	460c      	mov	r4, r1
  40179a:	4618      	mov	r0, r3
  40179c:	4b06      	ldr	r3, [pc, #24]	; (4017b8 <resetWifi+0x128>)
  40179e:	4798      	blx	r3
}
  4017a0:	bf00      	nop
  4017a2:	371c      	adds	r7, #28
  4017a4:	46bd      	mov	sp, r7
  4017a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017aa:	bf00      	nop
  4017ac:	00401327 	.word	0x00401327
  4017b0:	0040125d 	.word	0x0040125d
  4017b4:	00402ad1 	.word	0x00402ad1
  4017b8:	20000001 	.word	0x20000001

004017bc <osc_enable>:
{
  4017bc:	b580      	push	{r7, lr}
  4017be:	b082      	sub	sp, #8
  4017c0:	af00      	add	r7, sp, #0
  4017c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4017c4:	687b      	ldr	r3, [r7, #4]
  4017c6:	2b07      	cmp	r3, #7
  4017c8:	d831      	bhi.n	40182e <osc_enable+0x72>
  4017ca:	a201      	add	r2, pc, #4	; (adr r2, 4017d0 <osc_enable+0x14>)
  4017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017d0:	0040182d 	.word	0x0040182d
  4017d4:	004017f1 	.word	0x004017f1
  4017d8:	004017f9 	.word	0x004017f9
  4017dc:	00401801 	.word	0x00401801
  4017e0:	00401809 	.word	0x00401809
  4017e4:	00401811 	.word	0x00401811
  4017e8:	00401819 	.word	0x00401819
  4017ec:	00401823 	.word	0x00401823
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4017f0:	2000      	movs	r0, #0
  4017f2:	4b11      	ldr	r3, [pc, #68]	; (401838 <osc_enable+0x7c>)
  4017f4:	4798      	blx	r3
		break;
  4017f6:	e01a      	b.n	40182e <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4017f8:	2001      	movs	r0, #1
  4017fa:	4b0f      	ldr	r3, [pc, #60]	; (401838 <osc_enable+0x7c>)
  4017fc:	4798      	blx	r3
		break;
  4017fe:	e016      	b.n	40182e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401800:	2000      	movs	r0, #0
  401802:	4b0e      	ldr	r3, [pc, #56]	; (40183c <osc_enable+0x80>)
  401804:	4798      	blx	r3
		break;
  401806:	e012      	b.n	40182e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401808:	2010      	movs	r0, #16
  40180a:	4b0c      	ldr	r3, [pc, #48]	; (40183c <osc_enable+0x80>)
  40180c:	4798      	blx	r3
		break;
  40180e:	e00e      	b.n	40182e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401810:	2020      	movs	r0, #32
  401812:	4b0a      	ldr	r3, [pc, #40]	; (40183c <osc_enable+0x80>)
  401814:	4798      	blx	r3
		break;
  401816:	e00a      	b.n	40182e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401818:	213e      	movs	r1, #62	; 0x3e
  40181a:	2000      	movs	r0, #0
  40181c:	4b08      	ldr	r3, [pc, #32]	; (401840 <osc_enable+0x84>)
  40181e:	4798      	blx	r3
		break;
  401820:	e005      	b.n	40182e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  401822:	213e      	movs	r1, #62	; 0x3e
  401824:	2001      	movs	r0, #1
  401826:	4b06      	ldr	r3, [pc, #24]	; (401840 <osc_enable+0x84>)
  401828:	4798      	blx	r3
		break;
  40182a:	e000      	b.n	40182e <osc_enable+0x72>
		break;
  40182c:	bf00      	nop
}
  40182e:	bf00      	nop
  401830:	3708      	adds	r7, #8
  401832:	46bd      	mov	sp, r7
  401834:	bd80      	pop	{r7, pc}
  401836:	bf00      	nop
  401838:	00402089 	.word	0x00402089
  40183c:	004020f5 	.word	0x004020f5
  401840:	00402165 	.word	0x00402165

00401844 <osc_is_ready>:
{
  401844:	b580      	push	{r7, lr}
  401846:	b082      	sub	sp, #8
  401848:	af00      	add	r7, sp, #0
  40184a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40184c:	687b      	ldr	r3, [r7, #4]
  40184e:	2b07      	cmp	r3, #7
  401850:	d826      	bhi.n	4018a0 <osc_is_ready+0x5c>
  401852:	a201      	add	r2, pc, #4	; (adr r2, 401858 <osc_is_ready+0x14>)
  401854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401858:	00401879 	.word	0x00401879
  40185c:	0040187d 	.word	0x0040187d
  401860:	0040187d 	.word	0x0040187d
  401864:	0040188f 	.word	0x0040188f
  401868:	0040188f 	.word	0x0040188f
  40186c:	0040188f 	.word	0x0040188f
  401870:	0040188f 	.word	0x0040188f
  401874:	0040188f 	.word	0x0040188f
		return 1;
  401878:	2301      	movs	r3, #1
  40187a:	e012      	b.n	4018a2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  40187c:	4b0b      	ldr	r3, [pc, #44]	; (4018ac <osc_is_ready+0x68>)
  40187e:	4798      	blx	r3
  401880:	4603      	mov	r3, r0
  401882:	2b00      	cmp	r3, #0
  401884:	bf14      	ite	ne
  401886:	2301      	movne	r3, #1
  401888:	2300      	moveq	r3, #0
  40188a:	b2db      	uxtb	r3, r3
  40188c:	e009      	b.n	4018a2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40188e:	4b08      	ldr	r3, [pc, #32]	; (4018b0 <osc_is_ready+0x6c>)
  401890:	4798      	blx	r3
  401892:	4603      	mov	r3, r0
  401894:	2b00      	cmp	r3, #0
  401896:	bf14      	ite	ne
  401898:	2301      	movne	r3, #1
  40189a:	2300      	moveq	r3, #0
  40189c:	b2db      	uxtb	r3, r3
  40189e:	e000      	b.n	4018a2 <osc_is_ready+0x5e>
	return 0;
  4018a0:	2300      	movs	r3, #0
}
  4018a2:	4618      	mov	r0, r3
  4018a4:	3708      	adds	r7, #8
  4018a6:	46bd      	mov	sp, r7
  4018a8:	bd80      	pop	{r7, pc}
  4018aa:	bf00      	nop
  4018ac:	004020c1 	.word	0x004020c1
  4018b0:	004021dd 	.word	0x004021dd

004018b4 <osc_get_rate>:
{
  4018b4:	b480      	push	{r7}
  4018b6:	b083      	sub	sp, #12
  4018b8:	af00      	add	r7, sp, #0
  4018ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4018bc:	687b      	ldr	r3, [r7, #4]
  4018be:	2b07      	cmp	r3, #7
  4018c0:	d825      	bhi.n	40190e <osc_get_rate+0x5a>
  4018c2:	a201      	add	r2, pc, #4	; (adr r2, 4018c8 <osc_get_rate+0x14>)
  4018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4018c8:	004018e9 	.word	0x004018e9
  4018cc:	004018ef 	.word	0x004018ef
  4018d0:	004018f5 	.word	0x004018f5
  4018d4:	004018fb 	.word	0x004018fb
  4018d8:	004018ff 	.word	0x004018ff
  4018dc:	00401903 	.word	0x00401903
  4018e0:	00401907 	.word	0x00401907
  4018e4:	0040190b 	.word	0x0040190b
		return OSC_SLCK_32K_RC_HZ;
  4018e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4018ec:	e010      	b.n	401910 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4018ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018f2:	e00d      	b.n	401910 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4018f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018f8:	e00a      	b.n	401910 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4018fa:	4b08      	ldr	r3, [pc, #32]	; (40191c <osc_get_rate+0x68>)
  4018fc:	e008      	b.n	401910 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4018fe:	4b08      	ldr	r3, [pc, #32]	; (401920 <osc_get_rate+0x6c>)
  401900:	e006      	b.n	401910 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401902:	4b08      	ldr	r3, [pc, #32]	; (401924 <osc_get_rate+0x70>)
  401904:	e004      	b.n	401910 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401906:	4b07      	ldr	r3, [pc, #28]	; (401924 <osc_get_rate+0x70>)
  401908:	e002      	b.n	401910 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40190a:	4b06      	ldr	r3, [pc, #24]	; (401924 <osc_get_rate+0x70>)
  40190c:	e000      	b.n	401910 <osc_get_rate+0x5c>
	return 0;
  40190e:	2300      	movs	r3, #0
}
  401910:	4618      	mov	r0, r3
  401912:	370c      	adds	r7, #12
  401914:	46bd      	mov	sp, r7
  401916:	bc80      	pop	{r7}
  401918:	4770      	bx	lr
  40191a:	bf00      	nop
  40191c:	003d0900 	.word	0x003d0900
  401920:	007a1200 	.word	0x007a1200
  401924:	00b71b00 	.word	0x00b71b00

00401928 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401928:	b580      	push	{r7, lr}
  40192a:	b082      	sub	sp, #8
  40192c:	af00      	add	r7, sp, #0
  40192e:	4603      	mov	r3, r0
  401930:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401932:	bf00      	nop
  401934:	79fb      	ldrb	r3, [r7, #7]
  401936:	4618      	mov	r0, r3
  401938:	4b05      	ldr	r3, [pc, #20]	; (401950 <osc_wait_ready+0x28>)
  40193a:	4798      	blx	r3
  40193c:	4603      	mov	r3, r0
  40193e:	f083 0301 	eor.w	r3, r3, #1
  401942:	b2db      	uxtb	r3, r3
  401944:	2b00      	cmp	r3, #0
  401946:	d1f5      	bne.n	401934 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401948:	bf00      	nop
  40194a:	3708      	adds	r7, #8
  40194c:	46bd      	mov	sp, r7
  40194e:	bd80      	pop	{r7, pc}
  401950:	00401845 	.word	0x00401845

00401954 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401954:	b580      	push	{r7, lr}
  401956:	b086      	sub	sp, #24
  401958:	af00      	add	r7, sp, #0
  40195a:	60f8      	str	r0, [r7, #12]
  40195c:	607a      	str	r2, [r7, #4]
  40195e:	603b      	str	r3, [r7, #0]
  401960:	460b      	mov	r3, r1
  401962:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401964:	7afb      	ldrb	r3, [r7, #11]
  401966:	4618      	mov	r0, r3
  401968:	4b0d      	ldr	r3, [pc, #52]	; (4019a0 <pll_config_init+0x4c>)
  40196a:	4798      	blx	r3
  40196c:	4602      	mov	r2, r0
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	fbb2 f3f3 	udiv	r3, r2, r3
  401974:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401976:	697b      	ldr	r3, [r7, #20]
  401978:	683a      	ldr	r2, [r7, #0]
  40197a:	fb02 f303 	mul.w	r3, r2, r3
  40197e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401980:	683b      	ldr	r3, [r7, #0]
  401982:	3b01      	subs	r3, #1
  401984:	041a      	lsls	r2, r3, #16
  401986:	4b07      	ldr	r3, [pc, #28]	; (4019a4 <pll_config_init+0x50>)
  401988:	4013      	ands	r3, r2
  40198a:	687a      	ldr	r2, [r7, #4]
  40198c:	b2d2      	uxtb	r2, r2
  40198e:	4313      	orrs	r3, r2
  401990:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  401994:	68fb      	ldr	r3, [r7, #12]
  401996:	601a      	str	r2, [r3, #0]
}
  401998:	bf00      	nop
  40199a:	3718      	adds	r7, #24
  40199c:	46bd      	mov	sp, r7
  40199e:	bd80      	pop	{r7, pc}
  4019a0:	004018b5 	.word	0x004018b5
  4019a4:	07ff0000 	.word	0x07ff0000

004019a8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4019a8:	b580      	push	{r7, lr}
  4019aa:	b082      	sub	sp, #8
  4019ac:	af00      	add	r7, sp, #0
  4019ae:	6078      	str	r0, [r7, #4]
  4019b0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4019b2:	683b      	ldr	r3, [r7, #0]
  4019b4:	2b00      	cmp	r3, #0
  4019b6:	d108      	bne.n	4019ca <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4019b8:	4b09      	ldr	r3, [pc, #36]	; (4019e0 <pll_enable+0x38>)
  4019ba:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4019bc:	4a09      	ldr	r2, [pc, #36]	; (4019e4 <pll_enable+0x3c>)
  4019be:	687b      	ldr	r3, [r7, #4]
  4019c0:	681b      	ldr	r3, [r3, #0]
  4019c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4019c6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4019c8:	e005      	b.n	4019d6 <pll_enable+0x2e>
		pmc_disable_pllbck();
  4019ca:	4b07      	ldr	r3, [pc, #28]	; (4019e8 <pll_enable+0x40>)
  4019cc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4019ce:	4a05      	ldr	r2, [pc, #20]	; (4019e4 <pll_enable+0x3c>)
  4019d0:	687b      	ldr	r3, [r7, #4]
  4019d2:	681b      	ldr	r3, [r3, #0]
  4019d4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4019d6:	bf00      	nop
  4019d8:	3708      	adds	r7, #8
  4019da:	46bd      	mov	sp, r7
  4019dc:	bd80      	pop	{r7, pc}
  4019de:	bf00      	nop
  4019e0:	004021f5 	.word	0x004021f5
  4019e4:	400e0400 	.word	0x400e0400
  4019e8:	00402225 	.word	0x00402225

004019ec <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4019ec:	b580      	push	{r7, lr}
  4019ee:	b082      	sub	sp, #8
  4019f0:	af00      	add	r7, sp, #0
  4019f2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4019f4:	687b      	ldr	r3, [r7, #4]
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d103      	bne.n	401a02 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4019fa:	4b05      	ldr	r3, [pc, #20]	; (401a10 <pll_is_locked+0x24>)
  4019fc:	4798      	blx	r3
  4019fe:	4603      	mov	r3, r0
  401a00:	e002      	b.n	401a08 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  401a02:	4b04      	ldr	r3, [pc, #16]	; (401a14 <pll_is_locked+0x28>)
  401a04:	4798      	blx	r3
  401a06:	4603      	mov	r3, r0
	}
}
  401a08:	4618      	mov	r0, r3
  401a0a:	3708      	adds	r7, #8
  401a0c:	46bd      	mov	sp, r7
  401a0e:	bd80      	pop	{r7, pc}
  401a10:	0040220d 	.word	0x0040220d
  401a14:	0040223d 	.word	0x0040223d

00401a18 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401a18:	b580      	push	{r7, lr}
  401a1a:	b082      	sub	sp, #8
  401a1c:	af00      	add	r7, sp, #0
  401a1e:	4603      	mov	r3, r0
  401a20:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401a22:	79fb      	ldrb	r3, [r7, #7]
  401a24:	3b03      	subs	r3, #3
  401a26:	2b04      	cmp	r3, #4
  401a28:	d808      	bhi.n	401a3c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401a2a:	79fb      	ldrb	r3, [r7, #7]
  401a2c:	4618      	mov	r0, r3
  401a2e:	4b06      	ldr	r3, [pc, #24]	; (401a48 <pll_enable_source+0x30>)
  401a30:	4798      	blx	r3
		osc_wait_ready(e_src);
  401a32:	79fb      	ldrb	r3, [r7, #7]
  401a34:	4618      	mov	r0, r3
  401a36:	4b05      	ldr	r3, [pc, #20]	; (401a4c <pll_enable_source+0x34>)
  401a38:	4798      	blx	r3
		break;
  401a3a:	e000      	b.n	401a3e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401a3c:	bf00      	nop
	}
}
  401a3e:	bf00      	nop
  401a40:	3708      	adds	r7, #8
  401a42:	46bd      	mov	sp, r7
  401a44:	bd80      	pop	{r7, pc}
  401a46:	bf00      	nop
  401a48:	004017bd 	.word	0x004017bd
  401a4c:	00401929 	.word	0x00401929

00401a50 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401a50:	b580      	push	{r7, lr}
  401a52:	b082      	sub	sp, #8
  401a54:	af00      	add	r7, sp, #0
  401a56:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401a58:	bf00      	nop
  401a5a:	6878      	ldr	r0, [r7, #4]
  401a5c:	4b04      	ldr	r3, [pc, #16]	; (401a70 <pll_wait_for_lock+0x20>)
  401a5e:	4798      	blx	r3
  401a60:	4603      	mov	r3, r0
  401a62:	2b00      	cmp	r3, #0
  401a64:	d0f9      	beq.n	401a5a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401a66:	2300      	movs	r3, #0
}
  401a68:	4618      	mov	r0, r3
  401a6a:	3708      	adds	r7, #8
  401a6c:	46bd      	mov	sp, r7
  401a6e:	bd80      	pop	{r7, pc}
  401a70:	004019ed 	.word	0x004019ed

00401a74 <sysclk_get_main_hz>:
{
  401a74:	b580      	push	{r7, lr}
  401a76:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401a78:	2006      	movs	r0, #6
  401a7a:	4b04      	ldr	r3, [pc, #16]	; (401a8c <sysclk_get_main_hz+0x18>)
  401a7c:	4798      	blx	r3
  401a7e:	4602      	mov	r2, r0
  401a80:	4613      	mov	r3, r2
  401a82:	009b      	lsls	r3, r3, #2
  401a84:	4413      	add	r3, r2
  401a86:	009b      	lsls	r3, r3, #2
}
  401a88:	4618      	mov	r0, r3
  401a8a:	bd80      	pop	{r7, pc}
  401a8c:	004018b5 	.word	0x004018b5

00401a90 <sysclk_get_cpu_hz>:
{
  401a90:	b580      	push	{r7, lr}
  401a92:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401a94:	4b02      	ldr	r3, [pc, #8]	; (401aa0 <sysclk_get_cpu_hz+0x10>)
  401a96:	4798      	blx	r3
  401a98:	4603      	mov	r3, r0
  401a9a:	085b      	lsrs	r3, r3, #1
}
  401a9c:	4618      	mov	r0, r3
  401a9e:	bd80      	pop	{r7, pc}
  401aa0:	00401a75 	.word	0x00401a75

00401aa4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401aa4:	b590      	push	{r4, r7, lr}
  401aa6:	b083      	sub	sp, #12
  401aa8:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401aaa:	4811      	ldr	r0, [pc, #68]	; (401af0 <sysclk_init+0x4c>)
  401aac:	4b11      	ldr	r3, [pc, #68]	; (401af4 <sysclk_init+0x50>)
  401aae:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401ab0:	2006      	movs	r0, #6
  401ab2:	4b11      	ldr	r3, [pc, #68]	; (401af8 <sysclk_init+0x54>)
  401ab4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401ab6:	1d38      	adds	r0, r7, #4
  401ab8:	2314      	movs	r3, #20
  401aba:	2201      	movs	r2, #1
  401abc:	2106      	movs	r1, #6
  401abe:	4c0f      	ldr	r4, [pc, #60]	; (401afc <sysclk_init+0x58>)
  401ac0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401ac2:	1d3b      	adds	r3, r7, #4
  401ac4:	2100      	movs	r1, #0
  401ac6:	4618      	mov	r0, r3
  401ac8:	4b0d      	ldr	r3, [pc, #52]	; (401b00 <sysclk_init+0x5c>)
  401aca:	4798      	blx	r3
		pll_wait_for_lock(0);
  401acc:	2000      	movs	r0, #0
  401ace:	4b0d      	ldr	r3, [pc, #52]	; (401b04 <sysclk_init+0x60>)
  401ad0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401ad2:	2010      	movs	r0, #16
  401ad4:	4b0c      	ldr	r3, [pc, #48]	; (401b08 <sysclk_init+0x64>)
  401ad6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401ad8:	4b0c      	ldr	r3, [pc, #48]	; (401b0c <sysclk_init+0x68>)
  401ada:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401adc:	4b0c      	ldr	r3, [pc, #48]	; (401b10 <sysclk_init+0x6c>)
  401ade:	4798      	blx	r3
  401ae0:	4603      	mov	r3, r0
  401ae2:	4618      	mov	r0, r3
  401ae4:	4b03      	ldr	r3, [pc, #12]	; (401af4 <sysclk_init+0x50>)
  401ae6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401ae8:	bf00      	nop
  401aea:	370c      	adds	r7, #12
  401aec:	46bd      	mov	sp, r7
  401aee:	bd90      	pop	{r4, r7, pc}
  401af0:	07270e00 	.word	0x07270e00
  401af4:	00402809 	.word	0x00402809
  401af8:	00401a19 	.word	0x00401a19
  401afc:	00401955 	.word	0x00401955
  401b00:	004019a9 	.word	0x004019a9
  401b04:	00401a51 	.word	0x00401a51
  401b08:	00402009 	.word	0x00402009
  401b0c:	00402671 	.word	0x00402671
  401b10:	00401a91 	.word	0x00401a91

00401b14 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401b14:	b480      	push	{r7}
  401b16:	b085      	sub	sp, #20
  401b18:	af00      	add	r7, sp, #0
  401b1a:	60f8      	str	r0, [r7, #12]
  401b1c:	60b9      	str	r1, [r7, #8]
  401b1e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b20:	687b      	ldr	r3, [r7, #4]
  401b22:	2b00      	cmp	r3, #0
  401b24:	d003      	beq.n	401b2e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401b26:	68fb      	ldr	r3, [r7, #12]
  401b28:	68ba      	ldr	r2, [r7, #8]
  401b2a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401b2c:	e002      	b.n	401b34 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401b2e:	68fb      	ldr	r3, [r7, #12]
  401b30:	68ba      	ldr	r2, [r7, #8]
  401b32:	661a      	str	r2, [r3, #96]	; 0x60
}
  401b34:	bf00      	nop
  401b36:	3714      	adds	r7, #20
  401b38:	46bd      	mov	sp, r7
  401b3a:	bc80      	pop	{r7}
  401b3c:	4770      	bx	lr

00401b3e <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401b3e:	b480      	push	{r7}
  401b40:	b085      	sub	sp, #20
  401b42:	af00      	add	r7, sp, #0
  401b44:	60f8      	str	r0, [r7, #12]
  401b46:	60b9      	str	r1, [r7, #8]
  401b48:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401b4a:	68fb      	ldr	r3, [r7, #12]
  401b4c:	68ba      	ldr	r2, [r7, #8]
  401b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401b52:	687b      	ldr	r3, [r7, #4]
  401b54:	005b      	lsls	r3, r3, #1
  401b56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401b5a:	fbb2 f3f3 	udiv	r3, r2, r3
  401b5e:	3b01      	subs	r3, #1
  401b60:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401b64:	68fb      	ldr	r3, [r7, #12]
  401b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401b6a:	bf00      	nop
  401b6c:	3714      	adds	r7, #20
  401b6e:	46bd      	mov	sp, r7
  401b70:	bc80      	pop	{r7}
  401b72:	4770      	bx	lr

00401b74 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401b74:	b480      	push	{r7}
  401b76:	b087      	sub	sp, #28
  401b78:	af00      	add	r7, sp, #0
  401b7a:	60f8      	str	r0, [r7, #12]
  401b7c:	60b9      	str	r1, [r7, #8]
  401b7e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401b80:	68fb      	ldr	r3, [r7, #12]
  401b82:	687a      	ldr	r2, [r7, #4]
  401b84:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401b86:	68bb      	ldr	r3, [r7, #8]
  401b88:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401b8c:	d04a      	beq.n	401c24 <pio_set_peripheral+0xb0>
  401b8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401b92:	d808      	bhi.n	401ba6 <pio_set_peripheral+0x32>
  401b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401b98:	d016      	beq.n	401bc8 <pio_set_peripheral+0x54>
  401b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401b9e:	d02c      	beq.n	401bfa <pio_set_peripheral+0x86>
  401ba0:	2b00      	cmp	r3, #0
  401ba2:	d069      	beq.n	401c78 <pio_set_peripheral+0x104>
  401ba4:	e064      	b.n	401c70 <pio_set_peripheral+0xfc>
  401ba6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401baa:	d065      	beq.n	401c78 <pio_set_peripheral+0x104>
  401bac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401bb0:	d803      	bhi.n	401bba <pio_set_peripheral+0x46>
  401bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401bb6:	d04a      	beq.n	401c4e <pio_set_peripheral+0xda>
  401bb8:	e05a      	b.n	401c70 <pio_set_peripheral+0xfc>
  401bba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401bbe:	d05b      	beq.n	401c78 <pio_set_peripheral+0x104>
  401bc0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401bc4:	d058      	beq.n	401c78 <pio_set_peripheral+0x104>
  401bc6:	e053      	b.n	401c70 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bc8:	68fb      	ldr	r3, [r7, #12]
  401bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401bcc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401bce:	68fb      	ldr	r3, [r7, #12]
  401bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401bd2:	687b      	ldr	r3, [r7, #4]
  401bd4:	43d9      	mvns	r1, r3
  401bd6:	697b      	ldr	r3, [r7, #20]
  401bd8:	400b      	ands	r3, r1
  401bda:	401a      	ands	r2, r3
  401bdc:	68fb      	ldr	r3, [r7, #12]
  401bde:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401be4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401be6:	68fb      	ldr	r3, [r7, #12]
  401be8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401bea:	687b      	ldr	r3, [r7, #4]
  401bec:	43d9      	mvns	r1, r3
  401bee:	697b      	ldr	r3, [r7, #20]
  401bf0:	400b      	ands	r3, r1
  401bf2:	401a      	ands	r2, r3
  401bf4:	68fb      	ldr	r3, [r7, #12]
  401bf6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401bf8:	e03a      	b.n	401c70 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bfa:	68fb      	ldr	r3, [r7, #12]
  401bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401bfe:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c00:	687a      	ldr	r2, [r7, #4]
  401c02:	697b      	ldr	r3, [r7, #20]
  401c04:	431a      	orrs	r2, r3
  401c06:	68fb      	ldr	r3, [r7, #12]
  401c08:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c0a:	68fb      	ldr	r3, [r7, #12]
  401c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c0e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c10:	68fb      	ldr	r3, [r7, #12]
  401c12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401c14:	687b      	ldr	r3, [r7, #4]
  401c16:	43d9      	mvns	r1, r3
  401c18:	697b      	ldr	r3, [r7, #20]
  401c1a:	400b      	ands	r3, r1
  401c1c:	401a      	ands	r2, r3
  401c1e:	68fb      	ldr	r3, [r7, #12]
  401c20:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c22:	e025      	b.n	401c70 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c24:	68fb      	ldr	r3, [r7, #12]
  401c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c28:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c2a:	68fb      	ldr	r3, [r7, #12]
  401c2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c2e:	687b      	ldr	r3, [r7, #4]
  401c30:	43d9      	mvns	r1, r3
  401c32:	697b      	ldr	r3, [r7, #20]
  401c34:	400b      	ands	r3, r1
  401c36:	401a      	ands	r2, r3
  401c38:	68fb      	ldr	r3, [r7, #12]
  401c3a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c3c:	68fb      	ldr	r3, [r7, #12]
  401c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c40:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c42:	687a      	ldr	r2, [r7, #4]
  401c44:	697b      	ldr	r3, [r7, #20]
  401c46:	431a      	orrs	r2, r3
  401c48:	68fb      	ldr	r3, [r7, #12]
  401c4a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c4c:	e010      	b.n	401c70 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c4e:	68fb      	ldr	r3, [r7, #12]
  401c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c52:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c54:	687a      	ldr	r2, [r7, #4]
  401c56:	697b      	ldr	r3, [r7, #20]
  401c58:	431a      	orrs	r2, r3
  401c5a:	68fb      	ldr	r3, [r7, #12]
  401c5c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c5e:	68fb      	ldr	r3, [r7, #12]
  401c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c62:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c64:	687a      	ldr	r2, [r7, #4]
  401c66:	697b      	ldr	r3, [r7, #20]
  401c68:	431a      	orrs	r2, r3
  401c6a:	68fb      	ldr	r3, [r7, #12]
  401c6c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c6e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c70:	68fb      	ldr	r3, [r7, #12]
  401c72:	687a      	ldr	r2, [r7, #4]
  401c74:	605a      	str	r2, [r3, #4]
  401c76:	e000      	b.n	401c7a <pio_set_peripheral+0x106>
		return;
  401c78:	bf00      	nop
}
  401c7a:	371c      	adds	r7, #28
  401c7c:	46bd      	mov	sp, r7
  401c7e:	bc80      	pop	{r7}
  401c80:	4770      	bx	lr
	...

00401c84 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401c84:	b580      	push	{r7, lr}
  401c86:	b084      	sub	sp, #16
  401c88:	af00      	add	r7, sp, #0
  401c8a:	60f8      	str	r0, [r7, #12]
  401c8c:	60b9      	str	r1, [r7, #8]
  401c8e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401c90:	68b9      	ldr	r1, [r7, #8]
  401c92:	68f8      	ldr	r0, [r7, #12]
  401c94:	4b19      	ldr	r3, [pc, #100]	; (401cfc <pio_set_input+0x78>)
  401c96:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401c98:	687b      	ldr	r3, [r7, #4]
  401c9a:	f003 0301 	and.w	r3, r3, #1
  401c9e:	461a      	mov	r2, r3
  401ca0:	68b9      	ldr	r1, [r7, #8]
  401ca2:	68f8      	ldr	r0, [r7, #12]
  401ca4:	4b16      	ldr	r3, [pc, #88]	; (401d00 <pio_set_input+0x7c>)
  401ca6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	f003 030a 	and.w	r3, r3, #10
  401cae:	2b00      	cmp	r3, #0
  401cb0:	d003      	beq.n	401cba <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401cb2:	68fb      	ldr	r3, [r7, #12]
  401cb4:	68ba      	ldr	r2, [r7, #8]
  401cb6:	621a      	str	r2, [r3, #32]
  401cb8:	e002      	b.n	401cc0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401cba:	68fb      	ldr	r3, [r7, #12]
  401cbc:	68ba      	ldr	r2, [r7, #8]
  401cbe:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401cc0:	687b      	ldr	r3, [r7, #4]
  401cc2:	f003 0302 	and.w	r3, r3, #2
  401cc6:	2b00      	cmp	r3, #0
  401cc8:	d004      	beq.n	401cd4 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401cca:	68fb      	ldr	r3, [r7, #12]
  401ccc:	68ba      	ldr	r2, [r7, #8]
  401cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401cd2:	e008      	b.n	401ce6 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401cd4:	687b      	ldr	r3, [r7, #4]
  401cd6:	f003 0308 	and.w	r3, r3, #8
  401cda:	2b00      	cmp	r3, #0
  401cdc:	d003      	beq.n	401ce6 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401cde:	68fb      	ldr	r3, [r7, #12]
  401ce0:	68ba      	ldr	r2, [r7, #8]
  401ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401ce6:	68fb      	ldr	r3, [r7, #12]
  401ce8:	68ba      	ldr	r2, [r7, #8]
  401cea:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401cec:	68fb      	ldr	r3, [r7, #12]
  401cee:	68ba      	ldr	r2, [r7, #8]
  401cf0:	601a      	str	r2, [r3, #0]
}
  401cf2:	bf00      	nop
  401cf4:	3710      	adds	r7, #16
  401cf6:	46bd      	mov	sp, r7
  401cf8:	bd80      	pop	{r7, pc}
  401cfa:	bf00      	nop
  401cfc:	00401ded 	.word	0x00401ded
  401d00:	00401b15 	.word	0x00401b15

00401d04 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401d04:	b580      	push	{r7, lr}
  401d06:	b084      	sub	sp, #16
  401d08:	af00      	add	r7, sp, #0
  401d0a:	60f8      	str	r0, [r7, #12]
  401d0c:	60b9      	str	r1, [r7, #8]
  401d0e:	607a      	str	r2, [r7, #4]
  401d10:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401d12:	68b9      	ldr	r1, [r7, #8]
  401d14:	68f8      	ldr	r0, [r7, #12]
  401d16:	4b12      	ldr	r3, [pc, #72]	; (401d60 <pio_set_output+0x5c>)
  401d18:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401d1a:	69ba      	ldr	r2, [r7, #24]
  401d1c:	68b9      	ldr	r1, [r7, #8]
  401d1e:	68f8      	ldr	r0, [r7, #12]
  401d20:	4b10      	ldr	r3, [pc, #64]	; (401d64 <pio_set_output+0x60>)
  401d22:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d24:	683b      	ldr	r3, [r7, #0]
  401d26:	2b00      	cmp	r3, #0
  401d28:	d003      	beq.n	401d32 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401d2a:	68fb      	ldr	r3, [r7, #12]
  401d2c:	68ba      	ldr	r2, [r7, #8]
  401d2e:	651a      	str	r2, [r3, #80]	; 0x50
  401d30:	e002      	b.n	401d38 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d32:	68fb      	ldr	r3, [r7, #12]
  401d34:	68ba      	ldr	r2, [r7, #8]
  401d36:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d38:	687b      	ldr	r3, [r7, #4]
  401d3a:	2b00      	cmp	r3, #0
  401d3c:	d003      	beq.n	401d46 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401d3e:	68fb      	ldr	r3, [r7, #12]
  401d40:	68ba      	ldr	r2, [r7, #8]
  401d42:	631a      	str	r2, [r3, #48]	; 0x30
  401d44:	e002      	b.n	401d4c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d46:	68fb      	ldr	r3, [r7, #12]
  401d48:	68ba      	ldr	r2, [r7, #8]
  401d4a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d4c:	68fb      	ldr	r3, [r7, #12]
  401d4e:	68ba      	ldr	r2, [r7, #8]
  401d50:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401d52:	68fb      	ldr	r3, [r7, #12]
  401d54:	68ba      	ldr	r2, [r7, #8]
  401d56:	601a      	str	r2, [r3, #0]
}
  401d58:	bf00      	nop
  401d5a:	3710      	adds	r7, #16
  401d5c:	46bd      	mov	sp, r7
  401d5e:	bd80      	pop	{r7, pc}
  401d60:	00401ded 	.word	0x00401ded
  401d64:	00401b15 	.word	0x00401b15

00401d68 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401d68:	b480      	push	{r7}
  401d6a:	b085      	sub	sp, #20
  401d6c:	af00      	add	r7, sp, #0
  401d6e:	60f8      	str	r0, [r7, #12]
  401d70:	60b9      	str	r1, [r7, #8]
  401d72:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401d74:	687b      	ldr	r3, [r7, #4]
  401d76:	f003 0310 	and.w	r3, r3, #16
  401d7a:	2b00      	cmp	r3, #0
  401d7c:	d020      	beq.n	401dc0 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401d7e:	68fb      	ldr	r3, [r7, #12]
  401d80:	68ba      	ldr	r2, [r7, #8]
  401d82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401d86:	687b      	ldr	r3, [r7, #4]
  401d88:	f003 0320 	and.w	r3, r3, #32
  401d8c:	2b00      	cmp	r3, #0
  401d8e:	d004      	beq.n	401d9a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401d90:	68fb      	ldr	r3, [r7, #12]
  401d92:	68ba      	ldr	r2, [r7, #8]
  401d94:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401d98:	e003      	b.n	401da2 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401d9a:	68fb      	ldr	r3, [r7, #12]
  401d9c:	68ba      	ldr	r2, [r7, #8]
  401d9e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401da2:	687b      	ldr	r3, [r7, #4]
  401da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401da8:	2b00      	cmp	r3, #0
  401daa:	d004      	beq.n	401db6 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401dac:	68fb      	ldr	r3, [r7, #12]
  401dae:	68ba      	ldr	r2, [r7, #8]
  401db0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401db4:	e008      	b.n	401dc8 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401db6:	68fb      	ldr	r3, [r7, #12]
  401db8:	68ba      	ldr	r2, [r7, #8]
  401dba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401dbe:	e003      	b.n	401dc8 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401dc0:	68fb      	ldr	r3, [r7, #12]
  401dc2:	68ba      	ldr	r2, [r7, #8]
  401dc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401dc8:	bf00      	nop
  401dca:	3714      	adds	r7, #20
  401dcc:	46bd      	mov	sp, r7
  401dce:	bc80      	pop	{r7}
  401dd0:	4770      	bx	lr

00401dd2 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401dd2:	b480      	push	{r7}
  401dd4:	b083      	sub	sp, #12
  401dd6:	af00      	add	r7, sp, #0
  401dd8:	6078      	str	r0, [r7, #4]
  401dda:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401ddc:	687b      	ldr	r3, [r7, #4]
  401dde:	683a      	ldr	r2, [r7, #0]
  401de0:	641a      	str	r2, [r3, #64]	; 0x40
}
  401de2:	bf00      	nop
  401de4:	370c      	adds	r7, #12
  401de6:	46bd      	mov	sp, r7
  401de8:	bc80      	pop	{r7}
  401dea:	4770      	bx	lr

00401dec <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401dec:	b480      	push	{r7}
  401dee:	b083      	sub	sp, #12
  401df0:	af00      	add	r7, sp, #0
  401df2:	6078      	str	r0, [r7, #4]
  401df4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401df6:	687b      	ldr	r3, [r7, #4]
  401df8:	683a      	ldr	r2, [r7, #0]
  401dfa:	645a      	str	r2, [r3, #68]	; 0x44
}
  401dfc:	bf00      	nop
  401dfe:	370c      	adds	r7, #12
  401e00:	46bd      	mov	sp, r7
  401e02:	bc80      	pop	{r7}
  401e04:	4770      	bx	lr

00401e06 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401e06:	b480      	push	{r7}
  401e08:	b083      	sub	sp, #12
  401e0a:	af00      	add	r7, sp, #0
  401e0c:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401e0e:	687b      	ldr	r3, [r7, #4]
  401e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401e12:	4618      	mov	r0, r3
  401e14:	370c      	adds	r7, #12
  401e16:	46bd      	mov	sp, r7
  401e18:	bc80      	pop	{r7}
  401e1a:	4770      	bx	lr

00401e1c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401e1c:	b480      	push	{r7}
  401e1e:	b083      	sub	sp, #12
  401e20:	af00      	add	r7, sp, #0
  401e22:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401e24:	687b      	ldr	r3, [r7, #4]
  401e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401e28:	4618      	mov	r0, r3
  401e2a:	370c      	adds	r7, #12
  401e2c:	46bd      	mov	sp, r7
  401e2e:	bc80      	pop	{r7}
  401e30:	4770      	bx	lr
	...

00401e34 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401e34:	b590      	push	{r4, r7, lr}
  401e36:	b087      	sub	sp, #28
  401e38:	af02      	add	r7, sp, #8
  401e3a:	6078      	str	r0, [r7, #4]
  401e3c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401e3e:	6878      	ldr	r0, [r7, #4]
  401e40:	4b63      	ldr	r3, [pc, #396]	; (401fd0 <pio_configure_pin+0x19c>)
  401e42:	4798      	blx	r3
  401e44:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401e46:	683b      	ldr	r3, [r7, #0]
  401e48:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401e50:	d067      	beq.n	401f22 <pio_configure_pin+0xee>
  401e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401e56:	d809      	bhi.n	401e6c <pio_configure_pin+0x38>
  401e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401e5c:	d02b      	beq.n	401eb6 <pio_configure_pin+0x82>
  401e5e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401e62:	d043      	beq.n	401eec <pio_configure_pin+0xb8>
  401e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401e68:	d00a      	beq.n	401e80 <pio_configure_pin+0x4c>
  401e6a:	e0a9      	b.n	401fc0 <pio_configure_pin+0x18c>
  401e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401e70:	d07e      	beq.n	401f70 <pio_configure_pin+0x13c>
  401e72:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e76:	d07b      	beq.n	401f70 <pio_configure_pin+0x13c>
  401e78:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e7c:	d06c      	beq.n	401f58 <pio_configure_pin+0x124>
  401e7e:	e09f      	b.n	401fc0 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401e80:	687b      	ldr	r3, [r7, #4]
  401e82:	f003 031f 	and.w	r3, r3, #31
  401e86:	2201      	movs	r2, #1
  401e88:	fa02 f303 	lsl.w	r3, r2, r3
  401e8c:	461a      	mov	r2, r3
  401e8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e92:	68f8      	ldr	r0, [r7, #12]
  401e94:	4b4f      	ldr	r3, [pc, #316]	; (401fd4 <pio_configure_pin+0x1a0>)
  401e96:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401e98:	687b      	ldr	r3, [r7, #4]
  401e9a:	f003 031f 	and.w	r3, r3, #31
  401e9e:	2201      	movs	r2, #1
  401ea0:	fa02 f303 	lsl.w	r3, r2, r3
  401ea4:	4619      	mov	r1, r3
  401ea6:	683b      	ldr	r3, [r7, #0]
  401ea8:	f003 0301 	and.w	r3, r3, #1
  401eac:	461a      	mov	r2, r3
  401eae:	68f8      	ldr	r0, [r7, #12]
  401eb0:	4b49      	ldr	r3, [pc, #292]	; (401fd8 <pio_configure_pin+0x1a4>)
  401eb2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401eb4:	e086      	b.n	401fc4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401eb6:	687b      	ldr	r3, [r7, #4]
  401eb8:	f003 031f 	and.w	r3, r3, #31
  401ebc:	2201      	movs	r2, #1
  401ebe:	fa02 f303 	lsl.w	r3, r2, r3
  401ec2:	461a      	mov	r2, r3
  401ec4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401ec8:	68f8      	ldr	r0, [r7, #12]
  401eca:	4b42      	ldr	r3, [pc, #264]	; (401fd4 <pio_configure_pin+0x1a0>)
  401ecc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401ece:	687b      	ldr	r3, [r7, #4]
  401ed0:	f003 031f 	and.w	r3, r3, #31
  401ed4:	2201      	movs	r2, #1
  401ed6:	fa02 f303 	lsl.w	r3, r2, r3
  401eda:	4619      	mov	r1, r3
  401edc:	683b      	ldr	r3, [r7, #0]
  401ede:	f003 0301 	and.w	r3, r3, #1
  401ee2:	461a      	mov	r2, r3
  401ee4:	68f8      	ldr	r0, [r7, #12]
  401ee6:	4b3c      	ldr	r3, [pc, #240]	; (401fd8 <pio_configure_pin+0x1a4>)
  401ee8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401eea:	e06b      	b.n	401fc4 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401eec:	687b      	ldr	r3, [r7, #4]
  401eee:	f003 031f 	and.w	r3, r3, #31
  401ef2:	2201      	movs	r2, #1
  401ef4:	fa02 f303 	lsl.w	r3, r2, r3
  401ef8:	461a      	mov	r2, r3
  401efa:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401efe:	68f8      	ldr	r0, [r7, #12]
  401f00:	4b34      	ldr	r3, [pc, #208]	; (401fd4 <pio_configure_pin+0x1a0>)
  401f02:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401f04:	687b      	ldr	r3, [r7, #4]
  401f06:	f003 031f 	and.w	r3, r3, #31
  401f0a:	2201      	movs	r2, #1
  401f0c:	fa02 f303 	lsl.w	r3, r2, r3
  401f10:	4619      	mov	r1, r3
  401f12:	683b      	ldr	r3, [r7, #0]
  401f14:	f003 0301 	and.w	r3, r3, #1
  401f18:	461a      	mov	r2, r3
  401f1a:	68f8      	ldr	r0, [r7, #12]
  401f1c:	4b2e      	ldr	r3, [pc, #184]	; (401fd8 <pio_configure_pin+0x1a4>)
  401f1e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401f20:	e050      	b.n	401fc4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401f22:	687b      	ldr	r3, [r7, #4]
  401f24:	f003 031f 	and.w	r3, r3, #31
  401f28:	2201      	movs	r2, #1
  401f2a:	fa02 f303 	lsl.w	r3, r2, r3
  401f2e:	461a      	mov	r2, r3
  401f30:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401f34:	68f8      	ldr	r0, [r7, #12]
  401f36:	4b27      	ldr	r3, [pc, #156]	; (401fd4 <pio_configure_pin+0x1a0>)
  401f38:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401f3a:	687b      	ldr	r3, [r7, #4]
  401f3c:	f003 031f 	and.w	r3, r3, #31
  401f40:	2201      	movs	r2, #1
  401f42:	fa02 f303 	lsl.w	r3, r2, r3
  401f46:	4619      	mov	r1, r3
  401f48:	683b      	ldr	r3, [r7, #0]
  401f4a:	f003 0301 	and.w	r3, r3, #1
  401f4e:	461a      	mov	r2, r3
  401f50:	68f8      	ldr	r0, [r7, #12]
  401f52:	4b21      	ldr	r3, [pc, #132]	; (401fd8 <pio_configure_pin+0x1a4>)
  401f54:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401f56:	e035      	b.n	401fc4 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401f58:	687b      	ldr	r3, [r7, #4]
  401f5a:	f003 031f 	and.w	r3, r3, #31
  401f5e:	2201      	movs	r2, #1
  401f60:	fa02 f303 	lsl.w	r3, r2, r3
  401f64:	683a      	ldr	r2, [r7, #0]
  401f66:	4619      	mov	r1, r3
  401f68:	68f8      	ldr	r0, [r7, #12]
  401f6a:	4b1c      	ldr	r3, [pc, #112]	; (401fdc <pio_configure_pin+0x1a8>)
  401f6c:	4798      	blx	r3
		break;
  401f6e:	e029      	b.n	401fc4 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401f70:	687b      	ldr	r3, [r7, #4]
  401f72:	f003 031f 	and.w	r3, r3, #31
  401f76:	2201      	movs	r2, #1
  401f78:	fa02 f303 	lsl.w	r3, r2, r3
  401f7c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401f7e:	683b      	ldr	r3, [r7, #0]
  401f80:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401f84:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401f88:	bf0c      	ite	eq
  401f8a:	2301      	moveq	r3, #1
  401f8c:	2300      	movne	r3, #0
  401f8e:	b2db      	uxtb	r3, r3
  401f90:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401f92:	683b      	ldr	r3, [r7, #0]
  401f94:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401f98:	2b00      	cmp	r3, #0
  401f9a:	bf14      	ite	ne
  401f9c:	2301      	movne	r3, #1
  401f9e:	2300      	moveq	r3, #0
  401fa0:	b2db      	uxtb	r3, r3
  401fa2:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401fa4:	683b      	ldr	r3, [r7, #0]
  401fa6:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401faa:	2b00      	cmp	r3, #0
  401fac:	bf14      	ite	ne
  401fae:	2301      	movne	r3, #1
  401fb0:	2300      	moveq	r3, #0
  401fb2:	b2db      	uxtb	r3, r3
  401fb4:	9300      	str	r3, [sp, #0]
  401fb6:	4603      	mov	r3, r0
  401fb8:	68f8      	ldr	r0, [r7, #12]
  401fba:	4c09      	ldr	r4, [pc, #36]	; (401fe0 <pio_configure_pin+0x1ac>)
  401fbc:	47a0      	blx	r4
		break;
  401fbe:	e001      	b.n	401fc4 <pio_configure_pin+0x190>

	default:
		return 0;
  401fc0:	2300      	movs	r3, #0
  401fc2:	e000      	b.n	401fc6 <pio_configure_pin+0x192>
	}

	return 1;
  401fc4:	2301      	movs	r3, #1
}
  401fc6:	4618      	mov	r0, r3
  401fc8:	3714      	adds	r7, #20
  401fca:	46bd      	mov	sp, r7
  401fcc:	bd90      	pop	{r4, r7, pc}
  401fce:	bf00      	nop
  401fd0:	00401fe5 	.word	0x00401fe5
  401fd4:	00401b75 	.word	0x00401b75
  401fd8:	00401b15 	.word	0x00401b15
  401fdc:	00401c85 	.word	0x00401c85
  401fe0:	00401d05 	.word	0x00401d05

00401fe4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401fe4:	b480      	push	{r7}
  401fe6:	b085      	sub	sp, #20
  401fe8:	af00      	add	r7, sp, #0
  401fea:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401fec:	687b      	ldr	r3, [r7, #4]
  401fee:	095b      	lsrs	r3, r3, #5
  401ff0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401ff4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401ff8:	025b      	lsls	r3, r3, #9
  401ffa:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401ffc:	68fb      	ldr	r3, [r7, #12]
}
  401ffe:	4618      	mov	r0, r3
  402000:	3714      	adds	r7, #20
  402002:	46bd      	mov	sp, r7
  402004:	bc80      	pop	{r7}
  402006:	4770      	bx	lr

00402008 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402008:	b480      	push	{r7}
  40200a:	b085      	sub	sp, #20
  40200c:	af00      	add	r7, sp, #0
  40200e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402010:	491c      	ldr	r1, [pc, #112]	; (402084 <pmc_switch_mck_to_pllack+0x7c>)
  402012:	4b1c      	ldr	r3, [pc, #112]	; (402084 <pmc_switch_mck_to_pllack+0x7c>)
  402014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40201a:	687b      	ldr	r3, [r7, #4]
  40201c:	4313      	orrs	r3, r2
  40201e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402020:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402024:	60fb      	str	r3, [r7, #12]
  402026:	e007      	b.n	402038 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402028:	68fb      	ldr	r3, [r7, #12]
  40202a:	2b00      	cmp	r3, #0
  40202c:	d101      	bne.n	402032 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40202e:	2301      	movs	r3, #1
  402030:	e023      	b.n	40207a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402032:	68fb      	ldr	r3, [r7, #12]
  402034:	3b01      	subs	r3, #1
  402036:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402038:	4b12      	ldr	r3, [pc, #72]	; (402084 <pmc_switch_mck_to_pllack+0x7c>)
  40203a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40203c:	f003 0308 	and.w	r3, r3, #8
  402040:	2b00      	cmp	r3, #0
  402042:	d0f1      	beq.n	402028 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402044:	4a0f      	ldr	r2, [pc, #60]	; (402084 <pmc_switch_mck_to_pllack+0x7c>)
  402046:	4b0f      	ldr	r3, [pc, #60]	; (402084 <pmc_switch_mck_to_pllack+0x7c>)
  402048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40204a:	f023 0303 	bic.w	r3, r3, #3
  40204e:	f043 0302 	orr.w	r3, r3, #2
  402052:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402054:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402058:	60fb      	str	r3, [r7, #12]
  40205a:	e007      	b.n	40206c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40205c:	68fb      	ldr	r3, [r7, #12]
  40205e:	2b00      	cmp	r3, #0
  402060:	d101      	bne.n	402066 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  402062:	2301      	movs	r3, #1
  402064:	e009      	b.n	40207a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402066:	68fb      	ldr	r3, [r7, #12]
  402068:	3b01      	subs	r3, #1
  40206a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40206c:	4b05      	ldr	r3, [pc, #20]	; (402084 <pmc_switch_mck_to_pllack+0x7c>)
  40206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402070:	f003 0308 	and.w	r3, r3, #8
  402074:	2b00      	cmp	r3, #0
  402076:	d0f1      	beq.n	40205c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402078:	2300      	movs	r3, #0
}
  40207a:	4618      	mov	r0, r3
  40207c:	3714      	adds	r7, #20
  40207e:	46bd      	mov	sp, r7
  402080:	bc80      	pop	{r7}
  402082:	4770      	bx	lr
  402084:	400e0400 	.word	0x400e0400

00402088 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402088:	b480      	push	{r7}
  40208a:	b083      	sub	sp, #12
  40208c:	af00      	add	r7, sp, #0
  40208e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402090:	687b      	ldr	r3, [r7, #4]
  402092:	2b01      	cmp	r3, #1
  402094:	d107      	bne.n	4020a6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  402096:	4a08      	ldr	r2, [pc, #32]	; (4020b8 <pmc_switch_sclk_to_32kxtal+0x30>)
  402098:	4b07      	ldr	r3, [pc, #28]	; (4020b8 <pmc_switch_sclk_to_32kxtal+0x30>)
  40209a:	689b      	ldr	r3, [r3, #8]
  40209c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4020a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4020a4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4020a6:	4b04      	ldr	r3, [pc, #16]	; (4020b8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4020a8:	4a04      	ldr	r2, [pc, #16]	; (4020bc <pmc_switch_sclk_to_32kxtal+0x34>)
  4020aa:	601a      	str	r2, [r3, #0]
}
  4020ac:	bf00      	nop
  4020ae:	370c      	adds	r7, #12
  4020b0:	46bd      	mov	sp, r7
  4020b2:	bc80      	pop	{r7}
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop
  4020b8:	400e1410 	.word	0x400e1410
  4020bc:	a5000008 	.word	0xa5000008

004020c0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4020c0:	b480      	push	{r7}
  4020c2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4020c4:	4b09      	ldr	r3, [pc, #36]	; (4020ec <pmc_osc_is_ready_32kxtal+0x2c>)
  4020c6:	695b      	ldr	r3, [r3, #20]
  4020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4020cc:	2b00      	cmp	r3, #0
  4020ce:	d007      	beq.n	4020e0 <pmc_osc_is_ready_32kxtal+0x20>
  4020d0:	4b07      	ldr	r3, [pc, #28]	; (4020f0 <pmc_osc_is_ready_32kxtal+0x30>)
  4020d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4020d8:	2b00      	cmp	r3, #0
  4020da:	d001      	beq.n	4020e0 <pmc_osc_is_ready_32kxtal+0x20>
  4020dc:	2301      	movs	r3, #1
  4020de:	e000      	b.n	4020e2 <pmc_osc_is_ready_32kxtal+0x22>
  4020e0:	2300      	movs	r3, #0
}
  4020e2:	4618      	mov	r0, r3
  4020e4:	46bd      	mov	sp, r7
  4020e6:	bc80      	pop	{r7}
  4020e8:	4770      	bx	lr
  4020ea:	bf00      	nop
  4020ec:	400e1410 	.word	0x400e1410
  4020f0:	400e0400 	.word	0x400e0400

004020f4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4020f4:	b480      	push	{r7}
  4020f6:	b083      	sub	sp, #12
  4020f8:	af00      	add	r7, sp, #0
  4020fa:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4020fc:	4a18      	ldr	r2, [pc, #96]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  4020fe:	4b18      	ldr	r3, [pc, #96]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  402100:	6a1b      	ldr	r3, [r3, #32]
  402102:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402106:	f043 0308 	orr.w	r3, r3, #8
  40210a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40210c:	bf00      	nop
  40210e:	4b14      	ldr	r3, [pc, #80]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  402110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402116:	2b00      	cmp	r3, #0
  402118:	d0f9      	beq.n	40210e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40211a:	4911      	ldr	r1, [pc, #68]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  40211c:	4b10      	ldr	r3, [pc, #64]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  40211e:	6a1b      	ldr	r3, [r3, #32]
  402120:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402128:	687a      	ldr	r2, [r7, #4]
  40212a:	4313      	orrs	r3, r2
  40212c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402130:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402132:	bf00      	nop
  402134:	4b0a      	ldr	r3, [pc, #40]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  402136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40213c:	2b00      	cmp	r3, #0
  40213e:	d0f9      	beq.n	402134 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402140:	4a07      	ldr	r2, [pc, #28]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  402142:	4b07      	ldr	r3, [pc, #28]	; (402160 <pmc_switch_mainck_to_fastrc+0x6c>)
  402144:	6a1b      	ldr	r3, [r3, #32]
  402146:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40214e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402152:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402154:	bf00      	nop
  402156:	370c      	adds	r7, #12
  402158:	46bd      	mov	sp, r7
  40215a:	bc80      	pop	{r7}
  40215c:	4770      	bx	lr
  40215e:	bf00      	nop
  402160:	400e0400 	.word	0x400e0400

00402164 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402164:	b480      	push	{r7}
  402166:	b083      	sub	sp, #12
  402168:	af00      	add	r7, sp, #0
  40216a:	6078      	str	r0, [r7, #4]
  40216c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40216e:	687b      	ldr	r3, [r7, #4]
  402170:	2b00      	cmp	r3, #0
  402172:	d008      	beq.n	402186 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402174:	4916      	ldr	r1, [pc, #88]	; (4021d0 <pmc_switch_mainck_to_xtal+0x6c>)
  402176:	4b16      	ldr	r3, [pc, #88]	; (4021d0 <pmc_switch_mainck_to_xtal+0x6c>)
  402178:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40217a:	4a16      	ldr	r2, [pc, #88]	; (4021d4 <pmc_switch_mainck_to_xtal+0x70>)
  40217c:	401a      	ands	r2, r3
  40217e:	4b16      	ldr	r3, [pc, #88]	; (4021d8 <pmc_switch_mainck_to_xtal+0x74>)
  402180:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402182:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402184:	e01e      	b.n	4021c4 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402186:	4912      	ldr	r1, [pc, #72]	; (4021d0 <pmc_switch_mainck_to_xtal+0x6c>)
  402188:	4b11      	ldr	r3, [pc, #68]	; (4021d0 <pmc_switch_mainck_to_xtal+0x6c>)
  40218a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40218c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402190:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402194:	683a      	ldr	r2, [r7, #0]
  402196:	0212      	lsls	r2, r2, #8
  402198:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40219a:	4313      	orrs	r3, r2
  40219c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4021a0:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4021a4:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4021a6:	bf00      	nop
  4021a8:	4b09      	ldr	r3, [pc, #36]	; (4021d0 <pmc_switch_mainck_to_xtal+0x6c>)
  4021aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021ac:	f003 0301 	and.w	r3, r3, #1
  4021b0:	2b00      	cmp	r3, #0
  4021b2:	d0f9      	beq.n	4021a8 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4021b4:	4a06      	ldr	r2, [pc, #24]	; (4021d0 <pmc_switch_mainck_to_xtal+0x6c>)
  4021b6:	4b06      	ldr	r3, [pc, #24]	; (4021d0 <pmc_switch_mainck_to_xtal+0x6c>)
  4021b8:	6a1b      	ldr	r3, [r3, #32]
  4021ba:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4021c2:	6213      	str	r3, [r2, #32]
}
  4021c4:	bf00      	nop
  4021c6:	370c      	adds	r7, #12
  4021c8:	46bd      	mov	sp, r7
  4021ca:	bc80      	pop	{r7}
  4021cc:	4770      	bx	lr
  4021ce:	bf00      	nop
  4021d0:	400e0400 	.word	0x400e0400
  4021d4:	fec8fffc 	.word	0xfec8fffc
  4021d8:	01370002 	.word	0x01370002

004021dc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4021dc:	b480      	push	{r7}
  4021de:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4021e0:	4b03      	ldr	r3, [pc, #12]	; (4021f0 <pmc_osc_is_ready_mainck+0x14>)
  4021e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4021e8:	4618      	mov	r0, r3
  4021ea:	46bd      	mov	sp, r7
  4021ec:	bc80      	pop	{r7}
  4021ee:	4770      	bx	lr
  4021f0:	400e0400 	.word	0x400e0400

004021f4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4021f4:	b480      	push	{r7}
  4021f6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4021f8:	4b03      	ldr	r3, [pc, #12]	; (402208 <pmc_disable_pllack+0x14>)
  4021fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4021fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402200:	bf00      	nop
  402202:	46bd      	mov	sp, r7
  402204:	bc80      	pop	{r7}
  402206:	4770      	bx	lr
  402208:	400e0400 	.word	0x400e0400

0040220c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40220c:	b480      	push	{r7}
  40220e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402210:	4b03      	ldr	r3, [pc, #12]	; (402220 <pmc_is_locked_pllack+0x14>)
  402212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402214:	f003 0302 	and.w	r3, r3, #2
}
  402218:	4618      	mov	r0, r3
  40221a:	46bd      	mov	sp, r7
  40221c:	bc80      	pop	{r7}
  40221e:	4770      	bx	lr
  402220:	400e0400 	.word	0x400e0400

00402224 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  402224:	b480      	push	{r7}
  402226:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402228:	4b03      	ldr	r3, [pc, #12]	; (402238 <pmc_disable_pllbck+0x14>)
  40222a:	2200      	movs	r2, #0
  40222c:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40222e:	bf00      	nop
  402230:	46bd      	mov	sp, r7
  402232:	bc80      	pop	{r7}
  402234:	4770      	bx	lr
  402236:	bf00      	nop
  402238:	400e0400 	.word	0x400e0400

0040223c <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40223c:	b480      	push	{r7}
  40223e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402240:	4b03      	ldr	r3, [pc, #12]	; (402250 <pmc_is_locked_pllbck+0x14>)
  402242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402244:	f003 0304 	and.w	r3, r3, #4
}
  402248:	4618      	mov	r0, r3
  40224a:	46bd      	mov	sp, r7
  40224c:	bc80      	pop	{r7}
  40224e:	4770      	bx	lr
  402250:	400e0400 	.word	0x400e0400

00402254 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402254:	b480      	push	{r7}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
  40225a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	2b22      	cmp	r3, #34	; 0x22
  402260:	d901      	bls.n	402266 <pmc_enable_periph_clk+0x12>
		return 1;
  402262:	2301      	movs	r3, #1
  402264:	e02f      	b.n	4022c6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  402266:	687b      	ldr	r3, [r7, #4]
  402268:	2b1f      	cmp	r3, #31
  40226a:	d813      	bhi.n	402294 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40226c:	4b18      	ldr	r3, [pc, #96]	; (4022d0 <pmc_enable_periph_clk+0x7c>)
  40226e:	699a      	ldr	r2, [r3, #24]
  402270:	2101      	movs	r1, #1
  402272:	687b      	ldr	r3, [r7, #4]
  402274:	fa01 f303 	lsl.w	r3, r1, r3
  402278:	401a      	ands	r2, r3
  40227a:	2101      	movs	r1, #1
  40227c:	687b      	ldr	r3, [r7, #4]
  40227e:	fa01 f303 	lsl.w	r3, r1, r3
  402282:	429a      	cmp	r2, r3
  402284:	d01e      	beq.n	4022c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402286:	4a12      	ldr	r2, [pc, #72]	; (4022d0 <pmc_enable_periph_clk+0x7c>)
  402288:	2101      	movs	r1, #1
  40228a:	687b      	ldr	r3, [r7, #4]
  40228c:	fa01 f303 	lsl.w	r3, r1, r3
  402290:	6113      	str	r3, [r2, #16]
  402292:	e017      	b.n	4022c4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402294:	687b      	ldr	r3, [r7, #4]
  402296:	3b20      	subs	r3, #32
  402298:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40229a:	4b0d      	ldr	r3, [pc, #52]	; (4022d0 <pmc_enable_periph_clk+0x7c>)
  40229c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4022a0:	2101      	movs	r1, #1
  4022a2:	687b      	ldr	r3, [r7, #4]
  4022a4:	fa01 f303 	lsl.w	r3, r1, r3
  4022a8:	401a      	ands	r2, r3
  4022aa:	2101      	movs	r1, #1
  4022ac:	687b      	ldr	r3, [r7, #4]
  4022ae:	fa01 f303 	lsl.w	r3, r1, r3
  4022b2:	429a      	cmp	r2, r3
  4022b4:	d006      	beq.n	4022c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4022b6:	4a06      	ldr	r2, [pc, #24]	; (4022d0 <pmc_enable_periph_clk+0x7c>)
  4022b8:	2101      	movs	r1, #1
  4022ba:	687b      	ldr	r3, [r7, #4]
  4022bc:	fa01 f303 	lsl.w	r3, r1, r3
  4022c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4022c4:	2300      	movs	r3, #0
}
  4022c6:	4618      	mov	r0, r3
  4022c8:	370c      	adds	r7, #12
  4022ca:	46bd      	mov	sp, r7
  4022cc:	bc80      	pop	{r7}
  4022ce:	4770      	bx	lr
  4022d0:	400e0400 	.word	0x400e0400

004022d4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4022d4:	b480      	push	{r7}
  4022d6:	b087      	sub	sp, #28
  4022d8:	af00      	add	r7, sp, #0
  4022da:	60f8      	str	r0, [r7, #12]
  4022dc:	60b9      	str	r1, [r7, #8]
  4022de:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4022e0:	68fa      	ldr	r2, [r7, #12]
  4022e2:	68bb      	ldr	r3, [r7, #8]
  4022e4:	019b      	lsls	r3, r3, #6
  4022e6:	4413      	add	r3, r2
  4022e8:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4022ea:	697b      	ldr	r3, [r7, #20]
  4022ec:	2202      	movs	r2, #2
  4022ee:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4022f0:	697b      	ldr	r3, [r7, #20]
  4022f2:	f04f 32ff 	mov.w	r2, #4294967295
  4022f6:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4022f8:	697b      	ldr	r3, [r7, #20]
  4022fa:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4022fc:	697b      	ldr	r3, [r7, #20]
  4022fe:	687a      	ldr	r2, [r7, #4]
  402300:	605a      	str	r2, [r3, #4]
}
  402302:	bf00      	nop
  402304:	371c      	adds	r7, #28
  402306:	46bd      	mov	sp, r7
  402308:	bc80      	pop	{r7}
  40230a:	4770      	bx	lr

0040230c <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40230c:	b480      	push	{r7}
  40230e:	b083      	sub	sp, #12
  402310:	af00      	add	r7, sp, #0
  402312:	6078      	str	r0, [r7, #4]
  402314:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  402316:	687a      	ldr	r2, [r7, #4]
  402318:	683b      	ldr	r3, [r7, #0]
  40231a:	019b      	lsls	r3, r3, #6
  40231c:	4413      	add	r3, r2
  40231e:	2205      	movs	r2, #5
  402320:	601a      	str	r2, [r3, #0]
}
  402322:	bf00      	nop
  402324:	370c      	adds	r7, #12
  402326:	46bd      	mov	sp, r7
  402328:	bc80      	pop	{r7}
  40232a:	4770      	bx	lr

0040232c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  40232c:	b480      	push	{r7}
  40232e:	b085      	sub	sp, #20
  402330:	af00      	add	r7, sp, #0
  402332:	60f8      	str	r0, [r7, #12]
  402334:	60b9      	str	r1, [r7, #8]
  402336:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  402338:	68fa      	ldr	r2, [r7, #12]
  40233a:	68bb      	ldr	r3, [r7, #8]
  40233c:	019b      	lsls	r3, r3, #6
  40233e:	4413      	add	r3, r2
  402340:	331c      	adds	r3, #28
  402342:	687a      	ldr	r2, [r7, #4]
  402344:	601a      	str	r2, [r3, #0]
}
  402346:	bf00      	nop
  402348:	3714      	adds	r7, #20
  40234a:	46bd      	mov	sp, r7
  40234c:	bc80      	pop	{r7}
  40234e:	4770      	bx	lr

00402350 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  402350:	b480      	push	{r7}
  402352:	b087      	sub	sp, #28
  402354:	af00      	add	r7, sp, #0
  402356:	60f8      	str	r0, [r7, #12]
  402358:	60b9      	str	r1, [r7, #8]
  40235a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40235c:	68fa      	ldr	r2, [r7, #12]
  40235e:	68bb      	ldr	r3, [r7, #8]
  402360:	019b      	lsls	r3, r3, #6
  402362:	4413      	add	r3, r2
  402364:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  402366:	697b      	ldr	r3, [r7, #20]
  402368:	687a      	ldr	r2, [r7, #4]
  40236a:	625a      	str	r2, [r3, #36]	; 0x24
}
  40236c:	bf00      	nop
  40236e:	371c      	adds	r7, #28
  402370:	46bd      	mov	sp, r7
  402372:	bc80      	pop	{r7}
  402374:	4770      	bx	lr

00402376 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  402376:	b480      	push	{r7}
  402378:	b085      	sub	sp, #20
  40237a:	af00      	add	r7, sp, #0
  40237c:	6078      	str	r0, [r7, #4]
  40237e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402380:	687a      	ldr	r2, [r7, #4]
  402382:	683b      	ldr	r3, [r7, #0]
  402384:	019b      	lsls	r3, r3, #6
  402386:	4413      	add	r3, r2
  402388:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40238a:	68fb      	ldr	r3, [r7, #12]
  40238c:	6a1b      	ldr	r3, [r3, #32]
}
  40238e:	4618      	mov	r0, r3
  402390:	3714      	adds	r7, #20
  402392:	46bd      	mov	sp, r7
  402394:	bc80      	pop	{r7}
  402396:	4770      	bx	lr

00402398 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  402398:	b480      	push	{r7}
  40239a:	b08d      	sub	sp, #52	; 0x34
  40239c:	af00      	add	r7, sp, #0
  40239e:	60f8      	str	r0, [r7, #12]
  4023a0:	60b9      	str	r1, [r7, #8]
  4023a2:	607a      	str	r2, [r7, #4]
  4023a4:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4023a6:	2302      	movs	r3, #2
  4023a8:	613b      	str	r3, [r7, #16]
  4023aa:	2308      	movs	r3, #8
  4023ac:	617b      	str	r3, [r7, #20]
  4023ae:	2320      	movs	r3, #32
  4023b0:	61bb      	str	r3, [r7, #24]
  4023b2:	2380      	movs	r3, #128	; 0x80
  4023b4:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4023b8:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4023ba:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4023bc:	2300      	movs	r3, #0
  4023be:	62fb      	str	r3, [r7, #44]	; 0x2c
  4023c0:	e01a      	b.n	4023f8 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023c4:	009b      	lsls	r3, r3, #2
  4023c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4023ca:	4413      	add	r3, r2
  4023cc:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4023d0:	68ba      	ldr	r2, [r7, #8]
  4023d2:	fbb2 f3f3 	udiv	r3, r2, r3
  4023d6:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4023da:	0c1b      	lsrs	r3, r3, #16
  4023dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4023de:	68fa      	ldr	r2, [r7, #12]
  4023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4023e2:	429a      	cmp	r2, r3
  4023e4:	d901      	bls.n	4023ea <tc_find_mck_divisor+0x52>
			return 0;
  4023e6:	2300      	movs	r3, #0
  4023e8:	e023      	b.n	402432 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4023ea:	68fa      	ldr	r2, [r7, #12]
  4023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023ee:	429a      	cmp	r2, r3
  4023f0:	d206      	bcs.n	402400 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023f4:	3301      	adds	r3, #1
  4023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  4023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023fa:	2b04      	cmp	r3, #4
  4023fc:	d9e1      	bls.n	4023c2 <tc_find_mck_divisor+0x2a>
  4023fe:	e000      	b.n	402402 <tc_find_mck_divisor+0x6a>
			break;
  402400:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  402402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402404:	2b04      	cmp	r3, #4
  402406:	d901      	bls.n	40240c <tc_find_mck_divisor+0x74>
		return 0;
  402408:	2300      	movs	r3, #0
  40240a:	e012      	b.n	402432 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  40240c:	687b      	ldr	r3, [r7, #4]
  40240e:	2b00      	cmp	r3, #0
  402410:	d008      	beq.n	402424 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  402412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402414:	009b      	lsls	r3, r3, #2
  402416:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40241a:	4413      	add	r3, r2
  40241c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  402420:	687b      	ldr	r3, [r7, #4]
  402422:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  402424:	683b      	ldr	r3, [r7, #0]
  402426:	2b00      	cmp	r3, #0
  402428:	d002      	beq.n	402430 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40242a:	683b      	ldr	r3, [r7, #0]
  40242c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40242e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  402430:	2301      	movs	r3, #1
}
  402432:	4618      	mov	r0, r3
  402434:	3734      	adds	r7, #52	; 0x34
  402436:	46bd      	mov	sp, r7
  402438:	bc80      	pop	{r7}
  40243a:	4770      	bx	lr

0040243c <sysclk_enable_peripheral_clock>:
{
  40243c:	b580      	push	{r7, lr}
  40243e:	b082      	sub	sp, #8
  402440:	af00      	add	r7, sp, #0
  402442:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402444:	6878      	ldr	r0, [r7, #4]
  402446:	4b03      	ldr	r3, [pc, #12]	; (402454 <sysclk_enable_peripheral_clock+0x18>)
  402448:	4798      	blx	r3
}
  40244a:	bf00      	nop
  40244c:	3708      	adds	r7, #8
  40244e:	46bd      	mov	sp, r7
  402450:	bd80      	pop	{r7, pc}
  402452:	bf00      	nop
  402454:	00402255 	.word	0x00402255

00402458 <ioport_init>:
{
  402458:	b580      	push	{r7, lr}
  40245a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40245c:	200b      	movs	r0, #11
  40245e:	4b03      	ldr	r3, [pc, #12]	; (40246c <ioport_init+0x14>)
  402460:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  402462:	200c      	movs	r0, #12
  402464:	4b01      	ldr	r3, [pc, #4]	; (40246c <ioport_init+0x14>)
  402466:	4798      	blx	r3
}
  402468:	bf00      	nop
  40246a:	bd80      	pop	{r7, pc}
  40246c:	0040243d 	.word	0x0040243d

00402470 <ioport_set_pin_dir>:
{
  402470:	b480      	push	{r7}
  402472:	b08d      	sub	sp, #52	; 0x34
  402474:	af00      	add	r7, sp, #0
  402476:	6078      	str	r0, [r7, #4]
  402478:	460b      	mov	r3, r1
  40247a:	70fb      	strb	r3, [r7, #3]
  40247c:	687b      	ldr	r3, [r7, #4]
  40247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402480:	78fb      	ldrb	r3, [r7, #3]
  402482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402488:	627b      	str	r3, [r7, #36]	; 0x24
  40248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40248c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40248e:	6a3b      	ldr	r3, [r7, #32]
  402490:	095b      	lsrs	r3, r3, #5
  402492:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402494:	69fb      	ldr	r3, [r7, #28]
  402496:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40249a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40249e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4024a0:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4024a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4024a6:	2b01      	cmp	r3, #1
  4024a8:	d109      	bne.n	4024be <ioport_set_pin_dir+0x4e>
  4024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024ac:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4024ae:	697b      	ldr	r3, [r7, #20]
  4024b0:	f003 031f 	and.w	r3, r3, #31
  4024b4:	2201      	movs	r2, #1
  4024b6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4024b8:	69bb      	ldr	r3, [r7, #24]
  4024ba:	611a      	str	r2, [r3, #16]
  4024bc:	e00c      	b.n	4024d8 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4024be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4024c2:	2b00      	cmp	r3, #0
  4024c4:	d108      	bne.n	4024d8 <ioport_set_pin_dir+0x68>
  4024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024c8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4024ca:	693b      	ldr	r3, [r7, #16]
  4024cc:	f003 031f 	and.w	r3, r3, #31
  4024d0:	2201      	movs	r2, #1
  4024d2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4024d4:	69bb      	ldr	r3, [r7, #24]
  4024d6:	615a      	str	r2, [r3, #20]
  4024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024da:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4024dc:	68fb      	ldr	r3, [r7, #12]
  4024de:	f003 031f 	and.w	r3, r3, #31
  4024e2:	2201      	movs	r2, #1
  4024e4:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4024e6:	69bb      	ldr	r3, [r7, #24]
  4024e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4024ec:	bf00      	nop
  4024ee:	3734      	adds	r7, #52	; 0x34
  4024f0:	46bd      	mov	sp, r7
  4024f2:	bc80      	pop	{r7}
  4024f4:	4770      	bx	lr

004024f6 <ioport_set_pin_level>:
{
  4024f6:	b480      	push	{r7}
  4024f8:	b08b      	sub	sp, #44	; 0x2c
  4024fa:	af00      	add	r7, sp, #0
  4024fc:	6078      	str	r0, [r7, #4]
  4024fe:	460b      	mov	r3, r1
  402500:	70fb      	strb	r3, [r7, #3]
  402502:	687b      	ldr	r3, [r7, #4]
  402504:	627b      	str	r3, [r7, #36]	; 0x24
  402506:	78fb      	ldrb	r3, [r7, #3]
  402508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40250e:	61fb      	str	r3, [r7, #28]
  402510:	69fb      	ldr	r3, [r7, #28]
  402512:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402514:	69bb      	ldr	r3, [r7, #24]
  402516:	095b      	lsrs	r3, r3, #5
  402518:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40251a:	697b      	ldr	r3, [r7, #20]
  40251c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402520:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402524:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402526:	613b      	str	r3, [r7, #16]
	if (level) {
  402528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40252c:	2b00      	cmp	r3, #0
  40252e:	d009      	beq.n	402544 <ioport_set_pin_level+0x4e>
  402530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402532:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402534:	68fb      	ldr	r3, [r7, #12]
  402536:	f003 031f 	and.w	r3, r3, #31
  40253a:	2201      	movs	r2, #1
  40253c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40253e:	693b      	ldr	r3, [r7, #16]
  402540:	631a      	str	r2, [r3, #48]	; 0x30
}
  402542:	e008      	b.n	402556 <ioport_set_pin_level+0x60>
  402544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402546:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402548:	68bb      	ldr	r3, [r7, #8]
  40254a:	f003 031f 	and.w	r3, r3, #31
  40254e:	2201      	movs	r2, #1
  402550:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402552:	693b      	ldr	r3, [r7, #16]
  402554:	635a      	str	r2, [r3, #52]	; 0x34
  402556:	bf00      	nop
  402558:	372c      	adds	r7, #44	; 0x2c
  40255a:	46bd      	mov	sp, r7
  40255c:	bc80      	pop	{r7}
  40255e:	4770      	bx	lr

00402560 <board_init>:
#include <board.h>
#include <conf_board.h>


void board_init(void)
{
  402560:	b580      	push	{r7, lr}
  402562:	af00      	add	r7, sp, #0
	ioport_init();
  402564:	4b0b      	ldr	r3, [pc, #44]	; (402594 <board_init+0x34>)
  402566:	4798      	blx	r3
	ioport_set_pin_dir(PIN_WIFI_RESET,IOPORT_DIR_OUTPUT);
  402568:	2101      	movs	r1, #1
  40256a:	2021      	movs	r0, #33	; 0x21
  40256c:	4b0a      	ldr	r3, [pc, #40]	; (402598 <board_init+0x38>)
  40256e:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,LOW);
  402570:	2100      	movs	r1, #0
  402572:	2021      	movs	r0, #33	; 0x21
  402574:	4b09      	ldr	r3, [pc, #36]	; (40259c <board_init+0x3c>)
  402576:	4798      	blx	r3
	
	ioport_set_pin_dir(PIN_WIFI_NETWORK_STATUS,IOPORT_DIR_INPUT);
  402578:	2100      	movs	r1, #0
  40257a:	200b      	movs	r0, #11
  40257c:	4b06      	ldr	r3, [pc, #24]	; (402598 <board_init+0x38>)
  40257e:	4798      	blx	r3
	//ioport_set_pin_level(PIN_WIFI_NETWORK_STATUS,LOW);
	
	ioport_set_pin_dir(PUSH_BUTTON,IOPORT_DIR_INPUT);
  402580:	2100      	movs	r1, #0
  402582:	2000      	movs	r0, #0
  402584:	4b04      	ldr	r3, [pc, #16]	; (402598 <board_init+0x38>)
  402586:	4798      	blx	r3
	//ioport_set_pin_level(PUSH_BUTTON,HIGH);
	
	ioport_set_pin_dir(WIFI_COM_COMPLETE,IOPORT_DIR_INPUT);
  402588:	2100      	movs	r1, #0
  40258a:	200c      	movs	r0, #12
  40258c:	4b02      	ldr	r3, [pc, #8]	; (402598 <board_init+0x38>)
  40258e:	4798      	blx	r3
	//ioport_set_pin_level(WIFI_COM_COMPLETE,LOW);



}
  402590:	bf00      	nop
  402592:	bd80      	pop	{r7, pc}
  402594:	00402459 	.word	0x00402459
  402598:	00402471 	.word	0x00402471
  40259c:	004024f7 	.word	0x004024f7

004025a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4025a0:	b580      	push	{r7, lr}
  4025a2:	b084      	sub	sp, #16
  4025a4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4025a6:	4b27      	ldr	r3, [pc, #156]	; (402644 <Reset_Handler+0xa4>)
  4025a8:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4025aa:	4b27      	ldr	r3, [pc, #156]	; (402648 <Reset_Handler+0xa8>)
  4025ac:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4025ae:	68fa      	ldr	r2, [r7, #12]
  4025b0:	68bb      	ldr	r3, [r7, #8]
  4025b2:	429a      	cmp	r2, r3
  4025b4:	d90d      	bls.n	4025d2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4025b6:	e007      	b.n	4025c8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4025b8:	68bb      	ldr	r3, [r7, #8]
  4025ba:	1d1a      	adds	r2, r3, #4
  4025bc:	60ba      	str	r2, [r7, #8]
  4025be:	68fa      	ldr	r2, [r7, #12]
  4025c0:	1d11      	adds	r1, r2, #4
  4025c2:	60f9      	str	r1, [r7, #12]
  4025c4:	6812      	ldr	r2, [r2, #0]
  4025c6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4025c8:	68bb      	ldr	r3, [r7, #8]
  4025ca:	4a20      	ldr	r2, [pc, #128]	; (40264c <Reset_Handler+0xac>)
  4025cc:	4293      	cmp	r3, r2
  4025ce:	d3f3      	bcc.n	4025b8 <Reset_Handler+0x18>
  4025d0:	e020      	b.n	402614 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  4025d2:	68fa      	ldr	r2, [r7, #12]
  4025d4:	68bb      	ldr	r3, [r7, #8]
  4025d6:	429a      	cmp	r2, r3
  4025d8:	d21c      	bcs.n	402614 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4025da:	4a1c      	ldr	r2, [pc, #112]	; (40264c <Reset_Handler+0xac>)
  4025dc:	4b1a      	ldr	r3, [pc, #104]	; (402648 <Reset_Handler+0xa8>)
  4025de:	1ad3      	subs	r3, r2, r3
  4025e0:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4025e2:	68fa      	ldr	r2, [r7, #12]
  4025e4:	687b      	ldr	r3, [r7, #4]
  4025e6:	4413      	add	r3, r2
  4025e8:	3b04      	subs	r3, #4
  4025ea:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4025ec:	68ba      	ldr	r2, [r7, #8]
  4025ee:	687b      	ldr	r3, [r7, #4]
  4025f0:	4413      	add	r3, r2
  4025f2:	3b04      	subs	r3, #4
  4025f4:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4025f6:	e00a      	b.n	40260e <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4025f8:	68bb      	ldr	r3, [r7, #8]
  4025fa:	1f1a      	subs	r2, r3, #4
  4025fc:	60ba      	str	r2, [r7, #8]
  4025fe:	68fa      	ldr	r2, [r7, #12]
  402600:	1f11      	subs	r1, r2, #4
  402602:	60f9      	str	r1, [r7, #12]
  402604:	6812      	ldr	r2, [r2, #0]
  402606:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402608:	687b      	ldr	r3, [r7, #4]
  40260a:	3b04      	subs	r3, #4
  40260c:	607b      	str	r3, [r7, #4]
  40260e:	687b      	ldr	r3, [r7, #4]
  402610:	2b00      	cmp	r3, #0
  402612:	d1f1      	bne.n	4025f8 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402614:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402616:	4b0e      	ldr	r3, [pc, #56]	; (402650 <Reset_Handler+0xb0>)
  402618:	60bb      	str	r3, [r7, #8]
  40261a:	e004      	b.n	402626 <Reset_Handler+0x86>
		*pDest++ = 0;
  40261c:	68bb      	ldr	r3, [r7, #8]
  40261e:	1d1a      	adds	r2, r3, #4
  402620:	60ba      	str	r2, [r7, #8]
  402622:	2200      	movs	r2, #0
  402624:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402626:	68bb      	ldr	r3, [r7, #8]
  402628:	4a0a      	ldr	r2, [pc, #40]	; (402654 <Reset_Handler+0xb4>)
  40262a:	4293      	cmp	r3, r2
  40262c:	d3f6      	bcc.n	40261c <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40262e:	4b0a      	ldr	r3, [pc, #40]	; (402658 <Reset_Handler+0xb8>)
  402630:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402632:	4a0a      	ldr	r2, [pc, #40]	; (40265c <Reset_Handler+0xbc>)
  402634:	68fb      	ldr	r3, [r7, #12]
  402636:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402638:	4b09      	ldr	r3, [pc, #36]	; (402660 <Reset_Handler+0xc0>)
  40263a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40263c:	4b09      	ldr	r3, [pc, #36]	; (402664 <Reset_Handler+0xc4>)
  40263e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402640:	e7fe      	b.n	402640 <Reset_Handler+0xa0>
  402642:	bf00      	nop
  402644:	0040388c 	.word	0x0040388c
  402648:	20000000 	.word	0x20000000
  40264c:	2000043c 	.word	0x2000043c
  402650:	2000043c 	.word	0x2000043c
  402654:	20018fd8 	.word	0x20018fd8
  402658:	00400000 	.word	0x00400000
  40265c:	e000ed00 	.word	0xe000ed00
  402660:	00402de1 	.word	0x00402de1
  402664:	00402941 	.word	0x00402941

00402668 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402668:	b480      	push	{r7}
  40266a:	af00      	add	r7, sp, #0
	while (1) {
  40266c:	e7fe      	b.n	40266c <Dummy_Handler+0x4>
	...

00402670 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402670:	b480      	push	{r7}
  402672:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402674:	4b5d      	ldr	r3, [pc, #372]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  402676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402678:	f003 0303 	and.w	r3, r3, #3
  40267c:	2b03      	cmp	r3, #3
  40267e:	f200 8096 	bhi.w	4027ae <SystemCoreClockUpdate+0x13e>
  402682:	a201      	add	r2, pc, #4	; (adr r2, 402688 <SystemCoreClockUpdate+0x18>)
  402684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402688:	00402699 	.word	0x00402699
  40268c:	004026b9 	.word	0x004026b9
  402690:	00402703 	.word	0x00402703
  402694:	00402703 	.word	0x00402703
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402698:	4b55      	ldr	r3, [pc, #340]	; (4027f0 <SystemCoreClockUpdate+0x180>)
  40269a:	695b      	ldr	r3, [r3, #20]
  40269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4026a0:	2b00      	cmp	r3, #0
  4026a2:	d004      	beq.n	4026ae <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4026a4:	4b53      	ldr	r3, [pc, #332]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4026a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4026aa:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4026ac:	e080      	b.n	4027b0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4026ae:	4b51      	ldr	r3, [pc, #324]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4026b0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4026b4:	601a      	str	r2, [r3, #0]
		break;
  4026b6:	e07b      	b.n	4027b0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4026b8:	4b4c      	ldr	r3, [pc, #304]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  4026ba:	6a1b      	ldr	r3, [r3, #32]
  4026bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4026c0:	2b00      	cmp	r3, #0
  4026c2:	d003      	beq.n	4026cc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4026c4:	4b4b      	ldr	r3, [pc, #300]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4026c6:	4a4c      	ldr	r2, [pc, #304]	; (4027f8 <SystemCoreClockUpdate+0x188>)
  4026c8:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4026ca:	e071      	b.n	4027b0 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4026cc:	4b49      	ldr	r3, [pc, #292]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4026ce:	4a4b      	ldr	r2, [pc, #300]	; (4027fc <SystemCoreClockUpdate+0x18c>)
  4026d0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4026d2:	4b46      	ldr	r3, [pc, #280]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  4026d4:	6a1b      	ldr	r3, [r3, #32]
  4026d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026da:	2b10      	cmp	r3, #16
  4026dc:	d008      	beq.n	4026f0 <SystemCoreClockUpdate+0x80>
  4026de:	2b20      	cmp	r3, #32
  4026e0:	d00a      	beq.n	4026f8 <SystemCoreClockUpdate+0x88>
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	d000      	beq.n	4026e8 <SystemCoreClockUpdate+0x78>
			break;
  4026e6:	e00b      	b.n	402700 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4026e8:	4b42      	ldr	r3, [pc, #264]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4026ea:	4a44      	ldr	r2, [pc, #272]	; (4027fc <SystemCoreClockUpdate+0x18c>)
  4026ec:	601a      	str	r2, [r3, #0]
			break;
  4026ee:	e007      	b.n	402700 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4026f0:	4b40      	ldr	r3, [pc, #256]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4026f2:	4a43      	ldr	r2, [pc, #268]	; (402800 <SystemCoreClockUpdate+0x190>)
  4026f4:	601a      	str	r2, [r3, #0]
			break;
  4026f6:	e003      	b.n	402700 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4026f8:	4b3e      	ldr	r3, [pc, #248]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4026fa:	4a3f      	ldr	r2, [pc, #252]	; (4027f8 <SystemCoreClockUpdate+0x188>)
  4026fc:	601a      	str	r2, [r3, #0]
			break;
  4026fe:	bf00      	nop
		break;
  402700:	e056      	b.n	4027b0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402702:	4b3a      	ldr	r3, [pc, #232]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  402704:	6a1b      	ldr	r3, [r3, #32]
  402706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40270a:	2b00      	cmp	r3, #0
  40270c:	d003      	beq.n	402716 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40270e:	4b39      	ldr	r3, [pc, #228]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402710:	4a39      	ldr	r2, [pc, #228]	; (4027f8 <SystemCoreClockUpdate+0x188>)
  402712:	601a      	str	r2, [r3, #0]
  402714:	e019      	b.n	40274a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402716:	4b37      	ldr	r3, [pc, #220]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402718:	4a38      	ldr	r2, [pc, #224]	; (4027fc <SystemCoreClockUpdate+0x18c>)
  40271a:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40271c:	4b33      	ldr	r3, [pc, #204]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  40271e:	6a1b      	ldr	r3, [r3, #32]
  402720:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402724:	2b10      	cmp	r3, #16
  402726:	d008      	beq.n	40273a <SystemCoreClockUpdate+0xca>
  402728:	2b20      	cmp	r3, #32
  40272a:	d00a      	beq.n	402742 <SystemCoreClockUpdate+0xd2>
  40272c:	2b00      	cmp	r3, #0
  40272e:	d000      	beq.n	402732 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402730:	e00b      	b.n	40274a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402732:	4b30      	ldr	r3, [pc, #192]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402734:	4a31      	ldr	r2, [pc, #196]	; (4027fc <SystemCoreClockUpdate+0x18c>)
  402736:	601a      	str	r2, [r3, #0]
					break;
  402738:	e007      	b.n	40274a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40273a:	4b2e      	ldr	r3, [pc, #184]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  40273c:	4a30      	ldr	r2, [pc, #192]	; (402800 <SystemCoreClockUpdate+0x190>)
  40273e:	601a      	str	r2, [r3, #0]
					break;
  402740:	e003      	b.n	40274a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402742:	4b2c      	ldr	r3, [pc, #176]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402744:	4a2c      	ldr	r2, [pc, #176]	; (4027f8 <SystemCoreClockUpdate+0x188>)
  402746:	601a      	str	r2, [r3, #0]
					break;
  402748:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40274a:	4b28      	ldr	r3, [pc, #160]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  40274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40274e:	f003 0303 	and.w	r3, r3, #3
  402752:	2b02      	cmp	r3, #2
  402754:	d115      	bne.n	402782 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402756:	4b25      	ldr	r3, [pc, #148]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  402758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40275a:	0c1b      	lsrs	r3, r3, #16
  40275c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402760:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402762:	4a24      	ldr	r2, [pc, #144]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402764:	6812      	ldr	r2, [r2, #0]
  402766:	fb02 f303 	mul.w	r3, r2, r3
  40276a:	4a22      	ldr	r2, [pc, #136]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  40276c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40276e:	4b1f      	ldr	r3, [pc, #124]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  402770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402772:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402774:	4a1f      	ldr	r2, [pc, #124]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402776:	6812      	ldr	r2, [r2, #0]
  402778:	fbb2 f3f3 	udiv	r3, r2, r3
  40277c:	4a1d      	ldr	r2, [pc, #116]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  40277e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402780:	e016      	b.n	4027b0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402782:	4b1a      	ldr	r3, [pc, #104]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  402784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402786:	0c1b      	lsrs	r3, r3, #16
  402788:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40278c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40278e:	4a19      	ldr	r2, [pc, #100]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402790:	6812      	ldr	r2, [r2, #0]
  402792:	fb02 f303 	mul.w	r3, r2, r3
  402796:	4a17      	ldr	r2, [pc, #92]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  402798:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40279a:	4b14      	ldr	r3, [pc, #80]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  40279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40279e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4027a0:	4a14      	ldr	r2, [pc, #80]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4027a2:	6812      	ldr	r2, [r2, #0]
  4027a4:	fbb2 f3f3 	udiv	r3, r2, r3
  4027a8:	4a12      	ldr	r2, [pc, #72]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4027aa:	6013      	str	r3, [r2, #0]
		break;
  4027ac:	e000      	b.n	4027b0 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4027ae:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4027b0:	4b0e      	ldr	r3, [pc, #56]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  4027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027b8:	2b70      	cmp	r3, #112	; 0x70
  4027ba:	d108      	bne.n	4027ce <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4027bc:	4b0d      	ldr	r3, [pc, #52]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4027be:	681b      	ldr	r3, [r3, #0]
  4027c0:	4a10      	ldr	r2, [pc, #64]	; (402804 <SystemCoreClockUpdate+0x194>)
  4027c2:	fba2 2303 	umull	r2, r3, r2, r3
  4027c6:	085b      	lsrs	r3, r3, #1
  4027c8:	4a0a      	ldr	r2, [pc, #40]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4027ca:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4027cc:	e00a      	b.n	4027e4 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4027ce:	4b07      	ldr	r3, [pc, #28]	; (4027ec <SystemCoreClockUpdate+0x17c>)
  4027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027d2:	091b      	lsrs	r3, r3, #4
  4027d4:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4027d8:	4a06      	ldr	r2, [pc, #24]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4027da:	6812      	ldr	r2, [r2, #0]
  4027dc:	fa22 f303 	lsr.w	r3, r2, r3
  4027e0:	4a04      	ldr	r2, [pc, #16]	; (4027f4 <SystemCoreClockUpdate+0x184>)
  4027e2:	6013      	str	r3, [r2, #0]
}
  4027e4:	bf00      	nop
  4027e6:	46bd      	mov	sp, r7
  4027e8:	bc80      	pop	{r7}
  4027ea:	4770      	bx	lr
  4027ec:	400e0400 	.word	0x400e0400
  4027f0:	400e1410 	.word	0x400e1410
  4027f4:	2000000c 	.word	0x2000000c
  4027f8:	00b71b00 	.word	0x00b71b00
  4027fc:	003d0900 	.word	0x003d0900
  402800:	007a1200 	.word	0x007a1200
  402804:	aaaaaaab 	.word	0xaaaaaaab

00402808 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402808:	b480      	push	{r7}
  40280a:	b083      	sub	sp, #12
  40280c:	af00      	add	r7, sp, #0
  40280e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402810:	687b      	ldr	r3, [r7, #4]
  402812:	4a18      	ldr	r2, [pc, #96]	; (402874 <system_init_flash+0x6c>)
  402814:	4293      	cmp	r3, r2
  402816:	d804      	bhi.n	402822 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402818:	4b17      	ldr	r3, [pc, #92]	; (402878 <system_init_flash+0x70>)
  40281a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40281e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402820:	e023      	b.n	40286a <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402822:	687b      	ldr	r3, [r7, #4]
  402824:	4a15      	ldr	r2, [pc, #84]	; (40287c <system_init_flash+0x74>)
  402826:	4293      	cmp	r3, r2
  402828:	d803      	bhi.n	402832 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40282a:	4b13      	ldr	r3, [pc, #76]	; (402878 <system_init_flash+0x70>)
  40282c:	4a14      	ldr	r2, [pc, #80]	; (402880 <system_init_flash+0x78>)
  40282e:	601a      	str	r2, [r3, #0]
}
  402830:	e01b      	b.n	40286a <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402832:	687b      	ldr	r3, [r7, #4]
  402834:	4a13      	ldr	r2, [pc, #76]	; (402884 <system_init_flash+0x7c>)
  402836:	4293      	cmp	r3, r2
  402838:	d803      	bhi.n	402842 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40283a:	4b0f      	ldr	r3, [pc, #60]	; (402878 <system_init_flash+0x70>)
  40283c:	4a12      	ldr	r2, [pc, #72]	; (402888 <system_init_flash+0x80>)
  40283e:	601a      	str	r2, [r3, #0]
}
  402840:	e013      	b.n	40286a <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402842:	687b      	ldr	r3, [r7, #4]
  402844:	4a11      	ldr	r2, [pc, #68]	; (40288c <system_init_flash+0x84>)
  402846:	4293      	cmp	r3, r2
  402848:	d803      	bhi.n	402852 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40284a:	4b0b      	ldr	r3, [pc, #44]	; (402878 <system_init_flash+0x70>)
  40284c:	4a10      	ldr	r2, [pc, #64]	; (402890 <system_init_flash+0x88>)
  40284e:	601a      	str	r2, [r3, #0]
}
  402850:	e00b      	b.n	40286a <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402852:	687b      	ldr	r3, [r7, #4]
  402854:	4a0f      	ldr	r2, [pc, #60]	; (402894 <system_init_flash+0x8c>)
  402856:	4293      	cmp	r3, r2
  402858:	d804      	bhi.n	402864 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40285a:	4b07      	ldr	r3, [pc, #28]	; (402878 <system_init_flash+0x70>)
  40285c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402860:	601a      	str	r2, [r3, #0]
}
  402862:	e002      	b.n	40286a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402864:	4b04      	ldr	r3, [pc, #16]	; (402878 <system_init_flash+0x70>)
  402866:	4a0c      	ldr	r2, [pc, #48]	; (402898 <system_init_flash+0x90>)
  402868:	601a      	str	r2, [r3, #0]
}
  40286a:	bf00      	nop
  40286c:	370c      	adds	r7, #12
  40286e:	46bd      	mov	sp, r7
  402870:	bc80      	pop	{r7}
  402872:	4770      	bx	lr
  402874:	01312cff 	.word	0x01312cff
  402878:	400e0a00 	.word	0x400e0a00
  40287c:	026259ff 	.word	0x026259ff
  402880:	04000100 	.word	0x04000100
  402884:	039386ff 	.word	0x039386ff
  402888:	04000200 	.word	0x04000200
  40288c:	04c4b3ff 	.word	0x04c4b3ff
  402890:	04000300 	.word	0x04000300
  402894:	05f5e0ff 	.word	0x05f5e0ff
  402898:	04000500 	.word	0x04000500

0040289c <osc_get_rate>:
{
  40289c:	b480      	push	{r7}
  40289e:	b083      	sub	sp, #12
  4028a0:	af00      	add	r7, sp, #0
  4028a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4028a4:	687b      	ldr	r3, [r7, #4]
  4028a6:	2b07      	cmp	r3, #7
  4028a8:	d825      	bhi.n	4028f6 <osc_get_rate+0x5a>
  4028aa:	a201      	add	r2, pc, #4	; (adr r2, 4028b0 <osc_get_rate+0x14>)
  4028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4028b0:	004028d1 	.word	0x004028d1
  4028b4:	004028d7 	.word	0x004028d7
  4028b8:	004028dd 	.word	0x004028dd
  4028bc:	004028e3 	.word	0x004028e3
  4028c0:	004028e7 	.word	0x004028e7
  4028c4:	004028eb 	.word	0x004028eb
  4028c8:	004028ef 	.word	0x004028ef
  4028cc:	004028f3 	.word	0x004028f3
		return OSC_SLCK_32K_RC_HZ;
  4028d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4028d4:	e010      	b.n	4028f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4028d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028da:	e00d      	b.n	4028f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4028dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028e0:	e00a      	b.n	4028f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4028e2:	4b08      	ldr	r3, [pc, #32]	; (402904 <osc_get_rate+0x68>)
  4028e4:	e008      	b.n	4028f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4028e6:	4b08      	ldr	r3, [pc, #32]	; (402908 <osc_get_rate+0x6c>)
  4028e8:	e006      	b.n	4028f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4028ea:	4b08      	ldr	r3, [pc, #32]	; (40290c <osc_get_rate+0x70>)
  4028ec:	e004      	b.n	4028f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4028ee:	4b07      	ldr	r3, [pc, #28]	; (40290c <osc_get_rate+0x70>)
  4028f0:	e002      	b.n	4028f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4028f2:	4b06      	ldr	r3, [pc, #24]	; (40290c <osc_get_rate+0x70>)
  4028f4:	e000      	b.n	4028f8 <osc_get_rate+0x5c>
	return 0;
  4028f6:	2300      	movs	r3, #0
}
  4028f8:	4618      	mov	r0, r3
  4028fa:	370c      	adds	r7, #12
  4028fc:	46bd      	mov	sp, r7
  4028fe:	bc80      	pop	{r7}
  402900:	4770      	bx	lr
  402902:	bf00      	nop
  402904:	003d0900 	.word	0x003d0900
  402908:	007a1200 	.word	0x007a1200
  40290c:	00b71b00 	.word	0x00b71b00

00402910 <sysclk_get_main_hz>:
{
  402910:	b580      	push	{r7, lr}
  402912:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402914:	2006      	movs	r0, #6
  402916:	4b04      	ldr	r3, [pc, #16]	; (402928 <sysclk_get_main_hz+0x18>)
  402918:	4798      	blx	r3
  40291a:	4602      	mov	r2, r0
  40291c:	4613      	mov	r3, r2
  40291e:	009b      	lsls	r3, r3, #2
  402920:	4413      	add	r3, r2
  402922:	009b      	lsls	r3, r3, #2
}
  402924:	4618      	mov	r0, r3
  402926:	bd80      	pop	{r7, pc}
  402928:	0040289d 	.word	0x0040289d

0040292c <sysclk_get_cpu_hz>:
{
  40292c:	b580      	push	{r7, lr}
  40292e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402930:	4b02      	ldr	r3, [pc, #8]	; (40293c <sysclk_get_cpu_hz+0x10>)
  402932:	4798      	blx	r3
  402934:	4603      	mov	r3, r0
  402936:	085b      	lsrs	r3, r3, #1
}
  402938:	4618      	mov	r0, r3
  40293a:	bd80      	pop	{r7, pc}
  40293c:	00402911 	.word	0x00402911

00402940 <main>:
// Global variables because 2/3 of us are mechanical engineers and that's just how we roll
volatile uint32_t receivedMessage;


int main (void)
{
  402940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402944:	b089      	sub	sp, #36	; 0x24
  402946:	af00      	add	r7, sp, #0
	// boilerplate
	sysclk_init();
  402948:	4b51      	ldr	r3, [pc, #324]	; (402a90 <main+0x150>)
  40294a:	4798      	blx	r3
	wdt_disable(WDT);
  40294c:	4851      	ldr	r0, [pc, #324]	; (402a94 <main+0x154>)
  40294e:	4b52      	ldr	r3, [pc, #328]	; (402a98 <main+0x158>)
  402950:	4798      	blx	r3
	board_init();
  402952:	4b52      	ldr	r3, [pc, #328]	; (402a9c <main+0x15c>)
  402954:	4798      	blx	r3
	
	
	// start the clock that counts the seconds
	configure_tc();
  402956:	4b52      	ldr	r3, [pc, #328]	; (402aa0 <main+0x160>)
  402958:	4798      	blx	r3
	tc_start(TC0, 0);
  40295a:	2100      	movs	r1, #0
  40295c:	4851      	ldr	r0, [pc, #324]	; (402aa4 <main+0x164>)
  40295e:	4b52      	ldr	r3, [pc, #328]	; (402aa8 <main+0x168>)
  402960:	4798      	blx	r3

	// Configure the Wifi UART communication stuff
	configure_usart_wifi();
  402962:	4b52      	ldr	r3, [pc, #328]	; (402aac <main+0x16c>)
  402964:	4798      	blx	r3
	configure_wifi_comm_pin();
  402966:	4b52      	ldr	r3, [pc, #328]	; (402ab0 <main+0x170>)
  402968:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  40296a:	4b52      	ldr	r3, [pc, #328]	; (402ab4 <main+0x174>)
  40296c:	4798      	blx	r3
	
	// Configure SWD Stuff
	setupSWDPins();
  40296e:	4b52      	ldr	r3, [pc, #328]	; (402ab8 <main+0x178>)
  402970:	4798      	blx	r3
	
	// Reset the wifi
	resetWifi();
  402972:	4b52      	ldr	r3, [pc, #328]	; (402abc <main+0x17c>)
  402974:	4798      	blx	r3
	delay_ms(8000);
  402976:	4b52      	ldr	r3, [pc, #328]	; (402ac0 <main+0x180>)
  402978:	4798      	blx	r3
  40297a:	4603      	mov	r3, r0
  40297c:	4619      	mov	r1, r3
  40297e:	f04f 0200 	mov.w	r2, #0
  402982:	460b      	mov	r3, r1
  402984:	4614      	mov	r4, r2
  402986:	0166      	lsls	r6, r4, #5
  402988:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  40298c:	015d      	lsls	r5, r3, #5
  40298e:	462b      	mov	r3, r5
  402990:	4634      	mov	r4, r6
  402992:	1a5b      	subs	r3, r3, r1
  402994:	eb64 0402 	sbc.w	r4, r4, r2
  402998:	ea4f 0984 	mov.w	r9, r4, lsl #2
  40299c:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  4029a0:	ea4f 0883 	mov.w	r8, r3, lsl #2
  4029a4:	4643      	mov	r3, r8
  4029a6:	464c      	mov	r4, r9
  4029a8:	185b      	adds	r3, r3, r1
  4029aa:	eb44 0402 	adc.w	r4, r4, r2
  4029ae:	ea4f 1b84 	mov.w	fp, r4, lsl #6
  4029b2:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
  4029b6:	ea4f 1a83 	mov.w	sl, r3, lsl #6
  4029ba:	4653      	mov	r3, sl
  4029bc:	465c      	mov	r4, fp
  4029be:	4619      	mov	r1, r3
  4029c0:	4622      	mov	r2, r4
  4029c2:	f243 63af 	movw	r3, #13999	; 0x36af
  4029c6:	f04f 0400 	mov.w	r4, #0
  4029ca:	18cd      	adds	r5, r1, r3
  4029cc:	eb42 0604 	adc.w	r6, r2, r4
  4029d0:	4628      	mov	r0, r5
  4029d2:	4631      	mov	r1, r6
  4029d4:	4c3b      	ldr	r4, [pc, #236]	; (402ac4 <main+0x184>)
  4029d6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4029da:	f04f 0300 	mov.w	r3, #0
  4029de:	47a0      	blx	r4
  4029e0:	4603      	mov	r3, r0
  4029e2:	460c      	mov	r4, r1
  4029e4:	4618      	mov	r0, r3
  4029e6:	4b38      	ldr	r3, [pc, #224]	; (402ac8 <main+0x188>)
  4029e8:	4798      	blx	r3
	// Main Loop //////////////////////////////////////////////////////////////////////////////////////////////////
	while(1){
		// If GoFile says go, then do things, otherwise wait
		//if(checkGoFile()){
		if(1){
			SWD_Start();
  4029ea:	4b38      	ldr	r3, [pc, #224]	; (402acc <main+0x18c>)
  4029ec:	4798      	blx	r3
			SWD_Cleanup();*/
		}
		else{
			delay_ms(5000);
		}
		delay_ms(5000);///xxxxxxxxxxxxxxxxxxxxxDELETE_MExxxxxxxxxxxxx
  4029ee:	4b34      	ldr	r3, [pc, #208]	; (402ac0 <main+0x180>)
  4029f0:	4798      	blx	r3
  4029f2:	4603      	mov	r3, r0
  4029f4:	4619      	mov	r1, r3
  4029f6:	f04f 0200 	mov.w	r2, #0
  4029fa:	460b      	mov	r3, r1
  4029fc:	4614      	mov	r4, r2
  4029fe:	00a0      	lsls	r0, r4, #2
  402a00:	61f8      	str	r0, [r7, #28]
  402a02:	69f8      	ldr	r0, [r7, #28]
  402a04:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  402a08:	61f8      	str	r0, [r7, #28]
  402a0a:	009b      	lsls	r3, r3, #2
  402a0c:	61bb      	str	r3, [r7, #24]
  402a0e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  402a12:	185b      	adds	r3, r3, r1
  402a14:	eb44 0402 	adc.w	r4, r4, r2
  402a18:	00e0      	lsls	r0, r4, #3
  402a1a:	6178      	str	r0, [r7, #20]
  402a1c:	6978      	ldr	r0, [r7, #20]
  402a1e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  402a22:	6178      	str	r0, [r7, #20]
  402a24:	00db      	lsls	r3, r3, #3
  402a26:	613b      	str	r3, [r7, #16]
  402a28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  402a2c:	1a5b      	subs	r3, r3, r1
  402a2e:	eb64 0402 	sbc.w	r4, r4, r2
  402a32:	0120      	lsls	r0, r4, #4
  402a34:	60f8      	str	r0, [r7, #12]
  402a36:	68f8      	ldr	r0, [r7, #12]
  402a38:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  402a3c:	60f8      	str	r0, [r7, #12]
  402a3e:	011b      	lsls	r3, r3, #4
  402a40:	60bb      	str	r3, [r7, #8]
  402a42:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  402a46:	185b      	adds	r3, r3, r1
  402a48:	eb44 0402 	adc.w	r4, r4, r2
  402a4c:	00e2      	lsls	r2, r4, #3
  402a4e:	607a      	str	r2, [r7, #4]
  402a50:	687a      	ldr	r2, [r7, #4]
  402a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  402a56:	607a      	str	r2, [r7, #4]
  402a58:	00db      	lsls	r3, r3, #3
  402a5a:	603b      	str	r3, [r7, #0]
  402a5c:	e9d7 3400 	ldrd	r3, r4, [r7]
  402a60:	4619      	mov	r1, r3
  402a62:	4622      	mov	r2, r4
  402a64:	f243 63af 	movw	r3, #13999	; 0x36af
  402a68:	f04f 0400 	mov.w	r4, #0
  402a6c:	18cd      	adds	r5, r1, r3
  402a6e:	eb42 0604 	adc.w	r6, r2, r4
  402a72:	4628      	mov	r0, r5
  402a74:	4631      	mov	r1, r6
  402a76:	4c13      	ldr	r4, [pc, #76]	; (402ac4 <main+0x184>)
  402a78:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402a7c:	f04f 0300 	mov.w	r3, #0
  402a80:	47a0      	blx	r4
  402a82:	4603      	mov	r3, r0
  402a84:	460c      	mov	r4, r1
  402a86:	4618      	mov	r0, r3
  402a88:	4b0f      	ldr	r3, [pc, #60]	; (402ac8 <main+0x188>)
  402a8a:	4798      	blx	r3
		if(1){
  402a8c:	e7ad      	b.n	4029ea <main+0xaa>
  402a8e:	bf00      	nop
  402a90:	00401aa5 	.word	0x00401aa5
  402a94:	400e1450 	.word	0x400e1450
  402a98:	004005d5 	.word	0x004005d5
  402a9c:	00402561 	.word	0x00402561
  402aa0:	00401111 	.word	0x00401111
  402aa4:	40010000 	.word	0x40010000
  402aa8:	0040230d 	.word	0x0040230d
  402aac:	00401511 	.word	0x00401511
  402ab0:	004015d9 	.word	0x004015d9
  402ab4:	00401639 	.word	0x00401639
  402ab8:	004008ed 	.word	0x004008ed
  402abc:	00401691 	.word	0x00401691
  402ac0:	0040292d 	.word	0x0040292d
  402ac4:	00402ad1 	.word	0x00402ad1
  402ac8:	20000001 	.word	0x20000001
  402acc:	00400f15 	.word	0x00400f15

00402ad0 <__aeabi_uldivmod>:
  402ad0:	b953      	cbnz	r3, 402ae8 <__aeabi_uldivmod+0x18>
  402ad2:	b94a      	cbnz	r2, 402ae8 <__aeabi_uldivmod+0x18>
  402ad4:	2900      	cmp	r1, #0
  402ad6:	bf08      	it	eq
  402ad8:	2800      	cmpeq	r0, #0
  402ada:	bf1c      	itt	ne
  402adc:	f04f 31ff 	movne.w	r1, #4294967295
  402ae0:	f04f 30ff 	movne.w	r0, #4294967295
  402ae4:	f000 b97a 	b.w	402ddc <__aeabi_idiv0>
  402ae8:	f1ad 0c08 	sub.w	ip, sp, #8
  402aec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402af0:	f000 f806 	bl	402b00 <__udivmoddi4>
  402af4:	f8dd e004 	ldr.w	lr, [sp, #4]
  402af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402afc:	b004      	add	sp, #16
  402afe:	4770      	bx	lr

00402b00 <__udivmoddi4>:
  402b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b04:	468c      	mov	ip, r1
  402b06:	460d      	mov	r5, r1
  402b08:	4604      	mov	r4, r0
  402b0a:	9e08      	ldr	r6, [sp, #32]
  402b0c:	2b00      	cmp	r3, #0
  402b0e:	d151      	bne.n	402bb4 <__udivmoddi4+0xb4>
  402b10:	428a      	cmp	r2, r1
  402b12:	4617      	mov	r7, r2
  402b14:	d96d      	bls.n	402bf2 <__udivmoddi4+0xf2>
  402b16:	fab2 fe82 	clz	lr, r2
  402b1a:	f1be 0f00 	cmp.w	lr, #0
  402b1e:	d00b      	beq.n	402b38 <__udivmoddi4+0x38>
  402b20:	f1ce 0c20 	rsb	ip, lr, #32
  402b24:	fa01 f50e 	lsl.w	r5, r1, lr
  402b28:	fa20 fc0c 	lsr.w	ip, r0, ip
  402b2c:	fa02 f70e 	lsl.w	r7, r2, lr
  402b30:	ea4c 0c05 	orr.w	ip, ip, r5
  402b34:	fa00 f40e 	lsl.w	r4, r0, lr
  402b38:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402b3c:	0c25      	lsrs	r5, r4, #16
  402b3e:	fbbc f8fa 	udiv	r8, ip, sl
  402b42:	fa1f f987 	uxth.w	r9, r7
  402b46:	fb0a cc18 	mls	ip, sl, r8, ip
  402b4a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402b4e:	fb08 f309 	mul.w	r3, r8, r9
  402b52:	42ab      	cmp	r3, r5
  402b54:	d90a      	bls.n	402b6c <__udivmoddi4+0x6c>
  402b56:	19ed      	adds	r5, r5, r7
  402b58:	f108 32ff 	add.w	r2, r8, #4294967295
  402b5c:	f080 8123 	bcs.w	402da6 <__udivmoddi4+0x2a6>
  402b60:	42ab      	cmp	r3, r5
  402b62:	f240 8120 	bls.w	402da6 <__udivmoddi4+0x2a6>
  402b66:	f1a8 0802 	sub.w	r8, r8, #2
  402b6a:	443d      	add	r5, r7
  402b6c:	1aed      	subs	r5, r5, r3
  402b6e:	b2a4      	uxth	r4, r4
  402b70:	fbb5 f0fa 	udiv	r0, r5, sl
  402b74:	fb0a 5510 	mls	r5, sl, r0, r5
  402b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402b7c:	fb00 f909 	mul.w	r9, r0, r9
  402b80:	45a1      	cmp	r9, r4
  402b82:	d909      	bls.n	402b98 <__udivmoddi4+0x98>
  402b84:	19e4      	adds	r4, r4, r7
  402b86:	f100 33ff 	add.w	r3, r0, #4294967295
  402b8a:	f080 810a 	bcs.w	402da2 <__udivmoddi4+0x2a2>
  402b8e:	45a1      	cmp	r9, r4
  402b90:	f240 8107 	bls.w	402da2 <__udivmoddi4+0x2a2>
  402b94:	3802      	subs	r0, #2
  402b96:	443c      	add	r4, r7
  402b98:	eba4 0409 	sub.w	r4, r4, r9
  402b9c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402ba0:	2100      	movs	r1, #0
  402ba2:	2e00      	cmp	r6, #0
  402ba4:	d061      	beq.n	402c6a <__udivmoddi4+0x16a>
  402ba6:	fa24 f40e 	lsr.w	r4, r4, lr
  402baa:	2300      	movs	r3, #0
  402bac:	6034      	str	r4, [r6, #0]
  402bae:	6073      	str	r3, [r6, #4]
  402bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bb4:	428b      	cmp	r3, r1
  402bb6:	d907      	bls.n	402bc8 <__udivmoddi4+0xc8>
  402bb8:	2e00      	cmp	r6, #0
  402bba:	d054      	beq.n	402c66 <__udivmoddi4+0x166>
  402bbc:	2100      	movs	r1, #0
  402bbe:	e886 0021 	stmia.w	r6, {r0, r5}
  402bc2:	4608      	mov	r0, r1
  402bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bc8:	fab3 f183 	clz	r1, r3
  402bcc:	2900      	cmp	r1, #0
  402bce:	f040 808e 	bne.w	402cee <__udivmoddi4+0x1ee>
  402bd2:	42ab      	cmp	r3, r5
  402bd4:	d302      	bcc.n	402bdc <__udivmoddi4+0xdc>
  402bd6:	4282      	cmp	r2, r0
  402bd8:	f200 80fa 	bhi.w	402dd0 <__udivmoddi4+0x2d0>
  402bdc:	1a84      	subs	r4, r0, r2
  402bde:	eb65 0503 	sbc.w	r5, r5, r3
  402be2:	2001      	movs	r0, #1
  402be4:	46ac      	mov	ip, r5
  402be6:	2e00      	cmp	r6, #0
  402be8:	d03f      	beq.n	402c6a <__udivmoddi4+0x16a>
  402bea:	e886 1010 	stmia.w	r6, {r4, ip}
  402bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bf2:	b912      	cbnz	r2, 402bfa <__udivmoddi4+0xfa>
  402bf4:	2701      	movs	r7, #1
  402bf6:	fbb7 f7f2 	udiv	r7, r7, r2
  402bfa:	fab7 fe87 	clz	lr, r7
  402bfe:	f1be 0f00 	cmp.w	lr, #0
  402c02:	d134      	bne.n	402c6e <__udivmoddi4+0x16e>
  402c04:	1beb      	subs	r3, r5, r7
  402c06:	0c3a      	lsrs	r2, r7, #16
  402c08:	fa1f fc87 	uxth.w	ip, r7
  402c0c:	2101      	movs	r1, #1
  402c0e:	fbb3 f8f2 	udiv	r8, r3, r2
  402c12:	0c25      	lsrs	r5, r4, #16
  402c14:	fb02 3318 	mls	r3, r2, r8, r3
  402c18:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402c1c:	fb0c f308 	mul.w	r3, ip, r8
  402c20:	42ab      	cmp	r3, r5
  402c22:	d907      	bls.n	402c34 <__udivmoddi4+0x134>
  402c24:	19ed      	adds	r5, r5, r7
  402c26:	f108 30ff 	add.w	r0, r8, #4294967295
  402c2a:	d202      	bcs.n	402c32 <__udivmoddi4+0x132>
  402c2c:	42ab      	cmp	r3, r5
  402c2e:	f200 80d1 	bhi.w	402dd4 <__udivmoddi4+0x2d4>
  402c32:	4680      	mov	r8, r0
  402c34:	1aed      	subs	r5, r5, r3
  402c36:	b2a3      	uxth	r3, r4
  402c38:	fbb5 f0f2 	udiv	r0, r5, r2
  402c3c:	fb02 5510 	mls	r5, r2, r0, r5
  402c40:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402c44:	fb0c fc00 	mul.w	ip, ip, r0
  402c48:	45a4      	cmp	ip, r4
  402c4a:	d907      	bls.n	402c5c <__udivmoddi4+0x15c>
  402c4c:	19e4      	adds	r4, r4, r7
  402c4e:	f100 33ff 	add.w	r3, r0, #4294967295
  402c52:	d202      	bcs.n	402c5a <__udivmoddi4+0x15a>
  402c54:	45a4      	cmp	ip, r4
  402c56:	f200 80b8 	bhi.w	402dca <__udivmoddi4+0x2ca>
  402c5a:	4618      	mov	r0, r3
  402c5c:	eba4 040c 	sub.w	r4, r4, ip
  402c60:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402c64:	e79d      	b.n	402ba2 <__udivmoddi4+0xa2>
  402c66:	4631      	mov	r1, r6
  402c68:	4630      	mov	r0, r6
  402c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c6e:	f1ce 0420 	rsb	r4, lr, #32
  402c72:	fa05 f30e 	lsl.w	r3, r5, lr
  402c76:	fa07 f70e 	lsl.w	r7, r7, lr
  402c7a:	fa20 f804 	lsr.w	r8, r0, r4
  402c7e:	0c3a      	lsrs	r2, r7, #16
  402c80:	fa25 f404 	lsr.w	r4, r5, r4
  402c84:	ea48 0803 	orr.w	r8, r8, r3
  402c88:	fbb4 f1f2 	udiv	r1, r4, r2
  402c8c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402c90:	fb02 4411 	mls	r4, r2, r1, r4
  402c94:	fa1f fc87 	uxth.w	ip, r7
  402c98:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402c9c:	fb01 f30c 	mul.w	r3, r1, ip
  402ca0:	42ab      	cmp	r3, r5
  402ca2:	fa00 f40e 	lsl.w	r4, r0, lr
  402ca6:	d909      	bls.n	402cbc <__udivmoddi4+0x1bc>
  402ca8:	19ed      	adds	r5, r5, r7
  402caa:	f101 30ff 	add.w	r0, r1, #4294967295
  402cae:	f080 808a 	bcs.w	402dc6 <__udivmoddi4+0x2c6>
  402cb2:	42ab      	cmp	r3, r5
  402cb4:	f240 8087 	bls.w	402dc6 <__udivmoddi4+0x2c6>
  402cb8:	3902      	subs	r1, #2
  402cba:	443d      	add	r5, r7
  402cbc:	1aeb      	subs	r3, r5, r3
  402cbe:	fa1f f588 	uxth.w	r5, r8
  402cc2:	fbb3 f0f2 	udiv	r0, r3, r2
  402cc6:	fb02 3310 	mls	r3, r2, r0, r3
  402cca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402cce:	fb00 f30c 	mul.w	r3, r0, ip
  402cd2:	42ab      	cmp	r3, r5
  402cd4:	d907      	bls.n	402ce6 <__udivmoddi4+0x1e6>
  402cd6:	19ed      	adds	r5, r5, r7
  402cd8:	f100 38ff 	add.w	r8, r0, #4294967295
  402cdc:	d26f      	bcs.n	402dbe <__udivmoddi4+0x2be>
  402cde:	42ab      	cmp	r3, r5
  402ce0:	d96d      	bls.n	402dbe <__udivmoddi4+0x2be>
  402ce2:	3802      	subs	r0, #2
  402ce4:	443d      	add	r5, r7
  402ce6:	1aeb      	subs	r3, r5, r3
  402ce8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402cec:	e78f      	b.n	402c0e <__udivmoddi4+0x10e>
  402cee:	f1c1 0720 	rsb	r7, r1, #32
  402cf2:	fa22 f807 	lsr.w	r8, r2, r7
  402cf6:	408b      	lsls	r3, r1
  402cf8:	fa05 f401 	lsl.w	r4, r5, r1
  402cfc:	ea48 0303 	orr.w	r3, r8, r3
  402d00:	fa20 fe07 	lsr.w	lr, r0, r7
  402d04:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402d08:	40fd      	lsrs	r5, r7
  402d0a:	ea4e 0e04 	orr.w	lr, lr, r4
  402d0e:	fbb5 f9fc 	udiv	r9, r5, ip
  402d12:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402d16:	fb0c 5519 	mls	r5, ip, r9, r5
  402d1a:	fa1f f883 	uxth.w	r8, r3
  402d1e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402d22:	fb09 f408 	mul.w	r4, r9, r8
  402d26:	42ac      	cmp	r4, r5
  402d28:	fa02 f201 	lsl.w	r2, r2, r1
  402d2c:	fa00 fa01 	lsl.w	sl, r0, r1
  402d30:	d908      	bls.n	402d44 <__udivmoddi4+0x244>
  402d32:	18ed      	adds	r5, r5, r3
  402d34:	f109 30ff 	add.w	r0, r9, #4294967295
  402d38:	d243      	bcs.n	402dc2 <__udivmoddi4+0x2c2>
  402d3a:	42ac      	cmp	r4, r5
  402d3c:	d941      	bls.n	402dc2 <__udivmoddi4+0x2c2>
  402d3e:	f1a9 0902 	sub.w	r9, r9, #2
  402d42:	441d      	add	r5, r3
  402d44:	1b2d      	subs	r5, r5, r4
  402d46:	fa1f fe8e 	uxth.w	lr, lr
  402d4a:	fbb5 f0fc 	udiv	r0, r5, ip
  402d4e:	fb0c 5510 	mls	r5, ip, r0, r5
  402d52:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402d56:	fb00 f808 	mul.w	r8, r0, r8
  402d5a:	45a0      	cmp	r8, r4
  402d5c:	d907      	bls.n	402d6e <__udivmoddi4+0x26e>
  402d5e:	18e4      	adds	r4, r4, r3
  402d60:	f100 35ff 	add.w	r5, r0, #4294967295
  402d64:	d229      	bcs.n	402dba <__udivmoddi4+0x2ba>
  402d66:	45a0      	cmp	r8, r4
  402d68:	d927      	bls.n	402dba <__udivmoddi4+0x2ba>
  402d6a:	3802      	subs	r0, #2
  402d6c:	441c      	add	r4, r3
  402d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402d72:	eba4 0408 	sub.w	r4, r4, r8
  402d76:	fba0 8902 	umull	r8, r9, r0, r2
  402d7a:	454c      	cmp	r4, r9
  402d7c:	46c6      	mov	lr, r8
  402d7e:	464d      	mov	r5, r9
  402d80:	d315      	bcc.n	402dae <__udivmoddi4+0x2ae>
  402d82:	d012      	beq.n	402daa <__udivmoddi4+0x2aa>
  402d84:	b156      	cbz	r6, 402d9c <__udivmoddi4+0x29c>
  402d86:	ebba 030e 	subs.w	r3, sl, lr
  402d8a:	eb64 0405 	sbc.w	r4, r4, r5
  402d8e:	fa04 f707 	lsl.w	r7, r4, r7
  402d92:	40cb      	lsrs	r3, r1
  402d94:	431f      	orrs	r7, r3
  402d96:	40cc      	lsrs	r4, r1
  402d98:	6037      	str	r7, [r6, #0]
  402d9a:	6074      	str	r4, [r6, #4]
  402d9c:	2100      	movs	r1, #0
  402d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402da2:	4618      	mov	r0, r3
  402da4:	e6f8      	b.n	402b98 <__udivmoddi4+0x98>
  402da6:	4690      	mov	r8, r2
  402da8:	e6e0      	b.n	402b6c <__udivmoddi4+0x6c>
  402daa:	45c2      	cmp	sl, r8
  402dac:	d2ea      	bcs.n	402d84 <__udivmoddi4+0x284>
  402dae:	ebb8 0e02 	subs.w	lr, r8, r2
  402db2:	eb69 0503 	sbc.w	r5, r9, r3
  402db6:	3801      	subs	r0, #1
  402db8:	e7e4      	b.n	402d84 <__udivmoddi4+0x284>
  402dba:	4628      	mov	r0, r5
  402dbc:	e7d7      	b.n	402d6e <__udivmoddi4+0x26e>
  402dbe:	4640      	mov	r0, r8
  402dc0:	e791      	b.n	402ce6 <__udivmoddi4+0x1e6>
  402dc2:	4681      	mov	r9, r0
  402dc4:	e7be      	b.n	402d44 <__udivmoddi4+0x244>
  402dc6:	4601      	mov	r1, r0
  402dc8:	e778      	b.n	402cbc <__udivmoddi4+0x1bc>
  402dca:	3802      	subs	r0, #2
  402dcc:	443c      	add	r4, r7
  402dce:	e745      	b.n	402c5c <__udivmoddi4+0x15c>
  402dd0:	4608      	mov	r0, r1
  402dd2:	e708      	b.n	402be6 <__udivmoddi4+0xe6>
  402dd4:	f1a8 0802 	sub.w	r8, r8, #2
  402dd8:	443d      	add	r5, r7
  402dda:	e72b      	b.n	402c34 <__udivmoddi4+0x134>

00402ddc <__aeabi_idiv0>:
  402ddc:	4770      	bx	lr
  402dde:	bf00      	nop

00402de0 <__libc_init_array>:
  402de0:	b570      	push	{r4, r5, r6, lr}
  402de2:	4e0f      	ldr	r6, [pc, #60]	; (402e20 <__libc_init_array+0x40>)
  402de4:	4d0f      	ldr	r5, [pc, #60]	; (402e24 <__libc_init_array+0x44>)
  402de6:	1b76      	subs	r6, r6, r5
  402de8:	10b6      	asrs	r6, r6, #2
  402dea:	bf18      	it	ne
  402dec:	2400      	movne	r4, #0
  402dee:	d005      	beq.n	402dfc <__libc_init_array+0x1c>
  402df0:	3401      	adds	r4, #1
  402df2:	f855 3b04 	ldr.w	r3, [r5], #4
  402df6:	4798      	blx	r3
  402df8:	42a6      	cmp	r6, r4
  402dfa:	d1f9      	bne.n	402df0 <__libc_init_array+0x10>
  402dfc:	4e0a      	ldr	r6, [pc, #40]	; (402e28 <__libc_init_array+0x48>)
  402dfe:	4d0b      	ldr	r5, [pc, #44]	; (402e2c <__libc_init_array+0x4c>)
  402e00:	1b76      	subs	r6, r6, r5
  402e02:	f000 fd2d 	bl	403860 <_init>
  402e06:	10b6      	asrs	r6, r6, #2
  402e08:	bf18      	it	ne
  402e0a:	2400      	movne	r4, #0
  402e0c:	d006      	beq.n	402e1c <__libc_init_array+0x3c>
  402e0e:	3401      	adds	r4, #1
  402e10:	f855 3b04 	ldr.w	r3, [r5], #4
  402e14:	4798      	blx	r3
  402e16:	42a6      	cmp	r6, r4
  402e18:	d1f9      	bne.n	402e0e <__libc_init_array+0x2e>
  402e1a:	bd70      	pop	{r4, r5, r6, pc}
  402e1c:	bd70      	pop	{r4, r5, r6, pc}
  402e1e:	bf00      	nop
  402e20:	0040386c 	.word	0x0040386c
  402e24:	0040386c 	.word	0x0040386c
  402e28:	00403874 	.word	0x00403874
  402e2c:	0040386c 	.word	0x0040386c

00402e30 <strcpy>:
  402e30:	ea80 0201 	eor.w	r2, r0, r1
  402e34:	4684      	mov	ip, r0
  402e36:	f012 0f03 	tst.w	r2, #3
  402e3a:	d14f      	bne.n	402edc <strcpy+0xac>
  402e3c:	f011 0f03 	tst.w	r1, #3
  402e40:	d132      	bne.n	402ea8 <strcpy+0x78>
  402e42:	f84d 4d04 	str.w	r4, [sp, #-4]!
  402e46:	f011 0f04 	tst.w	r1, #4
  402e4a:	f851 3b04 	ldr.w	r3, [r1], #4
  402e4e:	d00b      	beq.n	402e68 <strcpy+0x38>
  402e50:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402e54:	439a      	bics	r2, r3
  402e56:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e5a:	bf04      	itt	eq
  402e5c:	f84c 3b04 	streq.w	r3, [ip], #4
  402e60:	f851 3b04 	ldreq.w	r3, [r1], #4
  402e64:	d116      	bne.n	402e94 <strcpy+0x64>
  402e66:	bf00      	nop
  402e68:	f851 4b04 	ldr.w	r4, [r1], #4
  402e6c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402e70:	439a      	bics	r2, r3
  402e72:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e76:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  402e7a:	d10b      	bne.n	402e94 <strcpy+0x64>
  402e7c:	f84c 3b04 	str.w	r3, [ip], #4
  402e80:	43a2      	bics	r2, r4
  402e82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e86:	bf04      	itt	eq
  402e88:	f851 3b04 	ldreq.w	r3, [r1], #4
  402e8c:	f84c 4b04 	streq.w	r4, [ip], #4
  402e90:	d0ea      	beq.n	402e68 <strcpy+0x38>
  402e92:	4623      	mov	r3, r4
  402e94:	f80c 3b01 	strb.w	r3, [ip], #1
  402e98:	f013 0fff 	tst.w	r3, #255	; 0xff
  402e9c:	ea4f 2333 	mov.w	r3, r3, ror #8
  402ea0:	d1f8      	bne.n	402e94 <strcpy+0x64>
  402ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ea6:	4770      	bx	lr
  402ea8:	f011 0f01 	tst.w	r1, #1
  402eac:	d006      	beq.n	402ebc <strcpy+0x8c>
  402eae:	f811 2b01 	ldrb.w	r2, [r1], #1
  402eb2:	f80c 2b01 	strb.w	r2, [ip], #1
  402eb6:	2a00      	cmp	r2, #0
  402eb8:	bf08      	it	eq
  402eba:	4770      	bxeq	lr
  402ebc:	f011 0f02 	tst.w	r1, #2
  402ec0:	d0bf      	beq.n	402e42 <strcpy+0x12>
  402ec2:	f831 2b02 	ldrh.w	r2, [r1], #2
  402ec6:	f012 0fff 	tst.w	r2, #255	; 0xff
  402eca:	bf16      	itet	ne
  402ecc:	f82c 2b02 	strhne.w	r2, [ip], #2
  402ed0:	f88c 2000 	strbeq.w	r2, [ip]
  402ed4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  402ed8:	d1b3      	bne.n	402e42 <strcpy+0x12>
  402eda:	4770      	bx	lr
  402edc:	f811 2b01 	ldrb.w	r2, [r1], #1
  402ee0:	f80c 2b01 	strb.w	r2, [ip], #1
  402ee4:	2a00      	cmp	r2, #0
  402ee6:	d1f9      	bne.n	402edc <strcpy+0xac>
  402ee8:	4770      	bx	lr
  402eea:	bf00      	nop

00402eec <critical_factorization>:
  402eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ef0:	f04f 0e01 	mov.w	lr, #1
  402ef4:	4674      	mov	r4, lr
  402ef6:	2500      	movs	r5, #0
  402ef8:	f04f 36ff 	mov.w	r6, #4294967295
  402efc:	192b      	adds	r3, r5, r4
  402efe:	428b      	cmp	r3, r1
  402f00:	eb00 0706 	add.w	r7, r0, r6
  402f04:	d20d      	bcs.n	402f22 <critical_factorization+0x36>
  402f06:	5d3f      	ldrb	r7, [r7, r4]
  402f08:	f810 c003 	ldrb.w	ip, [r0, r3]
  402f0c:	45bc      	cmp	ip, r7
  402f0e:	d22d      	bcs.n	402f6c <critical_factorization+0x80>
  402f10:	461d      	mov	r5, r3
  402f12:	2401      	movs	r4, #1
  402f14:	eba3 0e06 	sub.w	lr, r3, r6
  402f18:	192b      	adds	r3, r5, r4
  402f1a:	428b      	cmp	r3, r1
  402f1c:	eb00 0706 	add.w	r7, r0, r6
  402f20:	d3f1      	bcc.n	402f06 <critical_factorization+0x1a>
  402f22:	f04f 0801 	mov.w	r8, #1
  402f26:	f8c2 e000 	str.w	lr, [r2]
  402f2a:	4644      	mov	r4, r8
  402f2c:	2500      	movs	r5, #0
  402f2e:	f04f 37ff 	mov.w	r7, #4294967295
  402f32:	192b      	adds	r3, r5, r4
  402f34:	4299      	cmp	r1, r3
  402f36:	eb00 0e07 	add.w	lr, r0, r7
  402f3a:	d90e      	bls.n	402f5a <critical_factorization+0x6e>
  402f3c:	f81e e004 	ldrb.w	lr, [lr, r4]
  402f40:	f810 c003 	ldrb.w	ip, [r0, r3]
  402f44:	45f4      	cmp	ip, lr
  402f46:	d918      	bls.n	402f7a <critical_factorization+0x8e>
  402f48:	461d      	mov	r5, r3
  402f4a:	2401      	movs	r4, #1
  402f4c:	eba3 0807 	sub.w	r8, r3, r7
  402f50:	192b      	adds	r3, r5, r4
  402f52:	4299      	cmp	r1, r3
  402f54:	eb00 0e07 	add.w	lr, r0, r7
  402f58:	d8f0      	bhi.n	402f3c <critical_factorization+0x50>
  402f5a:	3701      	adds	r7, #1
  402f5c:	1c70      	adds	r0, r6, #1
  402f5e:	4287      	cmp	r7, r0
  402f60:	bf24      	itt	cs
  402f62:	f8c2 8000 	strcs.w	r8, [r2]
  402f66:	4638      	movcs	r0, r7
  402f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f6c:	d00c      	beq.n	402f88 <critical_factorization+0x9c>
  402f6e:	f04f 0e01 	mov.w	lr, #1
  402f72:	462e      	mov	r6, r5
  402f74:	4674      	mov	r4, lr
  402f76:	4475      	add	r5, lr
  402f78:	e7c0      	b.n	402efc <critical_factorization+0x10>
  402f7a:	d00b      	beq.n	402f94 <critical_factorization+0xa8>
  402f7c:	f04f 0801 	mov.w	r8, #1
  402f80:	462f      	mov	r7, r5
  402f82:	4644      	mov	r4, r8
  402f84:	4445      	add	r5, r8
  402f86:	e7d4      	b.n	402f32 <critical_factorization+0x46>
  402f88:	4574      	cmp	r4, lr
  402f8a:	bf12      	itee	ne
  402f8c:	3401      	addne	r4, #1
  402f8e:	461d      	moveq	r5, r3
  402f90:	2401      	moveq	r4, #1
  402f92:	e7b3      	b.n	402efc <critical_factorization+0x10>
  402f94:	4544      	cmp	r4, r8
  402f96:	bf12      	itee	ne
  402f98:	3401      	addne	r4, #1
  402f9a:	461d      	moveq	r5, r3
  402f9c:	2401      	moveq	r4, #1
  402f9e:	e7c8      	b.n	402f32 <critical_factorization+0x46>

00402fa0 <two_way_long_needle>:
  402fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fa4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  402fa8:	4616      	mov	r6, r2
  402faa:	4605      	mov	r5, r0
  402fac:	468b      	mov	fp, r1
  402fae:	4610      	mov	r0, r2
  402fb0:	4619      	mov	r1, r3
  402fb2:	aa03      	add	r2, sp, #12
  402fb4:	461c      	mov	r4, r3
  402fb6:	f7ff ff99 	bl	402eec <critical_factorization>
  402fba:	ab03      	add	r3, sp, #12
  402fbc:	4681      	mov	r9, r0
  402fbe:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  402fc2:	f843 4f04 	str.w	r4, [r3, #4]!
  402fc6:	4293      	cmp	r3, r2
  402fc8:	d1fb      	bne.n	402fc2 <two_way_long_needle+0x22>
  402fca:	b14c      	cbz	r4, 402fe0 <two_way_long_needle+0x40>
  402fcc:	1e63      	subs	r3, r4, #1
  402fce:	1e72      	subs	r2, r6, #1
  402fd0:	a804      	add	r0, sp, #16
  402fd2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402fd6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  402fda:	f113 33ff 	adds.w	r3, r3, #4294967295
  402fde:	d2f8      	bcs.n	402fd2 <two_way_long_needle+0x32>
  402fe0:	9903      	ldr	r1, [sp, #12]
  402fe2:	464a      	mov	r2, r9
  402fe4:	4431      	add	r1, r6
  402fe6:	4630      	mov	r0, r6
  402fe8:	f000 fa62 	bl	4034b0 <memcmp>
  402fec:	2800      	cmp	r0, #0
  402fee:	d16f      	bne.n	4030d0 <two_way_long_needle+0x130>
  402ff0:	f109 33ff 	add.w	r3, r9, #4294967295
  402ff4:	9300      	str	r3, [sp, #0]
  402ff6:	18f3      	adds	r3, r6, r3
  402ff8:	4682      	mov	sl, r0
  402ffa:	9301      	str	r3, [sp, #4]
  402ffc:	4623      	mov	r3, r4
  402ffe:	4680      	mov	r8, r0
  403000:	4654      	mov	r4, sl
  403002:	4658      	mov	r0, fp
  403004:	469a      	mov	sl, r3
  403006:	eb08 070a 	add.w	r7, r8, sl
  40300a:	1a3a      	subs	r2, r7, r0
  40300c:	2100      	movs	r1, #0
  40300e:	4428      	add	r0, r5
  403010:	f000 f9fe 	bl	403410 <memchr>
  403014:	2800      	cmp	r0, #0
  403016:	d156      	bne.n	4030c6 <two_way_long_needle+0x126>
  403018:	2f00      	cmp	r7, #0
  40301a:	d054      	beq.n	4030c6 <two_way_long_needle+0x126>
  40301c:	19eb      	adds	r3, r5, r7
  40301e:	aa04      	add	r2, sp, #16
  403020:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403028:	b14b      	cbz	r3, 40303e <two_way_long_needle+0x9e>
  40302a:	b124      	cbz	r4, 403036 <two_way_long_needle+0x96>
  40302c:	9a03      	ldr	r2, [sp, #12]
  40302e:	4293      	cmp	r3, r2
  403030:	d201      	bcs.n	403036 <two_way_long_needle+0x96>
  403032:	ebaa 0302 	sub.w	r3, sl, r2
  403036:	4498      	add	r8, r3
  403038:	2400      	movs	r4, #0
  40303a:	4638      	mov	r0, r7
  40303c:	e7e3      	b.n	403006 <two_way_long_needle+0x66>
  40303e:	454c      	cmp	r4, r9
  403040:	4623      	mov	r3, r4
  403042:	f10a 3eff 	add.w	lr, sl, #4294967295
  403046:	bf38      	it	cc
  403048:	464b      	movcc	r3, r9
  40304a:	4573      	cmp	r3, lr
  40304c:	d213      	bcs.n	403076 <two_way_long_needle+0xd6>
  40304e:	eb08 0203 	add.w	r2, r8, r3
  403052:	f816 c003 	ldrb.w	ip, [r6, r3]
  403056:	5ca8      	ldrb	r0, [r5, r2]
  403058:	4584      	cmp	ip, r0
  40305a:	442a      	add	r2, r5
  40305c:	eb06 0103 	add.w	r1, r6, r3
  403060:	d006      	beq.n	403070 <two_way_long_needle+0xd0>
  403062:	e02c      	b.n	4030be <two_way_long_needle+0x11e>
  403064:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403068:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40306c:	4584      	cmp	ip, r0
  40306e:	d126      	bne.n	4030be <two_way_long_needle+0x11e>
  403070:	3301      	adds	r3, #1
  403072:	4573      	cmp	r3, lr
  403074:	d3f6      	bcc.n	403064 <two_way_long_needle+0xc4>
  403076:	454c      	cmp	r4, r9
  403078:	9900      	ldr	r1, [sp, #0]
  40307a:	f080 8089 	bcs.w	403190 <two_way_long_needle+0x1f0>
  40307e:	9b00      	ldr	r3, [sp, #0]
  403080:	eb08 0203 	add.w	r2, r8, r3
  403084:	9b01      	ldr	r3, [sp, #4]
  403086:	5ca8      	ldrb	r0, [r5, r2]
  403088:	781b      	ldrb	r3, [r3, #0]
  40308a:	4298      	cmp	r0, r3
  40308c:	442a      	add	r2, r5
  40308e:	d17f      	bne.n	403190 <two_way_long_needle+0x1f0>
  403090:	9801      	ldr	r0, [sp, #4]
  403092:	f104 3bff 	add.w	fp, r4, #4294967295
  403096:	e006      	b.n	4030a6 <two_way_long_needle+0x106>
  403098:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40309c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4030a0:	45f4      	cmp	ip, lr
  4030a2:	d103      	bne.n	4030ac <two_way_long_needle+0x10c>
  4030a4:	4619      	mov	r1, r3
  4030a6:	1e4b      	subs	r3, r1, #1
  4030a8:	459b      	cmp	fp, r3
  4030aa:	d1f5      	bne.n	403098 <two_way_long_needle+0xf8>
  4030ac:	3401      	adds	r4, #1
  4030ae:	428c      	cmp	r4, r1
  4030b0:	d870      	bhi.n	403194 <two_way_long_needle+0x1f4>
  4030b2:	9c03      	ldr	r4, [sp, #12]
  4030b4:	4638      	mov	r0, r7
  4030b6:	44a0      	add	r8, r4
  4030b8:	ebaa 0404 	sub.w	r4, sl, r4
  4030bc:	e7a3      	b.n	403006 <two_way_long_needle+0x66>
  4030be:	f1c9 0201 	rsb	r2, r9, #1
  4030c2:	4490      	add	r8, r2
  4030c4:	e7b7      	b.n	403036 <two_way_long_needle+0x96>
  4030c6:	2000      	movs	r0, #0
  4030c8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4030cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030d0:	eba4 0309 	sub.w	r3, r4, r9
  4030d4:	454b      	cmp	r3, r9
  4030d6:	bf38      	it	cc
  4030d8:	464b      	movcc	r3, r9
  4030da:	3301      	adds	r3, #1
  4030dc:	f109 38ff 	add.w	r8, r9, #4294967295
  4030e0:	9303      	str	r3, [sp, #12]
  4030e2:	eb06 0308 	add.w	r3, r6, r8
  4030e6:	4658      	mov	r0, fp
  4030e8:	f04f 0a00 	mov.w	sl, #0
  4030ec:	46cb      	mov	fp, r9
  4030ee:	4699      	mov	r9, r3
  4030f0:	eb0a 0704 	add.w	r7, sl, r4
  4030f4:	1a3a      	subs	r2, r7, r0
  4030f6:	2100      	movs	r1, #0
  4030f8:	4428      	add	r0, r5
  4030fa:	f000 f989 	bl	403410 <memchr>
  4030fe:	2800      	cmp	r0, #0
  403100:	d1e1      	bne.n	4030c6 <two_way_long_needle+0x126>
  403102:	2f00      	cmp	r7, #0
  403104:	d0df      	beq.n	4030c6 <two_way_long_needle+0x126>
  403106:	19eb      	adds	r3, r5, r7
  403108:	aa04      	add	r2, sp, #16
  40310a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403112:	bba3      	cbnz	r3, 40317e <two_way_long_needle+0x1de>
  403114:	1e61      	subs	r1, r4, #1
  403116:	458b      	cmp	fp, r1
  403118:	d215      	bcs.n	403146 <two_way_long_needle+0x1a6>
  40311a:	eb0a 020b 	add.w	r2, sl, fp
  40311e:	f816 300b 	ldrb.w	r3, [r6, fp]
  403122:	f815 e002 	ldrb.w	lr, [r5, r2]
  403126:	459e      	cmp	lr, r3
  403128:	442a      	add	r2, r5
  40312a:	eb06 000b 	add.w	r0, r6, fp
  40312e:	465b      	mov	r3, fp
  403130:	d006      	beq.n	403140 <two_way_long_needle+0x1a0>
  403132:	e027      	b.n	403184 <two_way_long_needle+0x1e4>
  403134:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403138:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40313c:	45f4      	cmp	ip, lr
  40313e:	d121      	bne.n	403184 <two_way_long_needle+0x1e4>
  403140:	3301      	adds	r3, #1
  403142:	428b      	cmp	r3, r1
  403144:	d3f6      	bcc.n	403134 <two_way_long_needle+0x194>
  403146:	f1b8 3fff 	cmp.w	r8, #4294967295
  40314a:	d011      	beq.n	403170 <two_way_long_needle+0x1d0>
  40314c:	eb0a 0208 	add.w	r2, sl, r8
  403150:	f899 1000 	ldrb.w	r1, [r9]
  403154:	5cab      	ldrb	r3, [r5, r2]
  403156:	4299      	cmp	r1, r3
  403158:	442a      	add	r2, r5
  40315a:	d10f      	bne.n	40317c <two_way_long_needle+0x1dc>
  40315c:	464b      	mov	r3, r9
  40315e:	e005      	b.n	40316c <two_way_long_needle+0x1cc>
  403160:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403164:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403168:	4288      	cmp	r0, r1
  40316a:	d107      	bne.n	40317c <two_way_long_needle+0x1dc>
  40316c:	42b3      	cmp	r3, r6
  40316e:	d1f7      	bne.n	403160 <two_way_long_needle+0x1c0>
  403170:	eb05 000a 	add.w	r0, r5, sl
  403174:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40317c:	9b03      	ldr	r3, [sp, #12]
  40317e:	449a      	add	sl, r3
  403180:	4638      	mov	r0, r7
  403182:	e7b5      	b.n	4030f0 <two_way_long_needle+0x150>
  403184:	f1cb 0201 	rsb	r2, fp, #1
  403188:	4492      	add	sl, r2
  40318a:	449a      	add	sl, r3
  40318c:	4638      	mov	r0, r7
  40318e:	e7af      	b.n	4030f0 <two_way_long_needle+0x150>
  403190:	4649      	mov	r1, r9
  403192:	e78b      	b.n	4030ac <two_way_long_needle+0x10c>
  403194:	eb05 0008 	add.w	r0, r5, r8
  403198:	e796      	b.n	4030c8 <two_way_long_needle+0x128>
  40319a:	bf00      	nop

0040319c <strstr>:
  40319c:	7802      	ldrb	r2, [r0, #0]
  40319e:	2a00      	cmp	r2, #0
  4031a0:	f000 8101 	beq.w	4033a6 <strstr+0x20a>
  4031a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031a8:	f891 8000 	ldrb.w	r8, [r1]
  4031ac:	b085      	sub	sp, #20
  4031ae:	4644      	mov	r4, r8
  4031b0:	f1b8 0f00 	cmp.w	r8, #0
  4031b4:	d016      	beq.n	4031e4 <strstr+0x48>
  4031b6:	4686      	mov	lr, r0
  4031b8:	f101 0c01 	add.w	ip, r1, #1
  4031bc:	2701      	movs	r7, #1
  4031be:	e003      	b.n	4031c8 <strstr+0x2c>
  4031c0:	f813 4b01 	ldrb.w	r4, [r3], #1
  4031c4:	b16c      	cbz	r4, 4031e2 <strstr+0x46>
  4031c6:	469c      	mov	ip, r3
  4031c8:	42a2      	cmp	r2, r4
  4031ca:	bf14      	ite	ne
  4031cc:	2700      	movne	r7, #0
  4031ce:	f007 0701 	andeq.w	r7, r7, #1
  4031d2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4031d6:	4663      	mov	r3, ip
  4031d8:	2a00      	cmp	r2, #0
  4031da:	d1f1      	bne.n	4031c0 <strstr+0x24>
  4031dc:	f89c 3000 	ldrb.w	r3, [ip]
  4031e0:	b9fb      	cbnz	r3, 403222 <strstr+0x86>
  4031e2:	b117      	cbz	r7, 4031ea <strstr+0x4e>
  4031e4:	b005      	add	sp, #20
  4031e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031ea:	460e      	mov	r6, r1
  4031ec:	4605      	mov	r5, r0
  4031ee:	4641      	mov	r1, r8
  4031f0:	3001      	adds	r0, #1
  4031f2:	ebac 0406 	sub.w	r4, ip, r6
  4031f6:	f000 f98b 	bl	403510 <strchr>
  4031fa:	4607      	mov	r7, r0
  4031fc:	b188      	cbz	r0, 403222 <strstr+0x86>
  4031fe:	2c01      	cmp	r4, #1
  403200:	d0f0      	beq.n	4031e4 <strstr+0x48>
  403202:	1928      	adds	r0, r5, r4
  403204:	4287      	cmp	r7, r0
  403206:	bf94      	ite	ls
  403208:	1bc1      	subls	r1, r0, r7
  40320a:	2101      	movhi	r1, #1
  40320c:	2c1f      	cmp	r4, #31
  40320e:	468b      	mov	fp, r1
  403210:	d90b      	bls.n	40322a <strstr+0x8e>
  403212:	4623      	mov	r3, r4
  403214:	4632      	mov	r2, r6
  403216:	4638      	mov	r0, r7
  403218:	f7ff fec2 	bl	402fa0 <two_way_long_needle>
  40321c:	b005      	add	sp, #20
  40321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403222:	2000      	movs	r0, #0
  403224:	b005      	add	sp, #20
  403226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40322a:	aa03      	add	r2, sp, #12
  40322c:	4621      	mov	r1, r4
  40322e:	4630      	mov	r0, r6
  403230:	f7ff fe5c 	bl	402eec <critical_factorization>
  403234:	9903      	ldr	r1, [sp, #12]
  403236:	4680      	mov	r8, r0
  403238:	4602      	mov	r2, r0
  40323a:	4431      	add	r1, r6
  40323c:	4630      	mov	r0, r6
  40323e:	f000 f937 	bl	4034b0 <memcmp>
  403242:	2800      	cmp	r0, #0
  403244:	d157      	bne.n	4032f6 <strstr+0x15a>
  403246:	f108 33ff 	add.w	r3, r8, #4294967295
  40324a:	9300      	str	r3, [sp, #0]
  40324c:	18f3      	adds	r3, r6, r3
  40324e:	4681      	mov	r9, r0
  403250:	4605      	mov	r5, r0
  403252:	9301      	str	r3, [sp, #4]
  403254:	4658      	mov	r0, fp
  403256:	46b2      	mov	sl, r6
  403258:	1966      	adds	r6, r4, r5
  40325a:	1a32      	subs	r2, r6, r0
  40325c:	2100      	movs	r1, #0
  40325e:	4438      	add	r0, r7
  403260:	f000 f8d6 	bl	403410 <memchr>
  403264:	2800      	cmp	r0, #0
  403266:	d1dc      	bne.n	403222 <strstr+0x86>
  403268:	2e00      	cmp	r6, #0
  40326a:	d0da      	beq.n	403222 <strstr+0x86>
  40326c:	45c8      	cmp	r8, r9
  40326e:	4643      	mov	r3, r8
  403270:	bf38      	it	cc
  403272:	464b      	movcc	r3, r9
  403274:	429c      	cmp	r4, r3
  403276:	d912      	bls.n	40329e <strstr+0x102>
  403278:	195a      	adds	r2, r3, r5
  40327a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40327e:	5cb8      	ldrb	r0, [r7, r2]
  403280:	4281      	cmp	r1, r0
  403282:	443a      	add	r2, r7
  403284:	eb0a 0e03 	add.w	lr, sl, r3
  403288:	d006      	beq.n	403298 <strstr+0xfc>
  40328a:	e02c      	b.n	4032e6 <strstr+0x14a>
  40328c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403290:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403294:	4288      	cmp	r0, r1
  403296:	d126      	bne.n	4032e6 <strstr+0x14a>
  403298:	3301      	adds	r3, #1
  40329a:	429c      	cmp	r4, r3
  40329c:	d1f6      	bne.n	40328c <strstr+0xf0>
  40329e:	45c8      	cmp	r8, r9
  4032a0:	9900      	ldr	r1, [sp, #0]
  4032a2:	f240 8083 	bls.w	4033ac <strstr+0x210>
  4032a6:	9b00      	ldr	r3, [sp, #0]
  4032a8:	18ea      	adds	r2, r5, r3
  4032aa:	9b01      	ldr	r3, [sp, #4]
  4032ac:	5cb8      	ldrb	r0, [r7, r2]
  4032ae:	781b      	ldrb	r3, [r3, #0]
  4032b0:	4298      	cmp	r0, r3
  4032b2:	443a      	add	r2, r7
  4032b4:	d17a      	bne.n	4033ac <strstr+0x210>
  4032b6:	9801      	ldr	r0, [sp, #4]
  4032b8:	f109 3bff 	add.w	fp, r9, #4294967295
  4032bc:	e006      	b.n	4032cc <strstr+0x130>
  4032be:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4032c2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4032c6:	45f4      	cmp	ip, lr
  4032c8:	d103      	bne.n	4032d2 <strstr+0x136>
  4032ca:	4619      	mov	r1, r3
  4032cc:	1e4b      	subs	r3, r1, #1
  4032ce:	455b      	cmp	r3, fp
  4032d0:	d1f5      	bne.n	4032be <strstr+0x122>
  4032d2:	f109 0901 	add.w	r9, r9, #1
  4032d6:	4589      	cmp	r9, r1
  4032d8:	d857      	bhi.n	40338a <strstr+0x1ee>
  4032da:	9b03      	ldr	r3, [sp, #12]
  4032dc:	4630      	mov	r0, r6
  4032de:	441d      	add	r5, r3
  4032e0:	eba4 0903 	sub.w	r9, r4, r3
  4032e4:	e7b8      	b.n	403258 <strstr+0xbc>
  4032e6:	f1c8 0201 	rsb	r2, r8, #1
  4032ea:	4415      	add	r5, r2
  4032ec:	441d      	add	r5, r3
  4032ee:	f04f 0900 	mov.w	r9, #0
  4032f2:	4630      	mov	r0, r6
  4032f4:	e7b0      	b.n	403258 <strstr+0xbc>
  4032f6:	eba4 0308 	sub.w	r3, r4, r8
  4032fa:	4543      	cmp	r3, r8
  4032fc:	bf38      	it	cc
  4032fe:	4643      	movcc	r3, r8
  403300:	3301      	adds	r3, #1
  403302:	f108 39ff 	add.w	r9, r8, #4294967295
  403306:	9303      	str	r3, [sp, #12]
  403308:	eb06 0309 	add.w	r3, r6, r9
  40330c:	4658      	mov	r0, fp
  40330e:	2500      	movs	r5, #0
  403310:	46bb      	mov	fp, r7
  403312:	469a      	mov	sl, r3
  403314:	1967      	adds	r7, r4, r5
  403316:	1a3a      	subs	r2, r7, r0
  403318:	2100      	movs	r1, #0
  40331a:	4458      	add	r0, fp
  40331c:	f000 f878 	bl	403410 <memchr>
  403320:	2800      	cmp	r0, #0
  403322:	f47f af7e 	bne.w	403222 <strstr+0x86>
  403326:	2f00      	cmp	r7, #0
  403328:	f43f af7b 	beq.w	403222 <strstr+0x86>
  40332c:	4544      	cmp	r4, r8
  40332e:	d915      	bls.n	40335c <strstr+0x1c0>
  403330:	eb08 0205 	add.w	r2, r8, r5
  403334:	f816 3008 	ldrb.w	r3, [r6, r8]
  403338:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40333c:	4298      	cmp	r0, r3
  40333e:	445a      	add	r2, fp
  403340:	eb06 0108 	add.w	r1, r6, r8
  403344:	4643      	mov	r3, r8
  403346:	d006      	beq.n	403356 <strstr+0x1ba>
  403348:	e023      	b.n	403392 <strstr+0x1f6>
  40334a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40334e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403352:	4586      	cmp	lr, r0
  403354:	d11d      	bne.n	403392 <strstr+0x1f6>
  403356:	3301      	adds	r3, #1
  403358:	429c      	cmp	r4, r3
  40335a:	d1f6      	bne.n	40334a <strstr+0x1ae>
  40335c:	f1b9 3fff 	cmp.w	r9, #4294967295
  403360:	d012      	beq.n	403388 <strstr+0x1ec>
  403362:	eb05 0209 	add.w	r2, r5, r9
  403366:	f89a 3000 	ldrb.w	r3, [sl]
  40336a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40336e:	4299      	cmp	r1, r3
  403370:	445a      	add	r2, fp
  403372:	d114      	bne.n	40339e <strstr+0x202>
  403374:	4653      	mov	r3, sl
  403376:	e005      	b.n	403384 <strstr+0x1e8>
  403378:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40337c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403380:	4288      	cmp	r0, r1
  403382:	d10c      	bne.n	40339e <strstr+0x202>
  403384:	42b3      	cmp	r3, r6
  403386:	d1f7      	bne.n	403378 <strstr+0x1dc>
  403388:	465f      	mov	r7, fp
  40338a:	1978      	adds	r0, r7, r5
  40338c:	b005      	add	sp, #20
  40338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403392:	f1c8 0201 	rsb	r2, r8, #1
  403396:	4415      	add	r5, r2
  403398:	441d      	add	r5, r3
  40339a:	4638      	mov	r0, r7
  40339c:	e7ba      	b.n	403314 <strstr+0x178>
  40339e:	9b03      	ldr	r3, [sp, #12]
  4033a0:	4638      	mov	r0, r7
  4033a2:	441d      	add	r5, r3
  4033a4:	e7b6      	b.n	403314 <strstr+0x178>
  4033a6:	780b      	ldrb	r3, [r1, #0]
  4033a8:	b913      	cbnz	r3, 4033b0 <strstr+0x214>
  4033aa:	4770      	bx	lr
  4033ac:	4641      	mov	r1, r8
  4033ae:	e790      	b.n	4032d2 <strstr+0x136>
  4033b0:	2000      	movs	r0, #0
  4033b2:	4770      	bx	lr

004033b4 <register_fini>:
  4033b4:	4b02      	ldr	r3, [pc, #8]	; (4033c0 <register_fini+0xc>)
  4033b6:	b113      	cbz	r3, 4033be <register_fini+0xa>
  4033b8:	4802      	ldr	r0, [pc, #8]	; (4033c4 <register_fini+0x10>)
  4033ba:	f000 b805 	b.w	4033c8 <atexit>
  4033be:	4770      	bx	lr
  4033c0:	00000000 	.word	0x00000000
  4033c4:	004033d5 	.word	0x004033d5

004033c8 <atexit>:
  4033c8:	2300      	movs	r3, #0
  4033ca:	4601      	mov	r1, r0
  4033cc:	461a      	mov	r2, r3
  4033ce:	4618      	mov	r0, r3
  4033d0:	f000 b912 	b.w	4035f8 <__register_exitproc>

004033d4 <__libc_fini_array>:
  4033d4:	b538      	push	{r3, r4, r5, lr}
  4033d6:	4c0a      	ldr	r4, [pc, #40]	; (403400 <__libc_fini_array+0x2c>)
  4033d8:	4d0a      	ldr	r5, [pc, #40]	; (403404 <__libc_fini_array+0x30>)
  4033da:	1b64      	subs	r4, r4, r5
  4033dc:	10a4      	asrs	r4, r4, #2
  4033de:	d00a      	beq.n	4033f6 <__libc_fini_array+0x22>
  4033e0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4033e4:	3b01      	subs	r3, #1
  4033e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4033ea:	3c01      	subs	r4, #1
  4033ec:	f855 3904 	ldr.w	r3, [r5], #-4
  4033f0:	4798      	blx	r3
  4033f2:	2c00      	cmp	r4, #0
  4033f4:	d1f9      	bne.n	4033ea <__libc_fini_array+0x16>
  4033f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4033fa:	f000 ba3b 	b.w	403874 <_fini>
  4033fe:	bf00      	nop
  403400:	00403884 	.word	0x00403884
  403404:	00403880 	.word	0x00403880

00403408 <__retarget_lock_acquire_recursive>:
  403408:	4770      	bx	lr
  40340a:	bf00      	nop

0040340c <__retarget_lock_release_recursive>:
  40340c:	4770      	bx	lr
  40340e:	bf00      	nop

00403410 <memchr>:
  403410:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403414:	2a10      	cmp	r2, #16
  403416:	db2b      	blt.n	403470 <memchr+0x60>
  403418:	f010 0f07 	tst.w	r0, #7
  40341c:	d008      	beq.n	403430 <memchr+0x20>
  40341e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403422:	3a01      	subs	r2, #1
  403424:	428b      	cmp	r3, r1
  403426:	d02d      	beq.n	403484 <memchr+0x74>
  403428:	f010 0f07 	tst.w	r0, #7
  40342c:	b342      	cbz	r2, 403480 <memchr+0x70>
  40342e:	d1f6      	bne.n	40341e <memchr+0xe>
  403430:	b4f0      	push	{r4, r5, r6, r7}
  403432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403436:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40343a:	f022 0407 	bic.w	r4, r2, #7
  40343e:	f07f 0700 	mvns.w	r7, #0
  403442:	2300      	movs	r3, #0
  403444:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403448:	3c08      	subs	r4, #8
  40344a:	ea85 0501 	eor.w	r5, r5, r1
  40344e:	ea86 0601 	eor.w	r6, r6, r1
  403452:	fa85 f547 	uadd8	r5, r5, r7
  403456:	faa3 f587 	sel	r5, r3, r7
  40345a:	fa86 f647 	uadd8	r6, r6, r7
  40345e:	faa5 f687 	sel	r6, r5, r7
  403462:	b98e      	cbnz	r6, 403488 <memchr+0x78>
  403464:	d1ee      	bne.n	403444 <memchr+0x34>
  403466:	bcf0      	pop	{r4, r5, r6, r7}
  403468:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40346c:	f002 0207 	and.w	r2, r2, #7
  403470:	b132      	cbz	r2, 403480 <memchr+0x70>
  403472:	f810 3b01 	ldrb.w	r3, [r0], #1
  403476:	3a01      	subs	r2, #1
  403478:	ea83 0301 	eor.w	r3, r3, r1
  40347c:	b113      	cbz	r3, 403484 <memchr+0x74>
  40347e:	d1f8      	bne.n	403472 <memchr+0x62>
  403480:	2000      	movs	r0, #0
  403482:	4770      	bx	lr
  403484:	3801      	subs	r0, #1
  403486:	4770      	bx	lr
  403488:	2d00      	cmp	r5, #0
  40348a:	bf06      	itte	eq
  40348c:	4635      	moveq	r5, r6
  40348e:	3803      	subeq	r0, #3
  403490:	3807      	subne	r0, #7
  403492:	f015 0f01 	tst.w	r5, #1
  403496:	d107      	bne.n	4034a8 <memchr+0x98>
  403498:	3001      	adds	r0, #1
  40349a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40349e:	bf02      	ittt	eq
  4034a0:	3001      	addeq	r0, #1
  4034a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4034a6:	3001      	addeq	r0, #1
  4034a8:	bcf0      	pop	{r4, r5, r6, r7}
  4034aa:	3801      	subs	r0, #1
  4034ac:	4770      	bx	lr
  4034ae:	bf00      	nop

004034b0 <memcmp>:
  4034b0:	2a03      	cmp	r2, #3
  4034b2:	b470      	push	{r4, r5, r6}
  4034b4:	d922      	bls.n	4034fc <memcmp+0x4c>
  4034b6:	ea40 0301 	orr.w	r3, r0, r1
  4034ba:	079b      	lsls	r3, r3, #30
  4034bc:	d011      	beq.n	4034e2 <memcmp+0x32>
  4034be:	7803      	ldrb	r3, [r0, #0]
  4034c0:	780c      	ldrb	r4, [r1, #0]
  4034c2:	42a3      	cmp	r3, r4
  4034c4:	d11d      	bne.n	403502 <memcmp+0x52>
  4034c6:	440a      	add	r2, r1
  4034c8:	3101      	adds	r1, #1
  4034ca:	e005      	b.n	4034d8 <memcmp+0x28>
  4034cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4034d0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4034d4:	42a3      	cmp	r3, r4
  4034d6:	d114      	bne.n	403502 <memcmp+0x52>
  4034d8:	4291      	cmp	r1, r2
  4034da:	d1f7      	bne.n	4034cc <memcmp+0x1c>
  4034dc:	2000      	movs	r0, #0
  4034de:	bc70      	pop	{r4, r5, r6}
  4034e0:	4770      	bx	lr
  4034e2:	680d      	ldr	r5, [r1, #0]
  4034e4:	6806      	ldr	r6, [r0, #0]
  4034e6:	42ae      	cmp	r6, r5
  4034e8:	460c      	mov	r4, r1
  4034ea:	4603      	mov	r3, r0
  4034ec:	f101 0104 	add.w	r1, r1, #4
  4034f0:	f100 0004 	add.w	r0, r0, #4
  4034f4:	d108      	bne.n	403508 <memcmp+0x58>
  4034f6:	3a04      	subs	r2, #4
  4034f8:	2a03      	cmp	r2, #3
  4034fa:	d8f2      	bhi.n	4034e2 <memcmp+0x32>
  4034fc:	2a00      	cmp	r2, #0
  4034fe:	d1de      	bne.n	4034be <memcmp+0xe>
  403500:	e7ec      	b.n	4034dc <memcmp+0x2c>
  403502:	1b18      	subs	r0, r3, r4
  403504:	bc70      	pop	{r4, r5, r6}
  403506:	4770      	bx	lr
  403508:	4621      	mov	r1, r4
  40350a:	4618      	mov	r0, r3
  40350c:	e7d7      	b.n	4034be <memcmp+0xe>
  40350e:	bf00      	nop

00403510 <strchr>:
  403510:	b2c9      	uxtb	r1, r1
  403512:	2900      	cmp	r1, #0
  403514:	d041      	beq.n	40359a <strchr+0x8a>
  403516:	0782      	lsls	r2, r0, #30
  403518:	b4f0      	push	{r4, r5, r6, r7}
  40351a:	d067      	beq.n	4035ec <strchr+0xdc>
  40351c:	7803      	ldrb	r3, [r0, #0]
  40351e:	2b00      	cmp	r3, #0
  403520:	d068      	beq.n	4035f4 <strchr+0xe4>
  403522:	4299      	cmp	r1, r3
  403524:	d037      	beq.n	403596 <strchr+0x86>
  403526:	1c43      	adds	r3, r0, #1
  403528:	e004      	b.n	403534 <strchr+0x24>
  40352a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40352e:	b390      	cbz	r0, 403596 <strchr+0x86>
  403530:	4281      	cmp	r1, r0
  403532:	d02f      	beq.n	403594 <strchr+0x84>
  403534:	079a      	lsls	r2, r3, #30
  403536:	461c      	mov	r4, r3
  403538:	d1f7      	bne.n	40352a <strchr+0x1a>
  40353a:	6825      	ldr	r5, [r4, #0]
  40353c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  403540:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  403544:	ea83 0605 	eor.w	r6, r3, r5
  403548:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40354c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  403550:	ea20 0006 	bic.w	r0, r0, r6
  403554:	ea22 0205 	bic.w	r2, r2, r5
  403558:	4302      	orrs	r2, r0
  40355a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40355e:	d111      	bne.n	403584 <strchr+0x74>
  403560:	4620      	mov	r0, r4
  403562:	f850 6f04 	ldr.w	r6, [r0, #4]!
  403566:	ea83 0706 	eor.w	r7, r3, r6
  40356a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40356e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  403572:	ea25 0507 	bic.w	r5, r5, r7
  403576:	ea22 0206 	bic.w	r2, r2, r6
  40357a:	432a      	orrs	r2, r5
  40357c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403580:	d0ef      	beq.n	403562 <strchr+0x52>
  403582:	4604      	mov	r4, r0
  403584:	7820      	ldrb	r0, [r4, #0]
  403586:	b918      	cbnz	r0, 403590 <strchr+0x80>
  403588:	e005      	b.n	403596 <strchr+0x86>
  40358a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40358e:	b110      	cbz	r0, 403596 <strchr+0x86>
  403590:	4281      	cmp	r1, r0
  403592:	d1fa      	bne.n	40358a <strchr+0x7a>
  403594:	4620      	mov	r0, r4
  403596:	bcf0      	pop	{r4, r5, r6, r7}
  403598:	4770      	bx	lr
  40359a:	0783      	lsls	r3, r0, #30
  40359c:	d024      	beq.n	4035e8 <strchr+0xd8>
  40359e:	7803      	ldrb	r3, [r0, #0]
  4035a0:	2b00      	cmp	r3, #0
  4035a2:	d0f9      	beq.n	403598 <strchr+0x88>
  4035a4:	1c43      	adds	r3, r0, #1
  4035a6:	e003      	b.n	4035b0 <strchr+0xa0>
  4035a8:	7802      	ldrb	r2, [r0, #0]
  4035aa:	3301      	adds	r3, #1
  4035ac:	2a00      	cmp	r2, #0
  4035ae:	d0f3      	beq.n	403598 <strchr+0x88>
  4035b0:	0799      	lsls	r1, r3, #30
  4035b2:	4618      	mov	r0, r3
  4035b4:	d1f8      	bne.n	4035a8 <strchr+0x98>
  4035b6:	6819      	ldr	r1, [r3, #0]
  4035b8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4035bc:	ea22 0201 	bic.w	r2, r2, r1
  4035c0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4035c4:	d108      	bne.n	4035d8 <strchr+0xc8>
  4035c6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4035ca:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4035ce:	ea22 0201 	bic.w	r2, r2, r1
  4035d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4035d6:	d0f6      	beq.n	4035c6 <strchr+0xb6>
  4035d8:	781a      	ldrb	r2, [r3, #0]
  4035da:	4618      	mov	r0, r3
  4035dc:	b142      	cbz	r2, 4035f0 <strchr+0xe0>
  4035de:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4035e2:	2b00      	cmp	r3, #0
  4035e4:	d1fb      	bne.n	4035de <strchr+0xce>
  4035e6:	4770      	bx	lr
  4035e8:	4603      	mov	r3, r0
  4035ea:	e7e4      	b.n	4035b6 <strchr+0xa6>
  4035ec:	4604      	mov	r4, r0
  4035ee:	e7a4      	b.n	40353a <strchr+0x2a>
  4035f0:	4618      	mov	r0, r3
  4035f2:	4770      	bx	lr
  4035f4:	4618      	mov	r0, r3
  4035f6:	e7ce      	b.n	403596 <strchr+0x86>

004035f8 <__register_exitproc>:
  4035f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4035fc:	4d2c      	ldr	r5, [pc, #176]	; (4036b0 <__register_exitproc+0xb8>)
  4035fe:	4606      	mov	r6, r0
  403600:	6828      	ldr	r0, [r5, #0]
  403602:	4698      	mov	r8, r3
  403604:	460f      	mov	r7, r1
  403606:	4691      	mov	r9, r2
  403608:	f7ff fefe 	bl	403408 <__retarget_lock_acquire_recursive>
  40360c:	4b29      	ldr	r3, [pc, #164]	; (4036b4 <__register_exitproc+0xbc>)
  40360e:	681c      	ldr	r4, [r3, #0]
  403610:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403614:	2b00      	cmp	r3, #0
  403616:	d03e      	beq.n	403696 <__register_exitproc+0x9e>
  403618:	685a      	ldr	r2, [r3, #4]
  40361a:	2a1f      	cmp	r2, #31
  40361c:	dc1c      	bgt.n	403658 <__register_exitproc+0x60>
  40361e:	f102 0e01 	add.w	lr, r2, #1
  403622:	b176      	cbz	r6, 403642 <__register_exitproc+0x4a>
  403624:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403628:	2401      	movs	r4, #1
  40362a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40362e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403632:	4094      	lsls	r4, r2
  403634:	4320      	orrs	r0, r4
  403636:	2e02      	cmp	r6, #2
  403638:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40363c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403640:	d023      	beq.n	40368a <__register_exitproc+0x92>
  403642:	3202      	adds	r2, #2
  403644:	f8c3 e004 	str.w	lr, [r3, #4]
  403648:	6828      	ldr	r0, [r5, #0]
  40364a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40364e:	f7ff fedd 	bl	40340c <__retarget_lock_release_recursive>
  403652:	2000      	movs	r0, #0
  403654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403658:	4b17      	ldr	r3, [pc, #92]	; (4036b8 <__register_exitproc+0xc0>)
  40365a:	b30b      	cbz	r3, 4036a0 <__register_exitproc+0xa8>
  40365c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403660:	f3af 8000 	nop.w
  403664:	4603      	mov	r3, r0
  403666:	b1d8      	cbz	r0, 4036a0 <__register_exitproc+0xa8>
  403668:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40366c:	6002      	str	r2, [r0, #0]
  40366e:	2100      	movs	r1, #0
  403670:	6041      	str	r1, [r0, #4]
  403672:	460a      	mov	r2, r1
  403674:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403678:	f04f 0e01 	mov.w	lr, #1
  40367c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403680:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403684:	2e00      	cmp	r6, #0
  403686:	d0dc      	beq.n	403642 <__register_exitproc+0x4a>
  403688:	e7cc      	b.n	403624 <__register_exitproc+0x2c>
  40368a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40368e:	430c      	orrs	r4, r1
  403690:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403694:	e7d5      	b.n	403642 <__register_exitproc+0x4a>
  403696:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40369a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40369e:	e7bb      	b.n	403618 <__register_exitproc+0x20>
  4036a0:	6828      	ldr	r0, [r5, #0]
  4036a2:	f7ff feb3 	bl	40340c <__retarget_lock_release_recursive>
  4036a6:	f04f 30ff 	mov.w	r0, #4294967295
  4036aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4036ae:	bf00      	nop
  4036b0:	20000438 	.word	0x20000438
  4036b4:	0040385c 	.word	0x0040385c
  4036b8:	00000000 	.word	0x00000000
  4036bc:	72617453 	.word	0x72617453
  4036c0:	72742074 	.word	0x72742074
  4036c4:	66736e61 	.word	0x66736e61
  4036c8:	00007265 	.word	0x00007265
  4036cc:	65696c43 	.word	0x65696c43
  4036d0:	6e20746e 	.word	0x6e20746e
  4036d4:	6320746f 	.word	0x6320746f
  4036d8:	656e6e6f 	.word	0x656e6e6f
  4036dc:	64657463 	.word	0x64657463
  4036e0:	00000000 	.word	0x00000000
  4036e4:	6d6d6f43 	.word	0x6d6d6f43
  4036e8:	20646e61 	.word	0x20646e61
  4036ec:	6c696166 	.word	0x6c696166
  4036f0:	00006465 	.word	0x00006465
  4036f4:	656e6f4e 	.word	0x656e6f4e
  4036f8:	00000000 	.word	0x00000000
  4036fc:	0001c200 	.word	0x0001c200
  403700:	000000c0 	.word	0x000000c0
  403704:	00000800 	.word	0x00000800
	...
  403714:	20746573 	.word	0x20746573
  403718:	74737973 	.word	0x74737973
  40371c:	632e6d65 	.word	0x632e6d65
  403720:	652e646d 	.word	0x652e646d
  403724:	206f6863 	.word	0x206f6863
  403728:	0d66666f 	.word	0x0d66666f
  40372c:	0000000a 	.word	0x0000000a
  403730:	20746573 	.word	0x20746573
  403734:	74726175 	.word	0x74726175
  403738:	6f6c662e 	.word	0x6f6c662e
  40373c:	20302077 	.word	0x20302077
  403740:	0a0d6e6f 	.word	0x0a0d6e6f
  403744:	00000000 	.word	0x00000000
  403748:	20746573 	.word	0x20746573
  40374c:	63207562 	.word	0x63207562
  403750:	31207220 	.word	0x31207220
  403754:	30303030 	.word	0x30303030
  403758:	00000a0d 	.word	0x00000a0d
  40375c:	20746573 	.word	0x20746573
  403760:	74737973 	.word	0x74737973
  403764:	692e6d65 	.word	0x692e6d65
  403768:	6369646e 	.word	0x6369646e
  40376c:	726f7461 	.word	0x726f7461
  403770:	6970672e 	.word	0x6970672e
  403774:	6c77206f 	.word	0x6c77206f
  403778:	32206e61 	.word	0x32206e61
  40377c:	000a0d30 	.word	0x000a0d30
  403780:	20746573 	.word	0x20746573
  403784:	74737973 	.word	0x74737973
  403788:	692e6d65 	.word	0x692e6d65
  40378c:	6369646e 	.word	0x6369646e
  403790:	726f7461 	.word	0x726f7461
  403794:	6970672e 	.word	0x6970672e
  403798:	656e206f 	.word	0x656e206f
  40379c:	726f7774 	.word	0x726f7774
  4037a0:	3831206b 	.word	0x3831206b
  4037a4:	00000a0d 	.word	0x00000a0d
  4037a8:	20746573 	.word	0x20746573
  4037ac:	74737973 	.word	0x74737973
  4037b0:	692e6d65 	.word	0x692e6d65
  4037b4:	6369646e 	.word	0x6369646e
  4037b8:	726f7461 	.word	0x726f7461
  4037bc:	6970672e 	.word	0x6970672e
  4037c0:	6f73206f 	.word	0x6f73206f
  4037c4:	70617466 	.word	0x70617466
  4037c8:	0d313220 	.word	0x0d313220
  4037cc:	0000000a 	.word	0x0000000a
  4037d0:	20746573 	.word	0x20746573
  4037d4:	74737973 	.word	0x74737973
  4037d8:	632e6d65 	.word	0x632e6d65
  4037dc:	672e646d 	.word	0x672e646d
  4037e0:	206f6970 	.word	0x206f6970
  4037e4:	0a0d3631 	.word	0x0a0d3631
  4037e8:	00000000 	.word	0x00000000
  4037ec:	20746573 	.word	0x20746573
  4037f0:	6e616c77 	.word	0x6e616c77
  4037f4:	74656e2e 	.word	0x74656e2e
  4037f8:	6b726f77 	.word	0x6b726f77
  4037fc:	6174732e 	.word	0x6174732e
  403800:	5f737574 	.word	0x5f737574
  403804:	6f697067 	.word	0x6f697067
  403808:	0d343120 	.word	0x0d343120
  40380c:	0000000a 	.word	0x0000000a
  403810:	65766173 	.word	0x65766173
  403814:	00000a0d 	.word	0x00000a0d
  403818:	75746573 	.word	0x75746573
  40381c:	65772070 	.word	0x65772070
  403820:	000a0d62 	.word	0x000a0d62
  403824:	706d7562 	.word	0x706d7562
  403828:	00000a0d 	.word	0x00000a0d
  40382c:	20706f66 	.word	0x20706f66
  403830:	74736574 	.word	0x74736574
  403834:	7478742e 	.word	0x7478742e
  403838:	00000a0d 	.word	0x00000a0d
  40383c:	20747366 	.word	0x20747366
  403840:	74736574 	.word	0x74736574
  403844:	7478742e 	.word	0x7478742e
  403848:	00000a0d 	.word	0x00000a0d
  40384c:	64616572 	.word	0x64616572
  403850:	00000020 	.word	0x00000020
  403854:	72746550 	.word	0x72746550
  403858:	00007361 	.word	0x00007361

0040385c <_global_impure_ptr>:
  40385c:	20000010                                ... 

00403860 <_init>:
  403860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403862:	bf00      	nop
  403864:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403866:	bc08      	pop	{r3}
  403868:	469e      	mov	lr, r3
  40386a:	4770      	bx	lr

0040386c <__init_array_start>:
  40386c:	004033b5 	.word	0x004033b5

00403870 <__frame_dummy_init_array_entry>:
  403870:	004000f1                                ..@.

00403874 <_fini>:
  403874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403876:	bf00      	nop
  403878:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40387a:	bc08      	pop	{r3}
  40387c:	469e      	mov	lr, r3
  40387e:	4770      	bx	lr

00403880 <__fini_array_start>:
  403880:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	8fb4 2001                                   ... 
