
NetworkedProgrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001958  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00401958  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000504  2000043c  00401d94  0002043c  2**2
                  ALLOC
  3 .stack        00003000  20000940  00402298  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  6 .debug_info   000110dd  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026f0  00000000  00000000  0003159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003c59  00000000  00000000  00033c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008c0  00000000  00000000  000378e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000828  00000000  00000000  000381a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005680  00000000  00000000  000389cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b295  00000000  00000000  0003e04d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004c75a  00000000  00000000  000492e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001564  00000000  00000000  00095a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 39 00 20 29 0d 40 00 25 0d 40 00 25 0d 40 00     @9. ).@.%.@.%.@.
  400010:	25 0d 40 00 25 0d 40 00 25 0d 40 00 00 00 00 00     %.@.%.@.%.@.....
	...
  40002c:	25 0d 40 00 25 0d 40 00 00 00 00 00 25 0d 40 00     %.@.%.@.....%.@.
  40003c:	25 0d 40 00 25 0d 40 00 25 0d 40 00 25 0d 40 00     %.@.%.@.%.@.%.@.
  40004c:	25 0d 40 00 25 0d 40 00 25 0d 40 00 25 0d 40 00     %.@.%.@.%.@.%.@.
  40005c:	00 00 00 00 25 0d 40 00 25 0d 40 00 00 00 00 00     ....%.@.%.@.....
  40006c:	11 02 40 00 25 02 40 00 00 00 00 00 6d 04 40 00     ..@.%.@.....m.@.
  40007c:	25 0d 40 00 00 00 00 00 00 00 00 00 25 0d 40 00     %.@.........%.@.
  40008c:	25 0d 40 00 25 0d 40 00 25 0d 40 00 25 0d 40 00     %.@.%.@.%.@.%.@.
  40009c:	a5 03 40 00 25 0d 40 00 25 0d 40 00 00 00 00 00     ..@.%.@.%.@.....
	...
  4000b4:	25 0d 40 00 25 0d 40 00 25 0d 40 00 25 0d 40 00     %.@.%.@.%.@.%.@.
  4000c4:	25 0d 40 00 25 0d 40 00                             %.@.%.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00401958 	.word	0x00401958

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00401958 	.word	0x00401958
  40012c:	20000440 	.word	0x20000440
  400130:	00401958 	.word	0x00401958
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40013c:	4681      	mov	r9, r0
  40013e:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400140:	4b12      	ldr	r3, [pc, #72]	; (40018c <pio_handler_process+0x54>)
  400142:	4798      	blx	r3
  400144:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400146:	4648      	mov	r0, r9
  400148:	4b11      	ldr	r3, [pc, #68]	; (400190 <pio_handler_process+0x58>)
  40014a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40014c:	4005      	ands	r5, r0
  40014e:	d013      	beq.n	400178 <pio_handler_process+0x40>
  400150:	4c10      	ldr	r4, [pc, #64]	; (400194 <pio_handler_process+0x5c>)
  400152:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400156:	e003      	b.n	400160 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400158:	42b4      	cmp	r4, r6
  40015a:	d00d      	beq.n	400178 <pio_handler_process+0x40>
  40015c:	3410      	adds	r4, #16
		while (status != 0) {
  40015e:	b15d      	cbz	r5, 400178 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400160:	6820      	ldr	r0, [r4, #0]
  400162:	42b8      	cmp	r0, r7
  400164:	d1f8      	bne.n	400158 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400166:	6861      	ldr	r1, [r4, #4]
  400168:	4229      	tst	r1, r5
  40016a:	d0f5      	beq.n	400158 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40016c:	68e3      	ldr	r3, [r4, #12]
  40016e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400170:	6863      	ldr	r3, [r4, #4]
  400172:	ea25 0503 	bic.w	r5, r5, r3
  400176:	e7ef      	b.n	400158 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400178:	4b07      	ldr	r3, [pc, #28]	; (400198 <pio_handler_process+0x60>)
  40017a:	681b      	ldr	r3, [r3, #0]
  40017c:	b123      	cbz	r3, 400188 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40017e:	4b07      	ldr	r3, [pc, #28]	; (40019c <pio_handler_process+0x64>)
  400180:	681b      	ldr	r3, [r3, #0]
  400182:	b10b      	cbz	r3, 400188 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400184:	4648      	mov	r0, r9
  400186:	4798      	blx	r3
  400188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40018c:	004009d5 	.word	0x004009d5
  400190:	004009d9 	.word	0x004009d9
  400194:	20000458 	.word	0x20000458
  400198:	20000918 	.word	0x20000918
  40019c:	200004cc 	.word	0x200004cc

004001a0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4001a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4001a2:	4c18      	ldr	r4, [pc, #96]	; (400204 <pio_handler_set+0x64>)
  4001a4:	6826      	ldr	r6, [r4, #0]
  4001a6:	2e06      	cmp	r6, #6
  4001a8:	d829      	bhi.n	4001fe <pio_handler_set+0x5e>
  4001aa:	f04f 0c00 	mov.w	ip, #0
  4001ae:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4001b0:	4f15      	ldr	r7, [pc, #84]	; (400208 <pio_handler_set+0x68>)
  4001b2:	e004      	b.n	4001be <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4001b4:	3401      	adds	r4, #1
  4001b6:	b2e4      	uxtb	r4, r4
  4001b8:	46a4      	mov	ip, r4
  4001ba:	42a6      	cmp	r6, r4
  4001bc:	d309      	bcc.n	4001d2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4001be:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4001c0:	0125      	lsls	r5, r4, #4
  4001c2:	597d      	ldr	r5, [r7, r5]
  4001c4:	428d      	cmp	r5, r1
  4001c6:	d1f5      	bne.n	4001b4 <pio_handler_set+0x14>
  4001c8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4001cc:	686d      	ldr	r5, [r5, #4]
  4001ce:	4295      	cmp	r5, r2
  4001d0:	d1f0      	bne.n	4001b4 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4001d2:	4d0d      	ldr	r5, [pc, #52]	; (400208 <pio_handler_set+0x68>)
  4001d4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4001d8:	eb05 040e 	add.w	r4, r5, lr
  4001dc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4001e0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4001e2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4001e4:	9906      	ldr	r1, [sp, #24]
  4001e6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4001e8:	3601      	adds	r6, #1
  4001ea:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4001ec:	bf04      	itt	eq
  4001ee:	4905      	ldreq	r1, [pc, #20]	; (400204 <pio_handler_set+0x64>)
  4001f0:	600e      	streq	r6, [r1, #0]
  4001f2:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4001f4:	461a      	mov	r2, r3
  4001f6:	4b05      	ldr	r3, [pc, #20]	; (40020c <pio_handler_set+0x6c>)
  4001f8:	4798      	blx	r3

	return 0;
  4001fa:	2000      	movs	r0, #0
  4001fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4001fe:	2001      	movs	r0, #1
}
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	200004c8 	.word	0x200004c8
  400208:	20000458 	.word	0x20000458
  40020c:	004009a3 	.word	0x004009a3

00400210 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400210:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400212:	210b      	movs	r1, #11
  400214:	4801      	ldr	r0, [pc, #4]	; (40021c <PIOA_Handler+0xc>)
  400216:	4b02      	ldr	r3, [pc, #8]	; (400220 <PIOA_Handler+0x10>)
  400218:	4798      	blx	r3
  40021a:	bd08      	pop	{r3, pc}
  40021c:	400e0e00 	.word	0x400e0e00
  400220:	00400139 	.word	0x00400139

00400224 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400224:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400226:	210c      	movs	r1, #12
  400228:	4801      	ldr	r0, [pc, #4]	; (400230 <PIOB_Handler+0xc>)
  40022a:	4b02      	ldr	r3, [pc, #8]	; (400234 <PIOB_Handler+0x10>)
  40022c:	4798      	blx	r3
  40022e:	bd08      	pop	{r3, pc}
  400230:	400e1000 	.word	0x400e1000
  400234:	00400139 	.word	0x00400139

00400238 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400238:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40023a:	010b      	lsls	r3, r1, #4
  40023c:	4293      	cmp	r3, r2
  40023e:	d914      	bls.n	40026a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400240:	00c9      	lsls	r1, r1, #3
  400242:	084b      	lsrs	r3, r1, #1
  400244:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400248:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40024c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40024e:	1e5c      	subs	r4, r3, #1
  400250:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400254:	428c      	cmp	r4, r1
  400256:	d901      	bls.n	40025c <usart_set_async_baudrate+0x24>
		return 1;
  400258:	2001      	movs	r0, #1
  40025a:	e017      	b.n	40028c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40025c:	6841      	ldr	r1, [r0, #4]
  40025e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400262:	6041      	str	r1, [r0, #4]
  400264:	e00c      	b.n	400280 <usart_set_async_baudrate+0x48>
		return 1;
  400266:	2001      	movs	r0, #1
  400268:	e010      	b.n	40028c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40026a:	0859      	lsrs	r1, r3, #1
  40026c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400270:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400274:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400276:	1e5c      	subs	r4, r3, #1
  400278:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40027c:	428c      	cmp	r4, r1
  40027e:	d8f2      	bhi.n	400266 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400280:	0412      	lsls	r2, r2, #16
  400282:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400286:	431a      	orrs	r2, r3
  400288:	6202      	str	r2, [r0, #32]

	return 0;
  40028a:	2000      	movs	r0, #0
}
  40028c:	bc10      	pop	{r4}
  40028e:	4770      	bx	lr

00400290 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400290:	4b0a      	ldr	r3, [pc, #40]	; (4002bc <usart_reset+0x2c>)
  400292:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400296:	2300      	movs	r3, #0
  400298:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40029a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40029c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40029e:	2388      	movs	r3, #136	; 0x88
  4002a0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4002a2:	2324      	movs	r3, #36	; 0x24
  4002a4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4002a6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4002aa:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4002ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4002b0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
  4002b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4002b6:	6003      	str	r3, [r0, #0]
  4002b8:	4770      	bx	lr
  4002ba:	bf00      	nop
  4002bc:	55534100 	.word	0x55534100

004002c0 <usart_init_rs232>:
{
  4002c0:	b570      	push	{r4, r5, r6, lr}
  4002c2:	4605      	mov	r5, r0
  4002c4:	460c      	mov	r4, r1
  4002c6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4002c8:	4b0f      	ldr	r3, [pc, #60]	; (400308 <usart_init_rs232+0x48>)
  4002ca:	4798      	blx	r3
	ul_reg_val = 0;
  4002cc:	2200      	movs	r2, #0
  4002ce:	4b0f      	ldr	r3, [pc, #60]	; (40030c <usart_init_rs232+0x4c>)
  4002d0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002d2:	b1a4      	cbz	r4, 4002fe <usart_init_rs232+0x3e>
  4002d4:	4632      	mov	r2, r6
  4002d6:	6821      	ldr	r1, [r4, #0]
  4002d8:	4628      	mov	r0, r5
  4002da:	4b0d      	ldr	r3, [pc, #52]	; (400310 <usart_init_rs232+0x50>)
  4002dc:	4798      	blx	r3
  4002de:	4602      	mov	r2, r0
  4002e0:	b978      	cbnz	r0, 400302 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002e2:	6863      	ldr	r3, [r4, #4]
  4002e4:	68a1      	ldr	r1, [r4, #8]
  4002e6:	430b      	orrs	r3, r1
  4002e8:	6921      	ldr	r1, [r4, #16]
  4002ea:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002ec:	68e1      	ldr	r1, [r4, #12]
  4002ee:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002f0:	4906      	ldr	r1, [pc, #24]	; (40030c <usart_init_rs232+0x4c>)
  4002f2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4002f4:	6869      	ldr	r1, [r5, #4]
  4002f6:	430b      	orrs	r3, r1
  4002f8:	606b      	str	r3, [r5, #4]
}
  4002fa:	4610      	mov	r0, r2
  4002fc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4002fe:	2201      	movs	r2, #1
  400300:	e7fb      	b.n	4002fa <usart_init_rs232+0x3a>
  400302:	2201      	movs	r2, #1
  400304:	e7f9      	b.n	4002fa <usart_init_rs232+0x3a>
  400306:	bf00      	nop
  400308:	00400291 	.word	0x00400291
  40030c:	200004d0 	.word	0x200004d0
  400310:	00400239 	.word	0x00400239

00400314 <usart_init_hw_handshaking>:
{
  400314:	b510      	push	{r4, lr}
  400316:	4604      	mov	r4, r0
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400318:	4b06      	ldr	r3, [pc, #24]	; (400334 <usart_init_hw_handshaking+0x20>)
  40031a:	4798      	blx	r3
  40031c:	b940      	cbnz	r0, 400330 <usart_init_hw_handshaking+0x1c>
  40031e:	4602      	mov	r2, r0
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400320:	6863      	ldr	r3, [r4, #4]
  400322:	f023 030f 	bic.w	r3, r3, #15
  400326:	f043 0302 	orr.w	r3, r3, #2
  40032a:	6063      	str	r3, [r4, #4]
}
  40032c:	4610      	mov	r0, r2
  40032e:	bd10      	pop	{r4, pc}
		return 1;
  400330:	2201      	movs	r2, #1
  400332:	e7fb      	b.n	40032c <usart_init_hw_handshaking+0x18>
  400334:	004002c1 	.word	0x004002c1

00400338 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400338:	2340      	movs	r3, #64	; 0x40
  40033a:	6003      	str	r3, [r0, #0]
  40033c:	4770      	bx	lr

0040033e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40033e:	2310      	movs	r3, #16
  400340:	6003      	str	r3, [r0, #0]
  400342:	4770      	bx	lr

00400344 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  400344:	6081      	str	r1, [r0, #8]
  400346:	4770      	bx	lr

00400348 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
  400348:	60c1      	str	r1, [r0, #12]
  40034a:	4770      	bx	lr

0040034c <usart_get_status>:
	return p_usart->US_CSR;
  40034c:	6940      	ldr	r0, [r0, #20]
}
  40034e:	4770      	bx	lr

00400350 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400350:	6943      	ldr	r3, [r0, #20]
  400352:	f013 0f02 	tst.w	r3, #2
  400356:	d0fb      	beq.n	400350 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
  400358:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40035c:	61c1      	str	r1, [r0, #28]
}
  40035e:	2000      	movs	r0, #0
  400360:	4770      	bx	lr
	...

00400364 <usart_write_line>:
{
  400364:	b570      	push	{r4, r5, r6, lr}
  400366:	460c      	mov	r4, r1
	while (*string != '\0') {
  400368:	7809      	ldrb	r1, [r1, #0]
  40036a:	b139      	cbz	r1, 40037c <usart_write_line+0x18>
  40036c:	4605      	mov	r5, r0
		usart_putchar(p_usart, *string++);
  40036e:	4e04      	ldr	r6, [pc, #16]	; (400380 <usart_write_line+0x1c>)
  400370:	4628      	mov	r0, r5
  400372:	47b0      	blx	r6
	while (*string != '\0') {
  400374:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  400378:	2900      	cmp	r1, #0
  40037a:	d1f9      	bne.n	400370 <usart_write_line+0xc>
  40037c:	bd70      	pop	{r4, r5, r6, pc}
  40037e:	bf00      	nop
  400380:	00400351 	.word	0x00400351

00400384 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400384:	6943      	ldr	r3, [r0, #20]
  400386:	f013 0f01 	tst.w	r3, #1
  40038a:	d005      	beq.n	400398 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40038c:	6983      	ldr	r3, [r0, #24]
  40038e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400392:	600b      	str	r3, [r1, #0]
	return 0;
  400394:	2000      	movs	r0, #0
  400396:	4770      	bx	lr
		return 1;
  400398:	2001      	movs	r0, #1
}
  40039a:	4770      	bx	lr

0040039c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40039c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003a0:	6043      	str	r3, [r0, #4]
  4003a2:	4770      	bx	lr

004003a4 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4003a4:	b508      	push	{r3, lr}
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  4003a6:	2100      	movs	r1, #0
  4003a8:	4805      	ldr	r0, [pc, #20]	; (4003c0 <TC0_Handler+0x1c>)
  4003aa:	4b06      	ldr	r3, [pc, #24]	; (4003c4 <TC0_Handler+0x20>)
  4003ac:	4798      	blx	r3

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4003ae:	f010 0f10 	tst.w	r0, #16
  4003b2:	d004      	beq.n	4003be <TC0_Handler+0x1a>
		counts++;
  4003b4:	4a04      	ldr	r2, [pc, #16]	; (4003c8 <TC0_Handler+0x24>)
  4003b6:	7813      	ldrb	r3, [r2, #0]
  4003b8:	3301      	adds	r3, #1
  4003ba:	b2db      	uxtb	r3, r3
  4003bc:	7013      	strb	r3, [r2, #0]
  4003be:	bd08      	pop	{r3, pc}
  4003c0:	40010000 	.word	0x40010000
  4003c4:	00400c69 	.word	0x00400c69
  4003c8:	200004d4 	.word	0x200004d4

004003cc <configure_tc>:
	}
}

void configure_tc(void)
{
  4003cc:	b530      	push	{r4, r5, lr}
  4003ce:	b085      	sub	sp, #20

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  4003d0:	2017      	movs	r0, #23
  4003d2:	4b14      	ldr	r3, [pc, #80]	; (400424 <configure_tc+0x58>)
  4003d4:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4003d6:	4d14      	ldr	r5, [pc, #80]	; (400428 <configure_tc+0x5c>)
  4003d8:	9500      	str	r5, [sp, #0]
  4003da:	ab02      	add	r3, sp, #8
  4003dc:	aa03      	add	r2, sp, #12
  4003de:	4629      	mov	r1, r5
  4003e0:	2001      	movs	r0, #1
  4003e2:	4c12      	ldr	r4, [pc, #72]	; (40042c <configure_tc+0x60>)
  4003e4:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4003e6:	4c12      	ldr	r4, [pc, #72]	; (400430 <configure_tc+0x64>)
  4003e8:	9a02      	ldr	r2, [sp, #8]
  4003ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4003ee:	2100      	movs	r1, #0
  4003f0:	4620      	mov	r0, r4
  4003f2:	4b10      	ldr	r3, [pc, #64]	; (400434 <configure_tc+0x68>)
  4003f4:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  4003f6:	9a03      	ldr	r2, [sp, #12]
  4003f8:	fbb5 f2f2 	udiv	r2, r5, r2
  4003fc:	2100      	movs	r1, #0
  4003fe:	4620      	mov	r0, r4
  400400:	4b0d      	ldr	r3, [pc, #52]	; (400438 <configure_tc+0x6c>)
  400402:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400404:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400408:	4b0c      	ldr	r3, [pc, #48]	; (40043c <configure_tc+0x70>)
  40040a:	601a      	str	r2, [r3, #0]

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40040c:	2210      	movs	r2, #16
  40040e:	2100      	movs	r1, #0
  400410:	4620      	mov	r0, r4
  400412:	4b0b      	ldr	r3, [pc, #44]	; (400440 <configure_tc+0x74>)
  400414:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  400416:	2100      	movs	r1, #0
  400418:	4620      	mov	r0, r4
  40041a:	4b0a      	ldr	r3, [pc, #40]	; (400444 <configure_tc+0x78>)
  40041c:	4798      	blx	r3
  40041e:	b005      	add	sp, #20
  400420:	bd30      	pop	{r4, r5, pc}
  400422:	bf00      	nop
  400424:	00400be5 	.word	0x00400be5
  400428:	07270e00 	.word	0x07270e00
  40042c:	00400c71 	.word	0x00400c71
  400430:	40010000 	.word	0x40010000
  400434:	00400c39 	.word	0x00400c39
  400438:	00400c59 	.word	0x00400c59
  40043c:	e000e100 	.word	0xe000e100
  400440:	00400c61 	.word	0x00400c61
  400444:	00400c51 	.word	0x00400c51

00400448 <wifi_web_setup_handler>:
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask) 
{
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  400448:	2201      	movs	r2, #1
  40044a:	4b01      	ldr	r3, [pc, #4]	; (400450 <wifi_web_setup_handler+0x8>)
  40044c:	701a      	strb	r2, [r3, #0]
  40044e:	4770      	bx	lr
  400450:	200004ec 	.word	0x200004ec

00400454 <process_incoming_byte_wifi>:
	buffer_wifi[input_pos_wifi] = in_byte;
  400454:	4b03      	ldr	r3, [pc, #12]	; (400464 <process_incoming_byte_wifi+0x10>)
  400456:	681a      	ldr	r2, [r3, #0]
  400458:	4903      	ldr	r1, [pc, #12]	; (400468 <process_incoming_byte_wifi+0x14>)
  40045a:	5488      	strb	r0, [r1, r2]
	input_pos_wifi++;
  40045c:	681a      	ldr	r2, [r3, #0]
  40045e:	3201      	adds	r2, #1
  400460:	601a      	str	r2, [r3, #0]
  400462:	4770      	bx	lr
  400464:	200004d8 	.word	0x200004d8
  400468:	2000052c 	.word	0x2000052c

0040046c <USART0_Handler>:
{
  40046c:	b510      	push	{r4, lr}
	ul_status = usart_get_status(BOARD_USART);
  40046e:	480a      	ldr	r0, [pc, #40]	; (400498 <USART0_Handler+0x2c>)
  400470:	4b0a      	ldr	r3, [pc, #40]	; (40049c <USART0_Handler+0x30>)
  400472:	4798      	blx	r3
	if (ul_status & US_CSR_RXBUFF) {
  400474:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  400478:	d100      	bne.n	40047c <USART0_Handler+0x10>
  40047a:	bd10      	pop	{r4, pc}
		usart_read(BOARD_USART, &received_byte_wifi);
  40047c:	4c08      	ldr	r4, [pc, #32]	; (4004a0 <USART0_Handler+0x34>)
  40047e:	4621      	mov	r1, r4
  400480:	4805      	ldr	r0, [pc, #20]	; (400498 <USART0_Handler+0x2c>)
  400482:	4b08      	ldr	r3, [pc, #32]	; (4004a4 <USART0_Handler+0x38>)
  400484:	4798      	blx	r3
		new_rx_wifi = true;
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <USART0_Handler+0x3c>)
  40048a:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  40048c:	6820      	ldr	r0, [r4, #0]
  40048e:	b2c0      	uxtb	r0, r0
  400490:	4b06      	ldr	r3, [pc, #24]	; (4004ac <USART0_Handler+0x40>)
  400492:	4798      	blx	r3
}
  400494:	e7f1      	b.n	40047a <USART0_Handler+0xe>
  400496:	bf00      	nop
  400498:	40024000 	.word	0x40024000
  40049c:	0040034d 	.word	0x0040034d
  4004a0:	200004e4 	.word	0x200004e4
  4004a4:	00400385 	.word	0x00400385
  4004a8:	200004dc 	.word	0x200004dc
  4004ac:	00400455 	.word	0x00400455

004004b0 <process_data_wifi>:
{
  4004b0:	b510      	push	{r4, lr}
	strcpy(rawRecievedMessage,buffer_wifi);
  4004b2:	4c17      	ldr	r4, [pc, #92]	; (400510 <process_data_wifi+0x60>)
  4004b4:	4621      	mov	r1, r4
  4004b6:	4817      	ldr	r0, [pc, #92]	; (400514 <process_data_wifi+0x64>)
  4004b8:	4b17      	ldr	r3, [pc, #92]	; (400518 <process_data_wifi+0x68>)
  4004ba:	4798      	blx	r3
	if(strstr(buffer_wifi,msg_START_TRANSFER)){
  4004bc:	4917      	ldr	r1, [pc, #92]	; (40051c <process_data_wifi+0x6c>)
  4004be:	4620      	mov	r0, r4
  4004c0:	4b17      	ldr	r3, [pc, #92]	; (400520 <process_data_wifi+0x70>)
  4004c2:	4798      	blx	r3
  4004c4:	b118      	cbz	r0, 4004ce <process_data_wifi+0x1e>
		receivedMessage = START_TRANSFER;
  4004c6:	2202      	movs	r2, #2
  4004c8:	4b16      	ldr	r3, [pc, #88]	; (400524 <process_data_wifi+0x74>)
  4004ca:	601a      	str	r2, [r3, #0]
  4004cc:	bd10      	pop	{r4, pc}
    	if(strstr(buffer_wifi,msg_CLIENT_NOT_CONNECTED)){
  4004ce:	4916      	ldr	r1, [pc, #88]	; (400528 <process_data_wifi+0x78>)
  4004d0:	480f      	ldr	r0, [pc, #60]	; (400510 <process_data_wifi+0x60>)
  4004d2:	4b13      	ldr	r3, [pc, #76]	; (400520 <process_data_wifi+0x70>)
  4004d4:	4798      	blx	r3
  4004d6:	b118      	cbz	r0, 4004e0 <process_data_wifi+0x30>
			receivedMessage = CLIENT_NOT_CONNECTED	;
  4004d8:	2204      	movs	r2, #4
  4004da:	4b12      	ldr	r3, [pc, #72]	; (400524 <process_data_wifi+0x74>)
  4004dc:	601a      	str	r2, [r3, #0]
  4004de:	bd10      	pop	{r4, pc}
			if(strstr(buffer_wifi,msg_COMMAND_FAILED)){
  4004e0:	4912      	ldr	r1, [pc, #72]	; (40052c <process_data_wifi+0x7c>)
  4004e2:	480b      	ldr	r0, [pc, #44]	; (400510 <process_data_wifi+0x60>)
  4004e4:	4b0e      	ldr	r3, [pc, #56]	; (400520 <process_data_wifi+0x70>)
  4004e6:	4798      	blx	r3
  4004e8:	b118      	cbz	r0, 4004f2 <process_data_wifi+0x42>
				receivedMessage = COMMAND_FAILED;
  4004ea:	2205      	movs	r2, #5
  4004ec:	4b0d      	ldr	r3, [pc, #52]	; (400524 <process_data_wifi+0x74>)
  4004ee:	601a      	str	r2, [r3, #0]
  4004f0:	bd10      	pop	{r4, pc}
				if(strstr(buffer_wifi,msg_RECIEVE_NONE)){
  4004f2:	490f      	ldr	r1, [pc, #60]	; (400530 <process_data_wifi+0x80>)
  4004f4:	4806      	ldr	r0, [pc, #24]	; (400510 <process_data_wifi+0x60>)
  4004f6:	4b0a      	ldr	r3, [pc, #40]	; (400520 <process_data_wifi+0x70>)
  4004f8:	4798      	blx	r3
  4004fa:	b118      	cbz	r0, 400504 <process_data_wifi+0x54>
					receivedMessage = RECIEVE_NONE;
  4004fc:	2206      	movs	r2, #6
  4004fe:	4b09      	ldr	r3, [pc, #36]	; (400524 <process_data_wifi+0x74>)
  400500:	601a      	str	r2, [r3, #0]
  400502:	bd10      	pop	{r4, pc}
					receivedMessage = DEFAULT;
  400504:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  400508:	4b06      	ldr	r3, [pc, #24]	; (400524 <process_data_wifi+0x74>)
  40050a:	601a      	str	r2, [r3, #0]
  40050c:	bd10      	pop	{r4, pc}
  40050e:	bf00      	nop
  400510:	2000052c 	.word	0x2000052c
  400514:	200004f0 	.word	0x200004f0
  400518:	0040100d 	.word	0x0040100d
  40051c:	004018f0 	.word	0x004018f0
  400520:	00401379 	.word	0x00401379
  400524:	200004e0 	.word	0x200004e0
  400528:	00401900 	.word	0x00401900
  40052c:	00401918 	.word	0x00401918
  400530:	00401928 	.word	0x00401928

00400534 <wifi_command_response_handler>:
{
  400534:	b508      	push	{r3, lr}
	process_data_wifi();
  400536:	4b06      	ldr	r3, [pc, #24]	; (400550 <wifi_command_response_handler+0x1c>)
  400538:	4798      	blx	r3
	input_pos_wifi = 0;
  40053a:	2300      	movs	r3, #0
  40053c:	4a05      	ldr	r2, [pc, #20]	; (400554 <wifi_command_response_handler+0x20>)
  40053e:	6013      	str	r3, [r2, #0]
		buffer_wifi[ii] = 0;
  400540:	4905      	ldr	r1, [pc, #20]	; (400558 <wifi_command_response_handler+0x24>)
  400542:	461a      	mov	r2, r3
  400544:	54ca      	strb	r2, [r1, r3]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  400546:	3301      	adds	r3, #1
  400548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40054c:	d1fa      	bne.n	400544 <wifi_command_response_handler+0x10>
}
  40054e:	bd08      	pop	{r3, pc}
  400550:	004004b1 	.word	0x004004b1
  400554:	200004d8 	.word	0x200004d8
  400558:	2000052c 	.word	0x2000052c

0040055c <configure_usart_wifi>:

/*
Configuration of USART port used to communicate with the AMW136.
*/
void configure_usart_wifi(void) 
{
  40055c:	b530      	push	{r4, r5, lr}
  40055e:	b087      	sub	sp, #28
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  400560:	466c      	mov	r4, sp
  400562:	4d1e      	ldr	r5, [pc, #120]	; (4005dc <configure_usart_wifi+0x80>)
  400564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400568:	e895 0003 	ldmia.w	r5, {r0, r1}
  40056c:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  400570:	4d1b      	ldr	r5, [pc, #108]	; (4005e0 <configure_usart_wifi+0x84>)
  400572:	4b1c      	ldr	r3, [pc, #112]	; (4005e4 <configure_usart_wifi+0x88>)
  400574:	602b      	str	r3, [r5, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400576:	200e      	movs	r0, #14
  400578:	4b1b      	ldr	r3, [pc, #108]	; (4005e8 <configure_usart_wifi+0x8c>)
  40057a:	4798      	blx	r3

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  40057c:	4c1b      	ldr	r4, [pc, #108]	; (4005ec <configure_usart_wifi+0x90>)
  40057e:	682a      	ldr	r2, [r5, #0]
  400580:	4669      	mov	r1, sp
  400582:	4620      	mov	r0, r4
  400584:	4b1a      	ldr	r3, [pc, #104]	; (4005f0 <configure_usart_wifi+0x94>)
  400586:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  400588:	f04f 31ff 	mov.w	r1, #4294967295
  40058c:	4620      	mov	r0, r4
  40058e:	4b19      	ldr	r3, [pc, #100]	; (4005f4 <configure_usart_wifi+0x98>)
  400590:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  400592:	4620      	mov	r0, r4
  400594:	4b18      	ldr	r3, [pc, #96]	; (4005f8 <configure_usart_wifi+0x9c>)
  400596:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  400598:	4620      	mov	r0, r4
  40059a:	4b18      	ldr	r3, [pc, #96]	; (4005fc <configure_usart_wifi+0xa0>)
  40059c:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  40059e:	2101      	movs	r1, #1
  4005a0:	4620      	mov	r0, r4
  4005a2:	4b17      	ldr	r3, [pc, #92]	; (400600 <configure_usart_wifi+0xa4>)
  4005a4:	4798      	blx	r3
  4005a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4005aa:	4b16      	ldr	r3, [pc, #88]	; (400604 <configure_usart_wifi+0xa8>)
  4005ac:	601a      	str	r2, [r3, #0]
	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);

	// Configure the RX / TX pins
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4005ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005b2:	2005      	movs	r0, #5
  4005b4:	4c14      	ldr	r4, [pc, #80]	; (400608 <configure_usart_wifi+0xac>)
  4005b6:	47a0      	blx	r4
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4005b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005bc:	2006      	movs	r0, #6
  4005be:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4005c0:	4b12      	ldr	r3, [pc, #72]	; (40060c <configure_usart_wifi+0xb0>)
  4005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4005c6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005cc:	635a      	str	r2, [r3, #52]	; 0x34
	/* Configure USART CTS pin */
	//gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
	ioport_set_pin_dir(PIN_USART0_CTS_IDX,IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(PIN_USART0_CTS_IDX,false);
	/* Configure USART RTS pin */
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  4005ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005d2:	2007      	movs	r0, #7
  4005d4:	47a0      	blx	r4
}
  4005d6:	b007      	add	sp, #28
  4005d8:	bd30      	pop	{r4, r5, pc}
  4005da:	bf00      	nop
  4005dc:	0040189c 	.word	0x0040189c
  4005e0:	200004e8 	.word	0x200004e8
  4005e4:	07270e00 	.word	0x07270e00
  4005e8:	00400be5 	.word	0x00400be5
  4005ec:	40024000 	.word	0x40024000
  4005f0:	00400315 	.word	0x00400315
  4005f4:	00400349 	.word	0x00400349
  4005f8:	00400339 	.word	0x00400339
  4005fc:	0040033f 	.word	0x0040033f
  400600:	00400345 	.word	0x00400345
  400604:	e000e100 	.word	0xe000e100
  400608:	004009dd 	.word	0x004009dd
  40060c:	400e0e00 	.word	0x400e0e00

00400610 <configure_wifi_comm_pin>:

/*
Configuration of command complete rising-edge interrupt.
*/
void configure_wifi_comm_pin(void) 
{
  400610:	b530      	push	{r4, r5, lr}
  400612:	b083      	sub	sp, #12
	/* Configure PIO clock. */
	
	pmc_enable_periph_clk(WIFI_COM_COMPLETE_ID);
  400614:	200b      	movs	r0, #11
  400616:	4b0e      	ldr	r3, [pc, #56]	; (400650 <configure_wifi_comm_pin+0x40>)
  400618:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK, 10);
  40061a:	4c0e      	ldr	r4, [pc, #56]	; (400654 <configure_wifi_comm_pin+0x44>)
  40061c:	220a      	movs	r2, #10
  40061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400622:	4620      	mov	r0, r4
  400624:	4b0c      	ldr	r3, [pc, #48]	; (400658 <configure_wifi_comm_pin+0x48>)
  400626:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h	**/
	pio_handler_set(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_ID, WIFI_COM_COMPLETE_MSK,
  400628:	4b0c      	ldr	r3, [pc, #48]	; (40065c <configure_wifi_comm_pin+0x4c>)
  40062a:	9300      	str	r3, [sp, #0]
  40062c:	2371      	movs	r3, #113	; 0x71
  40062e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400632:	210b      	movs	r1, #11
  400634:	4620      	mov	r0, r4
  400636:	4d0a      	ldr	r5, [pc, #40]	; (400660 <configure_wifi_comm_pin+0x50>)
  400638:	47a8      	blx	r5
  40063a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40063e:	4b09      	ldr	r3, [pc, #36]	; (400664 <configure_wifi_comm_pin+0x54>)
  400640:	601a      	str	r2, [r3, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COM_COMPLETE_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK);
  400642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400646:	4620      	mov	r0, r4
  400648:	4b07      	ldr	r3, [pc, #28]	; (400668 <configure_wifi_comm_pin+0x58>)
  40064a:	4798      	blx	r3
}
  40064c:	b003      	add	sp, #12
  40064e:	bd30      	pop	{r4, r5, pc}
  400650:	00400be5 	.word	0x00400be5
  400654:	400e0e00 	.word	0x400e0e00
  400658:	004008a1 	.word	0x004008a1
  40065c:	00400535 	.word	0x00400535
  400660:	004001a1 	.word	0x004001a1
  400664:	e000e100 	.word	0xe000e100
  400668:	004009d1 	.word	0x004009d1

0040066c <configure_wifi_web_setup_pin>:

/*
Configuration of button interrupt to initiate web setup.
*/
void configure_wifi_web_setup_pin(void) 
{
  40066c:	b530      	push	{r4, r5, lr}
  40066e:	b083      	sub	sp, #12
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  400670:	200b      	movs	r0, #11
  400672:	4b0d      	ldr	r3, [pc, #52]	; (4006a8 <configure_wifi_web_setup_pin+0x3c>)
  400674:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  400676:	4c0d      	ldr	r4, [pc, #52]	; (4006ac <configure_wifi_web_setup_pin+0x40>)
  400678:	220a      	movs	r2, #10
  40067a:	2101      	movs	r1, #1
  40067c:	4620      	mov	r0, r4
  40067e:	4b0c      	ldr	r3, [pc, #48]	; (4006b0 <configure_wifi_web_setup_pin+0x44>)
  400680:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  400682:	4b0c      	ldr	r3, [pc, #48]	; (4006b4 <configure_wifi_web_setup_pin+0x48>)
  400684:	9300      	str	r3, [sp, #0]
  400686:	2349      	movs	r3, #73	; 0x49
  400688:	2201      	movs	r2, #1
  40068a:	210b      	movs	r1, #11
  40068c:	4620      	mov	r0, r4
  40068e:	4d0a      	ldr	r5, [pc, #40]	; (4006b8 <configure_wifi_web_setup_pin+0x4c>)
  400690:	47a8      	blx	r5
  400692:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400696:	4b09      	ldr	r3, [pc, #36]	; (4006bc <configure_wifi_web_setup_pin+0x50>)
  400698:	601a      	str	r2, [r3, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  40069a:	2101      	movs	r1, #1
  40069c:	4620      	mov	r0, r4
  40069e:	4b08      	ldr	r3, [pc, #32]	; (4006c0 <configure_wifi_web_setup_pin+0x54>)
  4006a0:	4798      	blx	r3
}
  4006a2:	b003      	add	sp, #12
  4006a4:	bd30      	pop	{r4, r5, pc}
  4006a6:	bf00      	nop
  4006a8:	00400be5 	.word	0x00400be5
  4006ac:	400e0e00 	.word	0x400e0e00
  4006b0:	004008a1 	.word	0x004008a1
  4006b4:	00400449 	.word	0x00400449
  4006b8:	004001a1 	.word	0x004001a1
  4006bc:	e000e100 	.word	0xe000e100
  4006c0:	004009d1 	.word	0x004009d1

004006c4 <write_wifi_command>:
Writes a command (comm) to the AMW136, and waits either for an acknowledgment
or a timeout. The timeout can be created by setting the global variable counts
to zero, which will automatically increment every second, and waiting while counts < cnt.
*/
void write_wifi_command(char* comm, uint8_t cnt) 
{
  4006c4:	b538      	push	{r3, r4, r5, lr}
  4006c6:	460c      	mov	r4, r1
	counts = 0;
  4006c8:	2500      	movs	r5, #0
  4006ca:	4b09      	ldr	r3, [pc, #36]	; (4006f0 <write_wifi_command+0x2c>)
  4006cc:	701d      	strb	r5, [r3, #0]
	// send a message via USART:
	//usart_write_line(BOARD_USART, "string to write\r\n");
	usart_write_line(BOARD_USART, comm);
  4006ce:	4601      	mov	r1, r0
  4006d0:	4808      	ldr	r0, [pc, #32]	; (4006f4 <write_wifi_command+0x30>)
  4006d2:	4b09      	ldr	r3, [pc, #36]	; (4006f8 <write_wifi_command+0x34>)
  4006d4:	4798      	blx	r3
	receivedMessage = NO_MESSAGE;
  4006d6:	4b09      	ldr	r3, [pc, #36]	; (4006fc <write_wifi_command+0x38>)
  4006d8:	601d      	str	r5, [r3, #0]
	// Wait for timeout or received message
	while((counts<cnt)&&(receivedMessage==NO_MESSAGE)){
  4006da:	4a05      	ldr	r2, [pc, #20]	; (4006f0 <write_wifi_command+0x2c>)
  4006dc:	4619      	mov	r1, r3
  4006de:	7813      	ldrb	r3, [r2, #0]
  4006e0:	b2db      	uxtb	r3, r3
  4006e2:	42a3      	cmp	r3, r4
  4006e4:	d202      	bcs.n	4006ec <write_wifi_command+0x28>
  4006e6:	680b      	ldr	r3, [r1, #0]
  4006e8:	2b00      	cmp	r3, #0
  4006ea:	d0f8      	beq.n	4006de <write_wifi_command+0x1a>
  4006ec:	bd38      	pop	{r3, r4, r5, pc}
  4006ee:	bf00      	nop
  4006f0:	200004d4 	.word	0x200004d4
  4006f4:	40024000 	.word	0x40024000
  4006f8:	00400365 	.word	0x00400365
  4006fc:	200004e0 	.word	0x200004e0

00400700 <resetWifi>:
	}
}


// Simple function to reset the wifi
void resetWifi(void){
  400700:	b570      	push	{r4, r5, r6, lr}
  400702:	4d05      	ldr	r5, [pc, #20]	; (400718 <resetWifi+0x18>)
  400704:	2602      	movs	r6, #2
  400706:	636e      	str	r6, [r5, #52]	; 0x34
	// Reset the wifi by pulling the wifi reset pin low, then bringing it back high.
	ioport_set_pin_level(PIN_WIFI_RESET,LOW); //reset WIFI
	delay_ms(50);
  400708:	4804      	ldr	r0, [pc, #16]	; (40071c <resetWifi+0x1c>)
  40070a:	4c05      	ldr	r4, [pc, #20]	; (400720 <resetWifi+0x20>)
  40070c:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40070e:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(PIN_WIFI_RESET,HIGH); //turn Wifi Back on
	delay_ms(1000); // Account for ~0.7s high during reset
  400710:	4804      	ldr	r0, [pc, #16]	; (400724 <resetWifi+0x24>)
  400712:	47a0      	blx	r4
  400714:	bd70      	pop	{r4, r5, r6, pc}
  400716:	bf00      	nop
  400718:	400e1000 	.word	0x400e1000
  40071c:	00068a1c 	.word	0x00068a1c
  400720:	20000001 	.word	0x20000001
  400724:	0082ca25 	.word	0x0082ca25

00400728 <checkGoFile>:
		}
	}
}

// Check whether the go file exists, and its contents
uint32_t checkGoFile(void){
  400728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40072c:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
	// Send command to the wifi chip telling it to open the file
	write_wifi_command("fop test.txt\r\n",3);
  400730:	2103      	movs	r1, #3
  400732:	4836      	ldr	r0, [pc, #216]	; (40080c <checkGoFile+0xe4>)
  400734:	4b36      	ldr	r3, [pc, #216]	; (400810 <checkGoFile+0xe8>)
  400736:	4798      	blx	r3
  400738:	f20d 262b 	addw	r6, sp, #555	; 0x22b
  40073c:	f20d 235d 	addw	r3, sp, #605	; 0x25d
  400740:	4634      	mov	r4, r6

	// save the output
	uint8_t fileStream[maxWifiMessage];
	for(int ii = 0; ii< maxWifiMessage; ii++){
		fileStream[ii] = " ";
  400742:	4d34      	ldr	r5, [pc, #208]	; (400814 <checkGoFile+0xec>)
  400744:	b2ed      	uxtb	r5, r5
  400746:	f804 5f01 	strb.w	r5, [r4, #1]!
	for(int ii = 0; ii< maxWifiMessage; ii++){
  40074a:	429c      	cmp	r4, r3
  40074c:	d1fb      	bne.n	400746 <checkGoFile+0x1e>
	}
	strcpy(fileStream,rawRecievedMessage);
  40074e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 400830 <checkGoFile+0x108>
  400752:	4641      	mov	r1, r8
  400754:	a88b      	add	r0, sp, #556	; 0x22c
  400756:	4f30      	ldr	r7, [pc, #192]	; (400818 <checkGoFile+0xf0>)
  400758:	47b8      	blx	r7

	// get the size of the file
	write_wifi_command("fst test.txt\r\n",3);
  40075a:	2103      	movs	r1, #3
  40075c:	482f      	ldr	r0, [pc, #188]	; (40081c <checkGoFile+0xf4>)
  40075e:	4b2c      	ldr	r3, [pc, #176]	; (400810 <checkGoFile+0xe8>)
  400760:	4798      	blx	r3
	// save the output, remove unneeded portions of the file
	uint8_t fileSize[maxWifiMessage];
	strcpy(fileSize,rawRecievedMessage);
  400762:	4641      	mov	r1, r8
  400764:	a87e      	add	r0, sp, #504	; 0x1f8
  400766:	47b8      	blx	r7
  400768:	ab7e      	add	r3, sp, #504	; 0x1f8
  40076a:	f20d 202a 	addw	r0, sp, #554	; 0x22a
	uint8_t commaFlag = 0;
  40076e:	2200      	movs	r2, #0
	for(int ii = 0; ii< maxWifiMessage; ii++){
		if(commaFlag){
			fileSize[ii] = " ";
		}
		else{
			if(fileSize[ii] = ","){
  400770:	492b      	ldr	r1, [pc, #172]	; (400820 <checkGoFile+0xf8>)
  400772:	b2c9      	uxtb	r1, r1
  400774:	e006      	b.n	400784 <checkGoFile+0x5c>
  400776:	7019      	strb	r1, [r3, #0]
  400778:	1c0a      	adds	r2, r1, #0
  40077a:	bf18      	it	ne
  40077c:	2201      	movne	r2, #1
  40077e:	3301      	adds	r3, #1
	for(int ii = 0; ii< maxWifiMessage; ii++){
  400780:	4283      	cmp	r3, r0
  400782:	d003      	beq.n	40078c <checkGoFile+0x64>
		if(commaFlag){
  400784:	2a00      	cmp	r2, #0
  400786:	d0f6      	beq.n	400776 <checkGoFile+0x4e>
			fileSize[ii] = " ";
  400788:	701d      	strb	r5, [r3, #0]
  40078a:	e7f8      	b.n	40077e <checkGoFile+0x56>
  40078c:	f10d 0303 	add.w	r3, sp, #3
  400790:	f20d 12f7 	addw	r2, sp, #503	; 0x1f7

	// Read the file
	// Create the command string
	uint8_t readFileCommand[500];
	for(int ii = 0; ii < sizeof(readFileCommand); ii++){
		readFileCommand[ii] = " ";
  400794:	f803 5f01 	strb.w	r5, [r3, #1]!
	for(int ii = 0; ii < sizeof(readFileCommand); ii++){
  400798:	4293      	cmp	r3, r2
  40079a:	d1fb      	bne.n	400794 <checkGoFile+0x6c>
	}
	strcpy(readFileCommand,"read ");
  40079c:	4b21      	ldr	r3, [pc, #132]	; (400824 <checkGoFile+0xfc>)
  40079e:	e893 0003 	ldmia.w	r3, {r0, r1}
  4007a2:	9001      	str	r0, [sp, #4]
  4007a4:	f8ad 1008 	strh.w	r1, [sp, #8]
  4007a8:	ab02      	add	r3, sp, #8
	for(int ii = 0; ii< sizeof(fileStream);ii++){
		readFileCommand[ii + 5] = fileStream[ii];
  4007aa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  4007ae:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(int ii = 0; ii< sizeof(fileStream);ii++){
  4007b2:	42a6      	cmp	r6, r4
  4007b4:	d1f9      	bne.n	4007aa <checkGoFile+0x82>
  4007b6:	f20d 13f7 	addw	r3, sp, #503	; 0x1f7
  4007ba:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
  4007be:	f20d 2029 	addw	r0, sp, #553	; 0x229
	}
	for(int ii = 0; ii < sizeof(fileSize); ii++){
		readFileCommand[ii + 5 + sizeof(fileStream)] = fileSize[ii];
  4007c2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4007c6:	f802 1f01 	strb.w	r1, [r2, #1]!
	for(int ii = 0; ii < sizeof(fileSize); ii++){
  4007ca:	4298      	cmp	r0, r3
  4007cc:	d1f9      	bne.n	4007c2 <checkGoFile+0x9a>
	}
	readFileCommand[sizeof(readFileCommand)-1]="\r";
  4007ce:	4b16      	ldr	r3, [pc, #88]	; (400828 <checkGoFile+0x100>)
  4007d0:	f88d 31f7 	strb.w	r3, [sp, #503]	; 0x1f7
	readFileCommand[sizeof(readFileCommand)-0]="\n";
  4007d4:	4b15      	ldr	r3, [pc, #84]	; (40082c <checkGoFile+0x104>)
  4007d6:	f88d 31f8 	strb.w	r3, [sp, #504]	; 0x1f8

	write_wifi_command(readFileCommand,3);
  4007da:	2103      	movs	r1, #3
  4007dc:	a801      	add	r0, sp, #4
  4007de:	4b0c      	ldr	r3, [pc, #48]	; (400810 <checkGoFile+0xe8>)
  4007e0:	4798      	blx	r3
	
	if(rawRecievedMessage[0] == "y"){
  4007e2:	4b13      	ldr	r3, [pc, #76]	; (400830 <checkGoFile+0x108>)
  4007e4:	781b      	ldrb	r3, [r3, #0]
  4007e6:	b2db      	uxtb	r3, r3
  4007e8:	4a12      	ldr	r2, [pc, #72]	; (400834 <checkGoFile+0x10c>)
  4007ea:	4293      	cmp	r3, r2
  4007ec:	d009      	beq.n	400802 <checkGoFile+0xda>
		return 1;
	}
	if(rawRecievedMessage[0] == "n"){
  4007ee:	4b10      	ldr	r3, [pc, #64]	; (400830 <checkGoFile+0x108>)
  4007f0:	781b      	ldrb	r3, [r3, #0]
  4007f2:	b2db      	uxtb	r3, r3
  4007f4:	4a10      	ldr	r2, [pc, #64]	; (400838 <checkGoFile+0x110>)
  4007f6:	4293      	cmp	r3, r2
  4007f8:	d005      	beq.n	400806 <checkGoFile+0xde>
	




  4007fa:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
  4007fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
  400802:	2001      	movs	r0, #1
  400804:	e7f9      	b.n	4007fa <checkGoFile+0xd2>
		return 0;
  400806:	2000      	movs	r0, #0
  400808:	e7f7      	b.n	4007fa <checkGoFile+0xd2>
  40080a:	bf00      	nop
  40080c:	004018b4 	.word	0x004018b4
  400810:	004006c5 	.word	0x004006c5
  400814:	004018dc 	.word	0x004018dc
  400818:	0040100d 	.word	0x0040100d
  40081c:	004018c4 	.word	0x004018c4
  400820:	004018d4 	.word	0x004018d4
  400824:	004018d8 	.word	0x004018d8
  400828:	004018e0 	.word	0x004018e0
  40082c:	004018e4 	.word	0x004018e4
  400830:	200004f0 	.word	0x200004f0
  400834:	004018e8 	.word	0x004018e8
  400838:	004018ec 	.word	0x004018ec

0040083c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40083c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40083e:	480e      	ldr	r0, [pc, #56]	; (400878 <sysclk_init+0x3c>)
  400840:	4b0e      	ldr	r3, [pc, #56]	; (40087c <sysclk_init+0x40>)
  400842:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400844:	213e      	movs	r1, #62	; 0x3e
  400846:	2000      	movs	r0, #0
  400848:	4b0d      	ldr	r3, [pc, #52]	; (400880 <sysclk_init+0x44>)
  40084a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40084c:	4c0d      	ldr	r4, [pc, #52]	; (400884 <sysclk_init+0x48>)
  40084e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400850:	2800      	cmp	r0, #0
  400852:	d0fc      	beq.n	40084e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400854:	4b0c      	ldr	r3, [pc, #48]	; (400888 <sysclk_init+0x4c>)
  400856:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400858:	4a0c      	ldr	r2, [pc, #48]	; (40088c <sysclk_init+0x50>)
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <sysclk_init+0x54>)
  40085c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40085e:	4c0d      	ldr	r4, [pc, #52]	; (400894 <sysclk_init+0x58>)
  400860:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400862:	2800      	cmp	r0, #0
  400864:	d0fc      	beq.n	400860 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400866:	2010      	movs	r0, #16
  400868:	4b0b      	ldr	r3, [pc, #44]	; (400898 <sysclk_init+0x5c>)
  40086a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40086c:	4b0b      	ldr	r3, [pc, #44]	; (40089c <sysclk_init+0x60>)
  40086e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400870:	4801      	ldr	r0, [pc, #4]	; (400878 <sysclk_init+0x3c>)
  400872:	4b02      	ldr	r3, [pc, #8]	; (40087c <sysclk_init+0x40>)
  400874:	4798      	blx	r3
  400876:	bd10      	pop	{r4, pc}
  400878:	07270e00 	.word	0x07270e00
  40087c:	00400ee5 	.word	0x00400ee5
  400880:	00400b61 	.word	0x00400b61
  400884:	00400bb5 	.word	0x00400bb5
  400888:	00400bc5 	.word	0x00400bc5
  40088c:	20133f01 	.word	0x20133f01
  400890:	400e0400 	.word	0x400e0400
  400894:	00400bd5 	.word	0x00400bd5
  400898:	00400afd 	.word	0x00400afd
  40089c:	00400dd5 	.word	0x00400dd5

004008a0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4008a0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4008a4:	0053      	lsls	r3, r2, #1
  4008a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008aa:	fbb2 f2f3 	udiv	r2, r2, r3
  4008ae:	3a01      	subs	r2, #1
  4008b0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4008b4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4008b8:	4770      	bx	lr

004008ba <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4008ba:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4008bc:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4008c0:	d039      	beq.n	400936 <pio_set_peripheral+0x7c>
  4008c2:	d813      	bhi.n	4008ec <pio_set_peripheral+0x32>
  4008c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4008c8:	d025      	beq.n	400916 <pio_set_peripheral+0x5c>
  4008ca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4008ce:	d10a      	bne.n	4008e6 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008d0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4008d2:	4313      	orrs	r3, r2
  4008d4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4008d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008d8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008da:	400b      	ands	r3, r1
  4008dc:	ea23 0302 	bic.w	r3, r3, r2
  4008e0:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4008e2:	6042      	str	r2, [r0, #4]
  4008e4:	4770      	bx	lr
	switch (ul_type) {
  4008e6:	2900      	cmp	r1, #0
  4008e8:	d1fb      	bne.n	4008e2 <pio_set_peripheral+0x28>
  4008ea:	4770      	bx	lr
  4008ec:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4008f0:	d020      	beq.n	400934 <pio_set_peripheral+0x7a>
  4008f2:	d809      	bhi.n	400908 <pio_set_peripheral+0x4e>
  4008f4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4008f8:	d1f3      	bne.n	4008e2 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4008fc:	4313      	orrs	r3, r2
  4008fe:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400900:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400902:	4313      	orrs	r3, r2
  400904:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400906:	e7ec      	b.n	4008e2 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400908:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40090c:	d012      	beq.n	400934 <pio_set_peripheral+0x7a>
  40090e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400912:	d00f      	beq.n	400934 <pio_set_peripheral+0x7a>
  400914:	e7e5      	b.n	4008e2 <pio_set_peripheral+0x28>
{
  400916:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400918:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40091a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40091c:	43d3      	mvns	r3, r2
  40091e:	4021      	ands	r1, r4
  400920:	461c      	mov	r4, r3
  400922:	4019      	ands	r1, r3
  400924:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400926:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400928:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40092a:	400b      	ands	r3, r1
  40092c:	4023      	ands	r3, r4
  40092e:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400930:	6042      	str	r2, [r0, #4]
}
  400932:	bc10      	pop	{r4}
  400934:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400936:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400938:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40093a:	400b      	ands	r3, r1
  40093c:	ea23 0302 	bic.w	r3, r3, r2
  400940:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400942:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400944:	4313      	orrs	r3, r2
  400946:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400948:	e7cb      	b.n	4008e2 <pio_set_peripheral+0x28>

0040094a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40094a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40094c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400950:	bf14      	ite	ne
  400952:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400954:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400956:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40095a:	bf14      	ite	ne
  40095c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  40095e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400960:	f012 0f02 	tst.w	r2, #2
  400964:	d107      	bne.n	400976 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400966:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40096a:	bf18      	it	ne
  40096c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400970:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400972:	6001      	str	r1, [r0, #0]
  400974:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400976:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40097a:	e7f9      	b.n	400970 <pio_set_input+0x26>

0040097c <pio_set_output>:
{
  40097c:	b410      	push	{r4}
  40097e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400980:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400982:	b944      	cbnz	r4, 400996 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400984:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400986:	b143      	cbz	r3, 40099a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400988:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40098a:	b942      	cbnz	r2, 40099e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40098c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40098e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400990:	6001      	str	r1, [r0, #0]
}
  400992:	bc10      	pop	{r4}
  400994:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400996:	6641      	str	r1, [r0, #100]	; 0x64
  400998:	e7f5      	b.n	400986 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40099a:	6541      	str	r1, [r0, #84]	; 0x54
  40099c:	e7f5      	b.n	40098a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40099e:	6301      	str	r1, [r0, #48]	; 0x30
  4009a0:	e7f5      	b.n	40098e <pio_set_output+0x12>

004009a2 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4009a2:	f012 0f10 	tst.w	r2, #16
  4009a6:	d010      	beq.n	4009ca <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  4009a8:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4009ac:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  4009b0:	bf14      	ite	ne
  4009b2:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  4009b6:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  4009ba:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  4009be:	bf14      	ite	ne
  4009c0:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  4009c4:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4009c8:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4009ca:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4009ce:	4770      	bx	lr

004009d0 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4009d0:	6401      	str	r1, [r0, #64]	; 0x40
  4009d2:	4770      	bx	lr

004009d4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4009d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4009d6:	4770      	bx	lr

004009d8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4009d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4009da:	4770      	bx	lr

004009dc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4009dc:	b570      	push	{r4, r5, r6, lr}
  4009de:	b082      	sub	sp, #8
  4009e0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4009e2:	0943      	lsrs	r3, r0, #5
  4009e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4009e8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4009ec:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4009ee:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4009f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4009f6:	d053      	beq.n	400aa0 <pio_configure_pin+0xc4>
  4009f8:	d80a      	bhi.n	400a10 <pio_configure_pin+0x34>
  4009fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4009fe:	d02d      	beq.n	400a5c <pio_configure_pin+0x80>
  400a00:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400a04:	d03b      	beq.n	400a7e <pio_configure_pin+0xa2>
  400a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400a0a:	d015      	beq.n	400a38 <pio_configure_pin+0x5c>
		return 0;
  400a0c:	2000      	movs	r0, #0
  400a0e:	e023      	b.n	400a58 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400a10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400a14:	d055      	beq.n	400ac2 <pio_configure_pin+0xe6>
  400a16:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400a1a:	d052      	beq.n	400ac2 <pio_configure_pin+0xe6>
  400a1c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400a20:	d1f4      	bne.n	400a0c <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400a22:	f000 011f 	and.w	r1, r0, #31
  400a26:	2601      	movs	r6, #1
  400a28:	462a      	mov	r2, r5
  400a2a:	fa06 f101 	lsl.w	r1, r6, r1
  400a2e:	4620      	mov	r0, r4
  400a30:	4b2f      	ldr	r3, [pc, #188]	; (400af0 <pio_configure_pin+0x114>)
  400a32:	4798      	blx	r3
	return 1;
  400a34:	4630      	mov	r0, r6
		break;
  400a36:	e00f      	b.n	400a58 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400a38:	f000 001f 	and.w	r0, r0, #31
  400a3c:	2601      	movs	r6, #1
  400a3e:	4086      	lsls	r6, r0
  400a40:	4632      	mov	r2, r6
  400a42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a46:	4620      	mov	r0, r4
  400a48:	4b2a      	ldr	r3, [pc, #168]	; (400af4 <pio_configure_pin+0x118>)
  400a4a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a4c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400a50:	bf14      	ite	ne
  400a52:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400a54:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400a56:	2001      	movs	r0, #1
}
  400a58:	b002      	add	sp, #8
  400a5a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400a5c:	f000 001f 	and.w	r0, r0, #31
  400a60:	2601      	movs	r6, #1
  400a62:	4086      	lsls	r6, r0
  400a64:	4632      	mov	r2, r6
  400a66:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a6a:	4620      	mov	r0, r4
  400a6c:	4b21      	ldr	r3, [pc, #132]	; (400af4 <pio_configure_pin+0x118>)
  400a6e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a70:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400a74:	bf14      	ite	ne
  400a76:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400a78:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400a7a:	2001      	movs	r0, #1
  400a7c:	e7ec      	b.n	400a58 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400a7e:	f000 001f 	and.w	r0, r0, #31
  400a82:	2601      	movs	r6, #1
  400a84:	4086      	lsls	r6, r0
  400a86:	4632      	mov	r2, r6
  400a88:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400a8c:	4620      	mov	r0, r4
  400a8e:	4b19      	ldr	r3, [pc, #100]	; (400af4 <pio_configure_pin+0x118>)
  400a90:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400a92:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400a96:	bf14      	ite	ne
  400a98:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400a9a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400a9c:	2001      	movs	r0, #1
  400a9e:	e7db      	b.n	400a58 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400aa0:	f000 001f 	and.w	r0, r0, #31
  400aa4:	2601      	movs	r6, #1
  400aa6:	4086      	lsls	r6, r0
  400aa8:	4632      	mov	r2, r6
  400aaa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400aae:	4620      	mov	r0, r4
  400ab0:	4b10      	ldr	r3, [pc, #64]	; (400af4 <pio_configure_pin+0x118>)
  400ab2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400ab4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ab8:	bf14      	ite	ne
  400aba:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400abc:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400abe:	2001      	movs	r0, #1
  400ac0:	e7ca      	b.n	400a58 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400ac2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400ac6:	f000 011f 	and.w	r1, r0, #31
  400aca:	2601      	movs	r6, #1
  400acc:	ea05 0306 	and.w	r3, r5, r6
  400ad0:	9300      	str	r3, [sp, #0]
  400ad2:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400ad6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400ada:	bf14      	ite	ne
  400adc:	2200      	movne	r2, #0
  400ade:	2201      	moveq	r2, #1
  400ae0:	fa06 f101 	lsl.w	r1, r6, r1
  400ae4:	4620      	mov	r0, r4
  400ae6:	4c04      	ldr	r4, [pc, #16]	; (400af8 <pio_configure_pin+0x11c>)
  400ae8:	47a0      	blx	r4
	return 1;
  400aea:	4630      	mov	r0, r6
		break;
  400aec:	e7b4      	b.n	400a58 <pio_configure_pin+0x7c>
  400aee:	bf00      	nop
  400af0:	0040094b 	.word	0x0040094b
  400af4:	004008bb 	.word	0x004008bb
  400af8:	0040097d 	.word	0x0040097d

00400afc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400afc:	4a17      	ldr	r2, [pc, #92]	; (400b5c <pmc_switch_mck_to_pllack+0x60>)
  400afe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b04:	4318      	orrs	r0, r3
  400b06:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b08:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b0a:	f013 0f08 	tst.w	r3, #8
  400b0e:	d10a      	bne.n	400b26 <pmc_switch_mck_to_pllack+0x2a>
  400b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b14:	4911      	ldr	r1, [pc, #68]	; (400b5c <pmc_switch_mck_to_pllack+0x60>)
  400b16:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b18:	f012 0f08 	tst.w	r2, #8
  400b1c:	d103      	bne.n	400b26 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b1e:	3b01      	subs	r3, #1
  400b20:	d1f9      	bne.n	400b16 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b22:	2001      	movs	r0, #1
  400b24:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b26:	4a0d      	ldr	r2, [pc, #52]	; (400b5c <pmc_switch_mck_to_pllack+0x60>)
  400b28:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b2a:	f023 0303 	bic.w	r3, r3, #3
  400b2e:	f043 0302 	orr.w	r3, r3, #2
  400b32:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b34:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b36:	f013 0f08 	tst.w	r3, #8
  400b3a:	d10a      	bne.n	400b52 <pmc_switch_mck_to_pllack+0x56>
  400b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b40:	4906      	ldr	r1, [pc, #24]	; (400b5c <pmc_switch_mck_to_pllack+0x60>)
  400b42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b44:	f012 0f08 	tst.w	r2, #8
  400b48:	d105      	bne.n	400b56 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b4a:	3b01      	subs	r3, #1
  400b4c:	d1f9      	bne.n	400b42 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400b4e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b50:	4770      	bx	lr
	return 0;
  400b52:	2000      	movs	r0, #0
  400b54:	4770      	bx	lr
  400b56:	2000      	movs	r0, #0
  400b58:	4770      	bx	lr
  400b5a:	bf00      	nop
  400b5c:	400e0400 	.word	0x400e0400

00400b60 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b60:	b9c8      	cbnz	r0, 400b96 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b62:	4a11      	ldr	r2, [pc, #68]	; (400ba8 <pmc_switch_mainck_to_xtal+0x48>)
  400b64:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b66:	0209      	lsls	r1, r1, #8
  400b68:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b6a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400b6e:	f023 0303 	bic.w	r3, r3, #3
  400b72:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400b76:	f043 0301 	orr.w	r3, r3, #1
  400b7a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b7c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b7e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b80:	f013 0f01 	tst.w	r3, #1
  400b84:	d0fb      	beq.n	400b7e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b86:	4a08      	ldr	r2, [pc, #32]	; (400ba8 <pmc_switch_mainck_to_xtal+0x48>)
  400b88:	6a13      	ldr	r3, [r2, #32]
  400b8a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400b92:	6213      	str	r3, [r2, #32]
  400b94:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b96:	4904      	ldr	r1, [pc, #16]	; (400ba8 <pmc_switch_mainck_to_xtal+0x48>)
  400b98:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b9a:	4a04      	ldr	r2, [pc, #16]	; (400bac <pmc_switch_mainck_to_xtal+0x4c>)
  400b9c:	401a      	ands	r2, r3
  400b9e:	4b04      	ldr	r3, [pc, #16]	; (400bb0 <pmc_switch_mainck_to_xtal+0x50>)
  400ba0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ba2:	620b      	str	r3, [r1, #32]
  400ba4:	4770      	bx	lr
  400ba6:	bf00      	nop
  400ba8:	400e0400 	.word	0x400e0400
  400bac:	fec8fffc 	.word	0xfec8fffc
  400bb0:	01370002 	.word	0x01370002

00400bb4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400bb4:	4b02      	ldr	r3, [pc, #8]	; (400bc0 <pmc_osc_is_ready_mainck+0xc>)
  400bb6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400bb8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400bbc:	4770      	bx	lr
  400bbe:	bf00      	nop
  400bc0:	400e0400 	.word	0x400e0400

00400bc4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400bc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400bc8:	4b01      	ldr	r3, [pc, #4]	; (400bd0 <pmc_disable_pllack+0xc>)
  400bca:	629a      	str	r2, [r3, #40]	; 0x28
  400bcc:	4770      	bx	lr
  400bce:	bf00      	nop
  400bd0:	400e0400 	.word	0x400e0400

00400bd4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400bd4:	4b02      	ldr	r3, [pc, #8]	; (400be0 <pmc_is_locked_pllack+0xc>)
  400bd6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400bd8:	f000 0002 	and.w	r0, r0, #2
  400bdc:	4770      	bx	lr
  400bde:	bf00      	nop
  400be0:	400e0400 	.word	0x400e0400

00400be4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400be4:	2822      	cmp	r0, #34	; 0x22
  400be6:	d81e      	bhi.n	400c26 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400be8:	281f      	cmp	r0, #31
  400bea:	d80c      	bhi.n	400c06 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400bec:	4b11      	ldr	r3, [pc, #68]	; (400c34 <pmc_enable_periph_clk+0x50>)
  400bee:	699a      	ldr	r2, [r3, #24]
  400bf0:	2301      	movs	r3, #1
  400bf2:	4083      	lsls	r3, r0
  400bf4:	4393      	bics	r3, r2
  400bf6:	d018      	beq.n	400c2a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400bf8:	2301      	movs	r3, #1
  400bfa:	fa03 f000 	lsl.w	r0, r3, r0
  400bfe:	4b0d      	ldr	r3, [pc, #52]	; (400c34 <pmc_enable_periph_clk+0x50>)
  400c00:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c02:	2000      	movs	r0, #0
  400c04:	4770      	bx	lr
		ul_id -= 32;
  400c06:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c08:	4b0a      	ldr	r3, [pc, #40]	; (400c34 <pmc_enable_periph_clk+0x50>)
  400c0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c0e:	2301      	movs	r3, #1
  400c10:	4083      	lsls	r3, r0
  400c12:	4393      	bics	r3, r2
  400c14:	d00b      	beq.n	400c2e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c16:	2301      	movs	r3, #1
  400c18:	fa03 f000 	lsl.w	r0, r3, r0
  400c1c:	4b05      	ldr	r3, [pc, #20]	; (400c34 <pmc_enable_periph_clk+0x50>)
  400c1e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c22:	2000      	movs	r0, #0
  400c24:	4770      	bx	lr
		return 1;
  400c26:	2001      	movs	r0, #1
  400c28:	4770      	bx	lr
	return 0;
  400c2a:	2000      	movs	r0, #0
  400c2c:	4770      	bx	lr
  400c2e:	2000      	movs	r0, #0
}
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop
  400c34:	400e0400 	.word	0x400e0400

00400c38 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400c38:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c3a:	0189      	lsls	r1, r1, #6
  400c3c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400c3e:	2402      	movs	r4, #2
  400c40:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400c42:	f04f 31ff 	mov.w	r1, #4294967295
  400c46:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400c48:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400c4a:	605a      	str	r2, [r3, #4]
}
  400c4c:	bc10      	pop	{r4}
  400c4e:	4770      	bx	lr

00400c50 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400c50:	0189      	lsls	r1, r1, #6
  400c52:	2305      	movs	r3, #5
  400c54:	5043      	str	r3, [r0, r1]
  400c56:	4770      	bx	lr

00400c58 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400c58:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400c5c:	61ca      	str	r2, [r1, #28]
  400c5e:	4770      	bx	lr

00400c60 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c60:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400c64:	624a      	str	r2, [r1, #36]	; 0x24
  400c66:	4770      	bx	lr

00400c68 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c68:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400c6c:	6a08      	ldr	r0, [r1, #32]
}
  400c6e:	4770      	bx	lr

00400c70 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400c70:	b4f0      	push	{r4, r5, r6, r7}
  400c72:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c74:	2402      	movs	r4, #2
  400c76:	9401      	str	r4, [sp, #4]
  400c78:	2408      	movs	r4, #8
  400c7a:	9402      	str	r4, [sp, #8]
  400c7c:	2420      	movs	r4, #32
  400c7e:	9403      	str	r4, [sp, #12]
  400c80:	2480      	movs	r4, #128	; 0x80
  400c82:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400c84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400c86:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c88:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400c8a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400c8e:	d814      	bhi.n	400cba <tc_find_mck_divisor+0x4a>
  400c90:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400c92:	42a0      	cmp	r0, r4
  400c94:	d217      	bcs.n	400cc6 <tc_find_mck_divisor+0x56>
  400c96:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400c98:	af01      	add	r7, sp, #4
  400c9a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400c9e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400ca2:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400ca4:	4284      	cmp	r4, r0
  400ca6:	d30a      	bcc.n	400cbe <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400ca8:	4286      	cmp	r6, r0
  400caa:	d90d      	bls.n	400cc8 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400cac:	3501      	adds	r5, #1
	for (ul_index = 0;
  400cae:	2d05      	cmp	r5, #5
  400cb0:	d1f3      	bne.n	400c9a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400cb2:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400cb4:	b006      	add	sp, #24
  400cb6:	bcf0      	pop	{r4, r5, r6, r7}
  400cb8:	4770      	bx	lr
			return 0;
  400cba:	2000      	movs	r0, #0
  400cbc:	e7fa      	b.n	400cb4 <tc_find_mck_divisor+0x44>
  400cbe:	2000      	movs	r0, #0
  400cc0:	e7f8      	b.n	400cb4 <tc_find_mck_divisor+0x44>
	return 1;
  400cc2:	2001      	movs	r0, #1
  400cc4:	e7f6      	b.n	400cb4 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400cc6:	2500      	movs	r5, #0
	if (p_uldiv) {
  400cc8:	b12a      	cbz	r2, 400cd6 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400cca:	a906      	add	r1, sp, #24
  400ccc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400cd0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400cd4:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400cd6:	2b00      	cmp	r3, #0
  400cd8:	d0f3      	beq.n	400cc2 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400cda:	601d      	str	r5, [r3, #0]
	return 1;
  400cdc:	2001      	movs	r0, #1
  400cde:	e7e9      	b.n	400cb4 <tc_find_mck_divisor+0x44>

00400ce0 <board_init>:
#include <board.h>
#include <conf_board.h>


void board_init(void)
{
  400ce0:	b510      	push	{r4, lr}
  400ce2:	200b      	movs	r0, #11
  400ce4:	4c0d      	ldr	r4, [pc, #52]	; (400d1c <board_init+0x3c>)
  400ce6:	47a0      	blx	r4
  400ce8:	200c      	movs	r0, #12
  400cea:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400cec:	4b0c      	ldr	r3, [pc, #48]	; (400d20 <board_init+0x40>)
  400cee:	2202      	movs	r2, #2
  400cf0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cf2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400cf6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cf8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  400cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d00:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d06:	2201      	movs	r2, #1
  400d08:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d12:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400d18:	bd10      	pop	{r4, pc}
  400d1a:	bf00      	nop
  400d1c:	00400be5 	.word	0x00400be5
  400d20:	400e1000 	.word	0x400e1000

00400d24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d24:	e7fe      	b.n	400d24 <Dummy_Handler>
	...

00400d28 <Reset_Handler>:
{
  400d28:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400d2a:	4b21      	ldr	r3, [pc, #132]	; (400db0 <Reset_Handler+0x88>)
  400d2c:	4a21      	ldr	r2, [pc, #132]	; (400db4 <Reset_Handler+0x8c>)
  400d2e:	429a      	cmp	r2, r3
  400d30:	d928      	bls.n	400d84 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  400d32:	4b21      	ldr	r3, [pc, #132]	; (400db8 <Reset_Handler+0x90>)
  400d34:	4a1e      	ldr	r2, [pc, #120]	; (400db0 <Reset_Handler+0x88>)
  400d36:	429a      	cmp	r2, r3
  400d38:	d20c      	bcs.n	400d54 <Reset_Handler+0x2c>
  400d3a:	3b01      	subs	r3, #1
  400d3c:	1a9b      	subs	r3, r3, r2
  400d3e:	f023 0303 	bic.w	r3, r3, #3
  400d42:	3304      	adds	r3, #4
  400d44:	4413      	add	r3, r2
  400d46:	491b      	ldr	r1, [pc, #108]	; (400db4 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  400d48:	f851 0b04 	ldr.w	r0, [r1], #4
  400d4c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400d50:	429a      	cmp	r2, r3
  400d52:	d1f9      	bne.n	400d48 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400d54:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  400d56:	4b19      	ldr	r3, [pc, #100]	; (400dbc <Reset_Handler+0x94>)
  400d58:	4a19      	ldr	r2, [pc, #100]	; (400dc0 <Reset_Handler+0x98>)
  400d5a:	429a      	cmp	r2, r3
  400d5c:	d20a      	bcs.n	400d74 <Reset_Handler+0x4c>
  400d5e:	3b01      	subs	r3, #1
  400d60:	1a9b      	subs	r3, r3, r2
  400d62:	f023 0303 	bic.w	r3, r3, #3
  400d66:	3304      	adds	r3, #4
  400d68:	4413      	add	r3, r2
		*pDest++ = 0;
  400d6a:	2100      	movs	r1, #0
  400d6c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400d70:	429a      	cmp	r2, r3
  400d72:	d1fb      	bne.n	400d6c <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400d74:	4b13      	ldr	r3, [pc, #76]	; (400dc4 <Reset_Handler+0x9c>)
  400d76:	4a14      	ldr	r2, [pc, #80]	; (400dc8 <Reset_Handler+0xa0>)
  400d78:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  400d7a:	4b14      	ldr	r3, [pc, #80]	; (400dcc <Reset_Handler+0xa4>)
  400d7c:	4798      	blx	r3
	main();
  400d7e:	4b14      	ldr	r3, [pc, #80]	; (400dd0 <Reset_Handler+0xa8>)
  400d80:	4798      	blx	r3
  400d82:	e7fe      	b.n	400d82 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400d84:	4b0a      	ldr	r3, [pc, #40]	; (400db0 <Reset_Handler+0x88>)
  400d86:	4a0b      	ldr	r2, [pc, #44]	; (400db4 <Reset_Handler+0x8c>)
  400d88:	429a      	cmp	r2, r3
  400d8a:	d2e3      	bcs.n	400d54 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400d8c:	4b0a      	ldr	r3, [pc, #40]	; (400db8 <Reset_Handler+0x90>)
  400d8e:	4808      	ldr	r0, [pc, #32]	; (400db0 <Reset_Handler+0x88>)
  400d90:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400d92:	4611      	mov	r1, r2
  400d94:	3a04      	subs	r2, #4
  400d96:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400d98:	2800      	cmp	r0, #0
  400d9a:	d0db      	beq.n	400d54 <Reset_Handler+0x2c>
  400d9c:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400da0:	f852 0904 	ldr.w	r0, [r2], #-4
  400da4:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400da8:	42ca      	cmn	r2, r1
  400daa:	d1f9      	bne.n	400da0 <Reset_Handler+0x78>
  400dac:	e7d2      	b.n	400d54 <Reset_Handler+0x2c>
  400dae:	bf00      	nop
  400db0:	20000000 	.word	0x20000000
  400db4:	00401958 	.word	0x00401958
  400db8:	2000043c 	.word	0x2000043c
  400dbc:	20000940 	.word	0x20000940
  400dc0:	2000043c 	.word	0x2000043c
  400dc4:	e000ed00 	.word	0xe000ed00
  400dc8:	00400000 	.word	0x00400000
  400dcc:	00400fbd 	.word	0x00400fbd
  400dd0:	00400f59 	.word	0x00400f59

00400dd4 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400dd4:	4b3c      	ldr	r3, [pc, #240]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dd8:	f003 0303 	and.w	r3, r3, #3
  400ddc:	2b03      	cmp	r3, #3
  400dde:	d80e      	bhi.n	400dfe <SystemCoreClockUpdate+0x2a>
  400de0:	e8df f003 	tbb	[pc, r3]
  400de4:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400de8:	4b38      	ldr	r3, [pc, #224]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400dea:	695b      	ldr	r3, [r3, #20]
  400dec:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400df0:	bf14      	ite	ne
  400df2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400df6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400dfa:	4b35      	ldr	r3, [pc, #212]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400dfc:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400dfe:	4b32      	ldr	r3, [pc, #200]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e06:	2b70      	cmp	r3, #112	; 0x70
  400e08:	d055      	beq.n	400eb6 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400e0a:	4b2f      	ldr	r3, [pc, #188]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400e0e:	4930      	ldr	r1, [pc, #192]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400e10:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400e14:	680b      	ldr	r3, [r1, #0]
  400e16:	40d3      	lsrs	r3, r2
  400e18:	600b      	str	r3, [r1, #0]
  400e1a:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e1c:	4b2a      	ldr	r3, [pc, #168]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e1e:	6a1b      	ldr	r3, [r3, #32]
  400e20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e24:	d003      	beq.n	400e2e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400e26:	4a2b      	ldr	r2, [pc, #172]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e28:	4b29      	ldr	r3, [pc, #164]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e2a:	601a      	str	r2, [r3, #0]
  400e2c:	e7e7      	b.n	400dfe <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e2e:	4a2a      	ldr	r2, [pc, #168]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400e30:	4b27      	ldr	r3, [pc, #156]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e32:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e34:	4b24      	ldr	r3, [pc, #144]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e36:	6a1b      	ldr	r3, [r3, #32]
  400e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e3c:	2b10      	cmp	r3, #16
  400e3e:	d005      	beq.n	400e4c <SystemCoreClockUpdate+0x78>
  400e40:	2b20      	cmp	r3, #32
  400e42:	d1dc      	bne.n	400dfe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e44:	4a23      	ldr	r2, [pc, #140]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e46:	4b22      	ldr	r3, [pc, #136]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e48:	601a      	str	r2, [r3, #0]
			break;
  400e4a:	e7d8      	b.n	400dfe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e4c:	4a23      	ldr	r2, [pc, #140]	; (400edc <SystemCoreClockUpdate+0x108>)
  400e4e:	4b20      	ldr	r3, [pc, #128]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e50:	601a      	str	r2, [r3, #0]
			break;
  400e52:	e7d4      	b.n	400dfe <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e54:	4b1c      	ldr	r3, [pc, #112]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e56:	6a1b      	ldr	r3, [r3, #32]
  400e58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e5c:	d018      	beq.n	400e90 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400e5e:	4a1d      	ldr	r2, [pc, #116]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e60:	4b1b      	ldr	r3, [pc, #108]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e62:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400e64:	4b18      	ldr	r3, [pc, #96]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e68:	f003 0303 	and.w	r3, r3, #3
  400e6c:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400e6e:	4a16      	ldr	r2, [pc, #88]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e70:	bf07      	ittee	eq
  400e72:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400e74:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e76:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e78:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400e7a:	4815      	ldr	r0, [pc, #84]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400e7c:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e80:	6803      	ldr	r3, [r0, #0]
  400e82:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400e86:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e88:	fbb3 f3f2 	udiv	r3, r3, r2
  400e8c:	6003      	str	r3, [r0, #0]
  400e8e:	e7b6      	b.n	400dfe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e90:	4a11      	ldr	r2, [pc, #68]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400e92:	4b0f      	ldr	r3, [pc, #60]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e94:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e96:	4b0c      	ldr	r3, [pc, #48]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e98:	6a1b      	ldr	r3, [r3, #32]
  400e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e9e:	2b10      	cmp	r3, #16
  400ea0:	d005      	beq.n	400eae <SystemCoreClockUpdate+0xda>
  400ea2:	2b20      	cmp	r3, #32
  400ea4:	d1de      	bne.n	400e64 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400ea6:	4a0b      	ldr	r2, [pc, #44]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400ea8:	4b09      	ldr	r3, [pc, #36]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400eaa:	601a      	str	r2, [r3, #0]
					break;
  400eac:	e7da      	b.n	400e64 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400eae:	4a0b      	ldr	r2, [pc, #44]	; (400edc <SystemCoreClockUpdate+0x108>)
  400eb0:	4b07      	ldr	r3, [pc, #28]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400eb2:	601a      	str	r2, [r3, #0]
					break;
  400eb4:	e7d6      	b.n	400e64 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400eb6:	4a06      	ldr	r2, [pc, #24]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400eb8:	6813      	ldr	r3, [r2, #0]
  400eba:	4909      	ldr	r1, [pc, #36]	; (400ee0 <SystemCoreClockUpdate+0x10c>)
  400ebc:	fba1 1303 	umull	r1, r3, r1, r3
  400ec0:	085b      	lsrs	r3, r3, #1
  400ec2:	6013      	str	r3, [r2, #0]
  400ec4:	4770      	bx	lr
  400ec6:	bf00      	nop
  400ec8:	400e0400 	.word	0x400e0400
  400ecc:	400e1410 	.word	0x400e1410
  400ed0:	2000000c 	.word	0x2000000c
  400ed4:	00b71b00 	.word	0x00b71b00
  400ed8:	003d0900 	.word	0x003d0900
  400edc:	007a1200 	.word	0x007a1200
  400ee0:	aaaaaaab 	.word	0xaaaaaaab

00400ee4 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400ee4:	4b12      	ldr	r3, [pc, #72]	; (400f30 <system_init_flash+0x4c>)
  400ee6:	4298      	cmp	r0, r3
  400ee8:	d911      	bls.n	400f0e <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400eea:	4b12      	ldr	r3, [pc, #72]	; (400f34 <system_init_flash+0x50>)
  400eec:	4298      	cmp	r0, r3
  400eee:	d913      	bls.n	400f18 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400ef0:	4b11      	ldr	r3, [pc, #68]	; (400f38 <system_init_flash+0x54>)
  400ef2:	4298      	cmp	r0, r3
  400ef4:	d914      	bls.n	400f20 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400ef6:	4b11      	ldr	r3, [pc, #68]	; (400f3c <system_init_flash+0x58>)
  400ef8:	4298      	cmp	r0, r3
  400efa:	d915      	bls.n	400f28 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400efc:	4b10      	ldr	r3, [pc, #64]	; (400f40 <system_init_flash+0x5c>)
  400efe:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f00:	bf94      	ite	ls
  400f02:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f06:	4a0f      	ldrhi	r2, [pc, #60]	; (400f44 <system_init_flash+0x60>)
  400f08:	4b0f      	ldr	r3, [pc, #60]	; (400f48 <system_init_flash+0x64>)
  400f0a:	601a      	str	r2, [r3, #0]
  400f0c:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400f12:	4b0d      	ldr	r3, [pc, #52]	; (400f48 <system_init_flash+0x64>)
  400f14:	601a      	str	r2, [r3, #0]
  400f16:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f18:	4a0c      	ldr	r2, [pc, #48]	; (400f4c <system_init_flash+0x68>)
  400f1a:	4b0b      	ldr	r3, [pc, #44]	; (400f48 <system_init_flash+0x64>)
  400f1c:	601a      	str	r2, [r3, #0]
  400f1e:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f20:	4a0b      	ldr	r2, [pc, #44]	; (400f50 <system_init_flash+0x6c>)
  400f22:	4b09      	ldr	r3, [pc, #36]	; (400f48 <system_init_flash+0x64>)
  400f24:	601a      	str	r2, [r3, #0]
  400f26:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f28:	4a0a      	ldr	r2, [pc, #40]	; (400f54 <system_init_flash+0x70>)
  400f2a:	4b07      	ldr	r3, [pc, #28]	; (400f48 <system_init_flash+0x64>)
  400f2c:	601a      	str	r2, [r3, #0]
  400f2e:	4770      	bx	lr
  400f30:	01312cff 	.word	0x01312cff
  400f34:	026259ff 	.word	0x026259ff
  400f38:	039386ff 	.word	0x039386ff
  400f3c:	04c4b3ff 	.word	0x04c4b3ff
  400f40:	05f5e0ff 	.word	0x05f5e0ff
  400f44:	04000500 	.word	0x04000500
  400f48:	400e0a00 	.word	0x400e0a00
  400f4c:	04000100 	.word	0x04000100
  400f50:	04000200 	.word	0x04000200
  400f54:	04000300 	.word	0x04000300

00400f58 <main>:
// Global variables because 2/3 of us are mechanical engineers and that's just how we roll
volatile uint32_t receivedMessage;


int main (void)
{
  400f58:	b508      	push	{r3, lr}
	// boilerplate
	sysclk_init();
  400f5a:	4b0c      	ldr	r3, [pc, #48]	; (400f8c <main+0x34>)
  400f5c:	4798      	blx	r3
	wdt_disable(WDT);
  400f5e:	480c      	ldr	r0, [pc, #48]	; (400f90 <main+0x38>)
  400f60:	4b0c      	ldr	r3, [pc, #48]	; (400f94 <main+0x3c>)
  400f62:	4798      	blx	r3
	board_init();
  400f64:	4b0c      	ldr	r3, [pc, #48]	; (400f98 <main+0x40>)
  400f66:	4798      	blx	r3
	
	// start the clock that counts the seconds
	configure_tc();
  400f68:	4b0c      	ldr	r3, [pc, #48]	; (400f9c <main+0x44>)
  400f6a:	4798      	blx	r3
	tc_start(TC0, 0);
  400f6c:	2100      	movs	r1, #0
  400f6e:	480c      	ldr	r0, [pc, #48]	; (400fa0 <main+0x48>)
  400f70:	4b0c      	ldr	r3, [pc, #48]	; (400fa4 <main+0x4c>)
  400f72:	4798      	blx	r3

	// Configure the Wifi UART communication stuff
	configure_usart_wifi();
  400f74:	4b0c      	ldr	r3, [pc, #48]	; (400fa8 <main+0x50>)
  400f76:	4798      	blx	r3
	configure_wifi_comm_pin();
  400f78:	4b0c      	ldr	r3, [pc, #48]	; (400fac <main+0x54>)
  400f7a:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  400f7c:	4b0c      	ldr	r3, [pc, #48]	; (400fb0 <main+0x58>)
  400f7e:	4798      	blx	r3
	
	// Reset the wifi
	resetWifi();
  400f80:	4b0c      	ldr	r3, [pc, #48]	; (400fb4 <main+0x5c>)
  400f82:	4798      	blx	r3
		// If user has not requested web setup, try to capture and display an image
		else{

			checkGoFile();
		}*/
		checkGoFile();
  400f84:	4c0c      	ldr	r4, [pc, #48]	; (400fb8 <main+0x60>)
  400f86:	47a0      	blx	r4
  400f88:	e7fd      	b.n	400f86 <main+0x2e>
  400f8a:	bf00      	nop
  400f8c:	0040083d 	.word	0x0040083d
  400f90:	400e1450 	.word	0x400e1450
  400f94:	0040039d 	.word	0x0040039d
  400f98:	00400ce1 	.word	0x00400ce1
  400f9c:	004003cd 	.word	0x004003cd
  400fa0:	40010000 	.word	0x40010000
  400fa4:	00400c51 	.word	0x00400c51
  400fa8:	0040055d 	.word	0x0040055d
  400fac:	00400611 	.word	0x00400611
  400fb0:	0040066d 	.word	0x0040066d
  400fb4:	00400701 	.word	0x00400701
  400fb8:	00400729 	.word	0x00400729

00400fbc <__libc_init_array>:
  400fbc:	b570      	push	{r4, r5, r6, lr}
  400fbe:	4e0f      	ldr	r6, [pc, #60]	; (400ffc <__libc_init_array+0x40>)
  400fc0:	4d0f      	ldr	r5, [pc, #60]	; (401000 <__libc_init_array+0x44>)
  400fc2:	1b76      	subs	r6, r6, r5
  400fc4:	10b6      	asrs	r6, r6, #2
  400fc6:	bf18      	it	ne
  400fc8:	2400      	movne	r4, #0
  400fca:	d005      	beq.n	400fd8 <__libc_init_array+0x1c>
  400fcc:	3401      	adds	r4, #1
  400fce:	f855 3b04 	ldr.w	r3, [r5], #4
  400fd2:	4798      	blx	r3
  400fd4:	42a6      	cmp	r6, r4
  400fd6:	d1f9      	bne.n	400fcc <__libc_init_array+0x10>
  400fd8:	4e0a      	ldr	r6, [pc, #40]	; (401004 <__libc_init_array+0x48>)
  400fda:	4d0b      	ldr	r5, [pc, #44]	; (401008 <__libc_init_array+0x4c>)
  400fdc:	1b76      	subs	r6, r6, r5
  400fde:	f000 fca9 	bl	401934 <_init>
  400fe2:	10b6      	asrs	r6, r6, #2
  400fe4:	bf18      	it	ne
  400fe6:	2400      	movne	r4, #0
  400fe8:	d006      	beq.n	400ff8 <__libc_init_array+0x3c>
  400fea:	3401      	adds	r4, #1
  400fec:	f855 3b04 	ldr.w	r3, [r5], #4
  400ff0:	4798      	blx	r3
  400ff2:	42a6      	cmp	r6, r4
  400ff4:	d1f9      	bne.n	400fea <__libc_init_array+0x2e>
  400ff6:	bd70      	pop	{r4, r5, r6, pc}
  400ff8:	bd70      	pop	{r4, r5, r6, pc}
  400ffa:	bf00      	nop
  400ffc:	00401940 	.word	0x00401940
  401000:	00401940 	.word	0x00401940
  401004:	00401948 	.word	0x00401948
  401008:	00401940 	.word	0x00401940

0040100c <strcpy>:
  40100c:	ea80 0201 	eor.w	r2, r0, r1
  401010:	4684      	mov	ip, r0
  401012:	f012 0f03 	tst.w	r2, #3
  401016:	d14f      	bne.n	4010b8 <strcpy+0xac>
  401018:	f011 0f03 	tst.w	r1, #3
  40101c:	d132      	bne.n	401084 <strcpy+0x78>
  40101e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  401022:	f011 0f04 	tst.w	r1, #4
  401026:	f851 3b04 	ldr.w	r3, [r1], #4
  40102a:	d00b      	beq.n	401044 <strcpy+0x38>
  40102c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  401030:	439a      	bics	r2, r3
  401032:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401036:	bf04      	itt	eq
  401038:	f84c 3b04 	streq.w	r3, [ip], #4
  40103c:	f851 3b04 	ldreq.w	r3, [r1], #4
  401040:	d116      	bne.n	401070 <strcpy+0x64>
  401042:	bf00      	nop
  401044:	f851 4b04 	ldr.w	r4, [r1], #4
  401048:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40104c:	439a      	bics	r2, r3
  40104e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401052:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  401056:	d10b      	bne.n	401070 <strcpy+0x64>
  401058:	f84c 3b04 	str.w	r3, [ip], #4
  40105c:	43a2      	bics	r2, r4
  40105e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401062:	bf04      	itt	eq
  401064:	f851 3b04 	ldreq.w	r3, [r1], #4
  401068:	f84c 4b04 	streq.w	r4, [ip], #4
  40106c:	d0ea      	beq.n	401044 <strcpy+0x38>
  40106e:	4623      	mov	r3, r4
  401070:	f80c 3b01 	strb.w	r3, [ip], #1
  401074:	f013 0fff 	tst.w	r3, #255	; 0xff
  401078:	ea4f 2333 	mov.w	r3, r3, ror #8
  40107c:	d1f8      	bne.n	401070 <strcpy+0x64>
  40107e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401082:	4770      	bx	lr
  401084:	f011 0f01 	tst.w	r1, #1
  401088:	d006      	beq.n	401098 <strcpy+0x8c>
  40108a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40108e:	f80c 2b01 	strb.w	r2, [ip], #1
  401092:	2a00      	cmp	r2, #0
  401094:	bf08      	it	eq
  401096:	4770      	bxeq	lr
  401098:	f011 0f02 	tst.w	r1, #2
  40109c:	d0bf      	beq.n	40101e <strcpy+0x12>
  40109e:	f831 2b02 	ldrh.w	r2, [r1], #2
  4010a2:	f012 0fff 	tst.w	r2, #255	; 0xff
  4010a6:	bf16      	itet	ne
  4010a8:	f82c 2b02 	strhne.w	r2, [ip], #2
  4010ac:	f88c 2000 	strbeq.w	r2, [ip]
  4010b0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4010b4:	d1b3      	bne.n	40101e <strcpy+0x12>
  4010b6:	4770      	bx	lr
  4010b8:	f811 2b01 	ldrb.w	r2, [r1], #1
  4010bc:	f80c 2b01 	strb.w	r2, [ip], #1
  4010c0:	2a00      	cmp	r2, #0
  4010c2:	d1f9      	bne.n	4010b8 <strcpy+0xac>
  4010c4:	4770      	bx	lr
  4010c6:	bf00      	nop

004010c8 <critical_factorization>:
  4010c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010cc:	f04f 0e01 	mov.w	lr, #1
  4010d0:	4674      	mov	r4, lr
  4010d2:	2500      	movs	r5, #0
  4010d4:	f04f 36ff 	mov.w	r6, #4294967295
  4010d8:	192b      	adds	r3, r5, r4
  4010da:	428b      	cmp	r3, r1
  4010dc:	eb00 0706 	add.w	r7, r0, r6
  4010e0:	d20d      	bcs.n	4010fe <critical_factorization+0x36>
  4010e2:	5d3f      	ldrb	r7, [r7, r4]
  4010e4:	f810 c003 	ldrb.w	ip, [r0, r3]
  4010e8:	45bc      	cmp	ip, r7
  4010ea:	d22d      	bcs.n	401148 <critical_factorization+0x80>
  4010ec:	461d      	mov	r5, r3
  4010ee:	2401      	movs	r4, #1
  4010f0:	eba3 0e06 	sub.w	lr, r3, r6
  4010f4:	192b      	adds	r3, r5, r4
  4010f6:	428b      	cmp	r3, r1
  4010f8:	eb00 0706 	add.w	r7, r0, r6
  4010fc:	d3f1      	bcc.n	4010e2 <critical_factorization+0x1a>
  4010fe:	f04f 0801 	mov.w	r8, #1
  401102:	f8c2 e000 	str.w	lr, [r2]
  401106:	4644      	mov	r4, r8
  401108:	2500      	movs	r5, #0
  40110a:	f04f 37ff 	mov.w	r7, #4294967295
  40110e:	192b      	adds	r3, r5, r4
  401110:	4299      	cmp	r1, r3
  401112:	eb00 0e07 	add.w	lr, r0, r7
  401116:	d90e      	bls.n	401136 <critical_factorization+0x6e>
  401118:	f81e e004 	ldrb.w	lr, [lr, r4]
  40111c:	f810 c003 	ldrb.w	ip, [r0, r3]
  401120:	45f4      	cmp	ip, lr
  401122:	d918      	bls.n	401156 <critical_factorization+0x8e>
  401124:	461d      	mov	r5, r3
  401126:	2401      	movs	r4, #1
  401128:	eba3 0807 	sub.w	r8, r3, r7
  40112c:	192b      	adds	r3, r5, r4
  40112e:	4299      	cmp	r1, r3
  401130:	eb00 0e07 	add.w	lr, r0, r7
  401134:	d8f0      	bhi.n	401118 <critical_factorization+0x50>
  401136:	3701      	adds	r7, #1
  401138:	1c70      	adds	r0, r6, #1
  40113a:	4287      	cmp	r7, r0
  40113c:	bf24      	itt	cs
  40113e:	f8c2 8000 	strcs.w	r8, [r2]
  401142:	4638      	movcs	r0, r7
  401144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401148:	d00c      	beq.n	401164 <critical_factorization+0x9c>
  40114a:	f04f 0e01 	mov.w	lr, #1
  40114e:	462e      	mov	r6, r5
  401150:	4674      	mov	r4, lr
  401152:	4475      	add	r5, lr
  401154:	e7c0      	b.n	4010d8 <critical_factorization+0x10>
  401156:	d00b      	beq.n	401170 <critical_factorization+0xa8>
  401158:	f04f 0801 	mov.w	r8, #1
  40115c:	462f      	mov	r7, r5
  40115e:	4644      	mov	r4, r8
  401160:	4445      	add	r5, r8
  401162:	e7d4      	b.n	40110e <critical_factorization+0x46>
  401164:	4574      	cmp	r4, lr
  401166:	bf12      	itee	ne
  401168:	3401      	addne	r4, #1
  40116a:	461d      	moveq	r5, r3
  40116c:	2401      	moveq	r4, #1
  40116e:	e7b3      	b.n	4010d8 <critical_factorization+0x10>
  401170:	4544      	cmp	r4, r8
  401172:	bf12      	itee	ne
  401174:	3401      	addne	r4, #1
  401176:	461d      	moveq	r5, r3
  401178:	2401      	moveq	r4, #1
  40117a:	e7c8      	b.n	40110e <critical_factorization+0x46>

0040117c <two_way_long_needle>:
  40117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401180:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  401184:	4616      	mov	r6, r2
  401186:	4605      	mov	r5, r0
  401188:	468b      	mov	fp, r1
  40118a:	4610      	mov	r0, r2
  40118c:	4619      	mov	r1, r3
  40118e:	aa03      	add	r2, sp, #12
  401190:	461c      	mov	r4, r3
  401192:	f7ff ff99 	bl	4010c8 <critical_factorization>
  401196:	ab03      	add	r3, sp, #12
  401198:	4681      	mov	r9, r0
  40119a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  40119e:	f843 4f04 	str.w	r4, [r3, #4]!
  4011a2:	4293      	cmp	r3, r2
  4011a4:	d1fb      	bne.n	40119e <two_way_long_needle+0x22>
  4011a6:	b14c      	cbz	r4, 4011bc <two_way_long_needle+0x40>
  4011a8:	1e63      	subs	r3, r4, #1
  4011aa:	1e72      	subs	r2, r6, #1
  4011ac:	a804      	add	r0, sp, #16
  4011ae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4011b2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4011b6:	f113 33ff 	adds.w	r3, r3, #4294967295
  4011ba:	d2f8      	bcs.n	4011ae <two_way_long_needle+0x32>
  4011bc:	9903      	ldr	r1, [sp, #12]
  4011be:	464a      	mov	r2, r9
  4011c0:	4431      	add	r1, r6
  4011c2:	4630      	mov	r0, r6
  4011c4:	f000 fa64 	bl	401690 <memcmp>
  4011c8:	2800      	cmp	r0, #0
  4011ca:	d16f      	bne.n	4012ac <two_way_long_needle+0x130>
  4011cc:	f109 33ff 	add.w	r3, r9, #4294967295
  4011d0:	9300      	str	r3, [sp, #0]
  4011d2:	18f3      	adds	r3, r6, r3
  4011d4:	4682      	mov	sl, r0
  4011d6:	9301      	str	r3, [sp, #4]
  4011d8:	4623      	mov	r3, r4
  4011da:	4680      	mov	r8, r0
  4011dc:	4654      	mov	r4, sl
  4011de:	4658      	mov	r0, fp
  4011e0:	469a      	mov	sl, r3
  4011e2:	eb08 070a 	add.w	r7, r8, sl
  4011e6:	1a3a      	subs	r2, r7, r0
  4011e8:	2100      	movs	r1, #0
  4011ea:	4428      	add	r0, r5
  4011ec:	f000 fa00 	bl	4015f0 <memchr>
  4011f0:	2800      	cmp	r0, #0
  4011f2:	d156      	bne.n	4012a2 <two_way_long_needle+0x126>
  4011f4:	2f00      	cmp	r7, #0
  4011f6:	d054      	beq.n	4012a2 <two_way_long_needle+0x126>
  4011f8:	19eb      	adds	r3, r5, r7
  4011fa:	aa04      	add	r2, sp, #16
  4011fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  401200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401204:	b14b      	cbz	r3, 40121a <two_way_long_needle+0x9e>
  401206:	b124      	cbz	r4, 401212 <two_way_long_needle+0x96>
  401208:	9a03      	ldr	r2, [sp, #12]
  40120a:	4293      	cmp	r3, r2
  40120c:	d201      	bcs.n	401212 <two_way_long_needle+0x96>
  40120e:	ebaa 0302 	sub.w	r3, sl, r2
  401212:	4498      	add	r8, r3
  401214:	2400      	movs	r4, #0
  401216:	4638      	mov	r0, r7
  401218:	e7e3      	b.n	4011e2 <two_way_long_needle+0x66>
  40121a:	454c      	cmp	r4, r9
  40121c:	4623      	mov	r3, r4
  40121e:	f10a 3eff 	add.w	lr, sl, #4294967295
  401222:	bf38      	it	cc
  401224:	464b      	movcc	r3, r9
  401226:	4573      	cmp	r3, lr
  401228:	d213      	bcs.n	401252 <two_way_long_needle+0xd6>
  40122a:	eb08 0203 	add.w	r2, r8, r3
  40122e:	f816 c003 	ldrb.w	ip, [r6, r3]
  401232:	5ca8      	ldrb	r0, [r5, r2]
  401234:	4584      	cmp	ip, r0
  401236:	442a      	add	r2, r5
  401238:	eb06 0103 	add.w	r1, r6, r3
  40123c:	d006      	beq.n	40124c <two_way_long_needle+0xd0>
  40123e:	e02c      	b.n	40129a <two_way_long_needle+0x11e>
  401240:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  401244:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  401248:	4584      	cmp	ip, r0
  40124a:	d126      	bne.n	40129a <two_way_long_needle+0x11e>
  40124c:	3301      	adds	r3, #1
  40124e:	4573      	cmp	r3, lr
  401250:	d3f6      	bcc.n	401240 <two_way_long_needle+0xc4>
  401252:	454c      	cmp	r4, r9
  401254:	9900      	ldr	r1, [sp, #0]
  401256:	f080 8089 	bcs.w	40136c <two_way_long_needle+0x1f0>
  40125a:	9b00      	ldr	r3, [sp, #0]
  40125c:	eb08 0203 	add.w	r2, r8, r3
  401260:	9b01      	ldr	r3, [sp, #4]
  401262:	5ca8      	ldrb	r0, [r5, r2]
  401264:	781b      	ldrb	r3, [r3, #0]
  401266:	4298      	cmp	r0, r3
  401268:	442a      	add	r2, r5
  40126a:	d17f      	bne.n	40136c <two_way_long_needle+0x1f0>
  40126c:	9801      	ldr	r0, [sp, #4]
  40126e:	f104 3bff 	add.w	fp, r4, #4294967295
  401272:	e006      	b.n	401282 <two_way_long_needle+0x106>
  401274:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  401278:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40127c:	45f4      	cmp	ip, lr
  40127e:	d103      	bne.n	401288 <two_way_long_needle+0x10c>
  401280:	4619      	mov	r1, r3
  401282:	1e4b      	subs	r3, r1, #1
  401284:	459b      	cmp	fp, r3
  401286:	d1f5      	bne.n	401274 <two_way_long_needle+0xf8>
  401288:	3401      	adds	r4, #1
  40128a:	428c      	cmp	r4, r1
  40128c:	d870      	bhi.n	401370 <two_way_long_needle+0x1f4>
  40128e:	9c03      	ldr	r4, [sp, #12]
  401290:	4638      	mov	r0, r7
  401292:	44a0      	add	r8, r4
  401294:	ebaa 0404 	sub.w	r4, sl, r4
  401298:	e7a3      	b.n	4011e2 <two_way_long_needle+0x66>
  40129a:	f1c9 0201 	rsb	r2, r9, #1
  40129e:	4490      	add	r8, r2
  4012a0:	e7b7      	b.n	401212 <two_way_long_needle+0x96>
  4012a2:	2000      	movs	r0, #0
  4012a4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012ac:	eba4 0309 	sub.w	r3, r4, r9
  4012b0:	454b      	cmp	r3, r9
  4012b2:	bf38      	it	cc
  4012b4:	464b      	movcc	r3, r9
  4012b6:	3301      	adds	r3, #1
  4012b8:	f109 38ff 	add.w	r8, r9, #4294967295
  4012bc:	9303      	str	r3, [sp, #12]
  4012be:	eb06 0308 	add.w	r3, r6, r8
  4012c2:	4658      	mov	r0, fp
  4012c4:	f04f 0a00 	mov.w	sl, #0
  4012c8:	46cb      	mov	fp, r9
  4012ca:	4699      	mov	r9, r3
  4012cc:	eb0a 0704 	add.w	r7, sl, r4
  4012d0:	1a3a      	subs	r2, r7, r0
  4012d2:	2100      	movs	r1, #0
  4012d4:	4428      	add	r0, r5
  4012d6:	f000 f98b 	bl	4015f0 <memchr>
  4012da:	2800      	cmp	r0, #0
  4012dc:	d1e1      	bne.n	4012a2 <two_way_long_needle+0x126>
  4012de:	2f00      	cmp	r7, #0
  4012e0:	d0df      	beq.n	4012a2 <two_way_long_needle+0x126>
  4012e2:	19eb      	adds	r3, r5, r7
  4012e4:	aa04      	add	r2, sp, #16
  4012e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4012ee:	bba3      	cbnz	r3, 40135a <two_way_long_needle+0x1de>
  4012f0:	1e61      	subs	r1, r4, #1
  4012f2:	458b      	cmp	fp, r1
  4012f4:	d215      	bcs.n	401322 <two_way_long_needle+0x1a6>
  4012f6:	eb0a 020b 	add.w	r2, sl, fp
  4012fa:	f816 300b 	ldrb.w	r3, [r6, fp]
  4012fe:	f815 e002 	ldrb.w	lr, [r5, r2]
  401302:	459e      	cmp	lr, r3
  401304:	442a      	add	r2, r5
  401306:	eb06 000b 	add.w	r0, r6, fp
  40130a:	465b      	mov	r3, fp
  40130c:	d006      	beq.n	40131c <two_way_long_needle+0x1a0>
  40130e:	e027      	b.n	401360 <two_way_long_needle+0x1e4>
  401310:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  401314:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  401318:	45f4      	cmp	ip, lr
  40131a:	d121      	bne.n	401360 <two_way_long_needle+0x1e4>
  40131c:	3301      	adds	r3, #1
  40131e:	428b      	cmp	r3, r1
  401320:	d3f6      	bcc.n	401310 <two_way_long_needle+0x194>
  401322:	f1b8 3fff 	cmp.w	r8, #4294967295
  401326:	d011      	beq.n	40134c <two_way_long_needle+0x1d0>
  401328:	eb0a 0208 	add.w	r2, sl, r8
  40132c:	f899 1000 	ldrb.w	r1, [r9]
  401330:	5cab      	ldrb	r3, [r5, r2]
  401332:	4299      	cmp	r1, r3
  401334:	442a      	add	r2, r5
  401336:	d10f      	bne.n	401358 <two_way_long_needle+0x1dc>
  401338:	464b      	mov	r3, r9
  40133a:	e005      	b.n	401348 <two_way_long_needle+0x1cc>
  40133c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401340:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  401344:	4288      	cmp	r0, r1
  401346:	d107      	bne.n	401358 <two_way_long_needle+0x1dc>
  401348:	42b3      	cmp	r3, r6
  40134a:	d1f7      	bne.n	40133c <two_way_long_needle+0x1c0>
  40134c:	eb05 000a 	add.w	r0, r5, sl
  401350:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  401354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401358:	9b03      	ldr	r3, [sp, #12]
  40135a:	449a      	add	sl, r3
  40135c:	4638      	mov	r0, r7
  40135e:	e7b5      	b.n	4012cc <two_way_long_needle+0x150>
  401360:	f1cb 0201 	rsb	r2, fp, #1
  401364:	4492      	add	sl, r2
  401366:	449a      	add	sl, r3
  401368:	4638      	mov	r0, r7
  40136a:	e7af      	b.n	4012cc <two_way_long_needle+0x150>
  40136c:	4649      	mov	r1, r9
  40136e:	e78b      	b.n	401288 <two_way_long_needle+0x10c>
  401370:	eb05 0008 	add.w	r0, r5, r8
  401374:	e796      	b.n	4012a4 <two_way_long_needle+0x128>
  401376:	bf00      	nop

00401378 <strstr>:
  401378:	7802      	ldrb	r2, [r0, #0]
  40137a:	2a00      	cmp	r2, #0
  40137c:	f000 8101 	beq.w	401582 <strstr+0x20a>
  401380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401384:	f891 8000 	ldrb.w	r8, [r1]
  401388:	b085      	sub	sp, #20
  40138a:	4644      	mov	r4, r8
  40138c:	f1b8 0f00 	cmp.w	r8, #0
  401390:	d016      	beq.n	4013c0 <strstr+0x48>
  401392:	4686      	mov	lr, r0
  401394:	f101 0c01 	add.w	ip, r1, #1
  401398:	2701      	movs	r7, #1
  40139a:	e003      	b.n	4013a4 <strstr+0x2c>
  40139c:	f813 4b01 	ldrb.w	r4, [r3], #1
  4013a0:	b16c      	cbz	r4, 4013be <strstr+0x46>
  4013a2:	469c      	mov	ip, r3
  4013a4:	42a2      	cmp	r2, r4
  4013a6:	bf14      	ite	ne
  4013a8:	2700      	movne	r7, #0
  4013aa:	f007 0701 	andeq.w	r7, r7, #1
  4013ae:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4013b2:	4663      	mov	r3, ip
  4013b4:	2a00      	cmp	r2, #0
  4013b6:	d1f1      	bne.n	40139c <strstr+0x24>
  4013b8:	f89c 3000 	ldrb.w	r3, [ip]
  4013bc:	b9fb      	cbnz	r3, 4013fe <strstr+0x86>
  4013be:	b117      	cbz	r7, 4013c6 <strstr+0x4e>
  4013c0:	b005      	add	sp, #20
  4013c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4013c6:	460e      	mov	r6, r1
  4013c8:	4605      	mov	r5, r0
  4013ca:	4641      	mov	r1, r8
  4013cc:	3001      	adds	r0, #1
  4013ce:	ebac 0406 	sub.w	r4, ip, r6
  4013d2:	f000 f98d 	bl	4016f0 <strchr>
  4013d6:	4607      	mov	r7, r0
  4013d8:	b188      	cbz	r0, 4013fe <strstr+0x86>
  4013da:	2c01      	cmp	r4, #1
  4013dc:	d0f0      	beq.n	4013c0 <strstr+0x48>
  4013de:	1928      	adds	r0, r5, r4
  4013e0:	4287      	cmp	r7, r0
  4013e2:	bf94      	ite	ls
  4013e4:	1bc1      	subls	r1, r0, r7
  4013e6:	2101      	movhi	r1, #1
  4013e8:	2c1f      	cmp	r4, #31
  4013ea:	468b      	mov	fp, r1
  4013ec:	d90b      	bls.n	401406 <strstr+0x8e>
  4013ee:	4623      	mov	r3, r4
  4013f0:	4632      	mov	r2, r6
  4013f2:	4638      	mov	r0, r7
  4013f4:	f7ff fec2 	bl	40117c <two_way_long_needle>
  4013f8:	b005      	add	sp, #20
  4013fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4013fe:	2000      	movs	r0, #0
  401400:	b005      	add	sp, #20
  401402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401406:	aa03      	add	r2, sp, #12
  401408:	4621      	mov	r1, r4
  40140a:	4630      	mov	r0, r6
  40140c:	f7ff fe5c 	bl	4010c8 <critical_factorization>
  401410:	9903      	ldr	r1, [sp, #12]
  401412:	4680      	mov	r8, r0
  401414:	4602      	mov	r2, r0
  401416:	4431      	add	r1, r6
  401418:	4630      	mov	r0, r6
  40141a:	f000 f939 	bl	401690 <memcmp>
  40141e:	2800      	cmp	r0, #0
  401420:	d157      	bne.n	4014d2 <strstr+0x15a>
  401422:	f108 33ff 	add.w	r3, r8, #4294967295
  401426:	9300      	str	r3, [sp, #0]
  401428:	18f3      	adds	r3, r6, r3
  40142a:	4681      	mov	r9, r0
  40142c:	4605      	mov	r5, r0
  40142e:	9301      	str	r3, [sp, #4]
  401430:	4658      	mov	r0, fp
  401432:	46b2      	mov	sl, r6
  401434:	1966      	adds	r6, r4, r5
  401436:	1a32      	subs	r2, r6, r0
  401438:	2100      	movs	r1, #0
  40143a:	4438      	add	r0, r7
  40143c:	f000 f8d8 	bl	4015f0 <memchr>
  401440:	2800      	cmp	r0, #0
  401442:	d1dc      	bne.n	4013fe <strstr+0x86>
  401444:	2e00      	cmp	r6, #0
  401446:	d0da      	beq.n	4013fe <strstr+0x86>
  401448:	45c8      	cmp	r8, r9
  40144a:	4643      	mov	r3, r8
  40144c:	bf38      	it	cc
  40144e:	464b      	movcc	r3, r9
  401450:	429c      	cmp	r4, r3
  401452:	d912      	bls.n	40147a <strstr+0x102>
  401454:	195a      	adds	r2, r3, r5
  401456:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40145a:	5cb8      	ldrb	r0, [r7, r2]
  40145c:	4281      	cmp	r1, r0
  40145e:	443a      	add	r2, r7
  401460:	eb0a 0e03 	add.w	lr, sl, r3
  401464:	d006      	beq.n	401474 <strstr+0xfc>
  401466:	e02c      	b.n	4014c2 <strstr+0x14a>
  401468:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40146c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  401470:	4288      	cmp	r0, r1
  401472:	d126      	bne.n	4014c2 <strstr+0x14a>
  401474:	3301      	adds	r3, #1
  401476:	429c      	cmp	r4, r3
  401478:	d1f6      	bne.n	401468 <strstr+0xf0>
  40147a:	45c8      	cmp	r8, r9
  40147c:	9900      	ldr	r1, [sp, #0]
  40147e:	f240 8083 	bls.w	401588 <strstr+0x210>
  401482:	9b00      	ldr	r3, [sp, #0]
  401484:	18ea      	adds	r2, r5, r3
  401486:	9b01      	ldr	r3, [sp, #4]
  401488:	5cb8      	ldrb	r0, [r7, r2]
  40148a:	781b      	ldrb	r3, [r3, #0]
  40148c:	4298      	cmp	r0, r3
  40148e:	443a      	add	r2, r7
  401490:	d17a      	bne.n	401588 <strstr+0x210>
  401492:	9801      	ldr	r0, [sp, #4]
  401494:	f109 3bff 	add.w	fp, r9, #4294967295
  401498:	e006      	b.n	4014a8 <strstr+0x130>
  40149a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40149e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4014a2:	45f4      	cmp	ip, lr
  4014a4:	d103      	bne.n	4014ae <strstr+0x136>
  4014a6:	4619      	mov	r1, r3
  4014a8:	1e4b      	subs	r3, r1, #1
  4014aa:	455b      	cmp	r3, fp
  4014ac:	d1f5      	bne.n	40149a <strstr+0x122>
  4014ae:	f109 0901 	add.w	r9, r9, #1
  4014b2:	4589      	cmp	r9, r1
  4014b4:	d857      	bhi.n	401566 <strstr+0x1ee>
  4014b6:	9b03      	ldr	r3, [sp, #12]
  4014b8:	4630      	mov	r0, r6
  4014ba:	441d      	add	r5, r3
  4014bc:	eba4 0903 	sub.w	r9, r4, r3
  4014c0:	e7b8      	b.n	401434 <strstr+0xbc>
  4014c2:	f1c8 0201 	rsb	r2, r8, #1
  4014c6:	4415      	add	r5, r2
  4014c8:	441d      	add	r5, r3
  4014ca:	f04f 0900 	mov.w	r9, #0
  4014ce:	4630      	mov	r0, r6
  4014d0:	e7b0      	b.n	401434 <strstr+0xbc>
  4014d2:	eba4 0308 	sub.w	r3, r4, r8
  4014d6:	4543      	cmp	r3, r8
  4014d8:	bf38      	it	cc
  4014da:	4643      	movcc	r3, r8
  4014dc:	3301      	adds	r3, #1
  4014de:	f108 39ff 	add.w	r9, r8, #4294967295
  4014e2:	9303      	str	r3, [sp, #12]
  4014e4:	eb06 0309 	add.w	r3, r6, r9
  4014e8:	4658      	mov	r0, fp
  4014ea:	2500      	movs	r5, #0
  4014ec:	46bb      	mov	fp, r7
  4014ee:	469a      	mov	sl, r3
  4014f0:	1967      	adds	r7, r4, r5
  4014f2:	1a3a      	subs	r2, r7, r0
  4014f4:	2100      	movs	r1, #0
  4014f6:	4458      	add	r0, fp
  4014f8:	f000 f87a 	bl	4015f0 <memchr>
  4014fc:	2800      	cmp	r0, #0
  4014fe:	f47f af7e 	bne.w	4013fe <strstr+0x86>
  401502:	2f00      	cmp	r7, #0
  401504:	f43f af7b 	beq.w	4013fe <strstr+0x86>
  401508:	4544      	cmp	r4, r8
  40150a:	d915      	bls.n	401538 <strstr+0x1c0>
  40150c:	eb08 0205 	add.w	r2, r8, r5
  401510:	f816 3008 	ldrb.w	r3, [r6, r8]
  401514:	f81b 0002 	ldrb.w	r0, [fp, r2]
  401518:	4298      	cmp	r0, r3
  40151a:	445a      	add	r2, fp
  40151c:	eb06 0108 	add.w	r1, r6, r8
  401520:	4643      	mov	r3, r8
  401522:	d006      	beq.n	401532 <strstr+0x1ba>
  401524:	e023      	b.n	40156e <strstr+0x1f6>
  401526:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40152a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40152e:	4586      	cmp	lr, r0
  401530:	d11d      	bne.n	40156e <strstr+0x1f6>
  401532:	3301      	adds	r3, #1
  401534:	429c      	cmp	r4, r3
  401536:	d1f6      	bne.n	401526 <strstr+0x1ae>
  401538:	f1b9 3fff 	cmp.w	r9, #4294967295
  40153c:	d012      	beq.n	401564 <strstr+0x1ec>
  40153e:	eb05 0209 	add.w	r2, r5, r9
  401542:	f89a 3000 	ldrb.w	r3, [sl]
  401546:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40154a:	4299      	cmp	r1, r3
  40154c:	445a      	add	r2, fp
  40154e:	d114      	bne.n	40157a <strstr+0x202>
  401550:	4653      	mov	r3, sl
  401552:	e005      	b.n	401560 <strstr+0x1e8>
  401554:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401558:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40155c:	4288      	cmp	r0, r1
  40155e:	d10c      	bne.n	40157a <strstr+0x202>
  401560:	42b3      	cmp	r3, r6
  401562:	d1f7      	bne.n	401554 <strstr+0x1dc>
  401564:	465f      	mov	r7, fp
  401566:	1978      	adds	r0, r7, r5
  401568:	b005      	add	sp, #20
  40156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40156e:	f1c8 0201 	rsb	r2, r8, #1
  401572:	4415      	add	r5, r2
  401574:	441d      	add	r5, r3
  401576:	4638      	mov	r0, r7
  401578:	e7ba      	b.n	4014f0 <strstr+0x178>
  40157a:	9b03      	ldr	r3, [sp, #12]
  40157c:	4638      	mov	r0, r7
  40157e:	441d      	add	r5, r3
  401580:	e7b6      	b.n	4014f0 <strstr+0x178>
  401582:	780b      	ldrb	r3, [r1, #0]
  401584:	b913      	cbnz	r3, 40158c <strstr+0x214>
  401586:	4770      	bx	lr
  401588:	4641      	mov	r1, r8
  40158a:	e790      	b.n	4014ae <strstr+0x136>
  40158c:	2000      	movs	r0, #0
  40158e:	4770      	bx	lr

00401590 <register_fini>:
  401590:	4b02      	ldr	r3, [pc, #8]	; (40159c <register_fini+0xc>)
  401592:	b113      	cbz	r3, 40159a <register_fini+0xa>
  401594:	4802      	ldr	r0, [pc, #8]	; (4015a0 <register_fini+0x10>)
  401596:	f000 b805 	b.w	4015a4 <atexit>
  40159a:	4770      	bx	lr
  40159c:	00000000 	.word	0x00000000
  4015a0:	004015b1 	.word	0x004015b1

004015a4 <atexit>:
  4015a4:	2300      	movs	r3, #0
  4015a6:	4601      	mov	r1, r0
  4015a8:	461a      	mov	r2, r3
  4015aa:	4618      	mov	r0, r3
  4015ac:	f000 b914 	b.w	4017d8 <__register_exitproc>

004015b0 <__libc_fini_array>:
  4015b0:	b538      	push	{r3, r4, r5, lr}
  4015b2:	4c0a      	ldr	r4, [pc, #40]	; (4015dc <__libc_fini_array+0x2c>)
  4015b4:	4d0a      	ldr	r5, [pc, #40]	; (4015e0 <__libc_fini_array+0x30>)
  4015b6:	1b64      	subs	r4, r4, r5
  4015b8:	10a4      	asrs	r4, r4, #2
  4015ba:	d00a      	beq.n	4015d2 <__libc_fini_array+0x22>
  4015bc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4015c0:	3b01      	subs	r3, #1
  4015c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4015c6:	3c01      	subs	r4, #1
  4015c8:	f855 3904 	ldr.w	r3, [r5], #-4
  4015cc:	4798      	blx	r3
  4015ce:	2c00      	cmp	r4, #0
  4015d0:	d1f9      	bne.n	4015c6 <__libc_fini_array+0x16>
  4015d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4015d6:	f000 b9b7 	b.w	401948 <_fini>
  4015da:	bf00      	nop
  4015dc:	00401958 	.word	0x00401958
  4015e0:	00401954 	.word	0x00401954

004015e4 <__retarget_lock_acquire_recursive>:
  4015e4:	4770      	bx	lr
  4015e6:	bf00      	nop

004015e8 <__retarget_lock_release_recursive>:
  4015e8:	4770      	bx	lr
  4015ea:	bf00      	nop
  4015ec:	0000      	movs	r0, r0
	...

004015f0 <memchr>:
  4015f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4015f4:	2a10      	cmp	r2, #16
  4015f6:	db2b      	blt.n	401650 <memchr+0x60>
  4015f8:	f010 0f07 	tst.w	r0, #7
  4015fc:	d008      	beq.n	401610 <memchr+0x20>
  4015fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  401602:	3a01      	subs	r2, #1
  401604:	428b      	cmp	r3, r1
  401606:	d02d      	beq.n	401664 <memchr+0x74>
  401608:	f010 0f07 	tst.w	r0, #7
  40160c:	b342      	cbz	r2, 401660 <memchr+0x70>
  40160e:	d1f6      	bne.n	4015fe <memchr+0xe>
  401610:	b4f0      	push	{r4, r5, r6, r7}
  401612:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  401616:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40161a:	f022 0407 	bic.w	r4, r2, #7
  40161e:	f07f 0700 	mvns.w	r7, #0
  401622:	2300      	movs	r3, #0
  401624:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  401628:	3c08      	subs	r4, #8
  40162a:	ea85 0501 	eor.w	r5, r5, r1
  40162e:	ea86 0601 	eor.w	r6, r6, r1
  401632:	fa85 f547 	uadd8	r5, r5, r7
  401636:	faa3 f587 	sel	r5, r3, r7
  40163a:	fa86 f647 	uadd8	r6, r6, r7
  40163e:	faa5 f687 	sel	r6, r5, r7
  401642:	b98e      	cbnz	r6, 401668 <memchr+0x78>
  401644:	d1ee      	bne.n	401624 <memchr+0x34>
  401646:	bcf0      	pop	{r4, r5, r6, r7}
  401648:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40164c:	f002 0207 	and.w	r2, r2, #7
  401650:	b132      	cbz	r2, 401660 <memchr+0x70>
  401652:	f810 3b01 	ldrb.w	r3, [r0], #1
  401656:	3a01      	subs	r2, #1
  401658:	ea83 0301 	eor.w	r3, r3, r1
  40165c:	b113      	cbz	r3, 401664 <memchr+0x74>
  40165e:	d1f8      	bne.n	401652 <memchr+0x62>
  401660:	2000      	movs	r0, #0
  401662:	4770      	bx	lr
  401664:	3801      	subs	r0, #1
  401666:	4770      	bx	lr
  401668:	2d00      	cmp	r5, #0
  40166a:	bf06      	itte	eq
  40166c:	4635      	moveq	r5, r6
  40166e:	3803      	subeq	r0, #3
  401670:	3807      	subne	r0, #7
  401672:	f015 0f01 	tst.w	r5, #1
  401676:	d107      	bne.n	401688 <memchr+0x98>
  401678:	3001      	adds	r0, #1
  40167a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40167e:	bf02      	ittt	eq
  401680:	3001      	addeq	r0, #1
  401682:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  401686:	3001      	addeq	r0, #1
  401688:	bcf0      	pop	{r4, r5, r6, r7}
  40168a:	3801      	subs	r0, #1
  40168c:	4770      	bx	lr
  40168e:	bf00      	nop

00401690 <memcmp>:
  401690:	2a03      	cmp	r2, #3
  401692:	b470      	push	{r4, r5, r6}
  401694:	d922      	bls.n	4016dc <memcmp+0x4c>
  401696:	ea40 0301 	orr.w	r3, r0, r1
  40169a:	079b      	lsls	r3, r3, #30
  40169c:	d011      	beq.n	4016c2 <memcmp+0x32>
  40169e:	7803      	ldrb	r3, [r0, #0]
  4016a0:	780c      	ldrb	r4, [r1, #0]
  4016a2:	42a3      	cmp	r3, r4
  4016a4:	d11d      	bne.n	4016e2 <memcmp+0x52>
  4016a6:	440a      	add	r2, r1
  4016a8:	3101      	adds	r1, #1
  4016aa:	e005      	b.n	4016b8 <memcmp+0x28>
  4016ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4016b0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4016b4:	42a3      	cmp	r3, r4
  4016b6:	d114      	bne.n	4016e2 <memcmp+0x52>
  4016b8:	4291      	cmp	r1, r2
  4016ba:	d1f7      	bne.n	4016ac <memcmp+0x1c>
  4016bc:	2000      	movs	r0, #0
  4016be:	bc70      	pop	{r4, r5, r6}
  4016c0:	4770      	bx	lr
  4016c2:	680d      	ldr	r5, [r1, #0]
  4016c4:	6806      	ldr	r6, [r0, #0]
  4016c6:	42ae      	cmp	r6, r5
  4016c8:	460c      	mov	r4, r1
  4016ca:	4603      	mov	r3, r0
  4016cc:	f101 0104 	add.w	r1, r1, #4
  4016d0:	f100 0004 	add.w	r0, r0, #4
  4016d4:	d108      	bne.n	4016e8 <memcmp+0x58>
  4016d6:	3a04      	subs	r2, #4
  4016d8:	2a03      	cmp	r2, #3
  4016da:	d8f2      	bhi.n	4016c2 <memcmp+0x32>
  4016dc:	2a00      	cmp	r2, #0
  4016de:	d1de      	bne.n	40169e <memcmp+0xe>
  4016e0:	e7ec      	b.n	4016bc <memcmp+0x2c>
  4016e2:	1b18      	subs	r0, r3, r4
  4016e4:	bc70      	pop	{r4, r5, r6}
  4016e6:	4770      	bx	lr
  4016e8:	4621      	mov	r1, r4
  4016ea:	4618      	mov	r0, r3
  4016ec:	e7d7      	b.n	40169e <memcmp+0xe>
  4016ee:	bf00      	nop

004016f0 <strchr>:
  4016f0:	b2c9      	uxtb	r1, r1
  4016f2:	2900      	cmp	r1, #0
  4016f4:	d041      	beq.n	40177a <strchr+0x8a>
  4016f6:	0782      	lsls	r2, r0, #30
  4016f8:	b4f0      	push	{r4, r5, r6, r7}
  4016fa:	d067      	beq.n	4017cc <strchr+0xdc>
  4016fc:	7803      	ldrb	r3, [r0, #0]
  4016fe:	2b00      	cmp	r3, #0
  401700:	d068      	beq.n	4017d4 <strchr+0xe4>
  401702:	4299      	cmp	r1, r3
  401704:	d037      	beq.n	401776 <strchr+0x86>
  401706:	1c43      	adds	r3, r0, #1
  401708:	e004      	b.n	401714 <strchr+0x24>
  40170a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40170e:	b390      	cbz	r0, 401776 <strchr+0x86>
  401710:	4281      	cmp	r1, r0
  401712:	d02f      	beq.n	401774 <strchr+0x84>
  401714:	079a      	lsls	r2, r3, #30
  401716:	461c      	mov	r4, r3
  401718:	d1f7      	bne.n	40170a <strchr+0x1a>
  40171a:	6825      	ldr	r5, [r4, #0]
  40171c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  401720:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  401724:	ea83 0605 	eor.w	r6, r3, r5
  401728:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40172c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  401730:	ea20 0006 	bic.w	r0, r0, r6
  401734:	ea22 0205 	bic.w	r2, r2, r5
  401738:	4302      	orrs	r2, r0
  40173a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40173e:	d111      	bne.n	401764 <strchr+0x74>
  401740:	4620      	mov	r0, r4
  401742:	f850 6f04 	ldr.w	r6, [r0, #4]!
  401746:	ea83 0706 	eor.w	r7, r3, r6
  40174a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40174e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  401752:	ea25 0507 	bic.w	r5, r5, r7
  401756:	ea22 0206 	bic.w	r2, r2, r6
  40175a:	432a      	orrs	r2, r5
  40175c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401760:	d0ef      	beq.n	401742 <strchr+0x52>
  401762:	4604      	mov	r4, r0
  401764:	7820      	ldrb	r0, [r4, #0]
  401766:	b918      	cbnz	r0, 401770 <strchr+0x80>
  401768:	e005      	b.n	401776 <strchr+0x86>
  40176a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40176e:	b110      	cbz	r0, 401776 <strchr+0x86>
  401770:	4281      	cmp	r1, r0
  401772:	d1fa      	bne.n	40176a <strchr+0x7a>
  401774:	4620      	mov	r0, r4
  401776:	bcf0      	pop	{r4, r5, r6, r7}
  401778:	4770      	bx	lr
  40177a:	0783      	lsls	r3, r0, #30
  40177c:	d024      	beq.n	4017c8 <strchr+0xd8>
  40177e:	7803      	ldrb	r3, [r0, #0]
  401780:	2b00      	cmp	r3, #0
  401782:	d0f9      	beq.n	401778 <strchr+0x88>
  401784:	1c43      	adds	r3, r0, #1
  401786:	e003      	b.n	401790 <strchr+0xa0>
  401788:	7802      	ldrb	r2, [r0, #0]
  40178a:	3301      	adds	r3, #1
  40178c:	2a00      	cmp	r2, #0
  40178e:	d0f3      	beq.n	401778 <strchr+0x88>
  401790:	0799      	lsls	r1, r3, #30
  401792:	4618      	mov	r0, r3
  401794:	d1f8      	bne.n	401788 <strchr+0x98>
  401796:	6819      	ldr	r1, [r3, #0]
  401798:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40179c:	ea22 0201 	bic.w	r2, r2, r1
  4017a0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4017a4:	d108      	bne.n	4017b8 <strchr+0xc8>
  4017a6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4017aa:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4017ae:	ea22 0201 	bic.w	r2, r2, r1
  4017b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4017b6:	d0f6      	beq.n	4017a6 <strchr+0xb6>
  4017b8:	781a      	ldrb	r2, [r3, #0]
  4017ba:	4618      	mov	r0, r3
  4017bc:	b142      	cbz	r2, 4017d0 <strchr+0xe0>
  4017be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4017c2:	2b00      	cmp	r3, #0
  4017c4:	d1fb      	bne.n	4017be <strchr+0xce>
  4017c6:	4770      	bx	lr
  4017c8:	4603      	mov	r3, r0
  4017ca:	e7e4      	b.n	401796 <strchr+0xa6>
  4017cc:	4604      	mov	r4, r0
  4017ce:	e7a4      	b.n	40171a <strchr+0x2a>
  4017d0:	4618      	mov	r0, r3
  4017d2:	4770      	bx	lr
  4017d4:	4618      	mov	r0, r3
  4017d6:	e7ce      	b.n	401776 <strchr+0x86>

004017d8 <__register_exitproc>:
  4017d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4017dc:	4d2c      	ldr	r5, [pc, #176]	; (401890 <__register_exitproc+0xb8>)
  4017de:	4606      	mov	r6, r0
  4017e0:	6828      	ldr	r0, [r5, #0]
  4017e2:	4698      	mov	r8, r3
  4017e4:	460f      	mov	r7, r1
  4017e6:	4691      	mov	r9, r2
  4017e8:	f7ff fefc 	bl	4015e4 <__retarget_lock_acquire_recursive>
  4017ec:	4b29      	ldr	r3, [pc, #164]	; (401894 <__register_exitproc+0xbc>)
  4017ee:	681c      	ldr	r4, [r3, #0]
  4017f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4017f4:	2b00      	cmp	r3, #0
  4017f6:	d03e      	beq.n	401876 <__register_exitproc+0x9e>
  4017f8:	685a      	ldr	r2, [r3, #4]
  4017fa:	2a1f      	cmp	r2, #31
  4017fc:	dc1c      	bgt.n	401838 <__register_exitproc+0x60>
  4017fe:	f102 0e01 	add.w	lr, r2, #1
  401802:	b176      	cbz	r6, 401822 <__register_exitproc+0x4a>
  401804:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401808:	2401      	movs	r4, #1
  40180a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40180e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401812:	4094      	lsls	r4, r2
  401814:	4320      	orrs	r0, r4
  401816:	2e02      	cmp	r6, #2
  401818:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40181c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401820:	d023      	beq.n	40186a <__register_exitproc+0x92>
  401822:	3202      	adds	r2, #2
  401824:	f8c3 e004 	str.w	lr, [r3, #4]
  401828:	6828      	ldr	r0, [r5, #0]
  40182a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40182e:	f7ff fedb 	bl	4015e8 <__retarget_lock_release_recursive>
  401832:	2000      	movs	r0, #0
  401834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401838:	4b17      	ldr	r3, [pc, #92]	; (401898 <__register_exitproc+0xc0>)
  40183a:	b30b      	cbz	r3, 401880 <__register_exitproc+0xa8>
  40183c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401840:	f3af 8000 	nop.w
  401844:	4603      	mov	r3, r0
  401846:	b1d8      	cbz	r0, 401880 <__register_exitproc+0xa8>
  401848:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40184c:	6002      	str	r2, [r0, #0]
  40184e:	2100      	movs	r1, #0
  401850:	6041      	str	r1, [r0, #4]
  401852:	460a      	mov	r2, r1
  401854:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401858:	f04f 0e01 	mov.w	lr, #1
  40185c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401860:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401864:	2e00      	cmp	r6, #0
  401866:	d0dc      	beq.n	401822 <__register_exitproc+0x4a>
  401868:	e7cc      	b.n	401804 <__register_exitproc+0x2c>
  40186a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40186e:	430c      	orrs	r4, r1
  401870:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401874:	e7d5      	b.n	401822 <__register_exitproc+0x4a>
  401876:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40187a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40187e:	e7bb      	b.n	4017f8 <__register_exitproc+0x20>
  401880:	6828      	ldr	r0, [r5, #0]
  401882:	f7ff feb1 	bl	4015e8 <__retarget_lock_release_recursive>
  401886:	f04f 30ff 	mov.w	r0, #4294967295
  40188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40188e:	bf00      	nop
  401890:	20000438 	.word	0x20000438
  401894:	00401930 	.word	0x00401930
  401898:	00000000 	.word	0x00000000
  40189c:	0001c200 	.word	0x0001c200
  4018a0:	000000c0 	.word	0x000000c0
  4018a4:	00000800 	.word	0x00000800
	...
  4018b4:	20706f66 	.word	0x20706f66
  4018b8:	74736574 	.word	0x74736574
  4018bc:	7478742e 	.word	0x7478742e
  4018c0:	00000a0d 	.word	0x00000a0d
  4018c4:	20747366 	.word	0x20747366
  4018c8:	74736574 	.word	0x74736574
  4018cc:	7478742e 	.word	0x7478742e
  4018d0:	00000a0d 	.word	0x00000a0d
  4018d4:	0000002c 	.word	0x0000002c
  4018d8:	64616572 	.word	0x64616572
  4018dc:	00000020 	.word	0x00000020
  4018e0:	0000000d 	.word	0x0000000d
  4018e4:	0000000a 	.word	0x0000000a
  4018e8:	00000079 	.word	0x00000079
  4018ec:	0000006e 	.word	0x0000006e
  4018f0:	72617453 	.word	0x72617453
  4018f4:	72742074 	.word	0x72742074
  4018f8:	66736e61 	.word	0x66736e61
  4018fc:	00007265 	.word	0x00007265
  401900:	65696c43 	.word	0x65696c43
  401904:	6e20746e 	.word	0x6e20746e
  401908:	6320746f 	.word	0x6320746f
  40190c:	656e6e6f 	.word	0x656e6e6f
  401910:	64657463 	.word	0x64657463
  401914:	00000000 	.word	0x00000000
  401918:	6d6d6f43 	.word	0x6d6d6f43
  40191c:	20646e61 	.word	0x20646e61
  401920:	6c696166 	.word	0x6c696166
  401924:	00006465 	.word	0x00006465
  401928:	656e6f4e 	.word	0x656e6f4e
  40192c:	00000000 	.word	0x00000000

00401930 <_global_impure_ptr>:
  401930:	20000010                                ... 

00401934 <_init>:
  401934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401936:	bf00      	nop
  401938:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40193a:	bc08      	pop	{r3}
  40193c:	469e      	mov	lr, r3
  40193e:	4770      	bx	lr

00401940 <__init_array_start>:
  401940:	00401591 	.word	0x00401591

00401944 <__frame_dummy_init_array_entry>:
  401944:	004000f1                                ..@.

00401948 <_fini>:
  401948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40194a:	bf00      	nop
  40194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40194e:	bc08      	pop	{r3}
  401950:	469e      	mov	lr, r3
  401952:	4770      	bx	lr

00401954 <__fini_array_start>:
  401954:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	091c 2000                                   ... 
