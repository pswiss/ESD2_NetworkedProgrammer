
NetworkedProgrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007e14  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407e14  00407e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00006b68  20000000  00407e1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005b0  20006b68  0040e984  00026b68  2**2
                  ALLOC
  4 .stack        00003000  20007118  0040ef34  00026b68  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00026b68  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00026b92  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001491e  00000000  00000000  00026beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002c89  00000000  00000000  0003b509  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006522  00000000  00000000  0003e192  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b48  00000000  00000000  000446b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a98  00000000  00000000  000451fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000069ad  00000000  00000000  00045c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d8c2  00000000  00000000  0004c641  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004d49e  00000000  00000000  00059f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003c68  00000000  00000000  000a73a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 a1 00 20 b1 24 40 00 79 25 40 00 79 25 40 00     ... .$@.y%@.y%@.
  400010:	79 25 40 00 79 25 40 00 79 25 40 00 00 00 00 00     y%@.y%@.y%@.....
	...
  40002c:	79 25 40 00 79 25 40 00 00 00 00 00 79 25 40 00     y%@.y%@.....y%@.
  40003c:	79 25 40 00 79 25 40 00 79 25 40 00 79 25 40 00     y%@.y%@.y%@.y%@.
  40004c:	79 25 40 00 79 25 40 00 79 25 40 00 79 25 40 00     y%@.y%@.y%@.y%@.
  40005c:	00 00 00 00 79 25 40 00 79 25 40 00 00 00 00 00     ....y%@.y%@.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 a1 12 40 00     ..@...@.......@.
  40007c:	49 0d 40 00 00 00 00 00 00 00 00 00 79 25 40 00     I.@.........y%@.
  40008c:	79 25 40 00 79 25 40 00 79 25 40 00 79 25 40 00     y%@.y%@.y%@.y%@.
  40009c:	e5 0f 40 00 79 25 40 00 79 25 40 00 00 00 00 00     ..@.y%@.y%@.....
	...
  4000b4:	79 25 40 00 79 25 40 00 79 25 40 00 79 25 40 00     y%@.y%@.y%@.y%@.
  4000c4:	79 25 40 00 79 25 40 00                             y%@.y%@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20006b68 	.word	0x20006b68
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00407e1c 	.word	0x00407e1c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00407e1c 	.word	0x00407e1c
  40012c:	20006b6c 	.word	0x20006b6c
  400130:	00407e1c 	.word	0x00407e1c
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	00401d17 	.word	0x00401d17
  4001fc:	00401d2d 	.word	0x00401d2d
  400200:	20006b84 	.word	0x20006b84
  400204:	200070ec 	.word	0x200070ec
  400208:	20006bf8 	.word	0x20006bf8

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	20006bf4 	.word	0x20006bf4
  4002a4:	20006b84 	.word	0x20006b84
  4002a8:	00401c79 	.word	0x00401c79

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4002dc:	b480      	push	{r7}
  4002de:	b089      	sub	sp, #36	; 0x24
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	60f8      	str	r0, [r7, #12]
  4002e4:	60b9      	str	r1, [r7, #8]
  4002e6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4002e8:	68bb      	ldr	r3, [r7, #8]
  4002ea:	011a      	lsls	r2, r3, #4
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	429a      	cmp	r2, r3
  4002f0:	d802      	bhi.n	4002f8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4002f2:	2310      	movs	r3, #16
  4002f4:	61fb      	str	r3, [r7, #28]
  4002f6:	e001      	b.n	4002fc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4002f8:	2308      	movs	r3, #8
  4002fa:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4002fc:	687b      	ldr	r3, [r7, #4]
  4002fe:	00da      	lsls	r2, r3, #3
  400300:	69fb      	ldr	r3, [r7, #28]
  400302:	68b9      	ldr	r1, [r7, #8]
  400304:	fb01 f303 	mul.w	r3, r1, r3
  400308:	085b      	lsrs	r3, r3, #1
  40030a:	441a      	add	r2, r3
  40030c:	69fb      	ldr	r3, [r7, #28]
  40030e:	68b9      	ldr	r1, [r7, #8]
  400310:	fb01 f303 	mul.w	r3, r1, r3
  400314:	fbb2 f3f3 	udiv	r3, r2, r3
  400318:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40031a:	69bb      	ldr	r3, [r7, #24]
  40031c:	08db      	lsrs	r3, r3, #3
  40031e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400320:	69bb      	ldr	r3, [r7, #24]
  400322:	f003 0307 	and.w	r3, r3, #7
  400326:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400328:	697b      	ldr	r3, [r7, #20]
  40032a:	2b00      	cmp	r3, #0
  40032c:	d003      	beq.n	400336 <usart_set_async_baudrate+0x5a>
  40032e:	697b      	ldr	r3, [r7, #20]
  400330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400334:	d301      	bcc.n	40033a <usart_set_async_baudrate+0x5e>
		return 1;
  400336:	2301      	movs	r3, #1
  400338:	e00f      	b.n	40035a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40033a:	69fb      	ldr	r3, [r7, #28]
  40033c:	2b08      	cmp	r3, #8
  40033e:	d105      	bne.n	40034c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400340:	68fb      	ldr	r3, [r7, #12]
  400342:	685b      	ldr	r3, [r3, #4]
  400344:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400348:	68fb      	ldr	r3, [r7, #12]
  40034a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40034c:	693b      	ldr	r3, [r7, #16]
  40034e:	041a      	lsls	r2, r3, #16
  400350:	697b      	ldr	r3, [r7, #20]
  400352:	431a      	orrs	r2, r3
  400354:	68fb      	ldr	r3, [r7, #12]
  400356:	621a      	str	r2, [r3, #32]

	return 0;
  400358:	2300      	movs	r3, #0
}
  40035a:	4618      	mov	r0, r3
  40035c:	3724      	adds	r7, #36	; 0x24
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400364:	b580      	push	{r7, lr}
  400366:	b082      	sub	sp, #8
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40036c:	6878      	ldr	r0, [r7, #4]
  40036e:	4b0f      	ldr	r3, [pc, #60]	; (4003ac <usart_reset+0x48>)
  400370:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	2200      	movs	r2, #0
  400376:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	2200      	movs	r2, #0
  40037c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	2200      	movs	r2, #0
  400382:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400384:	6878      	ldr	r0, [r7, #4]
  400386:	4b0a      	ldr	r3, [pc, #40]	; (4003b0 <usart_reset+0x4c>)
  400388:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40038a:	6878      	ldr	r0, [r7, #4]
  40038c:	4b09      	ldr	r3, [pc, #36]	; (4003b4 <usart_reset+0x50>)
  40038e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400390:	6878      	ldr	r0, [r7, #4]
  400392:	4b09      	ldr	r3, [pc, #36]	; (4003b8 <usart_reset+0x54>)
  400394:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400396:	6878      	ldr	r0, [r7, #4]
  400398:	4b08      	ldr	r3, [pc, #32]	; (4003bc <usart_reset+0x58>)
  40039a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b08      	ldr	r3, [pc, #32]	; (4003c0 <usart_reset+0x5c>)
  4003a0:	4798      	blx	r3
#endif
}
  4003a2:	bf00      	nop
  4003a4:	3708      	adds	r7, #8
  4003a6:	46bd      	mov	sp, r7
  4003a8:	bd80      	pop	{r7, pc}
  4003aa:	bf00      	nop
  4003ac:	00400615 	.word	0x00400615
  4003b0:	004004a1 	.word	0x004004a1
  4003b4:	004004d1 	.word	0x004004d1
  4003b8:	00400533 	.word	0x00400533
  4003bc:	00400567 	.word	0x00400567
  4003c0:	0040054d 	.word	0x0040054d

004003c4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4003c4:	b580      	push	{r7, lr}
  4003c6:	b084      	sub	sp, #16
  4003c8:	af00      	add	r7, sp, #0
  4003ca:	60f8      	str	r0, [r7, #12]
  4003cc:	60b9      	str	r1, [r7, #8]
  4003ce:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4003d0:	68f8      	ldr	r0, [r7, #12]
  4003d2:	4b1a      	ldr	r3, [pc, #104]	; (40043c <usart_init_rs232+0x78>)
  4003d4:	4798      	blx	r3

	ul_reg_val = 0;
  4003d6:	4b1a      	ldr	r3, [pc, #104]	; (400440 <usart_init_rs232+0x7c>)
  4003d8:	2200      	movs	r2, #0
  4003da:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4003dc:	68bb      	ldr	r3, [r7, #8]
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d009      	beq.n	4003f6 <usart_init_rs232+0x32>
  4003e2:	68bb      	ldr	r3, [r7, #8]
  4003e4:	681b      	ldr	r3, [r3, #0]
  4003e6:	687a      	ldr	r2, [r7, #4]
  4003e8:	4619      	mov	r1, r3
  4003ea:	68f8      	ldr	r0, [r7, #12]
  4003ec:	4b15      	ldr	r3, [pc, #84]	; (400444 <usart_init_rs232+0x80>)
  4003ee:	4798      	blx	r3
  4003f0:	4603      	mov	r3, r0
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d001      	beq.n	4003fa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4003f6:	2301      	movs	r3, #1
  4003f8:	e01b      	b.n	400432 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4003fa:	68bb      	ldr	r3, [r7, #8]
  4003fc:	685a      	ldr	r2, [r3, #4]
  4003fe:	68bb      	ldr	r3, [r7, #8]
  400400:	689b      	ldr	r3, [r3, #8]
  400402:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400404:	68bb      	ldr	r3, [r7, #8]
  400406:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400408:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40040a:	68bb      	ldr	r3, [r7, #8]
  40040c:	68db      	ldr	r3, [r3, #12]
  40040e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400410:	4b0b      	ldr	r3, [pc, #44]	; (400440 <usart_init_rs232+0x7c>)
  400412:	681b      	ldr	r3, [r3, #0]
  400414:	4313      	orrs	r3, r2
  400416:	4a0a      	ldr	r2, [pc, #40]	; (400440 <usart_init_rs232+0x7c>)
  400418:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40041a:	4b09      	ldr	r3, [pc, #36]	; (400440 <usart_init_rs232+0x7c>)
  40041c:	681b      	ldr	r3, [r3, #0]
  40041e:	4a08      	ldr	r2, [pc, #32]	; (400440 <usart_init_rs232+0x7c>)
  400420:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400422:	68fb      	ldr	r3, [r7, #12]
  400424:	685a      	ldr	r2, [r3, #4]
  400426:	4b06      	ldr	r3, [pc, #24]	; (400440 <usart_init_rs232+0x7c>)
  400428:	681b      	ldr	r3, [r3, #0]
  40042a:	431a      	orrs	r2, r3
  40042c:	68fb      	ldr	r3, [r7, #12]
  40042e:	605a      	str	r2, [r3, #4]

	return 0;
  400430:	2300      	movs	r3, #0
}
  400432:	4618      	mov	r0, r3
  400434:	3710      	adds	r7, #16
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	00400365 	.word	0x00400365
  400440:	20006bfc 	.word	0x20006bfc
  400444:	004002dd 	.word	0x004002dd

00400448 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400448:	b580      	push	{r7, lr}
  40044a:	b084      	sub	sp, #16
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400454:	687a      	ldr	r2, [r7, #4]
  400456:	68b9      	ldr	r1, [r7, #8]
  400458:	68f8      	ldr	r0, [r7, #12]
  40045a:	4b0a      	ldr	r3, [pc, #40]	; (400484 <usart_init_hw_handshaking+0x3c>)
  40045c:	4798      	blx	r3
  40045e:	4603      	mov	r3, r0
  400460:	2b00      	cmp	r3, #0
  400462:	d001      	beq.n	400468 <usart_init_hw_handshaking+0x20>
		return 1;
  400464:	2301      	movs	r3, #1
  400466:	e008      	b.n	40047a <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400468:	68fb      	ldr	r3, [r7, #12]
  40046a:	685b      	ldr	r3, [r3, #4]
  40046c:	f023 030f 	bic.w	r3, r3, #15
  400470:	f043 0202 	orr.w	r2, r3, #2
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400478:	2300      	movs	r3, #0
}
  40047a:	4618      	mov	r0, r3
  40047c:	3710      	adds	r7, #16
  40047e:	46bd      	mov	sp, r7
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	004003c5 	.word	0x004003c5

00400488 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400488:	b480      	push	{r7}
  40048a:	b083      	sub	sp, #12
  40048c:	af00      	add	r7, sp, #0
  40048e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2240      	movs	r2, #64	; 0x40
  400494:	601a      	str	r2, [r3, #0]
}
  400496:	bf00      	nop
  400498:	370c      	adds	r7, #12
  40049a:	46bd      	mov	sp, r7
  40049c:	bc80      	pop	{r7}
  40049e:	4770      	bx	lr

004004a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b083      	sub	sp, #12
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4004a8:	687b      	ldr	r3, [r7, #4]
  4004aa:	2288      	movs	r2, #136	; 0x88
  4004ac:	601a      	str	r2, [r3, #0]
}
  4004ae:	bf00      	nop
  4004b0:	370c      	adds	r7, #12
  4004b2:	46bd      	mov	sp, r7
  4004b4:	bc80      	pop	{r7}
  4004b6:	4770      	bx	lr

004004b8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4004b8:	b480      	push	{r7}
  4004ba:	b083      	sub	sp, #12
  4004bc:	af00      	add	r7, sp, #0
  4004be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4004c0:	687b      	ldr	r3, [r7, #4]
  4004c2:	2210      	movs	r2, #16
  4004c4:	601a      	str	r2, [r3, #0]
}
  4004c6:	bf00      	nop
  4004c8:	370c      	adds	r7, #12
  4004ca:	46bd      	mov	sp, r7
  4004cc:	bc80      	pop	{r7}
  4004ce:	4770      	bx	lr

004004d0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4004d0:	b480      	push	{r7}
  4004d2:	b083      	sub	sp, #12
  4004d4:	af00      	add	r7, sp, #0
  4004d6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4004d8:	687b      	ldr	r3, [r7, #4]
  4004da:	2224      	movs	r2, #36	; 0x24
  4004dc:	601a      	str	r2, [r3, #0]
}
  4004de:	bf00      	nop
  4004e0:	370c      	adds	r7, #12
  4004e2:	46bd      	mov	sp, r7
  4004e4:	bc80      	pop	{r7}
  4004e6:	4770      	bx	lr

004004e8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4004e8:	b480      	push	{r7}
  4004ea:	b083      	sub	sp, #12
  4004ec:	af00      	add	r7, sp, #0
  4004ee:	6078      	str	r0, [r7, #4]
  4004f0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4004f2:	687b      	ldr	r3, [r7, #4]
  4004f4:	683a      	ldr	r2, [r7, #0]
  4004f6:	609a      	str	r2, [r3, #8]
}
  4004f8:	bf00      	nop
  4004fa:	370c      	adds	r7, #12
  4004fc:	46bd      	mov	sp, r7
  4004fe:	bc80      	pop	{r7}
  400500:	4770      	bx	lr

00400502 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400502:	b480      	push	{r7}
  400504:	b083      	sub	sp, #12
  400506:	af00      	add	r7, sp, #0
  400508:	6078      	str	r0, [r7, #4]
  40050a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40050c:	687b      	ldr	r3, [r7, #4]
  40050e:	683a      	ldr	r2, [r7, #0]
  400510:	60da      	str	r2, [r3, #12]
}
  400512:	bf00      	nop
  400514:	370c      	adds	r7, #12
  400516:	46bd      	mov	sp, r7
  400518:	bc80      	pop	{r7}
  40051a:	4770      	bx	lr

0040051c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40051c:	b480      	push	{r7}
  40051e:	b083      	sub	sp, #12
  400520:	af00      	add	r7, sp, #0
  400522:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	695b      	ldr	r3, [r3, #20]
}
  400528:	4618      	mov	r0, r3
  40052a:	370c      	adds	r7, #12
  40052c:	46bd      	mov	sp, r7
  40052e:	bc80      	pop	{r7}
  400530:	4770      	bx	lr

00400532 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400532:	b480      	push	{r7}
  400534:	b083      	sub	sp, #12
  400536:	af00      	add	r7, sp, #0
  400538:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40053a:	687b      	ldr	r3, [r7, #4]
  40053c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400540:	601a      	str	r2, [r3, #0]
}
  400542:	bf00      	nop
  400544:	370c      	adds	r7, #12
  400546:	46bd      	mov	sp, r7
  400548:	bc80      	pop	{r7}
  40054a:	4770      	bx	lr

0040054c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40054c:	b480      	push	{r7}
  40054e:	b083      	sub	sp, #12
  400550:	af00      	add	r7, sp, #0
  400552:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40055a:	601a      	str	r2, [r3, #0]
}
  40055c:	bf00      	nop
  40055e:	370c      	adds	r7, #12
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr

00400566 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400566:	b480      	push	{r7}
  400568:	b083      	sub	sp, #12
  40056a:	af00      	add	r7, sp, #0
  40056c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40056e:	687b      	ldr	r3, [r7, #4]
  400570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400574:	601a      	str	r2, [r3, #0]
}
  400576:	bf00      	nop
  400578:	370c      	adds	r7, #12
  40057a:	46bd      	mov	sp, r7
  40057c:	bc80      	pop	{r7}
  40057e:	4770      	bx	lr

00400580 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	6078      	str	r0, [r7, #4]
  400588:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40058a:	bf00      	nop
  40058c:	687b      	ldr	r3, [r7, #4]
  40058e:	695b      	ldr	r3, [r3, #20]
  400590:	f003 0302 	and.w	r3, r3, #2
  400594:	2b00      	cmp	r3, #0
  400596:	d0f9      	beq.n	40058c <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400598:	683b      	ldr	r3, [r7, #0]
  40059a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40059e:	687b      	ldr	r3, [r7, #4]
  4005a0:	61da      	str	r2, [r3, #28]

	return 0;
  4005a2:	2300      	movs	r3, #0
}
  4005a4:	4618      	mov	r0, r3
  4005a6:	370c      	adds	r7, #12
  4005a8:	46bd      	mov	sp, r7
  4005aa:	bc80      	pop	{r7}
  4005ac:	4770      	bx	lr
	...

004005b0 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  4005b0:	b580      	push	{r7, lr}
  4005b2:	b082      	sub	sp, #8
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	6078      	str	r0, [r7, #4]
  4005b8:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4005ba:	e007      	b.n	4005cc <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4005bc:	683b      	ldr	r3, [r7, #0]
  4005be:	1c5a      	adds	r2, r3, #1
  4005c0:	603a      	str	r2, [r7, #0]
  4005c2:	781b      	ldrb	r3, [r3, #0]
  4005c4:	4619      	mov	r1, r3
  4005c6:	6878      	ldr	r0, [r7, #4]
  4005c8:	4b04      	ldr	r3, [pc, #16]	; (4005dc <usart_write_line+0x2c>)
  4005ca:	4798      	blx	r3
	while (*string != '\0') {
  4005cc:	683b      	ldr	r3, [r7, #0]
  4005ce:	781b      	ldrb	r3, [r3, #0]
  4005d0:	2b00      	cmp	r3, #0
  4005d2:	d1f3      	bne.n	4005bc <usart_write_line+0xc>
	}
}
  4005d4:	bf00      	nop
  4005d6:	3708      	adds	r7, #8
  4005d8:	46bd      	mov	sp, r7
  4005da:	bd80      	pop	{r7, pc}
  4005dc:	00400581 	.word	0x00400581

004005e0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4005e0:	b480      	push	{r7}
  4005e2:	b083      	sub	sp, #12
  4005e4:	af00      	add	r7, sp, #0
  4005e6:	6078      	str	r0, [r7, #4]
  4005e8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4005ea:	687b      	ldr	r3, [r7, #4]
  4005ec:	695b      	ldr	r3, [r3, #20]
  4005ee:	f003 0301 	and.w	r3, r3, #1
  4005f2:	2b00      	cmp	r3, #0
  4005f4:	d101      	bne.n	4005fa <usart_read+0x1a>
		return 1;
  4005f6:	2301      	movs	r3, #1
  4005f8:	e006      	b.n	400608 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4005fa:	687b      	ldr	r3, [r7, #4]
  4005fc:	699b      	ldr	r3, [r3, #24]
  4005fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400602:	683b      	ldr	r3, [r7, #0]
  400604:	601a      	str	r2, [r3, #0]

	return 0;
  400606:	2300      	movs	r3, #0
}
  400608:	4618      	mov	r0, r3
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	bc80      	pop	{r7}
  400610:	4770      	bx	lr
	...

00400614 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400614:	b480      	push	{r7}
  400616:	b083      	sub	sp, #12
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	4a04      	ldr	r2, [pc, #16]	; (400630 <usart_disable_writeprotect+0x1c>)
  400620:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400624:	bf00      	nop
  400626:	370c      	adds	r7, #12
  400628:	46bd      	mov	sp, r7
  40062a:	bc80      	pop	{r7}
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	55534100 	.word	0x55534100

00400634 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400634:	b480      	push	{r7}
  400636:	b083      	sub	sp, #12
  400638:	af00      	add	r7, sp, #0
  40063a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400642:	605a      	str	r2, [r3, #4]

}
  400644:	bf00      	nop
  400646:	370c      	adds	r7, #12
  400648:	46bd      	mov	sp, r7
  40064a:	bc80      	pop	{r7}
  40064c:	4770      	bx	lr
	...

00400650 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400650:	b480      	push	{r7}
  400652:	b083      	sub	sp, #12
  400654:	af00      	add	r7, sp, #0
  400656:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400658:	687b      	ldr	r3, [r7, #4]
  40065a:	2b07      	cmp	r3, #7
  40065c:	d825      	bhi.n	4006aa <osc_get_rate+0x5a>
  40065e:	a201      	add	r2, pc, #4	; (adr r2, 400664 <osc_get_rate+0x14>)
  400660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400664:	00400685 	.word	0x00400685
  400668:	0040068b 	.word	0x0040068b
  40066c:	00400691 	.word	0x00400691
  400670:	00400697 	.word	0x00400697
  400674:	0040069b 	.word	0x0040069b
  400678:	0040069f 	.word	0x0040069f
  40067c:	004006a3 	.word	0x004006a3
  400680:	004006a7 	.word	0x004006a7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400684:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400688:	e010      	b.n	4006ac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40068a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40068e:	e00d      	b.n	4006ac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400694:	e00a      	b.n	4006ac <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400696:	4b08      	ldr	r3, [pc, #32]	; (4006b8 <osc_get_rate+0x68>)
  400698:	e008      	b.n	4006ac <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40069a:	4b08      	ldr	r3, [pc, #32]	; (4006bc <osc_get_rate+0x6c>)
  40069c:	e006      	b.n	4006ac <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40069e:	4b08      	ldr	r3, [pc, #32]	; (4006c0 <osc_get_rate+0x70>)
  4006a0:	e004      	b.n	4006ac <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006a2:	4b07      	ldr	r3, [pc, #28]	; (4006c0 <osc_get_rate+0x70>)
  4006a4:	e002      	b.n	4006ac <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006a6:	4b06      	ldr	r3, [pc, #24]	; (4006c0 <osc_get_rate+0x70>)
  4006a8:	e000      	b.n	4006ac <osc_get_rate+0x5c>
	}

	return 0;
  4006aa:	2300      	movs	r3, #0
}
  4006ac:	4618      	mov	r0, r3
  4006ae:	370c      	adds	r7, #12
  4006b0:	46bd      	mov	sp, r7
  4006b2:	bc80      	pop	{r7}
  4006b4:	4770      	bx	lr
  4006b6:	bf00      	nop
  4006b8:	003d0900 	.word	0x003d0900
  4006bc:	007a1200 	.word	0x007a1200
  4006c0:	00b71b00 	.word	0x00b71b00

004006c4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006c4:	b580      	push	{r7, lr}
  4006c6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006c8:	2006      	movs	r0, #6
  4006ca:	4b04      	ldr	r3, [pc, #16]	; (4006dc <sysclk_get_main_hz+0x18>)
  4006cc:	4798      	blx	r3
  4006ce:	4602      	mov	r2, r0
  4006d0:	4613      	mov	r3, r2
  4006d2:	009b      	lsls	r3, r3, #2
  4006d4:	4413      	add	r3, r2
  4006d6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006d8:	4618      	mov	r0, r3
  4006da:	bd80      	pop	{r7, pc}
  4006dc:	00400651 	.word	0x00400651

004006e0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4006e4:	4b02      	ldr	r3, [pc, #8]	; (4006f0 <sysclk_get_cpu_hz+0x10>)
  4006e6:	4798      	blx	r3
  4006e8:	4603      	mov	r3, r0
  4006ea:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4006ec:	4618      	mov	r0, r3
  4006ee:	bd80      	pop	{r7, pc}
  4006f0:	004006c5 	.word	0x004006c5

004006f4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4006f4:	b480      	push	{r7}
  4006f6:	b08b      	sub	sp, #44	; 0x2c
  4006f8:	af00      	add	r7, sp, #0
  4006fa:	6078      	str	r0, [r7, #4]
  4006fc:	460b      	mov	r3, r1
  4006fe:	70fb      	strb	r3, [r7, #3]
  400700:	687b      	ldr	r3, [r7, #4]
  400702:	627b      	str	r3, [r7, #36]	; 0x24
  400704:	78fb      	ldrb	r3, [r7, #3]
  400706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40070c:	61fb      	str	r3, [r7, #28]
  40070e:	69fb      	ldr	r3, [r7, #28]
  400710:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400712:	69bb      	ldr	r3, [r7, #24]
  400714:	095b      	lsrs	r3, r3, #5
  400716:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400718:	697b      	ldr	r3, [r7, #20]
  40071a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40071e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400722:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400724:	613b      	str	r3, [r7, #16]

	if (level) {
  400726:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40072a:	2b00      	cmp	r3, #0
  40072c:	d009      	beq.n	400742 <ioport_set_pin_level+0x4e>
  40072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400730:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400732:	68fb      	ldr	r3, [r7, #12]
  400734:	f003 031f 	and.w	r3, r3, #31
  400738:	2201      	movs	r2, #1
  40073a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40073c:	693b      	ldr	r3, [r7, #16]
  40073e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400740:	e008      	b.n	400754 <ioport_set_pin_level+0x60>
  400742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400744:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400746:	68bb      	ldr	r3, [r7, #8]
  400748:	f003 031f 	and.w	r3, r3, #31
  40074c:	2201      	movs	r2, #1
  40074e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400750:	693b      	ldr	r3, [r7, #16]
  400752:	635a      	str	r2, [r3, #52]	; 0x34
  400754:	bf00      	nop
  400756:	372c      	adds	r7, #44	; 0x2c
  400758:	46bd      	mov	sp, r7
  40075a:	bc80      	pop	{r7}
  40075c:	4770      	bx	lr
	...

00400760 <ASCII_to_Num>:

// USART Functions ///////////////////////////////////////

// Helper Functions //////////////////////////////////////
// Convert from ASCII to number (supports up to base 16)
uint8_t ASCII_to_Num(uint8_t inputChar){
  400760:	b480      	push	{r7}
  400762:	b083      	sub	sp, #12
  400764:	af00      	add	r7, sp, #0
  400766:	4603      	mov	r3, r0
  400768:	71fb      	strb	r3, [r7, #7]
	switch(inputChar){
  40076a:	79fb      	ldrb	r3, [r7, #7]
  40076c:	3b30      	subs	r3, #48	; 0x30
  40076e:	2b16      	cmp	r3, #22
  400770:	d850      	bhi.n	400814 <ASCII_to_Num+0xb4>
  400772:	a201      	add	r2, pc, #4	; (adr r2, 400778 <ASCII_to_Num+0x18>)
  400774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400778:	004007d5 	.word	0x004007d5
  40077c:	004007d9 	.word	0x004007d9
  400780:	004007dd 	.word	0x004007dd
  400784:	004007e1 	.word	0x004007e1
  400788:	004007e5 	.word	0x004007e5
  40078c:	004007e9 	.word	0x004007e9
  400790:	004007ed 	.word	0x004007ed
  400794:	004007f1 	.word	0x004007f1
  400798:	004007f5 	.word	0x004007f5
  40079c:	004007f9 	.word	0x004007f9
  4007a0:	00400815 	.word	0x00400815
  4007a4:	00400815 	.word	0x00400815
  4007a8:	00400815 	.word	0x00400815
  4007ac:	00400815 	.word	0x00400815
  4007b0:	00400815 	.word	0x00400815
  4007b4:	00400815 	.word	0x00400815
  4007b8:	00400815 	.word	0x00400815
  4007bc:	004007fd 	.word	0x004007fd
  4007c0:	00400801 	.word	0x00400801
  4007c4:	00400805 	.word	0x00400805
  4007c8:	00400809 	.word	0x00400809
  4007cc:	0040080d 	.word	0x0040080d
  4007d0:	00400811 	.word	0x00400811
		case 0x30:
			return 0;
  4007d4:	2300      	movs	r3, #0
  4007d6:	e01d      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x31:
			return 1;
  4007d8:	2301      	movs	r3, #1
  4007da:	e01b      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x32:
			return 2;
  4007dc:	2302      	movs	r3, #2
  4007de:	e019      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x33:
			return 3;
  4007e0:	2303      	movs	r3, #3
  4007e2:	e017      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x34:
			return 4;
  4007e4:	2304      	movs	r3, #4
  4007e6:	e015      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x35:
			return 5;
  4007e8:	2305      	movs	r3, #5
  4007ea:	e013      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x36:
			return 6;
  4007ec:	2306      	movs	r3, #6
  4007ee:	e011      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x37:
			return 7;
  4007f0:	2307      	movs	r3, #7
  4007f2:	e00f      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x38:
			return 8;
  4007f4:	2308      	movs	r3, #8
  4007f6:	e00d      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x39:
			return 9;
  4007f8:	2309      	movs	r3, #9
  4007fa:	e00b      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x41:
			return 10;
  4007fc:	230a      	movs	r3, #10
  4007fe:	e009      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x42:
			return 11;
  400800:	230b      	movs	r3, #11
  400802:	e007      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x43:
			return 12;
  400804:	230c      	movs	r3, #12
  400806:	e005      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x44:
			return 13;
  400808:	230d      	movs	r3, #13
  40080a:	e003      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x45:
			return 14;
  40080c:	230e      	movs	r3, #14
  40080e:	e001      	b.n	400814 <ASCII_to_Num+0xb4>
		case 0x46:
			return 15;
  400810:	230f      	movs	r3, #15
  400812:	e7ff      	b.n	400814 <ASCII_to_Num+0xb4>
	}
}
  400814:	4618      	mov	r0, r3
  400816:	370c      	adds	r7, #12
  400818:	46bd      	mov	sp, r7
  40081a:	bc80      	pop	{r7}
  40081c:	4770      	bx	lr
  40081e:	bf00      	nop

00400820 <Write_Program>:
	}
}

// Programmer Functions ///////////////////////////////////
// Interpret the given program
void Write_Program(void){// eventually put input file here?
  400820:	b590      	push	{r4, r7, lr}
  400822:	b08d      	sub	sp, #52	; 0x34
  400824:	af00      	add	r7, sp, #0
	uint8_t EOF_reached = 0;
  400826:	2300      	movs	r3, #0
  400828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t current_character = 0;
  40082c:	2300      	movs	r3, #0
  40082e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t current_line = 0;
  400832:	2300      	movs	r3, #0
  400834:	62bb      	str	r3, [r7, #40]	; 0x28

	// A few initialization writes
	uint8_t* initWrites[3];
	initWrites[0] = 0x54;
  400836:	2354      	movs	r3, #84	; 0x54
  400838:	60fb      	str	r3, [r7, #12]
	initWrites[1] = 0x23;
  40083a:	2323      	movs	r3, #35	; 0x23
  40083c:	613b      	str	r3, [r7, #16]
	initWrites[3] = '\0';
  40083e:	2300      	movs	r3, #0
  400840:	61bb      	str	r3, [r7, #24]
	write_prog_command(&initWrites,0);
  400842:	f107 030c 	add.w	r3, r7, #12
  400846:	2100      	movs	r1, #0
  400848:	4618      	mov	r0, r3
  40084a:	4b63      	ldr	r3, [pc, #396]	; (4009d8 <Write_Program+0x1b8>)
  40084c:	4798      	blx	r3
	
	// Go through entire program
	while(EOF_reached!=1){
  40084e:	e0ba      	b.n	4009c6 <Write_Program+0x1a6>
		// Check if I am looking at the start of the line
		if(buffer_program[current_character]==':'){
  400850:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  400854:	4a61      	ldr	r2, [pc, #388]	; (4009dc <Write_Program+0x1bc>)
  400856:	5cd3      	ldrb	r3, [r2, r3]
  400858:	b2db      	uxtb	r3, r3
  40085a:	2b3a      	cmp	r3, #58	; 0x3a
  40085c:	f040 80ae 	bne.w	4009bc <Write_Program+0x19c>
			// Check the byte count
			uint32_t byteCount = ASCII_to_Num(buffer_program[current_character+1])*16+ASCII_to_Num(buffer_program[current_character+2]);
  400860:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  400864:	3301      	adds	r3, #1
  400866:	4a5d      	ldr	r2, [pc, #372]	; (4009dc <Write_Program+0x1bc>)
  400868:	5cd3      	ldrb	r3, [r2, r3]
  40086a:	b2db      	uxtb	r3, r3
  40086c:	4618      	mov	r0, r3
  40086e:	4b5c      	ldr	r3, [pc, #368]	; (4009e0 <Write_Program+0x1c0>)
  400870:	4798      	blx	r3
  400872:	4603      	mov	r3, r0
  400874:	011c      	lsls	r4, r3, #4
  400876:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  40087a:	3302      	adds	r3, #2
  40087c:	4a57      	ldr	r2, [pc, #348]	; (4009dc <Write_Program+0x1bc>)
  40087e:	5cd3      	ldrb	r3, [r2, r3]
  400880:	b2db      	uxtb	r3, r3
  400882:	4618      	mov	r0, r3
  400884:	4b56      	ldr	r3, [pc, #344]	; (4009e0 <Write_Program+0x1c0>)
  400886:	4798      	blx	r3
  400888:	4603      	mov	r3, r0
  40088a:	4423      	add	r3, r4
  40088c:	623b      	str	r3, [r7, #32]
			
			uint32_t addressValue = 0;
  40088e:	2300      	movs	r3, #0
  400890:	61fb      	str	r3, [r7, #28]
			uint8_t byteToWrite = 0;
  400892:	2300      	movs	r3, #0
  400894:	76fb      	strb	r3, [r7, #27]

			// Check the record type
			switch(ASCII_to_Num(buffer_program[current_character+OFFSET_RECORDTYPE+1])){
  400896:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  40089a:	3308      	adds	r3, #8
  40089c:	4a4f      	ldr	r2, [pc, #316]	; (4009dc <Write_Program+0x1bc>)
  40089e:	5cd3      	ldrb	r3, [r2, r3]
  4008a0:	b2db      	uxtb	r3, r3
  4008a2:	4618      	mov	r0, r3
  4008a4:	4b4e      	ldr	r3, [pc, #312]	; (4009e0 <Write_Program+0x1c0>)
  4008a6:	4798      	blx	r3
  4008a8:	4603      	mov	r3, r0
  4008aa:	2b05      	cmp	r3, #5
  4008ac:	d879      	bhi.n	4009a2 <Write_Program+0x182>
  4008ae:	a201      	add	r2, pc, #4	; (adr r2, 4008b4 <Write_Program+0x94>)
  4008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008b4:	004008cd 	.word	0x004008cd
  4008b8:	0040099b 	.word	0x0040099b
  4008bc:	004009a3 	.word	0x004009a3
  4008c0:	004009a3 	.word	0x004009a3
  4008c4:	004009a3 	.word	0x004009a3
  4008c8:	004009a3 	.word	0x004009a3
				case HEX_DATA:
					// Reconstruct the value of the address
					addressValue = PROGRAM_MEMORY_START + 
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+0])*0x1000 +
  4008cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  4008d0:	3303      	adds	r3, #3
  4008d2:	4a42      	ldr	r2, [pc, #264]	; (4009dc <Write_Program+0x1bc>)
  4008d4:	5cd3      	ldrb	r3, [r2, r3]
  4008d6:	b2db      	uxtb	r3, r3
  4008d8:	4618      	mov	r0, r3
  4008da:	4b41      	ldr	r3, [pc, #260]	; (4009e0 <Write_Program+0x1c0>)
  4008dc:	4798      	blx	r3
  4008de:	4603      	mov	r3, r0
					addressValue = PROGRAM_MEMORY_START + 
  4008e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+0])*0x1000 +
  4008e4:	011c      	lsls	r4, r3, #4
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+1])*0x100 +
  4008e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  4008ea:	3304      	adds	r3, #4
  4008ec:	4a3b      	ldr	r2, [pc, #236]	; (4009dc <Write_Program+0x1bc>)
  4008ee:	5cd3      	ldrb	r3, [r2, r3]
  4008f0:	b2db      	uxtb	r3, r3
  4008f2:	4618      	mov	r0, r3
  4008f4:	4b3a      	ldr	r3, [pc, #232]	; (4009e0 <Write_Program+0x1c0>)
  4008f6:	4798      	blx	r3
  4008f8:	4603      	mov	r3, r0
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+0])*0x1000 +
  4008fa:	4423      	add	r3, r4
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+1])*0x100 +
  4008fc:	011c      	lsls	r4, r3, #4
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+2])*0x10 +
  4008fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  400902:	3305      	adds	r3, #5
  400904:	4a35      	ldr	r2, [pc, #212]	; (4009dc <Write_Program+0x1bc>)
  400906:	5cd3      	ldrb	r3, [r2, r3]
  400908:	b2db      	uxtb	r3, r3
  40090a:	4618      	mov	r0, r3
  40090c:	4b34      	ldr	r3, [pc, #208]	; (4009e0 <Write_Program+0x1c0>)
  40090e:	4798      	blx	r3
  400910:	4603      	mov	r3, r0
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+1])*0x100 +
  400912:	4423      	add	r3, r4
  400914:	011c      	lsls	r4, r3, #4
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+0]);
  400916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  40091a:	3303      	adds	r3, #3
  40091c:	4a2f      	ldr	r2, [pc, #188]	; (4009dc <Write_Program+0x1bc>)
  40091e:	5cd3      	ldrb	r3, [r2, r3]
  400920:	b2db      	uxtb	r3, r3
  400922:	4618      	mov	r0, r3
  400924:	4b2e      	ldr	r3, [pc, #184]	; (4009e0 <Write_Program+0x1c0>)
  400926:	4798      	blx	r3
  400928:	4603      	mov	r3, r0
										ASCII_to_Num(buffer_program[current_character+OFFSET_ADDRESS+2])*0x10 +
  40092a:	4423      	add	r3, r4
					addressValue = PROGRAM_MEMORY_START + 
  40092c:	61fb      	str	r3, [r7, #28]

					// Loop through for each byte to send and send it
					for(uint32_t jj = 0; jj < byteCount; jj++){
  40092e:	2300      	movs	r3, #0
  400930:	627b      	str	r3, [r7, #36]	; 0x24
  400932:	e02d      	b.n	400990 <Write_Program+0x170>
						// Read in the byte to write
						byteToWrite = ASCII_to_Num(buffer_program[current_character+OFFSET_DATA+jj*2])*0x10 +
  400934:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
  400938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40093a:	005b      	lsls	r3, r3, #1
  40093c:	4413      	add	r3, r2
  40093e:	3309      	adds	r3, #9
  400940:	4a26      	ldr	r2, [pc, #152]	; (4009dc <Write_Program+0x1bc>)
  400942:	5cd3      	ldrb	r3, [r2, r3]
  400944:	b2db      	uxtb	r3, r3
  400946:	4618      	mov	r0, r3
  400948:	4b25      	ldr	r3, [pc, #148]	; (4009e0 <Write_Program+0x1c0>)
  40094a:	4798      	blx	r3
  40094c:	4603      	mov	r3, r0
  40094e:	011b      	lsls	r3, r3, #4
  400950:	b2dc      	uxtb	r4, r3
										ASCII_to_Num(buffer_program[current_character+OFFSET_DATA+jj*2+1]);
  400952:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
  400956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400958:	005b      	lsls	r3, r3, #1
  40095a:	4413      	add	r3, r2
  40095c:	330a      	adds	r3, #10
  40095e:	4a1f      	ldr	r2, [pc, #124]	; (4009dc <Write_Program+0x1bc>)
  400960:	5cd3      	ldrb	r3, [r2, r3]
  400962:	b2db      	uxtb	r3, r3
  400964:	4618      	mov	r0, r3
  400966:	4b1e      	ldr	r3, [pc, #120]	; (4009e0 <Write_Program+0x1c0>)
  400968:	4798      	blx	r3
  40096a:	4603      	mov	r3, r0
						byteToWrite = ASCII_to_Num(buffer_program[current_character+OFFSET_DATA+jj*2])*0x10 +
  40096c:	4423      	add	r3, r4
  40096e:	76fb      	strb	r3, [r7, #27]
						
						// Create the string to write
						// Format for writing a byte: 'O'AAAAAA','CC'#'
						uint8_t boot_write_string[11];
						sprintf(boot_write_string, "O%x,%02x#",addressValue+jj,byteToWrite);
  400970:	69fa      	ldr	r2, [r7, #28]
  400972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400974:	441a      	add	r2, r3
  400976:	7efb      	ldrb	r3, [r7, #27]
  400978:	4638      	mov	r0, r7
  40097a:	491a      	ldr	r1, [pc, #104]	; (4009e4 <Write_Program+0x1c4>)
  40097c:	4c1a      	ldr	r4, [pc, #104]	; (4009e8 <Write_Program+0x1c8>)
  40097e:	47a0      	blx	r4

						// Write the string to the attached chip
						write_prog_command(&boot_write_string,1);
  400980:	463b      	mov	r3, r7
  400982:	2101      	movs	r1, #1
  400984:	4618      	mov	r0, r3
  400986:	4b14      	ldr	r3, [pc, #80]	; (4009d8 <Write_Program+0x1b8>)
  400988:	4798      	blx	r3
					for(uint32_t jj = 0; jj < byteCount; jj++){
  40098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40098c:	3301      	adds	r3, #1
  40098e:	627b      	str	r3, [r7, #36]	; 0x24
  400990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400992:	6a3b      	ldr	r3, [r7, #32]
  400994:	429a      	cmp	r2, r3
  400996:	d3cd      	bcc.n	400934 <Write_Program+0x114>
					}
					break;
  400998:	e003      	b.n	4009a2 <Write_Program+0x182>
				case HEX_EOF:
					EOF_reached = 1;
  40099a:	2301      	movs	r3, #1
  40099c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
  4009a0:	bf00      	nop
					// Not implemented. The address field is 0000 (not used) and the byte count is 04. The four data bytes represent the 32-bit value loaded into the EIP register of the 80386 and higher CPU.
					break;
			}
			
			// Jump to next colon
			current_character = current_character+OFFSET_DATA+2+byteCount;
  4009a2:	6a3b      	ldr	r3, [r7, #32]
  4009a4:	b2da      	uxtb	r2, r3
  4009a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  4009aa:	4413      	add	r3, r2
  4009ac:	b2db      	uxtb	r3, r3
  4009ae:	330b      	adds	r3, #11
  4009b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			current_line++;
  4009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4009b6:	3301      	adds	r3, #1
  4009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  4009ba:	e004      	b.n	4009c6 <Write_Program+0x1a6>
			
		}
		else{
			// Otherwise increment what character I'm looking at
			current_character += 1;
  4009bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  4009c0:	3301      	adds	r3, #1
  4009c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	while(EOF_reached!=1){
  4009c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4009ca:	2b01      	cmp	r3, #1
  4009cc:	f47f af40 	bne.w	400850 <Write_Program+0x30>
		}
	}
	return 1;
  4009d0:	bf00      	nop
}
  4009d2:	3734      	adds	r7, #52	; 0x34
  4009d4:	46bd      	mov	sp, r7
  4009d6:	bd90      	pop	{r4, r7, pc}
  4009d8:	00400e95 	.word	0x00400e95
  4009dc:	2000000c 	.word	0x2000000c
  4009e0:	00400761 	.word	0x00400761
  4009e4:	004079a4 	.word	0x004079a4
  4009e8:	00402dc1 	.word	0x00402dc1

004009ec <Clear_Target>:

// Clear the target device
void Clear_Target(void){
  4009ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009f0:	af00      	add	r7, sp, #0
	ioport_set_pin_level(FORCERST_PIN,LOW);
  4009f2:	2100      	movs	r1, #0
  4009f4:	2000      	movs	r0, #0
  4009f6:	4b53      	ldr	r3, [pc, #332]	; (400b44 <Clear_Target+0x158>)
  4009f8:	4798      	blx	r3
	delay_ms(DURATION_CLEAR);
  4009fa:	4b53      	ldr	r3, [pc, #332]	; (400b48 <Clear_Target+0x15c>)
  4009fc:	4798      	blx	r3
  4009fe:	4603      	mov	r3, r0
  400a00:	4619      	mov	r1, r3
  400a02:	f04f 0200 	mov.w	r2, #0
  400a06:	460b      	mov	r3, r1
  400a08:	4614      	mov	r4, r2
  400a0a:	18db      	adds	r3, r3, r3
  400a0c:	eb44 0404 	adc.w	r4, r4, r4
  400a10:	185b      	adds	r3, r3, r1
  400a12:	eb44 0402 	adc.w	r4, r4, r2
  400a16:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  400a1a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  400a1e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  400a22:	4653      	mov	r3, sl
  400a24:	465c      	mov	r4, fp
  400a26:	185b      	adds	r3, r3, r1
  400a28:	eb44 0402 	adc.w	r4, r4, r2
  400a2c:	18db      	adds	r3, r3, r3
  400a2e:	eb44 0404 	adc.w	r4, r4, r4
  400a32:	4619      	mov	r1, r3
  400a34:	4622      	mov	r2, r4
  400a36:	f243 63af 	movw	r3, #13999	; 0x36af
  400a3a:	f04f 0400 	mov.w	r4, #0
  400a3e:	eb11 0a03 	adds.w	sl, r1, r3
  400a42:	eb42 0b04 	adc.w	fp, r2, r4
  400a46:	4650      	mov	r0, sl
  400a48:	4659      	mov	r1, fp
  400a4a:	4c40      	ldr	r4, [pc, #256]	; (400b4c <Clear_Target+0x160>)
  400a4c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400a50:	f04f 0300 	mov.w	r3, #0
  400a54:	47a0      	blx	r4
  400a56:	4603      	mov	r3, r0
  400a58:	460c      	mov	r4, r1
  400a5a:	4618      	mov	r0, r3
  400a5c:	4b3c      	ldr	r3, [pc, #240]	; (400b50 <Clear_Target+0x164>)
  400a5e:	4798      	blx	r3
	
	ioport_set_pin_level(FORCERST_PIN,HIGH);
  400a60:	2101      	movs	r1, #1
  400a62:	2000      	movs	r0, #0
  400a64:	4b37      	ldr	r3, [pc, #220]	; (400b44 <Clear_Target+0x158>)
  400a66:	4798      	blx	r3
	ioport_set_pin_level(MEMCLR_PIN,HIGH);
  400a68:	2101      	movs	r1, #1
  400a6a:	2001      	movs	r0, #1
  400a6c:	4b35      	ldr	r3, [pc, #212]	; (400b44 <Clear_Target+0x158>)
  400a6e:	4798      	blx	r3
	delay_ms(DURATION_CLEAR);
  400a70:	4b35      	ldr	r3, [pc, #212]	; (400b48 <Clear_Target+0x15c>)
  400a72:	4798      	blx	r3
  400a74:	4603      	mov	r3, r0
  400a76:	4619      	mov	r1, r3
  400a78:	f04f 0200 	mov.w	r2, #0
  400a7c:	460b      	mov	r3, r1
  400a7e:	4614      	mov	r4, r2
  400a80:	18db      	adds	r3, r3, r3
  400a82:	eb44 0404 	adc.w	r4, r4, r4
  400a86:	185b      	adds	r3, r3, r1
  400a88:	eb44 0402 	adc.w	r4, r4, r2
  400a8c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  400a90:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  400a94:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  400a98:	4643      	mov	r3, r8
  400a9a:	464c      	mov	r4, r9
  400a9c:	185b      	adds	r3, r3, r1
  400a9e:	eb44 0402 	adc.w	r4, r4, r2
  400aa2:	18db      	adds	r3, r3, r3
  400aa4:	eb44 0404 	adc.w	r4, r4, r4
  400aa8:	4619      	mov	r1, r3
  400aaa:	4622      	mov	r2, r4
  400aac:	f243 63af 	movw	r3, #13999	; 0x36af
  400ab0:	f04f 0400 	mov.w	r4, #0
  400ab4:	eb11 0803 	adds.w	r8, r1, r3
  400ab8:	eb42 0904 	adc.w	r9, r2, r4
  400abc:	4640      	mov	r0, r8
  400abe:	4649      	mov	r1, r9
  400ac0:	4c22      	ldr	r4, [pc, #136]	; (400b4c <Clear_Target+0x160>)
  400ac2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400ac6:	f04f 0300 	mov.w	r3, #0
  400aca:	47a0      	blx	r4
  400acc:	4603      	mov	r3, r0
  400ace:	460c      	mov	r4, r1
  400ad0:	4618      	mov	r0, r3
  400ad2:	4b1f      	ldr	r3, [pc, #124]	; (400b50 <Clear_Target+0x164>)
  400ad4:	4798      	blx	r3
	
	ioport_set_pin_level(MEMCLR_PIN,LOW);
  400ad6:	2100      	movs	r1, #0
  400ad8:	2001      	movs	r0, #1
  400ada:	4b1a      	ldr	r3, [pc, #104]	; (400b44 <Clear_Target+0x158>)
  400adc:	4798      	blx	r3
	delay_ms(DURATION_CLEAR);
  400ade:	4b1a      	ldr	r3, [pc, #104]	; (400b48 <Clear_Target+0x15c>)
  400ae0:	4798      	blx	r3
  400ae2:	4603      	mov	r3, r0
  400ae4:	4619      	mov	r1, r3
  400ae6:	f04f 0200 	mov.w	r2, #0
  400aea:	460b      	mov	r3, r1
  400aec:	4614      	mov	r4, r2
  400aee:	18db      	adds	r3, r3, r3
  400af0:	eb44 0404 	adc.w	r4, r4, r4
  400af4:	185b      	adds	r3, r3, r1
  400af6:	eb44 0402 	adc.w	r4, r4, r2
  400afa:	00e6      	lsls	r6, r4, #3
  400afc:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  400b00:	00dd      	lsls	r5, r3, #3
  400b02:	462b      	mov	r3, r5
  400b04:	4634      	mov	r4, r6
  400b06:	185b      	adds	r3, r3, r1
  400b08:	eb44 0402 	adc.w	r4, r4, r2
  400b0c:	18db      	adds	r3, r3, r3
  400b0e:	eb44 0404 	adc.w	r4, r4, r4
  400b12:	4619      	mov	r1, r3
  400b14:	4622      	mov	r2, r4
  400b16:	f243 63af 	movw	r3, #13999	; 0x36af
  400b1a:	f04f 0400 	mov.w	r4, #0
  400b1e:	18cd      	adds	r5, r1, r3
  400b20:	eb42 0604 	adc.w	r6, r2, r4
  400b24:	4628      	mov	r0, r5
  400b26:	4631      	mov	r1, r6
  400b28:	4c08      	ldr	r4, [pc, #32]	; (400b4c <Clear_Target+0x160>)
  400b2a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400b2e:	f04f 0300 	mov.w	r3, #0
  400b32:	47a0      	blx	r4
  400b34:	4603      	mov	r3, r0
  400b36:	460c      	mov	r4, r1
  400b38:	4618      	mov	r0, r3
  400b3a:	4b05      	ldr	r3, [pc, #20]	; (400b50 <Clear_Target+0x164>)
  400b3c:	4798      	blx	r3
}
  400b3e:	bf00      	nop
  400b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b44:	004006f5 	.word	0x004006f5
  400b48:	004006e1 	.word	0x004006e1
  400b4c:	004029c5 	.word	0x004029c5
  400b50:	20000001 	.word	0x20000001

00400b54 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b54:	b480      	push	{r7}
  400b56:	b083      	sub	sp, #12
  400b58:	af00      	add	r7, sp, #0
  400b5a:	4603      	mov	r3, r0
  400b5c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b5e:	4908      	ldr	r1, [pc, #32]	; (400b80 <NVIC_EnableIRQ+0x2c>)
  400b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b64:	095b      	lsrs	r3, r3, #5
  400b66:	79fa      	ldrb	r2, [r7, #7]
  400b68:	f002 021f 	and.w	r2, r2, #31
  400b6c:	2001      	movs	r0, #1
  400b6e:	fa00 f202 	lsl.w	r2, r0, r2
  400b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400b76:	bf00      	nop
  400b78:	370c      	adds	r7, #12
  400b7a:	46bd      	mov	sp, r7
  400b7c:	bc80      	pop	{r7}
  400b7e:	4770      	bx	lr
  400b80:	e000e100 	.word	0xe000e100

00400b84 <osc_get_rate>:
{
  400b84:	b480      	push	{r7}
  400b86:	b083      	sub	sp, #12
  400b88:	af00      	add	r7, sp, #0
  400b8a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b8c:	687b      	ldr	r3, [r7, #4]
  400b8e:	2b07      	cmp	r3, #7
  400b90:	d825      	bhi.n	400bde <osc_get_rate+0x5a>
  400b92:	a201      	add	r2, pc, #4	; (adr r2, 400b98 <osc_get_rate+0x14>)
  400b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b98:	00400bb9 	.word	0x00400bb9
  400b9c:	00400bbf 	.word	0x00400bbf
  400ba0:	00400bc5 	.word	0x00400bc5
  400ba4:	00400bcb 	.word	0x00400bcb
  400ba8:	00400bcf 	.word	0x00400bcf
  400bac:	00400bd3 	.word	0x00400bd3
  400bb0:	00400bd7 	.word	0x00400bd7
  400bb4:	00400bdb 	.word	0x00400bdb
		return OSC_SLCK_32K_RC_HZ;
  400bb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400bbc:	e010      	b.n	400be0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400bc2:	e00d      	b.n	400be0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400bc8:	e00a      	b.n	400be0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <osc_get_rate+0x68>)
  400bcc:	e008      	b.n	400be0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400bce:	4b08      	ldr	r3, [pc, #32]	; (400bf0 <osc_get_rate+0x6c>)
  400bd0:	e006      	b.n	400be0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400bd2:	4b08      	ldr	r3, [pc, #32]	; (400bf4 <osc_get_rate+0x70>)
  400bd4:	e004      	b.n	400be0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400bd6:	4b07      	ldr	r3, [pc, #28]	; (400bf4 <osc_get_rate+0x70>)
  400bd8:	e002      	b.n	400be0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400bda:	4b06      	ldr	r3, [pc, #24]	; (400bf4 <osc_get_rate+0x70>)
  400bdc:	e000      	b.n	400be0 <osc_get_rate+0x5c>
	return 0;
  400bde:	2300      	movs	r3, #0
}
  400be0:	4618      	mov	r0, r3
  400be2:	370c      	adds	r7, #12
  400be4:	46bd      	mov	sp, r7
  400be6:	bc80      	pop	{r7}
  400be8:	4770      	bx	lr
  400bea:	bf00      	nop
  400bec:	003d0900 	.word	0x003d0900
  400bf0:	007a1200 	.word	0x007a1200
  400bf4:	00b71b00 	.word	0x00b71b00

00400bf8 <sysclk_get_main_hz>:
{
  400bf8:	b580      	push	{r7, lr}
  400bfa:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400bfc:	2006      	movs	r0, #6
  400bfe:	4b04      	ldr	r3, [pc, #16]	; (400c10 <sysclk_get_main_hz+0x18>)
  400c00:	4798      	blx	r3
  400c02:	4602      	mov	r2, r0
  400c04:	4613      	mov	r3, r2
  400c06:	009b      	lsls	r3, r3, #2
  400c08:	4413      	add	r3, r2
  400c0a:	009b      	lsls	r3, r3, #2
}
  400c0c:	4618      	mov	r0, r3
  400c0e:	bd80      	pop	{r7, pc}
  400c10:	00400b85 	.word	0x00400b85

00400c14 <sysclk_get_cpu_hz>:
{
  400c14:	b580      	push	{r7, lr}
  400c16:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400c18:	4b02      	ldr	r3, [pc, #8]	; (400c24 <sysclk_get_cpu_hz+0x10>)
  400c1a:	4798      	blx	r3
  400c1c:	4603      	mov	r3, r0
  400c1e:	085b      	lsrs	r3, r3, #1
}
  400c20:	4618      	mov	r0, r3
  400c22:	bd80      	pop	{r7, pc}
  400c24:	00400bf9 	.word	0x00400bf9

00400c28 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400c28:	b580      	push	{r7, lr}
  400c2a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400c2c:	4b02      	ldr	r3, [pc, #8]	; (400c38 <sysclk_get_peripheral_hz+0x10>)
  400c2e:	4798      	blx	r3
  400c30:	4603      	mov	r3, r0
  400c32:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400c34:	4618      	mov	r0, r3
  400c36:	bd80      	pop	{r7, pc}
  400c38:	00400bf9 	.word	0x00400bf9

00400c3c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400c3c:	b580      	push	{r7, lr}
  400c3e:	b082      	sub	sp, #8
  400c40:	af00      	add	r7, sp, #0
  400c42:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400c44:	6878      	ldr	r0, [r7, #4]
  400c46:	4b03      	ldr	r3, [pc, #12]	; (400c54 <sysclk_enable_peripheral_clock+0x18>)
  400c48:	4798      	blx	r3
}
  400c4a:	bf00      	nop
  400c4c:	3708      	adds	r7, #8
  400c4e:	46bd      	mov	sp, r7
  400c50:	bd80      	pop	{r7, pc}
  400c52:	bf00      	nop
  400c54:	00402165 	.word	0x00402165

00400c58 <ioport_set_pin_dir>:
{
  400c58:	b480      	push	{r7}
  400c5a:	b08d      	sub	sp, #52	; 0x34
  400c5c:	af00      	add	r7, sp, #0
  400c5e:	6078      	str	r0, [r7, #4]
  400c60:	460b      	mov	r3, r1
  400c62:	70fb      	strb	r3, [r7, #3]
  400c64:	687b      	ldr	r3, [r7, #4]
  400c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  400c68:	78fb      	ldrb	r3, [r7, #3]
  400c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c70:	627b      	str	r3, [r7, #36]	; 0x24
  400c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c74:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400c76:	6a3b      	ldr	r3, [r7, #32]
  400c78:	095b      	lsrs	r3, r3, #5
  400c7a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c7c:	69fb      	ldr	r3, [r7, #28]
  400c7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400c82:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400c86:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  400c88:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  400c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400c8e:	2b01      	cmp	r3, #1
  400c90:	d109      	bne.n	400ca6 <ioport_set_pin_dir+0x4e>
  400c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c94:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400c96:	697b      	ldr	r3, [r7, #20]
  400c98:	f003 031f 	and.w	r3, r3, #31
  400c9c:	2201      	movs	r2, #1
  400c9e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ca0:	69bb      	ldr	r3, [r7, #24]
  400ca2:	611a      	str	r2, [r3, #16]
  400ca4:	e00c      	b.n	400cc0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  400ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400caa:	2b00      	cmp	r3, #0
  400cac:	d108      	bne.n	400cc0 <ioport_set_pin_dir+0x68>
  400cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400cb0:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400cb2:	693b      	ldr	r3, [r7, #16]
  400cb4:	f003 031f 	and.w	r3, r3, #31
  400cb8:	2201      	movs	r2, #1
  400cba:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cbc:	69bb      	ldr	r3, [r7, #24]
  400cbe:	615a      	str	r2, [r3, #20]
  400cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400cc2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400cc4:	68fb      	ldr	r3, [r7, #12]
  400cc6:	f003 031f 	and.w	r3, r3, #31
  400cca:	2201      	movs	r2, #1
  400ccc:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cce:	69bb      	ldr	r3, [r7, #24]
  400cd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  400cd4:	bf00      	nop
  400cd6:	3734      	adds	r7, #52	; 0x34
  400cd8:	46bd      	mov	sp, r7
  400cda:	bc80      	pop	{r7}
  400cdc:	4770      	bx	lr

00400cde <ioport_set_pin_level>:
{
  400cde:	b480      	push	{r7}
  400ce0:	b08b      	sub	sp, #44	; 0x2c
  400ce2:	af00      	add	r7, sp, #0
  400ce4:	6078      	str	r0, [r7, #4]
  400ce6:	460b      	mov	r3, r1
  400ce8:	70fb      	strb	r3, [r7, #3]
  400cea:	687b      	ldr	r3, [r7, #4]
  400cec:	627b      	str	r3, [r7, #36]	; 0x24
  400cee:	78fb      	ldrb	r3, [r7, #3]
  400cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400cf6:	61fb      	str	r3, [r7, #28]
  400cf8:	69fb      	ldr	r3, [r7, #28]
  400cfa:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400cfc:	69bb      	ldr	r3, [r7, #24]
  400cfe:	095b      	lsrs	r3, r3, #5
  400d00:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d02:	697b      	ldr	r3, [r7, #20]
  400d04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400d08:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400d0c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  400d0e:	613b      	str	r3, [r7, #16]
	if (level) {
  400d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400d14:	2b00      	cmp	r3, #0
  400d16:	d009      	beq.n	400d2c <ioport_set_pin_level+0x4e>
  400d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400d1a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400d1c:	68fb      	ldr	r3, [r7, #12]
  400d1e:	f003 031f 	and.w	r3, r3, #31
  400d22:	2201      	movs	r2, #1
  400d24:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d26:	693b      	ldr	r3, [r7, #16]
  400d28:	631a      	str	r2, [r3, #48]	; 0x30
}
  400d2a:	e008      	b.n	400d3e <ioport_set_pin_level+0x60>
  400d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400d2e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400d30:	68bb      	ldr	r3, [r7, #8]
  400d32:	f003 031f 	and.w	r3, r3, #31
  400d36:	2201      	movs	r2, #1
  400d38:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d3a:	693b      	ldr	r3, [r7, #16]
  400d3c:	635a      	str	r2, [r3, #52]	; 0x34
  400d3e:	bf00      	nop
  400d40:	372c      	adds	r7, #44	; 0x2c
  400d42:	46bd      	mov	sp, r7
  400d44:	bc80      	pop	{r7}
  400d46:	4770      	bx	lr

00400d48 <USART1_Handler>:
/*
Handler for incoming data from the prog. Should call
process incoming byte prog when a new byte arrives
*/
void PROG_USART_HANDLER(void) 
{
  400d48:	b580      	push	{r7, lr}
  400d4a:	b082      	sub	sp, #8
  400d4c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART_PROG);
  400d4e:	480d      	ldr	r0, [pc, #52]	; (400d84 <USART1_Handler+0x3c>)
  400d50:	4b0d      	ldr	r3, [pc, #52]	; (400d88 <USART1_Handler+0x40>)
  400d52:	4798      	blx	r3
  400d54:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  400d56:	687b      	ldr	r3, [r7, #4]
  400d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400d5c:	2b00      	cmp	r3, #0
  400d5e:	d00c      	beq.n	400d7a <USART1_Handler+0x32>
		usart_read(BOARD_USART_PROG, &received_byte_prog);
  400d60:	490a      	ldr	r1, [pc, #40]	; (400d8c <USART1_Handler+0x44>)
  400d62:	4808      	ldr	r0, [pc, #32]	; (400d84 <USART1_Handler+0x3c>)
  400d64:	4b0a      	ldr	r3, [pc, #40]	; (400d90 <USART1_Handler+0x48>)
  400d66:	4798      	blx	r3
		new_rx_prog = true;
  400d68:	4b0a      	ldr	r3, [pc, #40]	; (400d94 <USART1_Handler+0x4c>)
  400d6a:	2201      	movs	r2, #1
  400d6c:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_prog((uint8_t)received_byte_prog);
  400d6e:	4b07      	ldr	r3, [pc, #28]	; (400d8c <USART1_Handler+0x44>)
  400d70:	681b      	ldr	r3, [r3, #0]
  400d72:	b2db      	uxtb	r3, r3
  400d74:	4618      	mov	r0, r3
  400d76:	4b08      	ldr	r3, [pc, #32]	; (400d98 <USART1_Handler+0x50>)
  400d78:	4798      	blx	r3
	}
}
  400d7a:	bf00      	nop
  400d7c:	3708      	adds	r7, #8
  400d7e:	46bd      	mov	sp, r7
  400d80:	bd80      	pop	{r7, pc}
  400d82:	bf00      	nop
  400d84:	40028000 	.word	0x40028000
  400d88:	0040051d 	.word	0x0040051d
  400d8c:	20006c00 	.word	0x20006c00
  400d90:	004005e1 	.word	0x004005e1
  400d94:	20006c04 	.word	0x20006c04
  400d98:	00400d9d 	.word	0x00400d9d

00400d9c <process_incoming_byte_prog>:

/*
Stores every incoming byte (in byte) from the AMW136 in a buffer.
*/
void process_incoming_byte_prog(uint8_t in_byte) 
{
  400d9c:	b480      	push	{r7}
  400d9e:	b083      	sub	sp, #12
  400da0:	af00      	add	r7, sp, #0
  400da2:	4603      	mov	r3, r0
  400da4:	71fb      	strb	r3, [r7, #7]
	buffer_prog[input_pos_prog] = in_byte;
  400da6:	4b07      	ldr	r3, [pc, #28]	; (400dc4 <process_incoming_byte_prog+0x28>)
  400da8:	681b      	ldr	r3, [r3, #0]
  400daa:	4907      	ldr	r1, [pc, #28]	; (400dc8 <process_incoming_byte_prog+0x2c>)
  400dac:	79fa      	ldrb	r2, [r7, #7]
  400dae:	54ca      	strb	r2, [r1, r3]
	input_pos_prog++;
  400db0:	4b04      	ldr	r3, [pc, #16]	; (400dc4 <process_incoming_byte_prog+0x28>)
  400db2:	681b      	ldr	r3, [r3, #0]
  400db4:	3301      	adds	r3, #1
  400db6:	4a03      	ldr	r2, [pc, #12]	; (400dc4 <process_incoming_byte_prog+0x28>)
  400db8:	6013      	str	r3, [r2, #0]
}
  400dba:	bf00      	nop
  400dbc:	370c      	adds	r7, #12
  400dbe:	46bd      	mov	sp, r7
  400dc0:	bc80      	pop	{r7}
  400dc2:	4770      	bx	lr
  400dc4:	20006c08 	.word	0x20006c08
  400dc8:	20006c98 	.word	0x20006c98

00400dcc <configure_usart_prog>:

/*
Configuration of USART port used to communicate with the AMW136.
*/
void configure_usart_prog(void) 
{
  400dcc:	b5b0      	push	{r4, r5, r7, lr}
  400dce:	b086      	sub	sp, #24
  400dd0:	af00      	add	r7, sp, #0
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  400dd2:	4b22      	ldr	r3, [pc, #136]	; (400e5c <configure_usart_prog+0x90>)
  400dd4:	463c      	mov	r4, r7
  400dd6:	461d      	mov	r5, r3
  400dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400ddc:	e895 0003 	ldmia.w	r5, {r0, r1}
  400de0:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  400de4:	4b1e      	ldr	r3, [pc, #120]	; (400e60 <configure_usart_prog+0x94>)
  400de6:	4798      	blx	r3
  400de8:	4602      	mov	r2, r0
  400dea:	4b1e      	ldr	r3, [pc, #120]	; (400e64 <configure_usart_prog+0x98>)
  400dec:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART_PROG);
  400dee:	200f      	movs	r0, #15
  400df0:	4b1d      	ldr	r3, [pc, #116]	; (400e68 <configure_usart_prog+0x9c>)
  400df2:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART_PROG, &usart_console_settings, ul_sysclk);
  400df4:	4b1b      	ldr	r3, [pc, #108]	; (400e64 <configure_usart_prog+0x98>)
  400df6:	681a      	ldr	r2, [r3, #0]
  400df8:	463b      	mov	r3, r7
  400dfa:	4619      	mov	r1, r3
  400dfc:	481b      	ldr	r0, [pc, #108]	; (400e6c <configure_usart_prog+0xa0>)
  400dfe:	4b1c      	ldr	r3, [pc, #112]	; (400e70 <configure_usart_prog+0xa4>)
  400e00:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART_PROG, ALL_INTERRUPT_MASK);
  400e02:	f04f 31ff 	mov.w	r1, #4294967295
  400e06:	4819      	ldr	r0, [pc, #100]	; (400e6c <configure_usart_prog+0xa0>)
  400e08:	4b1a      	ldr	r3, [pc, #104]	; (400e74 <configure_usart_prog+0xa8>)
  400e0a:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART_PROG);
  400e0c:	4817      	ldr	r0, [pc, #92]	; (400e6c <configure_usart_prog+0xa0>)
  400e0e:	4b1a      	ldr	r3, [pc, #104]	; (400e78 <configure_usart_prog+0xac>)
  400e10:	4798      	blx	r3
	usart_enable_rx(BOARD_USART_PROG);
  400e12:	4816      	ldr	r0, [pc, #88]	; (400e6c <configure_usart_prog+0xa0>)
  400e14:	4b19      	ldr	r3, [pc, #100]	; (400e7c <configure_usart_prog+0xb0>)
  400e16:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART_PROG, US_IER_RXRDY);
  400e18:	2101      	movs	r1, #1
  400e1a:	4814      	ldr	r0, [pc, #80]	; (400e6c <configure_usart_prog+0xa0>)
  400e1c:	4b18      	ldr	r3, [pc, #96]	; (400e80 <configure_usart_prog+0xb4>)
  400e1e:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn_PROG);
  400e20:	200f      	movs	r0, #15
  400e22:	4b18      	ldr	r3, [pc, #96]	; (400e84 <configure_usart_prog+0xb8>)
  400e24:	4798      	blx	r3

	// Configure the RX / TX pins
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  400e26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e2a:	2015      	movs	r0, #21
  400e2c:	4b16      	ldr	r3, [pc, #88]	; (400e88 <configure_usart_prog+0xbc>)
  400e2e:	4798      	blx	r3
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  400e30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e34:	2016      	movs	r0, #22
  400e36:	4b14      	ldr	r3, [pc, #80]	; (400e88 <configure_usart_prog+0xbc>)
  400e38:	4798      	blx	r3

	/* Configure USART CTS pin */
	//gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
	ioport_set_pin_dir(PIN_USART1_CTS_IDX,IOPORT_DIR_OUTPUT);
  400e3a:	2101      	movs	r1, #1
  400e3c:	2019      	movs	r0, #25
  400e3e:	4b13      	ldr	r3, [pc, #76]	; (400e8c <configure_usart_prog+0xc0>)
  400e40:	4798      	blx	r3
	ioport_set_pin_level(PIN_USART1_CTS_IDX,false);
  400e42:	2100      	movs	r1, #0
  400e44:	2019      	movs	r0, #25
  400e46:	4b12      	ldr	r3, [pc, #72]	; (400e90 <configure_usart_prog+0xc4>)
  400e48:	4798      	blx	r3
	/* Configure USART RTS pin */
	gpio_configure_pin(PIN_USART1_RTS_IDX, PIN_USART1_RTS_FLAGS);
  400e4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e4e:	2018      	movs	r0, #24
  400e50:	4b0d      	ldr	r3, [pc, #52]	; (400e88 <configure_usart_prog+0xbc>)
  400e52:	4798      	blx	r3

}
  400e54:	bf00      	nop
  400e56:	3718      	adds	r7, #24
  400e58:	46bd      	mov	sp, r7
  400e5a:	bdb0      	pop	{r4, r5, r7, pc}
  400e5c:	004079b0 	.word	0x004079b0
  400e60:	00400c29 	.word	0x00400c29
  400e64:	20006c0c 	.word	0x20006c0c
  400e68:	00400c3d 	.word	0x00400c3d
  400e6c:	40028000 	.word	0x40028000
  400e70:	00400449 	.word	0x00400449
  400e74:	00400503 	.word	0x00400503
  400e78:	00400489 	.word	0x00400489
  400e7c:	004004b9 	.word	0x004004b9
  400e80:	004004e9 	.word	0x004004e9
  400e84:	00400b55 	.word	0x00400b55
  400e88:	00401d45 	.word	0x00401d45
  400e8c:	00400c59 	.word	0x00400c59
  400e90:	00400cdf 	.word	0x00400cdf

00400e94 <write_prog_command>:
Writes a command (comm) and waits either for an acknowledgment
or a timeout. The timeout can be created by setting the global variable counts
to zero, which will automatically increment every second, and waiting while counts < cnt.
*/
void write_prog_command(char* comm, uint8_t cnt) 
{
  400e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e96:	b083      	sub	sp, #12
  400e98:	af00      	add	r7, sp, #0
  400e9a:	6078      	str	r0, [r7, #4]
  400e9c:	460b      	mov	r3, r1
  400e9e:	70fb      	strb	r3, [r7, #3]

	// send a message via USART:
	//usart_write_line(BOARD_USART_PROG, "string to write\r\n");
	usart_write_line(BOARD_USART_PROG, comm);
  400ea0:	6879      	ldr	r1, [r7, #4]
  400ea2:	4816      	ldr	r0, [pc, #88]	; (400efc <write_prog_command+0x68>)
  400ea4:	4b16      	ldr	r3, [pc, #88]	; (400f00 <write_prog_command+0x6c>)
  400ea6:	4798      	blx	r3
	
	delay_ms(5);
  400ea8:	4b16      	ldr	r3, [pc, #88]	; (400f04 <write_prog_command+0x70>)
  400eaa:	4798      	blx	r3
  400eac:	4603      	mov	r3, r0
  400eae:	4619      	mov	r1, r3
  400eb0:	f04f 0200 	mov.w	r2, #0
  400eb4:	460b      	mov	r3, r1
  400eb6:	4614      	mov	r4, r2
  400eb8:	00a6      	lsls	r6, r4, #2
  400eba:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400ebe:	009d      	lsls	r5, r3, #2
  400ec0:	462b      	mov	r3, r5
  400ec2:	4634      	mov	r4, r6
  400ec4:	185b      	adds	r3, r3, r1
  400ec6:	eb44 0402 	adc.w	r4, r4, r2
  400eca:	f243 61af 	movw	r1, #13999	; 0x36af
  400ece:	f04f 0200 	mov.w	r2, #0
  400ed2:	185d      	adds	r5, r3, r1
  400ed4:	eb44 0602 	adc.w	r6, r4, r2
  400ed8:	4628      	mov	r0, r5
  400eda:	4631      	mov	r1, r6
  400edc:	4c0a      	ldr	r4, [pc, #40]	; (400f08 <write_prog_command+0x74>)
  400ede:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400ee2:	f04f 0300 	mov.w	r3, #0
  400ee6:	47a0      	blx	r4
  400ee8:	4603      	mov	r3, r0
  400eea:	460c      	mov	r4, r1
  400eec:	4618      	mov	r0, r3
  400eee:	4b07      	ldr	r3, [pc, #28]	; (400f0c <write_prog_command+0x78>)
  400ef0:	4798      	blx	r3

}
  400ef2:	bf00      	nop
  400ef4:	370c      	adds	r7, #12
  400ef6:	46bd      	mov	sp, r7
  400ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400efa:	bf00      	nop
  400efc:	40028000 	.word	0x40028000
  400f00:	004005b1 	.word	0x004005b1
  400f04:	00400c15 	.word	0x00400c15
  400f08:	004029c5 	.word	0x004029c5
  400f0c:	20000001 	.word	0x20000001

00400f10 <NVIC_EnableIRQ>:
{
  400f10:	b480      	push	{r7}
  400f12:	b083      	sub	sp, #12
  400f14:	af00      	add	r7, sp, #0
  400f16:	4603      	mov	r3, r0
  400f18:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400f1a:	4908      	ldr	r1, [pc, #32]	; (400f3c <NVIC_EnableIRQ+0x2c>)
  400f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400f20:	095b      	lsrs	r3, r3, #5
  400f22:	79fa      	ldrb	r2, [r7, #7]
  400f24:	f002 021f 	and.w	r2, r2, #31
  400f28:	2001      	movs	r0, #1
  400f2a:	fa00 f202 	lsl.w	r2, r0, r2
  400f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400f32:	bf00      	nop
  400f34:	370c      	adds	r7, #12
  400f36:	46bd      	mov	sp, r7
  400f38:	bc80      	pop	{r7}
  400f3a:	4770      	bx	lr
  400f3c:	e000e100 	.word	0xe000e100

00400f40 <osc_get_rate>:
{
  400f40:	b480      	push	{r7}
  400f42:	b083      	sub	sp, #12
  400f44:	af00      	add	r7, sp, #0
  400f46:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f48:	687b      	ldr	r3, [r7, #4]
  400f4a:	2b07      	cmp	r3, #7
  400f4c:	d825      	bhi.n	400f9a <osc_get_rate+0x5a>
  400f4e:	a201      	add	r2, pc, #4	; (adr r2, 400f54 <osc_get_rate+0x14>)
  400f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f54:	00400f75 	.word	0x00400f75
  400f58:	00400f7b 	.word	0x00400f7b
  400f5c:	00400f81 	.word	0x00400f81
  400f60:	00400f87 	.word	0x00400f87
  400f64:	00400f8b 	.word	0x00400f8b
  400f68:	00400f8f 	.word	0x00400f8f
  400f6c:	00400f93 	.word	0x00400f93
  400f70:	00400f97 	.word	0x00400f97
		return OSC_SLCK_32K_RC_HZ;
  400f74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f78:	e010      	b.n	400f9c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f7e:	e00d      	b.n	400f9c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f84:	e00a      	b.n	400f9c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400f86:	4b08      	ldr	r3, [pc, #32]	; (400fa8 <osc_get_rate+0x68>)
  400f88:	e008      	b.n	400f9c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400f8a:	4b08      	ldr	r3, [pc, #32]	; (400fac <osc_get_rate+0x6c>)
  400f8c:	e006      	b.n	400f9c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400f8e:	4b08      	ldr	r3, [pc, #32]	; (400fb0 <osc_get_rate+0x70>)
  400f90:	e004      	b.n	400f9c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400f92:	4b07      	ldr	r3, [pc, #28]	; (400fb0 <osc_get_rate+0x70>)
  400f94:	e002      	b.n	400f9c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400f96:	4b06      	ldr	r3, [pc, #24]	; (400fb0 <osc_get_rate+0x70>)
  400f98:	e000      	b.n	400f9c <osc_get_rate+0x5c>
	return 0;
  400f9a:	2300      	movs	r3, #0
}
  400f9c:	4618      	mov	r0, r3
  400f9e:	370c      	adds	r7, #12
  400fa0:	46bd      	mov	sp, r7
  400fa2:	bc80      	pop	{r7}
  400fa4:	4770      	bx	lr
  400fa6:	bf00      	nop
  400fa8:	003d0900 	.word	0x003d0900
  400fac:	007a1200 	.word	0x007a1200
  400fb0:	00b71b00 	.word	0x00b71b00

00400fb4 <sysclk_get_main_hz>:
{
  400fb4:	b580      	push	{r7, lr}
  400fb6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400fb8:	2006      	movs	r0, #6
  400fba:	4b04      	ldr	r3, [pc, #16]	; (400fcc <sysclk_get_main_hz+0x18>)
  400fbc:	4798      	blx	r3
  400fbe:	4602      	mov	r2, r0
  400fc0:	4613      	mov	r3, r2
  400fc2:	009b      	lsls	r3, r3, #2
  400fc4:	4413      	add	r3, r2
  400fc6:	009b      	lsls	r3, r3, #2
}
  400fc8:	4618      	mov	r0, r3
  400fca:	bd80      	pop	{r7, pc}
  400fcc:	00400f41 	.word	0x00400f41

00400fd0 <sysclk_get_cpu_hz>:
{
  400fd0:	b580      	push	{r7, lr}
  400fd2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fd4:	4b02      	ldr	r3, [pc, #8]	; (400fe0 <sysclk_get_cpu_hz+0x10>)
  400fd6:	4798      	blx	r3
  400fd8:	4603      	mov	r3, r0
  400fda:	085b      	lsrs	r3, r3, #1
}
  400fdc:	4618      	mov	r0, r3
  400fde:	bd80      	pop	{r7, pc}
  400fe0:	00400fb5 	.word	0x00400fb5

00400fe4 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400fe4:	b580      	push	{r7, lr}
  400fe6:	b082      	sub	sp, #8
  400fe8:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  400fea:	2100      	movs	r1, #0
  400fec:	4809      	ldr	r0, [pc, #36]	; (401014 <TC0_Handler+0x30>)
  400fee:	4b0a      	ldr	r3, [pc, #40]	; (401018 <TC0_Handler+0x34>)
  400ff0:	4798      	blx	r3
  400ff2:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	f003 0310 	and.w	r3, r3, #16
  400ffa:	2b00      	cmp	r3, #0
  400ffc:	d006      	beq.n	40100c <TC0_Handler+0x28>
		counts++;
  400ffe:	4b07      	ldr	r3, [pc, #28]	; (40101c <TC0_Handler+0x38>)
  401000:	781b      	ldrb	r3, [r3, #0]
  401002:	b2db      	uxtb	r3, r3
  401004:	3301      	adds	r3, #1
  401006:	b2da      	uxtb	r2, r3
  401008:	4b04      	ldr	r3, [pc, #16]	; (40101c <TC0_Handler+0x38>)
  40100a:	701a      	strb	r2, [r3, #0]
	}
}
  40100c:	bf00      	nop
  40100e:	3708      	adds	r7, #8
  401010:	46bd      	mov	sp, r7
  401012:	bd80      	pop	{r7, pc}
  401014:	40010000 	.word	0x40010000
  401018:	00402287 	.word	0x00402287
  40101c:	20006c1c 	.word	0x20006c1c

00401020 <configure_tc>:

void configure_tc(void)
{
  401020:	b590      	push	{r4, r7, lr}
  401022:	b087      	sub	sp, #28
  401024:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  401026:	4b18      	ldr	r3, [pc, #96]	; (401088 <configure_tc+0x68>)
  401028:	4798      	blx	r3
  40102a:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  40102c:	2017      	movs	r0, #23
  40102e:	4b17      	ldr	r3, [pc, #92]	; (40108c <configure_tc+0x6c>)
  401030:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401032:	1d39      	adds	r1, r7, #4
  401034:	f107 0208 	add.w	r2, r7, #8
  401038:	68fb      	ldr	r3, [r7, #12]
  40103a:	9300      	str	r3, [sp, #0]
  40103c:	460b      	mov	r3, r1
  40103e:	68f9      	ldr	r1, [r7, #12]
  401040:	2001      	movs	r0, #1
  401042:	4c13      	ldr	r4, [pc, #76]	; (401090 <configure_tc+0x70>)
  401044:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  401046:	687b      	ldr	r3, [r7, #4]
  401048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40104c:	461a      	mov	r2, r3
  40104e:	2100      	movs	r1, #0
  401050:	4810      	ldr	r0, [pc, #64]	; (401094 <configure_tc+0x74>)
  401052:	4b11      	ldr	r3, [pc, #68]	; (401098 <configure_tc+0x78>)
  401054:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  401056:	68bb      	ldr	r3, [r7, #8]
  401058:	68fa      	ldr	r2, [r7, #12]
  40105a:	fbb2 f3f3 	udiv	r3, r2, r3
  40105e:	461a      	mov	r2, r3
  401060:	2100      	movs	r1, #0
  401062:	480c      	ldr	r0, [pc, #48]	; (401094 <configure_tc+0x74>)
  401064:	4b0d      	ldr	r3, [pc, #52]	; (40109c <configure_tc+0x7c>)
  401066:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  401068:	2017      	movs	r0, #23
  40106a:	4b0d      	ldr	r3, [pc, #52]	; (4010a0 <configure_tc+0x80>)
  40106c:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40106e:	2210      	movs	r2, #16
  401070:	2100      	movs	r1, #0
  401072:	4808      	ldr	r0, [pc, #32]	; (401094 <configure_tc+0x74>)
  401074:	4b0b      	ldr	r3, [pc, #44]	; (4010a4 <configure_tc+0x84>)
  401076:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  401078:	2100      	movs	r1, #0
  40107a:	4806      	ldr	r0, [pc, #24]	; (401094 <configure_tc+0x74>)
  40107c:	4b0a      	ldr	r3, [pc, #40]	; (4010a8 <configure_tc+0x88>)
  40107e:	4798      	blx	r3
  401080:	bf00      	nop
  401082:	3714      	adds	r7, #20
  401084:	46bd      	mov	sp, r7
  401086:	bd90      	pop	{r4, r7, pc}
  401088:	00400fd1 	.word	0x00400fd1
  40108c:	00402165 	.word	0x00402165
  401090:	004022a9 	.word	0x004022a9
  401094:	40010000 	.word	0x40010000
  401098:	004021e5 	.word	0x004021e5
  40109c:	0040223d 	.word	0x0040223d
  4010a0:	00400f11 	.word	0x00400f11
  4010a4:	00402261 	.word	0x00402261
  4010a8:	0040221d 	.word	0x0040221d

004010ac <NVIC_EnableIRQ>:
{
  4010ac:	b480      	push	{r7}
  4010ae:	b083      	sub	sp, #12
  4010b0:	af00      	add	r7, sp, #0
  4010b2:	4603      	mov	r3, r0
  4010b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4010b6:	4908      	ldr	r1, [pc, #32]	; (4010d8 <NVIC_EnableIRQ+0x2c>)
  4010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4010bc:	095b      	lsrs	r3, r3, #5
  4010be:	79fa      	ldrb	r2, [r7, #7]
  4010c0:	f002 021f 	and.w	r2, r2, #31
  4010c4:	2001      	movs	r0, #1
  4010c6:	fa00 f202 	lsl.w	r2, r0, r2
  4010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4010ce:	bf00      	nop
  4010d0:	370c      	adds	r7, #12
  4010d2:	46bd      	mov	sp, r7
  4010d4:	bc80      	pop	{r7}
  4010d6:	4770      	bx	lr
  4010d8:	e000e100 	.word	0xe000e100

004010dc <osc_get_rate>:
{
  4010dc:	b480      	push	{r7}
  4010de:	b083      	sub	sp, #12
  4010e0:	af00      	add	r7, sp, #0
  4010e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4010e4:	687b      	ldr	r3, [r7, #4]
  4010e6:	2b07      	cmp	r3, #7
  4010e8:	d825      	bhi.n	401136 <osc_get_rate+0x5a>
  4010ea:	a201      	add	r2, pc, #4	; (adr r2, 4010f0 <osc_get_rate+0x14>)
  4010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4010f0:	00401111 	.word	0x00401111
  4010f4:	00401117 	.word	0x00401117
  4010f8:	0040111d 	.word	0x0040111d
  4010fc:	00401123 	.word	0x00401123
  401100:	00401127 	.word	0x00401127
  401104:	0040112b 	.word	0x0040112b
  401108:	0040112f 	.word	0x0040112f
  40110c:	00401133 	.word	0x00401133
		return OSC_SLCK_32K_RC_HZ;
  401110:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401114:	e010      	b.n	401138 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40111a:	e00d      	b.n	401138 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40111c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401120:	e00a      	b.n	401138 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401122:	4b08      	ldr	r3, [pc, #32]	; (401144 <osc_get_rate+0x68>)
  401124:	e008      	b.n	401138 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401126:	4b08      	ldr	r3, [pc, #32]	; (401148 <osc_get_rate+0x6c>)
  401128:	e006      	b.n	401138 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40112a:	4b08      	ldr	r3, [pc, #32]	; (40114c <osc_get_rate+0x70>)
  40112c:	e004      	b.n	401138 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40112e:	4b07      	ldr	r3, [pc, #28]	; (40114c <osc_get_rate+0x70>)
  401130:	e002      	b.n	401138 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401132:	4b06      	ldr	r3, [pc, #24]	; (40114c <osc_get_rate+0x70>)
  401134:	e000      	b.n	401138 <osc_get_rate+0x5c>
	return 0;
  401136:	2300      	movs	r3, #0
}
  401138:	4618      	mov	r0, r3
  40113a:	370c      	adds	r7, #12
  40113c:	46bd      	mov	sp, r7
  40113e:	bc80      	pop	{r7}
  401140:	4770      	bx	lr
  401142:	bf00      	nop
  401144:	003d0900 	.word	0x003d0900
  401148:	007a1200 	.word	0x007a1200
  40114c:	00b71b00 	.word	0x00b71b00

00401150 <sysclk_get_main_hz>:
{
  401150:	b580      	push	{r7, lr}
  401152:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401154:	2006      	movs	r0, #6
  401156:	4b04      	ldr	r3, [pc, #16]	; (401168 <sysclk_get_main_hz+0x18>)
  401158:	4798      	blx	r3
  40115a:	4602      	mov	r2, r0
  40115c:	4613      	mov	r3, r2
  40115e:	009b      	lsls	r3, r3, #2
  401160:	4413      	add	r3, r2
  401162:	009b      	lsls	r3, r3, #2
}
  401164:	4618      	mov	r0, r3
  401166:	bd80      	pop	{r7, pc}
  401168:	004010dd 	.word	0x004010dd

0040116c <sysclk_get_cpu_hz>:
{
  40116c:	b580      	push	{r7, lr}
  40116e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401170:	4b02      	ldr	r3, [pc, #8]	; (40117c <sysclk_get_cpu_hz+0x10>)
  401172:	4798      	blx	r3
  401174:	4603      	mov	r3, r0
  401176:	085b      	lsrs	r3, r3, #1
}
  401178:	4618      	mov	r0, r3
  40117a:	bd80      	pop	{r7, pc}
  40117c:	00401151 	.word	0x00401151

00401180 <sysclk_get_peripheral_hz>:
{
  401180:	b580      	push	{r7, lr}
  401182:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401184:	4b02      	ldr	r3, [pc, #8]	; (401190 <sysclk_get_peripheral_hz+0x10>)
  401186:	4798      	blx	r3
  401188:	4603      	mov	r3, r0
  40118a:	085b      	lsrs	r3, r3, #1
}
  40118c:	4618      	mov	r0, r3
  40118e:	bd80      	pop	{r7, pc}
  401190:	00401151 	.word	0x00401151

00401194 <sysclk_enable_peripheral_clock>:
{
  401194:	b580      	push	{r7, lr}
  401196:	b082      	sub	sp, #8
  401198:	af00      	add	r7, sp, #0
  40119a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40119c:	6878      	ldr	r0, [r7, #4]
  40119e:	4b03      	ldr	r3, [pc, #12]	; (4011ac <sysclk_enable_peripheral_clock+0x18>)
  4011a0:	4798      	blx	r3
}
  4011a2:	bf00      	nop
  4011a4:	3708      	adds	r7, #8
  4011a6:	46bd      	mov	sp, r7
  4011a8:	bd80      	pop	{r7, pc}
  4011aa:	bf00      	nop
  4011ac:	00402165 	.word	0x00402165

004011b0 <ioport_set_pin_dir>:
{
  4011b0:	b480      	push	{r7}
  4011b2:	b08d      	sub	sp, #52	; 0x34
  4011b4:	af00      	add	r7, sp, #0
  4011b6:	6078      	str	r0, [r7, #4]
  4011b8:	460b      	mov	r3, r1
  4011ba:	70fb      	strb	r3, [r7, #3]
  4011bc:	687b      	ldr	r3, [r7, #4]
  4011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  4011c0:	78fb      	ldrb	r3, [r7, #3]
  4011c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011c8:	627b      	str	r3, [r7, #36]	; 0x24
  4011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011cc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4011ce:	6a3b      	ldr	r3, [r7, #32]
  4011d0:	095b      	lsrs	r3, r3, #5
  4011d2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4011d4:	69fb      	ldr	r3, [r7, #28]
  4011d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4011da:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4011de:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4011e0:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4011e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4011e6:	2b01      	cmp	r3, #1
  4011e8:	d109      	bne.n	4011fe <ioport_set_pin_dir+0x4e>
  4011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011ec:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4011ee:	697b      	ldr	r3, [r7, #20]
  4011f0:	f003 031f 	and.w	r3, r3, #31
  4011f4:	2201      	movs	r2, #1
  4011f6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011f8:	69bb      	ldr	r3, [r7, #24]
  4011fa:	611a      	str	r2, [r3, #16]
  4011fc:	e00c      	b.n	401218 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4011fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401202:	2b00      	cmp	r3, #0
  401204:	d108      	bne.n	401218 <ioport_set_pin_dir+0x68>
  401206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401208:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40120a:	693b      	ldr	r3, [r7, #16]
  40120c:	f003 031f 	and.w	r3, r3, #31
  401210:	2201      	movs	r2, #1
  401212:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401214:	69bb      	ldr	r3, [r7, #24]
  401216:	615a      	str	r2, [r3, #20]
  401218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40121a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40121c:	68fb      	ldr	r3, [r7, #12]
  40121e:	f003 031f 	and.w	r3, r3, #31
  401222:	2201      	movs	r2, #1
  401224:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401226:	69bb      	ldr	r3, [r7, #24]
  401228:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  40122c:	bf00      	nop
  40122e:	3734      	adds	r7, #52	; 0x34
  401230:	46bd      	mov	sp, r7
  401232:	bc80      	pop	{r7}
  401234:	4770      	bx	lr

00401236 <ioport_set_pin_level>:
{
  401236:	b480      	push	{r7}
  401238:	b08b      	sub	sp, #44	; 0x2c
  40123a:	af00      	add	r7, sp, #0
  40123c:	6078      	str	r0, [r7, #4]
  40123e:	460b      	mov	r3, r1
  401240:	70fb      	strb	r3, [r7, #3]
  401242:	687b      	ldr	r3, [r7, #4]
  401244:	627b      	str	r3, [r7, #36]	; 0x24
  401246:	78fb      	ldrb	r3, [r7, #3]
  401248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40124e:	61fb      	str	r3, [r7, #28]
  401250:	69fb      	ldr	r3, [r7, #28]
  401252:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401254:	69bb      	ldr	r3, [r7, #24]
  401256:	095b      	lsrs	r3, r3, #5
  401258:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40125a:	697b      	ldr	r3, [r7, #20]
  40125c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401260:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401264:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401266:	613b      	str	r3, [r7, #16]
	if (level) {
  401268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40126c:	2b00      	cmp	r3, #0
  40126e:	d009      	beq.n	401284 <ioport_set_pin_level+0x4e>
  401270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401272:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401274:	68fb      	ldr	r3, [r7, #12]
  401276:	f003 031f 	and.w	r3, r3, #31
  40127a:	2201      	movs	r2, #1
  40127c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40127e:	693b      	ldr	r3, [r7, #16]
  401280:	631a      	str	r2, [r3, #48]	; 0x30
}
  401282:	e008      	b.n	401296 <ioport_set_pin_level+0x60>
  401284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401286:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401288:	68bb      	ldr	r3, [r7, #8]
  40128a:	f003 031f 	and.w	r3, r3, #31
  40128e:	2201      	movs	r2, #1
  401290:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401292:	693b      	ldr	r3, [r7, #16]
  401294:	635a      	str	r2, [r3, #52]	; 0x34
  401296:	bf00      	nop
  401298:	372c      	adds	r7, #44	; 0x2c
  40129a:	46bd      	mov	sp, r7
  40129c:	bc80      	pop	{r7}
  40129e:	4770      	bx	lr

004012a0 <USART0_Handler>:
/*
Handler for incoming data from the WiFi. Should call
process incoming byte wifi when a new byte arrives
*/
void WIFI_USART_HANDLER(void) 
{
  4012a0:	b580      	push	{r7, lr}
  4012a2:	b082      	sub	sp, #8
  4012a4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  4012a6:	480d      	ldr	r0, [pc, #52]	; (4012dc <USART0_Handler+0x3c>)
  4012a8:	4b0d      	ldr	r3, [pc, #52]	; (4012e0 <USART0_Handler+0x40>)
  4012aa:	4798      	blx	r3
  4012ac:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  4012ae:	687b      	ldr	r3, [r7, #4]
  4012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4012b4:	2b00      	cmp	r3, #0
  4012b6:	d00c      	beq.n	4012d2 <USART0_Handler+0x32>
		usart_read(BOARD_USART, &received_byte_wifi);
  4012b8:	490a      	ldr	r1, [pc, #40]	; (4012e4 <USART0_Handler+0x44>)
  4012ba:	4808      	ldr	r0, [pc, #32]	; (4012dc <USART0_Handler+0x3c>)
  4012bc:	4b0a      	ldr	r3, [pc, #40]	; (4012e8 <USART0_Handler+0x48>)
  4012be:	4798      	blx	r3
		new_rx_wifi = true;
  4012c0:	4b0a      	ldr	r3, [pc, #40]	; (4012ec <USART0_Handler+0x4c>)
  4012c2:	2201      	movs	r2, #1
  4012c4:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4012c6:	4b07      	ldr	r3, [pc, #28]	; (4012e4 <USART0_Handler+0x44>)
  4012c8:	681b      	ldr	r3, [r3, #0]
  4012ca:	b2db      	uxtb	r3, r3
  4012cc:	4618      	mov	r0, r3
  4012ce:	4b08      	ldr	r3, [pc, #32]	; (4012f0 <USART0_Handler+0x50>)
  4012d0:	4798      	blx	r3
	}
}
  4012d2:	bf00      	nop
  4012d4:	3708      	adds	r7, #8
  4012d6:	46bd      	mov	sp, r7
  4012d8:	bd80      	pop	{r7, pc}
  4012da:	bf00      	nop
  4012dc:	40024000 	.word	0x40024000
  4012e0:	0040051d 	.word	0x0040051d
  4012e4:	20006c10 	.word	0x20006c10
  4012e8:	004005e1 	.word	0x004005e1
  4012ec:	20006c14 	.word	0x20006c14
  4012f0:	004012f5 	.word	0x004012f5

004012f4 <process_incoming_byte_wifi>:

/*
Stores every incoming byte (in byte) from the AMW136 in a buffer.
*/
void process_incoming_byte_wifi(uint8_t in_byte) 
{
  4012f4:	b480      	push	{r7}
  4012f6:	b083      	sub	sp, #12
  4012f8:	af00      	add	r7, sp, #0
  4012fa:	4603      	mov	r3, r0
  4012fc:	71fb      	strb	r3, [r7, #7]
	buffer_wifi[input_pos_wifi] = in_byte;
  4012fe:	4b07      	ldr	r3, [pc, #28]	; (40131c <process_incoming_byte_wifi+0x28>)
  401300:	681b      	ldr	r3, [r3, #0]
  401302:	4907      	ldr	r1, [pc, #28]	; (401320 <process_incoming_byte_wifi+0x2c>)
  401304:	79fa      	ldrb	r2, [r7, #7]
  401306:	54ca      	strb	r2, [r1, r3]
	input_pos_wifi++;
  401308:	4b04      	ldr	r3, [pc, #16]	; (40131c <process_incoming_byte_wifi+0x28>)
  40130a:	681b      	ldr	r3, [r3, #0]
  40130c:	3301      	adds	r3, #1
  40130e:	4a03      	ldr	r2, [pc, #12]	; (40131c <process_incoming_byte_wifi+0x28>)
  401310:	6013      	str	r3, [r2, #0]
}
  401312:	bf00      	nop
  401314:	370c      	adds	r7, #12
  401316:	46bd      	mov	sp, r7
  401318:	bc80      	pop	{r7}
  40131a:	4770      	bx	lr
  40131c:	20006c18 	.word	0x20006c18
  401320:	20006d00 	.word	0x20006d00

00401324 <wifi_command_response_handler>:
/*
Handler for command complete rising-edge interrupt from AMW136.
When this is triggered, it is time to process the response of the AMW136.
*/
void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  401324:	b580      	push	{r7, lr}
  401326:	b084      	sub	sp, #16
  401328:	af00      	add	r7, sp, #0
  40132a:	6078      	str	r0, [r7, #4]
  40132c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	process_data_wifi();
  40132e:	4b0c      	ldr	r3, [pc, #48]	; (401360 <wifi_command_response_handler+0x3c>)
  401330:	4798      	blx	r3
	
	// reset the buffer
	input_pos_wifi = 0;
  401332:	4b0c      	ldr	r3, [pc, #48]	; (401364 <wifi_command_response_handler+0x40>)
  401334:	2200      	movs	r2, #0
  401336:	601a      	str	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  401338:	2300      	movs	r3, #0
  40133a:	60fb      	str	r3, [r7, #12]
  40133c:	e007      	b.n	40134e <wifi_command_response_handler+0x2a>
		buffer_wifi[ii] = 0;
  40133e:	4a0a      	ldr	r2, [pc, #40]	; (401368 <wifi_command_response_handler+0x44>)
  401340:	68fb      	ldr	r3, [r7, #12]
  401342:	4413      	add	r3, r2
  401344:	2200      	movs	r2, #0
  401346:	701a      	strb	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  401348:	68fb      	ldr	r3, [r7, #12]
  40134a:	3301      	adds	r3, #1
  40134c:	60fb      	str	r3, [r7, #12]
  40134e:	68fb      	ldr	r3, [r7, #12]
  401350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401354:	d3f3      	bcc.n	40133e <wifi_command_response_handler+0x1a>
	}
	
}
  401356:	bf00      	nop
  401358:	3710      	adds	r7, #16
  40135a:	46bd      	mov	sp, r7
  40135c:	bd80      	pop	{r7, pc}
  40135e:	bf00      	nop
  401360:	0040136d 	.word	0x0040136d
  401364:	20006c18 	.word	0x20006c18
  401368:	20006d00 	.word	0x20006d00

0040136c <process_data_wifi>:
filled by process incoming byte wifi. This processing should be looking for certain
responses that the AMW136 should give, such as start transfer when it is ready to
receive the image.
*/
void process_data_wifi (void) 
{
  40136c:	b580      	push	{r7, lr}
  40136e:	af00      	add	r7, sp, #0
	strcpy(rawRecievedMessage,buffer_wifi);
  401370:	491a      	ldr	r1, [pc, #104]	; (4013dc <process_data_wifi+0x70>)
  401372:	481b      	ldr	r0, [pc, #108]	; (4013e0 <process_data_wifi+0x74>)
  401374:	4b1b      	ldr	r3, [pc, #108]	; (4013e4 <process_data_wifi+0x78>)
  401376:	4798      	blx	r3
	// Compare the received string with some other string
	/*if(strstr(buffer_wifi, "StringToCompare")){
		// set receivedMessage variable as appropriate
	}*/
	if(strstr(buffer_wifi,msg_START_TRANSFER)){
  401378:	491b      	ldr	r1, [pc, #108]	; (4013e8 <process_data_wifi+0x7c>)
  40137a:	4818      	ldr	r0, [pc, #96]	; (4013dc <process_data_wifi+0x70>)
  40137c:	4b1b      	ldr	r3, [pc, #108]	; (4013ec <process_data_wifi+0x80>)
  40137e:	4798      	blx	r3
  401380:	4603      	mov	r3, r0
  401382:	2b00      	cmp	r3, #0
  401384:	d003      	beq.n	40138e <process_data_wifi+0x22>
		receivedMessage = START_TRANSFER;
  401386:	4b1a      	ldr	r3, [pc, #104]	; (4013f0 <process_data_wifi+0x84>)
  401388:	2202      	movs	r2, #2
  40138a:	601a      	str	r2, [r3, #0]
					receivedMessage = DEFAULT;
				}
			}
		}
	}
}
  40138c:	e024      	b.n	4013d8 <process_data_wifi+0x6c>
    	if(strstr(buffer_wifi,msg_CLIENT_NOT_CONNECTED)){
  40138e:	4919      	ldr	r1, [pc, #100]	; (4013f4 <process_data_wifi+0x88>)
  401390:	4812      	ldr	r0, [pc, #72]	; (4013dc <process_data_wifi+0x70>)
  401392:	4b16      	ldr	r3, [pc, #88]	; (4013ec <process_data_wifi+0x80>)
  401394:	4798      	blx	r3
  401396:	4603      	mov	r3, r0
  401398:	2b00      	cmp	r3, #0
  40139a:	d003      	beq.n	4013a4 <process_data_wifi+0x38>
			receivedMessage = CLIENT_NOT_CONNECTED	;
  40139c:	4b14      	ldr	r3, [pc, #80]	; (4013f0 <process_data_wifi+0x84>)
  40139e:	2204      	movs	r2, #4
  4013a0:	601a      	str	r2, [r3, #0]
}
  4013a2:	e019      	b.n	4013d8 <process_data_wifi+0x6c>
			if(strstr(buffer_wifi,msg_COMMAND_FAILED)){
  4013a4:	4914      	ldr	r1, [pc, #80]	; (4013f8 <process_data_wifi+0x8c>)
  4013a6:	480d      	ldr	r0, [pc, #52]	; (4013dc <process_data_wifi+0x70>)
  4013a8:	4b10      	ldr	r3, [pc, #64]	; (4013ec <process_data_wifi+0x80>)
  4013aa:	4798      	blx	r3
  4013ac:	4603      	mov	r3, r0
  4013ae:	2b00      	cmp	r3, #0
  4013b0:	d003      	beq.n	4013ba <process_data_wifi+0x4e>
				receivedMessage = COMMAND_FAILED;
  4013b2:	4b0f      	ldr	r3, [pc, #60]	; (4013f0 <process_data_wifi+0x84>)
  4013b4:	2205      	movs	r2, #5
  4013b6:	601a      	str	r2, [r3, #0]
}
  4013b8:	e00e      	b.n	4013d8 <process_data_wifi+0x6c>
				if(strstr(buffer_wifi,msg_RECIEVE_NONE)){
  4013ba:	4910      	ldr	r1, [pc, #64]	; (4013fc <process_data_wifi+0x90>)
  4013bc:	4807      	ldr	r0, [pc, #28]	; (4013dc <process_data_wifi+0x70>)
  4013be:	4b0b      	ldr	r3, [pc, #44]	; (4013ec <process_data_wifi+0x80>)
  4013c0:	4798      	blx	r3
  4013c2:	4603      	mov	r3, r0
  4013c4:	2b00      	cmp	r3, #0
  4013c6:	d003      	beq.n	4013d0 <process_data_wifi+0x64>
					receivedMessage = RECIEVE_NONE;
  4013c8:	4b09      	ldr	r3, [pc, #36]	; (4013f0 <process_data_wifi+0x84>)
  4013ca:	2206      	movs	r2, #6
  4013cc:	601a      	str	r2, [r3, #0]
}
  4013ce:	e003      	b.n	4013d8 <process_data_wifi+0x6c>
					receivedMessage = DEFAULT;
  4013d0:	4b07      	ldr	r3, [pc, #28]	; (4013f0 <process_data_wifi+0x84>)
  4013d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  4013d6:	601a      	str	r2, [r3, #0]
}
  4013d8:	bf00      	nop
  4013da:	bd80      	pop	{r7, pc}
  4013dc:	20006d00 	.word	0x20006d00
  4013e0:	20006ccc 	.word	0x20006ccc
  4013e4:	00402e0d 	.word	0x00402e0d
  4013e8:	004079c8 	.word	0x004079c8
  4013ec:	00403179 	.word	0x00403179
  4013f0:	20006c20 	.word	0x20006c20
  4013f4:	004079d8 	.word	0x004079d8
  4013f8:	004079f0 	.word	0x004079f0
  4013fc:	00407a00 	.word	0x00407a00

00401400 <wifi_web_setup_handler>:
/*
Handler for button to initiate web setup of AMW136. Should set a flag indicating a
request to initiate web setup
*/
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  401400:	b480      	push	{r7}
  401402:	b083      	sub	sp, #12
  401404:	af00      	add	r7, sp, #0
  401406:	6078      	str	r0, [r7, #4]
  401408:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  40140a:	4b04      	ldr	r3, [pc, #16]	; (40141c <wifi_web_setup_handler+0x1c>)
  40140c:	2201      	movs	r2, #1
  40140e:	701a      	strb	r2, [r3, #0]
}
  401410:	bf00      	nop
  401412:	370c      	adds	r7, #12
  401414:	46bd      	mov	sp, r7
  401416:	bc80      	pop	{r7}
  401418:	4770      	bx	lr
  40141a:	bf00      	nop
  40141c:	20006c1d 	.word	0x20006c1d

00401420 <configure_usart_wifi>:

/*
Configuration of USART port used to communicate with the AMW136.
*/
void configure_usart_wifi(void) 
{
  401420:	b5b0      	push	{r4, r5, r7, lr}
  401422:	b086      	sub	sp, #24
  401424:	af00      	add	r7, sp, #0
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401426:	4b22      	ldr	r3, [pc, #136]	; (4014b0 <configure_usart_wifi+0x90>)
  401428:	463c      	mov	r4, r7
  40142a:	461d      	mov	r5, r3
  40142c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40142e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401430:	e895 0003 	ldmia.w	r5, {r0, r1}
  401434:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401438:	4b1e      	ldr	r3, [pc, #120]	; (4014b4 <configure_usart_wifi+0x94>)
  40143a:	4798      	blx	r3
  40143c:	4602      	mov	r2, r0
  40143e:	4b1e      	ldr	r3, [pc, #120]	; (4014b8 <configure_usart_wifi+0x98>)
  401440:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  401442:	200e      	movs	r0, #14
  401444:	4b1d      	ldr	r3, [pc, #116]	; (4014bc <configure_usart_wifi+0x9c>)
  401446:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  401448:	4b1b      	ldr	r3, [pc, #108]	; (4014b8 <configure_usart_wifi+0x98>)
  40144a:	681a      	ldr	r2, [r3, #0]
  40144c:	463b      	mov	r3, r7
  40144e:	4619      	mov	r1, r3
  401450:	481b      	ldr	r0, [pc, #108]	; (4014c0 <configure_usart_wifi+0xa0>)
  401452:	4b1c      	ldr	r3, [pc, #112]	; (4014c4 <configure_usart_wifi+0xa4>)
  401454:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  401456:	f04f 31ff 	mov.w	r1, #4294967295
  40145a:	4819      	ldr	r0, [pc, #100]	; (4014c0 <configure_usart_wifi+0xa0>)
  40145c:	4b1a      	ldr	r3, [pc, #104]	; (4014c8 <configure_usart_wifi+0xa8>)
  40145e:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401460:	4817      	ldr	r0, [pc, #92]	; (4014c0 <configure_usart_wifi+0xa0>)
  401462:	4b1a      	ldr	r3, [pc, #104]	; (4014cc <configure_usart_wifi+0xac>)
  401464:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  401466:	4816      	ldr	r0, [pc, #88]	; (4014c0 <configure_usart_wifi+0xa0>)
  401468:	4b19      	ldr	r3, [pc, #100]	; (4014d0 <configure_usart_wifi+0xb0>)
  40146a:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  40146c:	2101      	movs	r1, #1
  40146e:	4814      	ldr	r0, [pc, #80]	; (4014c0 <configure_usart_wifi+0xa0>)
  401470:	4b18      	ldr	r3, [pc, #96]	; (4014d4 <configure_usart_wifi+0xb4>)
  401472:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401474:	200e      	movs	r0, #14
  401476:	4b18      	ldr	r3, [pc, #96]	; (4014d8 <configure_usart_wifi+0xb8>)
  401478:	4798      	blx	r3

	// Configure the RX / TX pins
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  40147a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40147e:	2005      	movs	r0, #5
  401480:	4b16      	ldr	r3, [pc, #88]	; (4014dc <configure_usart_wifi+0xbc>)
  401482:	4798      	blx	r3
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401484:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401488:	2006      	movs	r0, #6
  40148a:	4b14      	ldr	r3, [pc, #80]	; (4014dc <configure_usart_wifi+0xbc>)
  40148c:	4798      	blx	r3
	/* Configure USART CTS pin */
	//gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
	ioport_set_pin_dir(PIN_USART0_CTS_IDX,IOPORT_DIR_OUTPUT);
  40148e:	2101      	movs	r1, #1
  401490:	2008      	movs	r0, #8
  401492:	4b13      	ldr	r3, [pc, #76]	; (4014e0 <configure_usart_wifi+0xc0>)
  401494:	4798      	blx	r3
	ioport_set_pin_level(PIN_USART0_CTS_IDX,false);
  401496:	2100      	movs	r1, #0
  401498:	2008      	movs	r0, #8
  40149a:	4b12      	ldr	r3, [pc, #72]	; (4014e4 <configure_usart_wifi+0xc4>)
  40149c:	4798      	blx	r3
	/* Configure USART RTS pin */
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  40149e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4014a2:	2007      	movs	r0, #7
  4014a4:	4b0d      	ldr	r3, [pc, #52]	; (4014dc <configure_usart_wifi+0xbc>)
  4014a6:	4798      	blx	r3
}
  4014a8:	bf00      	nop
  4014aa:	3718      	adds	r7, #24
  4014ac:	46bd      	mov	sp, r7
  4014ae:	bdb0      	pop	{r4, r5, r7, pc}
  4014b0:	00407a08 	.word	0x00407a08
  4014b4:	00401181 	.word	0x00401181
  4014b8:	20006c24 	.word	0x20006c24
  4014bc:	00401195 	.word	0x00401195
  4014c0:	40024000 	.word	0x40024000
  4014c4:	00400449 	.word	0x00400449
  4014c8:	00400503 	.word	0x00400503
  4014cc:	00400489 	.word	0x00400489
  4014d0:	004004b9 	.word	0x004004b9
  4014d4:	004004e9 	.word	0x004004e9
  4014d8:	004010ad 	.word	0x004010ad
  4014dc:	00401d45 	.word	0x00401d45
  4014e0:	004011b1 	.word	0x004011b1
  4014e4:	00401237 	.word	0x00401237

004014e8 <configure_wifi_comm_pin>:

/*
Configuration of command complete rising-edge interrupt.
*/
void configure_wifi_comm_pin(void) 
{
  4014e8:	b590      	push	{r4, r7, lr}
  4014ea:	b083      	sub	sp, #12
  4014ec:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	
	pmc_enable_periph_clk(WIFI_COM_COMPLETE_ID);
  4014ee:	200b      	movs	r0, #11
  4014f0:	4b0e      	ldr	r3, [pc, #56]	; (40152c <configure_wifi_comm_pin+0x44>)
  4014f2:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK, 10);
  4014f4:	220a      	movs	r2, #10
  4014f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4014fa:	480d      	ldr	r0, [pc, #52]	; (401530 <configure_wifi_comm_pin+0x48>)
  4014fc:	4b0d      	ldr	r3, [pc, #52]	; (401534 <configure_wifi_comm_pin+0x4c>)
  4014fe:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h	**/
	pio_handler_set(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_ID, WIFI_COM_COMPLETE_MSK,
  401500:	4b0d      	ldr	r3, [pc, #52]	; (401538 <configure_wifi_comm_pin+0x50>)
  401502:	9300      	str	r3, [sp, #0]
  401504:	2371      	movs	r3, #113	; 0x71
  401506:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40150a:	210b      	movs	r1, #11
  40150c:	4808      	ldr	r0, [pc, #32]	; (401530 <configure_wifi_comm_pin+0x48>)
  40150e:	4c0b      	ldr	r4, [pc, #44]	; (40153c <configure_wifi_comm_pin+0x54>)
  401510:	47a0      	blx	r4
			WIFI_COM_COMPLETE_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COM_COMPLETE_ID);
  401512:	200b      	movs	r0, #11
  401514:	4b0a      	ldr	r3, [pc, #40]	; (401540 <configure_wifi_comm_pin+0x58>)
  401516:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK);
  401518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40151c:	4804      	ldr	r0, [pc, #16]	; (401530 <configure_wifi_comm_pin+0x48>)
  40151e:	4b09      	ldr	r3, [pc, #36]	; (401544 <configure_wifi_comm_pin+0x5c>)
  401520:	4798      	blx	r3
}
  401522:	bf00      	nop
  401524:	3704      	adds	r7, #4
  401526:	46bd      	mov	sp, r7
  401528:	bd90      	pop	{r4, r7, pc}
  40152a:	bf00      	nop
  40152c:	00402165 	.word	0x00402165
  401530:	400e0e00 	.word	0x400e0e00
  401534:	00401a4f 	.word	0x00401a4f
  401538:	00401325 	.word	0x00401325
  40153c:	0040020d 	.word	0x0040020d
  401540:	004010ad 	.word	0x004010ad
  401544:	00401ce3 	.word	0x00401ce3

00401548 <configure_wifi_web_setup_pin>:

/*
Configuration of button interrupt to initiate web setup.
*/
void configure_wifi_web_setup_pin(void) 
{
  401548:	b590      	push	{r4, r7, lr}
  40154a:	b083      	sub	sp, #12
  40154c:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  40154e:	200b      	movs	r0, #11
  401550:	4b0c      	ldr	r3, [pc, #48]	; (401584 <configure_wifi_web_setup_pin+0x3c>)
  401552:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  401554:	220a      	movs	r2, #10
  401556:	2101      	movs	r1, #1
  401558:	480b      	ldr	r0, [pc, #44]	; (401588 <configure_wifi_web_setup_pin+0x40>)
  40155a:	4b0c      	ldr	r3, [pc, #48]	; (40158c <configure_wifi_web_setup_pin+0x44>)
  40155c:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  40155e:	4b0c      	ldr	r3, [pc, #48]	; (401590 <configure_wifi_web_setup_pin+0x48>)
  401560:	9300      	str	r3, [sp, #0]
  401562:	2349      	movs	r3, #73	; 0x49
  401564:	2201      	movs	r2, #1
  401566:	210b      	movs	r1, #11
  401568:	4807      	ldr	r0, [pc, #28]	; (401588 <configure_wifi_web_setup_pin+0x40>)
  40156a:	4c0a      	ldr	r4, [pc, #40]	; (401594 <configure_wifi_web_setup_pin+0x4c>)
  40156c:	47a0      	blx	r4
			PUSH_BUTTON_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);
  40156e:	200b      	movs	r0, #11
  401570:	4b09      	ldr	r3, [pc, #36]	; (401598 <configure_wifi_web_setup_pin+0x50>)
  401572:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  401574:	2101      	movs	r1, #1
  401576:	4804      	ldr	r0, [pc, #16]	; (401588 <configure_wifi_web_setup_pin+0x40>)
  401578:	4b08      	ldr	r3, [pc, #32]	; (40159c <configure_wifi_web_setup_pin+0x54>)
  40157a:	4798      	blx	r3
}
  40157c:	bf00      	nop
  40157e:	3704      	adds	r7, #4
  401580:	46bd      	mov	sp, r7
  401582:	bd90      	pop	{r4, r7, pc}
  401584:	00402165 	.word	0x00402165
  401588:	400e0e00 	.word	0x400e0e00
  40158c:	00401a4f 	.word	0x00401a4f
  401590:	00401401 	.word	0x00401401
  401594:	0040020d 	.word	0x0040020d
  401598:	004010ad 	.word	0x004010ad
  40159c:	00401ce3 	.word	0x00401ce3

004015a0 <resetWifi>:
		dv++;
	}
}

// Simple function to reset the wifi
void resetWifi(void){
  4015a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015a4:	b087      	sub	sp, #28
  4015a6:	af00      	add	r7, sp, #0
	// Reset the wifi by pulling the wifi reset pin low, then bringing it back high.
	ioport_set_pin_level(PIN_WIFI_RESET,LOW); //reset WIFI
  4015a8:	2100      	movs	r1, #0
  4015aa:	2021      	movs	r0, #33	; 0x21
  4015ac:	4b43      	ldr	r3, [pc, #268]	; (4016bc <resetWifi+0x11c>)
  4015ae:	4798      	blx	r3
	delay_ms(1000);
  4015b0:	4b43      	ldr	r3, [pc, #268]	; (4016c0 <resetWifi+0x120>)
  4015b2:	4798      	blx	r3
  4015b4:	4603      	mov	r3, r0
  4015b6:	4619      	mov	r1, r3
  4015b8:	f04f 0200 	mov.w	r2, #0
  4015bc:	460b      	mov	r3, r1
  4015be:	4614      	mov	r4, r2
  4015c0:	0166      	lsls	r6, r4, #5
  4015c2:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4015c6:	015d      	lsls	r5, r3, #5
  4015c8:	462b      	mov	r3, r5
  4015ca:	4634      	mov	r4, r6
  4015cc:	1a5b      	subs	r3, r3, r1
  4015ce:	eb64 0402 	sbc.w	r4, r4, r2
  4015d2:	00a0      	lsls	r0, r4, #2
  4015d4:	6178      	str	r0, [r7, #20]
  4015d6:	6978      	ldr	r0, [r7, #20]
  4015d8:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4015dc:	6178      	str	r0, [r7, #20]
  4015de:	009b      	lsls	r3, r3, #2
  4015e0:	613b      	str	r3, [r7, #16]
  4015e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  4015e6:	185b      	adds	r3, r3, r1
  4015e8:	eb44 0402 	adc.w	r4, r4, r2
  4015ec:	00e2      	lsls	r2, r4, #3
  4015ee:	60fa      	str	r2, [r7, #12]
  4015f0:	68fa      	ldr	r2, [r7, #12]
  4015f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  4015f6:	60fa      	str	r2, [r7, #12]
  4015f8:	00db      	lsls	r3, r3, #3
  4015fa:	60bb      	str	r3, [r7, #8]
  4015fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  401600:	4619      	mov	r1, r3
  401602:	4622      	mov	r2, r4
  401604:	f243 63af 	movw	r3, #13999	; 0x36af
  401608:	f04f 0400 	mov.w	r4, #0
  40160c:	18cd      	adds	r5, r1, r3
  40160e:	eb42 0604 	adc.w	r6, r2, r4
  401612:	4628      	mov	r0, r5
  401614:	4631      	mov	r1, r6
  401616:	4c2b      	ldr	r4, [pc, #172]	; (4016c4 <resetWifi+0x124>)
  401618:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40161c:	f04f 0300 	mov.w	r3, #0
  401620:	47a0      	blx	r4
  401622:	4603      	mov	r3, r0
  401624:	460c      	mov	r4, r1
  401626:	4618      	mov	r0, r3
  401628:	4b27      	ldr	r3, [pc, #156]	; (4016c8 <resetWifi+0x128>)
  40162a:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,HIGH); //turn Wifi Back on
  40162c:	2101      	movs	r1, #1
  40162e:	2021      	movs	r0, #33	; 0x21
  401630:	4b22      	ldr	r3, [pc, #136]	; (4016bc <resetWifi+0x11c>)
  401632:	4798      	blx	r3
	delay_ms(2000); // Account for ~0.7s high during reset
  401634:	4b22      	ldr	r3, [pc, #136]	; (4016c0 <resetWifi+0x120>)
  401636:	4798      	blx	r3
  401638:	4603      	mov	r3, r0
  40163a:	4619      	mov	r1, r3
  40163c:	f04f 0200 	mov.w	r2, #0
  401640:	460b      	mov	r3, r1
  401642:	4614      	mov	r4, r2
  401644:	0160      	lsls	r0, r4, #5
  401646:	6078      	str	r0, [r7, #4]
  401648:	6878      	ldr	r0, [r7, #4]
  40164a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  40164e:	6078      	str	r0, [r7, #4]
  401650:	015b      	lsls	r3, r3, #5
  401652:	603b      	str	r3, [r7, #0]
  401654:	e9d7 3400 	ldrd	r3, r4, [r7]
  401658:	1a5b      	subs	r3, r3, r1
  40165a:	eb64 0402 	sbc.w	r4, r4, r2
  40165e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  401662:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  401666:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  40166a:	4653      	mov	r3, sl
  40166c:	465c      	mov	r4, fp
  40166e:	185b      	adds	r3, r3, r1
  401670:	eb44 0402 	adc.w	r4, r4, r2
  401674:	ea4f 1904 	mov.w	r9, r4, lsl #4
  401678:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  40167c:	ea4f 1803 	mov.w	r8, r3, lsl #4
  401680:	4643      	mov	r3, r8
  401682:	464c      	mov	r4, r9
  401684:	4619      	mov	r1, r3
  401686:	4622      	mov	r2, r4
  401688:	f243 63af 	movw	r3, #13999	; 0x36af
  40168c:	f04f 0400 	mov.w	r4, #0
  401690:	18cd      	adds	r5, r1, r3
  401692:	eb42 0604 	adc.w	r6, r2, r4
  401696:	4628      	mov	r0, r5
  401698:	4631      	mov	r1, r6
  40169a:	4c0a      	ldr	r4, [pc, #40]	; (4016c4 <resetWifi+0x124>)
  40169c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4016a0:	f04f 0300 	mov.w	r3, #0
  4016a4:	47a0      	blx	r4
  4016a6:	4603      	mov	r3, r0
  4016a8:	460c      	mov	r4, r1
  4016aa:	4618      	mov	r0, r3
  4016ac:	4b06      	ldr	r3, [pc, #24]	; (4016c8 <resetWifi+0x128>)
  4016ae:	4798      	blx	r3
}
  4016b0:	bf00      	nop
  4016b2:	371c      	adds	r7, #28
  4016b4:	46bd      	mov	sp, r7
  4016b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016ba:	bf00      	nop
  4016bc:	00401237 	.word	0x00401237
  4016c0:	0040116d 	.word	0x0040116d
  4016c4:	004029c5 	.word	0x004029c5
  4016c8:	20000001 	.word	0x20000001

004016cc <osc_enable>:
{
  4016cc:	b580      	push	{r7, lr}
  4016ce:	b082      	sub	sp, #8
  4016d0:	af00      	add	r7, sp, #0
  4016d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4016d4:	687b      	ldr	r3, [r7, #4]
  4016d6:	2b07      	cmp	r3, #7
  4016d8:	d831      	bhi.n	40173e <osc_enable+0x72>
  4016da:	a201      	add	r2, pc, #4	; (adr r2, 4016e0 <osc_enable+0x14>)
  4016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4016e0:	0040173d 	.word	0x0040173d
  4016e4:	00401701 	.word	0x00401701
  4016e8:	00401709 	.word	0x00401709
  4016ec:	00401711 	.word	0x00401711
  4016f0:	00401719 	.word	0x00401719
  4016f4:	00401721 	.word	0x00401721
  4016f8:	00401729 	.word	0x00401729
  4016fc:	00401733 	.word	0x00401733
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401700:	2000      	movs	r0, #0
  401702:	4b11      	ldr	r3, [pc, #68]	; (401748 <osc_enable+0x7c>)
  401704:	4798      	blx	r3
		break;
  401706:	e01a      	b.n	40173e <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401708:	2001      	movs	r0, #1
  40170a:	4b0f      	ldr	r3, [pc, #60]	; (401748 <osc_enable+0x7c>)
  40170c:	4798      	blx	r3
		break;
  40170e:	e016      	b.n	40173e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401710:	2000      	movs	r0, #0
  401712:	4b0e      	ldr	r3, [pc, #56]	; (40174c <osc_enable+0x80>)
  401714:	4798      	blx	r3
		break;
  401716:	e012      	b.n	40173e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401718:	2010      	movs	r0, #16
  40171a:	4b0c      	ldr	r3, [pc, #48]	; (40174c <osc_enable+0x80>)
  40171c:	4798      	blx	r3
		break;
  40171e:	e00e      	b.n	40173e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401720:	2020      	movs	r0, #32
  401722:	4b0a      	ldr	r3, [pc, #40]	; (40174c <osc_enable+0x80>)
  401724:	4798      	blx	r3
		break;
  401726:	e00a      	b.n	40173e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401728:	213e      	movs	r1, #62	; 0x3e
  40172a:	2000      	movs	r0, #0
  40172c:	4b08      	ldr	r3, [pc, #32]	; (401750 <osc_enable+0x84>)
  40172e:	4798      	blx	r3
		break;
  401730:	e005      	b.n	40173e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  401732:	213e      	movs	r1, #62	; 0x3e
  401734:	2001      	movs	r0, #1
  401736:	4b06      	ldr	r3, [pc, #24]	; (401750 <osc_enable+0x84>)
  401738:	4798      	blx	r3
		break;
  40173a:	e000      	b.n	40173e <osc_enable+0x72>
		break;
  40173c:	bf00      	nop
}
  40173e:	bf00      	nop
  401740:	3708      	adds	r7, #8
  401742:	46bd      	mov	sp, r7
  401744:	bd80      	pop	{r7, pc}
  401746:	bf00      	nop
  401748:	00401f99 	.word	0x00401f99
  40174c:	00402005 	.word	0x00402005
  401750:	00402075 	.word	0x00402075

00401754 <osc_is_ready>:
{
  401754:	b580      	push	{r7, lr}
  401756:	b082      	sub	sp, #8
  401758:	af00      	add	r7, sp, #0
  40175a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40175c:	687b      	ldr	r3, [r7, #4]
  40175e:	2b07      	cmp	r3, #7
  401760:	d826      	bhi.n	4017b0 <osc_is_ready+0x5c>
  401762:	a201      	add	r2, pc, #4	; (adr r2, 401768 <osc_is_ready+0x14>)
  401764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401768:	00401789 	.word	0x00401789
  40176c:	0040178d 	.word	0x0040178d
  401770:	0040178d 	.word	0x0040178d
  401774:	0040179f 	.word	0x0040179f
  401778:	0040179f 	.word	0x0040179f
  40177c:	0040179f 	.word	0x0040179f
  401780:	0040179f 	.word	0x0040179f
  401784:	0040179f 	.word	0x0040179f
		return 1;
  401788:	2301      	movs	r3, #1
  40178a:	e012      	b.n	4017b2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  40178c:	4b0b      	ldr	r3, [pc, #44]	; (4017bc <osc_is_ready+0x68>)
  40178e:	4798      	blx	r3
  401790:	4603      	mov	r3, r0
  401792:	2b00      	cmp	r3, #0
  401794:	bf14      	ite	ne
  401796:	2301      	movne	r3, #1
  401798:	2300      	moveq	r3, #0
  40179a:	b2db      	uxtb	r3, r3
  40179c:	e009      	b.n	4017b2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40179e:	4b08      	ldr	r3, [pc, #32]	; (4017c0 <osc_is_ready+0x6c>)
  4017a0:	4798      	blx	r3
  4017a2:	4603      	mov	r3, r0
  4017a4:	2b00      	cmp	r3, #0
  4017a6:	bf14      	ite	ne
  4017a8:	2301      	movne	r3, #1
  4017aa:	2300      	moveq	r3, #0
  4017ac:	b2db      	uxtb	r3, r3
  4017ae:	e000      	b.n	4017b2 <osc_is_ready+0x5e>
	return 0;
  4017b0:	2300      	movs	r3, #0
}
  4017b2:	4618      	mov	r0, r3
  4017b4:	3708      	adds	r7, #8
  4017b6:	46bd      	mov	sp, r7
  4017b8:	bd80      	pop	{r7, pc}
  4017ba:	bf00      	nop
  4017bc:	00401fd1 	.word	0x00401fd1
  4017c0:	004020ed 	.word	0x004020ed

004017c4 <osc_get_rate>:
{
  4017c4:	b480      	push	{r7}
  4017c6:	b083      	sub	sp, #12
  4017c8:	af00      	add	r7, sp, #0
  4017ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4017cc:	687b      	ldr	r3, [r7, #4]
  4017ce:	2b07      	cmp	r3, #7
  4017d0:	d825      	bhi.n	40181e <osc_get_rate+0x5a>
  4017d2:	a201      	add	r2, pc, #4	; (adr r2, 4017d8 <osc_get_rate+0x14>)
  4017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017d8:	004017f9 	.word	0x004017f9
  4017dc:	004017ff 	.word	0x004017ff
  4017e0:	00401805 	.word	0x00401805
  4017e4:	0040180b 	.word	0x0040180b
  4017e8:	0040180f 	.word	0x0040180f
  4017ec:	00401813 	.word	0x00401813
  4017f0:	00401817 	.word	0x00401817
  4017f4:	0040181b 	.word	0x0040181b
		return OSC_SLCK_32K_RC_HZ;
  4017f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4017fc:	e010      	b.n	401820 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4017fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401802:	e00d      	b.n	401820 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401808:	e00a      	b.n	401820 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40180a:	4b08      	ldr	r3, [pc, #32]	; (40182c <osc_get_rate+0x68>)
  40180c:	e008      	b.n	401820 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40180e:	4b08      	ldr	r3, [pc, #32]	; (401830 <osc_get_rate+0x6c>)
  401810:	e006      	b.n	401820 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401812:	4b08      	ldr	r3, [pc, #32]	; (401834 <osc_get_rate+0x70>)
  401814:	e004      	b.n	401820 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401816:	4b07      	ldr	r3, [pc, #28]	; (401834 <osc_get_rate+0x70>)
  401818:	e002      	b.n	401820 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40181a:	4b06      	ldr	r3, [pc, #24]	; (401834 <osc_get_rate+0x70>)
  40181c:	e000      	b.n	401820 <osc_get_rate+0x5c>
	return 0;
  40181e:	2300      	movs	r3, #0
}
  401820:	4618      	mov	r0, r3
  401822:	370c      	adds	r7, #12
  401824:	46bd      	mov	sp, r7
  401826:	bc80      	pop	{r7}
  401828:	4770      	bx	lr
  40182a:	bf00      	nop
  40182c:	003d0900 	.word	0x003d0900
  401830:	007a1200 	.word	0x007a1200
  401834:	00b71b00 	.word	0x00b71b00

00401838 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401838:	b580      	push	{r7, lr}
  40183a:	b082      	sub	sp, #8
  40183c:	af00      	add	r7, sp, #0
  40183e:	4603      	mov	r3, r0
  401840:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401842:	bf00      	nop
  401844:	79fb      	ldrb	r3, [r7, #7]
  401846:	4618      	mov	r0, r3
  401848:	4b05      	ldr	r3, [pc, #20]	; (401860 <osc_wait_ready+0x28>)
  40184a:	4798      	blx	r3
  40184c:	4603      	mov	r3, r0
  40184e:	f083 0301 	eor.w	r3, r3, #1
  401852:	b2db      	uxtb	r3, r3
  401854:	2b00      	cmp	r3, #0
  401856:	d1f5      	bne.n	401844 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401858:	bf00      	nop
  40185a:	3708      	adds	r7, #8
  40185c:	46bd      	mov	sp, r7
  40185e:	bd80      	pop	{r7, pc}
  401860:	00401755 	.word	0x00401755

00401864 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401864:	b580      	push	{r7, lr}
  401866:	b086      	sub	sp, #24
  401868:	af00      	add	r7, sp, #0
  40186a:	60f8      	str	r0, [r7, #12]
  40186c:	607a      	str	r2, [r7, #4]
  40186e:	603b      	str	r3, [r7, #0]
  401870:	460b      	mov	r3, r1
  401872:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401874:	7afb      	ldrb	r3, [r7, #11]
  401876:	4618      	mov	r0, r3
  401878:	4b0d      	ldr	r3, [pc, #52]	; (4018b0 <pll_config_init+0x4c>)
  40187a:	4798      	blx	r3
  40187c:	4602      	mov	r2, r0
  40187e:	687b      	ldr	r3, [r7, #4]
  401880:	fbb2 f3f3 	udiv	r3, r2, r3
  401884:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401886:	697b      	ldr	r3, [r7, #20]
  401888:	683a      	ldr	r2, [r7, #0]
  40188a:	fb02 f303 	mul.w	r3, r2, r3
  40188e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401890:	683b      	ldr	r3, [r7, #0]
  401892:	3b01      	subs	r3, #1
  401894:	041a      	lsls	r2, r3, #16
  401896:	4b07      	ldr	r3, [pc, #28]	; (4018b4 <pll_config_init+0x50>)
  401898:	4013      	ands	r3, r2
  40189a:	687a      	ldr	r2, [r7, #4]
  40189c:	b2d2      	uxtb	r2, r2
  40189e:	4313      	orrs	r3, r2
  4018a0:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4018a4:	68fb      	ldr	r3, [r7, #12]
  4018a6:	601a      	str	r2, [r3, #0]
}
  4018a8:	bf00      	nop
  4018aa:	3718      	adds	r7, #24
  4018ac:	46bd      	mov	sp, r7
  4018ae:	bd80      	pop	{r7, pc}
  4018b0:	004017c5 	.word	0x004017c5
  4018b4:	07ff0000 	.word	0x07ff0000

004018b8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4018b8:	b580      	push	{r7, lr}
  4018ba:	b082      	sub	sp, #8
  4018bc:	af00      	add	r7, sp, #0
  4018be:	6078      	str	r0, [r7, #4]
  4018c0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4018c2:	683b      	ldr	r3, [r7, #0]
  4018c4:	2b00      	cmp	r3, #0
  4018c6:	d108      	bne.n	4018da <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4018c8:	4b09      	ldr	r3, [pc, #36]	; (4018f0 <pll_enable+0x38>)
  4018ca:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4018cc:	4a09      	ldr	r2, [pc, #36]	; (4018f4 <pll_enable+0x3c>)
  4018ce:	687b      	ldr	r3, [r7, #4]
  4018d0:	681b      	ldr	r3, [r3, #0]
  4018d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4018d6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4018d8:	e005      	b.n	4018e6 <pll_enable+0x2e>
		pmc_disable_pllbck();
  4018da:	4b07      	ldr	r3, [pc, #28]	; (4018f8 <pll_enable+0x40>)
  4018dc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4018de:	4a05      	ldr	r2, [pc, #20]	; (4018f4 <pll_enable+0x3c>)
  4018e0:	687b      	ldr	r3, [r7, #4]
  4018e2:	681b      	ldr	r3, [r3, #0]
  4018e4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4018e6:	bf00      	nop
  4018e8:	3708      	adds	r7, #8
  4018ea:	46bd      	mov	sp, r7
  4018ec:	bd80      	pop	{r7, pc}
  4018ee:	bf00      	nop
  4018f0:	00402105 	.word	0x00402105
  4018f4:	400e0400 	.word	0x400e0400
  4018f8:	00402135 	.word	0x00402135

004018fc <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4018fc:	b580      	push	{r7, lr}
  4018fe:	b082      	sub	sp, #8
  401900:	af00      	add	r7, sp, #0
  401902:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401904:	687b      	ldr	r3, [r7, #4]
  401906:	2b00      	cmp	r3, #0
  401908:	d103      	bne.n	401912 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40190a:	4b05      	ldr	r3, [pc, #20]	; (401920 <pll_is_locked+0x24>)
  40190c:	4798      	blx	r3
  40190e:	4603      	mov	r3, r0
  401910:	e002      	b.n	401918 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  401912:	4b04      	ldr	r3, [pc, #16]	; (401924 <pll_is_locked+0x28>)
  401914:	4798      	blx	r3
  401916:	4603      	mov	r3, r0
	}
}
  401918:	4618      	mov	r0, r3
  40191a:	3708      	adds	r7, #8
  40191c:	46bd      	mov	sp, r7
  40191e:	bd80      	pop	{r7, pc}
  401920:	0040211d 	.word	0x0040211d
  401924:	0040214d 	.word	0x0040214d

00401928 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401928:	b580      	push	{r7, lr}
  40192a:	b082      	sub	sp, #8
  40192c:	af00      	add	r7, sp, #0
  40192e:	4603      	mov	r3, r0
  401930:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401932:	79fb      	ldrb	r3, [r7, #7]
  401934:	3b03      	subs	r3, #3
  401936:	2b04      	cmp	r3, #4
  401938:	d808      	bhi.n	40194c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40193a:	79fb      	ldrb	r3, [r7, #7]
  40193c:	4618      	mov	r0, r3
  40193e:	4b06      	ldr	r3, [pc, #24]	; (401958 <pll_enable_source+0x30>)
  401940:	4798      	blx	r3
		osc_wait_ready(e_src);
  401942:	79fb      	ldrb	r3, [r7, #7]
  401944:	4618      	mov	r0, r3
  401946:	4b05      	ldr	r3, [pc, #20]	; (40195c <pll_enable_source+0x34>)
  401948:	4798      	blx	r3
		break;
  40194a:	e000      	b.n	40194e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40194c:	bf00      	nop
	}
}
  40194e:	bf00      	nop
  401950:	3708      	adds	r7, #8
  401952:	46bd      	mov	sp, r7
  401954:	bd80      	pop	{r7, pc}
  401956:	bf00      	nop
  401958:	004016cd 	.word	0x004016cd
  40195c:	00401839 	.word	0x00401839

00401960 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401960:	b580      	push	{r7, lr}
  401962:	b082      	sub	sp, #8
  401964:	af00      	add	r7, sp, #0
  401966:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401968:	bf00      	nop
  40196a:	6878      	ldr	r0, [r7, #4]
  40196c:	4b04      	ldr	r3, [pc, #16]	; (401980 <pll_wait_for_lock+0x20>)
  40196e:	4798      	blx	r3
  401970:	4603      	mov	r3, r0
  401972:	2b00      	cmp	r3, #0
  401974:	d0f9      	beq.n	40196a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401976:	2300      	movs	r3, #0
}
  401978:	4618      	mov	r0, r3
  40197a:	3708      	adds	r7, #8
  40197c:	46bd      	mov	sp, r7
  40197e:	bd80      	pop	{r7, pc}
  401980:	004018fd 	.word	0x004018fd

00401984 <sysclk_get_main_hz>:
{
  401984:	b580      	push	{r7, lr}
  401986:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401988:	2006      	movs	r0, #6
  40198a:	4b04      	ldr	r3, [pc, #16]	; (40199c <sysclk_get_main_hz+0x18>)
  40198c:	4798      	blx	r3
  40198e:	4602      	mov	r2, r0
  401990:	4613      	mov	r3, r2
  401992:	009b      	lsls	r3, r3, #2
  401994:	4413      	add	r3, r2
  401996:	009b      	lsls	r3, r3, #2
}
  401998:	4618      	mov	r0, r3
  40199a:	bd80      	pop	{r7, pc}
  40199c:	004017c5 	.word	0x004017c5

004019a0 <sysclk_get_cpu_hz>:
{
  4019a0:	b580      	push	{r7, lr}
  4019a2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4019a4:	4b02      	ldr	r3, [pc, #8]	; (4019b0 <sysclk_get_cpu_hz+0x10>)
  4019a6:	4798      	blx	r3
  4019a8:	4603      	mov	r3, r0
  4019aa:	085b      	lsrs	r3, r3, #1
}
  4019ac:	4618      	mov	r0, r3
  4019ae:	bd80      	pop	{r7, pc}
  4019b0:	00401985 	.word	0x00401985

004019b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4019b4:	b590      	push	{r4, r7, lr}
  4019b6:	b083      	sub	sp, #12
  4019b8:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4019ba:	4811      	ldr	r0, [pc, #68]	; (401a00 <sysclk_init+0x4c>)
  4019bc:	4b11      	ldr	r3, [pc, #68]	; (401a04 <sysclk_init+0x50>)
  4019be:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4019c0:	2006      	movs	r0, #6
  4019c2:	4b11      	ldr	r3, [pc, #68]	; (401a08 <sysclk_init+0x54>)
  4019c4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4019c6:	1d38      	adds	r0, r7, #4
  4019c8:	2314      	movs	r3, #20
  4019ca:	2201      	movs	r2, #1
  4019cc:	2106      	movs	r1, #6
  4019ce:	4c0f      	ldr	r4, [pc, #60]	; (401a0c <sysclk_init+0x58>)
  4019d0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4019d2:	1d3b      	adds	r3, r7, #4
  4019d4:	2100      	movs	r1, #0
  4019d6:	4618      	mov	r0, r3
  4019d8:	4b0d      	ldr	r3, [pc, #52]	; (401a10 <sysclk_init+0x5c>)
  4019da:	4798      	blx	r3
		pll_wait_for_lock(0);
  4019dc:	2000      	movs	r0, #0
  4019de:	4b0d      	ldr	r3, [pc, #52]	; (401a14 <sysclk_init+0x60>)
  4019e0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4019e2:	2010      	movs	r0, #16
  4019e4:	4b0c      	ldr	r3, [pc, #48]	; (401a18 <sysclk_init+0x64>)
  4019e6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4019e8:	4b0c      	ldr	r3, [pc, #48]	; (401a1c <sysclk_init+0x68>)
  4019ea:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4019ec:	4b0c      	ldr	r3, [pc, #48]	; (401a20 <sysclk_init+0x6c>)
  4019ee:	4798      	blx	r3
  4019f0:	4603      	mov	r3, r0
  4019f2:	4618      	mov	r0, r3
  4019f4:	4b03      	ldr	r3, [pc, #12]	; (401a04 <sysclk_init+0x50>)
  4019f6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4019f8:	bf00      	nop
  4019fa:	370c      	adds	r7, #12
  4019fc:	46bd      	mov	sp, r7
  4019fe:	bd90      	pop	{r4, r7, pc}
  401a00:	07270e00 	.word	0x07270e00
  401a04:	00402719 	.word	0x00402719
  401a08:	00401929 	.word	0x00401929
  401a0c:	00401865 	.word	0x00401865
  401a10:	004018b9 	.word	0x004018b9
  401a14:	00401961 	.word	0x00401961
  401a18:	00401f19 	.word	0x00401f19
  401a1c:	00402581 	.word	0x00402581
  401a20:	004019a1 	.word	0x004019a1

00401a24 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401a24:	b480      	push	{r7}
  401a26:	b085      	sub	sp, #20
  401a28:	af00      	add	r7, sp, #0
  401a2a:	60f8      	str	r0, [r7, #12]
  401a2c:	60b9      	str	r1, [r7, #8]
  401a2e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401a30:	687b      	ldr	r3, [r7, #4]
  401a32:	2b00      	cmp	r3, #0
  401a34:	d003      	beq.n	401a3e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401a36:	68fb      	ldr	r3, [r7, #12]
  401a38:	68ba      	ldr	r2, [r7, #8]
  401a3a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401a3c:	e002      	b.n	401a44 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401a3e:	68fb      	ldr	r3, [r7, #12]
  401a40:	68ba      	ldr	r2, [r7, #8]
  401a42:	661a      	str	r2, [r3, #96]	; 0x60
}
  401a44:	bf00      	nop
  401a46:	3714      	adds	r7, #20
  401a48:	46bd      	mov	sp, r7
  401a4a:	bc80      	pop	{r7}
  401a4c:	4770      	bx	lr

00401a4e <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401a4e:	b480      	push	{r7}
  401a50:	b085      	sub	sp, #20
  401a52:	af00      	add	r7, sp, #0
  401a54:	60f8      	str	r0, [r7, #12]
  401a56:	60b9      	str	r1, [r7, #8]
  401a58:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401a5a:	68fb      	ldr	r3, [r7, #12]
  401a5c:	68ba      	ldr	r2, [r7, #8]
  401a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401a62:	687b      	ldr	r3, [r7, #4]
  401a64:	005b      	lsls	r3, r3, #1
  401a66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401a6a:	fbb2 f3f3 	udiv	r3, r2, r3
  401a6e:	3b01      	subs	r3, #1
  401a70:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401a74:	68fb      	ldr	r3, [r7, #12]
  401a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401a7a:	bf00      	nop
  401a7c:	3714      	adds	r7, #20
  401a7e:	46bd      	mov	sp, r7
  401a80:	bc80      	pop	{r7}
  401a82:	4770      	bx	lr

00401a84 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401a84:	b480      	push	{r7}
  401a86:	b087      	sub	sp, #28
  401a88:	af00      	add	r7, sp, #0
  401a8a:	60f8      	str	r0, [r7, #12]
  401a8c:	60b9      	str	r1, [r7, #8]
  401a8e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401a90:	68fb      	ldr	r3, [r7, #12]
  401a92:	687a      	ldr	r2, [r7, #4]
  401a94:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401a96:	68bb      	ldr	r3, [r7, #8]
  401a98:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401a9c:	d04a      	beq.n	401b34 <pio_set_peripheral+0xb0>
  401a9e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401aa2:	d808      	bhi.n	401ab6 <pio_set_peripheral+0x32>
  401aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401aa8:	d016      	beq.n	401ad8 <pio_set_peripheral+0x54>
  401aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401aae:	d02c      	beq.n	401b0a <pio_set_peripheral+0x86>
  401ab0:	2b00      	cmp	r3, #0
  401ab2:	d069      	beq.n	401b88 <pio_set_peripheral+0x104>
  401ab4:	e064      	b.n	401b80 <pio_set_peripheral+0xfc>
  401ab6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401aba:	d065      	beq.n	401b88 <pio_set_peripheral+0x104>
  401abc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401ac0:	d803      	bhi.n	401aca <pio_set_peripheral+0x46>
  401ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401ac6:	d04a      	beq.n	401b5e <pio_set_peripheral+0xda>
  401ac8:	e05a      	b.n	401b80 <pio_set_peripheral+0xfc>
  401aca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401ace:	d05b      	beq.n	401b88 <pio_set_peripheral+0x104>
  401ad0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ad4:	d058      	beq.n	401b88 <pio_set_peripheral+0x104>
  401ad6:	e053      	b.n	401b80 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ad8:	68fb      	ldr	r3, [r7, #12]
  401ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401adc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401ade:	68fb      	ldr	r3, [r7, #12]
  401ae0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401ae2:	687b      	ldr	r3, [r7, #4]
  401ae4:	43d9      	mvns	r1, r3
  401ae6:	697b      	ldr	r3, [r7, #20]
  401ae8:	400b      	ands	r3, r1
  401aea:	401a      	ands	r2, r3
  401aec:	68fb      	ldr	r3, [r7, #12]
  401aee:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401af0:	68fb      	ldr	r3, [r7, #12]
  401af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401af4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401af6:	68fb      	ldr	r3, [r7, #12]
  401af8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401afa:	687b      	ldr	r3, [r7, #4]
  401afc:	43d9      	mvns	r1, r3
  401afe:	697b      	ldr	r3, [r7, #20]
  401b00:	400b      	ands	r3, r1
  401b02:	401a      	ands	r2, r3
  401b04:	68fb      	ldr	r3, [r7, #12]
  401b06:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b08:	e03a      	b.n	401b80 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b0a:	68fb      	ldr	r3, [r7, #12]
  401b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b0e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401b10:	687a      	ldr	r2, [r7, #4]
  401b12:	697b      	ldr	r3, [r7, #20]
  401b14:	431a      	orrs	r2, r3
  401b16:	68fb      	ldr	r3, [r7, #12]
  401b18:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b1a:	68fb      	ldr	r3, [r7, #12]
  401b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b1e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401b20:	68fb      	ldr	r3, [r7, #12]
  401b22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b24:	687b      	ldr	r3, [r7, #4]
  401b26:	43d9      	mvns	r1, r3
  401b28:	697b      	ldr	r3, [r7, #20]
  401b2a:	400b      	ands	r3, r1
  401b2c:	401a      	ands	r2, r3
  401b2e:	68fb      	ldr	r3, [r7, #12]
  401b30:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b32:	e025      	b.n	401b80 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b34:	68fb      	ldr	r3, [r7, #12]
  401b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b38:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401b3a:	68fb      	ldr	r3, [r7, #12]
  401b3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b3e:	687b      	ldr	r3, [r7, #4]
  401b40:	43d9      	mvns	r1, r3
  401b42:	697b      	ldr	r3, [r7, #20]
  401b44:	400b      	ands	r3, r1
  401b46:	401a      	ands	r2, r3
  401b48:	68fb      	ldr	r3, [r7, #12]
  401b4a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b4c:	68fb      	ldr	r3, [r7, #12]
  401b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b50:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401b52:	687a      	ldr	r2, [r7, #4]
  401b54:	697b      	ldr	r3, [r7, #20]
  401b56:	431a      	orrs	r2, r3
  401b58:	68fb      	ldr	r3, [r7, #12]
  401b5a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b5c:	e010      	b.n	401b80 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b5e:	68fb      	ldr	r3, [r7, #12]
  401b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b62:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401b64:	687a      	ldr	r2, [r7, #4]
  401b66:	697b      	ldr	r3, [r7, #20]
  401b68:	431a      	orrs	r2, r3
  401b6a:	68fb      	ldr	r3, [r7, #12]
  401b6c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b6e:	68fb      	ldr	r3, [r7, #12]
  401b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b72:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401b74:	687a      	ldr	r2, [r7, #4]
  401b76:	697b      	ldr	r3, [r7, #20]
  401b78:	431a      	orrs	r2, r3
  401b7a:	68fb      	ldr	r3, [r7, #12]
  401b7c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b7e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401b80:	68fb      	ldr	r3, [r7, #12]
  401b82:	687a      	ldr	r2, [r7, #4]
  401b84:	605a      	str	r2, [r3, #4]
  401b86:	e000      	b.n	401b8a <pio_set_peripheral+0x106>
		return;
  401b88:	bf00      	nop
}
  401b8a:	371c      	adds	r7, #28
  401b8c:	46bd      	mov	sp, r7
  401b8e:	bc80      	pop	{r7}
  401b90:	4770      	bx	lr
	...

00401b94 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401b94:	b580      	push	{r7, lr}
  401b96:	b084      	sub	sp, #16
  401b98:	af00      	add	r7, sp, #0
  401b9a:	60f8      	str	r0, [r7, #12]
  401b9c:	60b9      	str	r1, [r7, #8]
  401b9e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401ba0:	68b9      	ldr	r1, [r7, #8]
  401ba2:	68f8      	ldr	r0, [r7, #12]
  401ba4:	4b19      	ldr	r3, [pc, #100]	; (401c0c <pio_set_input+0x78>)
  401ba6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401ba8:	687b      	ldr	r3, [r7, #4]
  401baa:	f003 0301 	and.w	r3, r3, #1
  401bae:	461a      	mov	r2, r3
  401bb0:	68b9      	ldr	r1, [r7, #8]
  401bb2:	68f8      	ldr	r0, [r7, #12]
  401bb4:	4b16      	ldr	r3, [pc, #88]	; (401c10 <pio_set_input+0x7c>)
  401bb6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	f003 030a 	and.w	r3, r3, #10
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	d003      	beq.n	401bca <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401bc2:	68fb      	ldr	r3, [r7, #12]
  401bc4:	68ba      	ldr	r2, [r7, #8]
  401bc6:	621a      	str	r2, [r3, #32]
  401bc8:	e002      	b.n	401bd0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401bca:	68fb      	ldr	r3, [r7, #12]
  401bcc:	68ba      	ldr	r2, [r7, #8]
  401bce:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	f003 0302 	and.w	r3, r3, #2
  401bd6:	2b00      	cmp	r3, #0
  401bd8:	d004      	beq.n	401be4 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401bda:	68fb      	ldr	r3, [r7, #12]
  401bdc:	68ba      	ldr	r2, [r7, #8]
  401bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401be2:	e008      	b.n	401bf6 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401be4:	687b      	ldr	r3, [r7, #4]
  401be6:	f003 0308 	and.w	r3, r3, #8
  401bea:	2b00      	cmp	r3, #0
  401bec:	d003      	beq.n	401bf6 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401bee:	68fb      	ldr	r3, [r7, #12]
  401bf0:	68ba      	ldr	r2, [r7, #8]
  401bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401bf6:	68fb      	ldr	r3, [r7, #12]
  401bf8:	68ba      	ldr	r2, [r7, #8]
  401bfa:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401bfc:	68fb      	ldr	r3, [r7, #12]
  401bfe:	68ba      	ldr	r2, [r7, #8]
  401c00:	601a      	str	r2, [r3, #0]
}
  401c02:	bf00      	nop
  401c04:	3710      	adds	r7, #16
  401c06:	46bd      	mov	sp, r7
  401c08:	bd80      	pop	{r7, pc}
  401c0a:	bf00      	nop
  401c0c:	00401cfd 	.word	0x00401cfd
  401c10:	00401a25 	.word	0x00401a25

00401c14 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401c14:	b580      	push	{r7, lr}
  401c16:	b084      	sub	sp, #16
  401c18:	af00      	add	r7, sp, #0
  401c1a:	60f8      	str	r0, [r7, #12]
  401c1c:	60b9      	str	r1, [r7, #8]
  401c1e:	607a      	str	r2, [r7, #4]
  401c20:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401c22:	68b9      	ldr	r1, [r7, #8]
  401c24:	68f8      	ldr	r0, [r7, #12]
  401c26:	4b12      	ldr	r3, [pc, #72]	; (401c70 <pio_set_output+0x5c>)
  401c28:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401c2a:	69ba      	ldr	r2, [r7, #24]
  401c2c:	68b9      	ldr	r1, [r7, #8]
  401c2e:	68f8      	ldr	r0, [r7, #12]
  401c30:	4b10      	ldr	r3, [pc, #64]	; (401c74 <pio_set_output+0x60>)
  401c32:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401c34:	683b      	ldr	r3, [r7, #0]
  401c36:	2b00      	cmp	r3, #0
  401c38:	d003      	beq.n	401c42 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401c3a:	68fb      	ldr	r3, [r7, #12]
  401c3c:	68ba      	ldr	r2, [r7, #8]
  401c3e:	651a      	str	r2, [r3, #80]	; 0x50
  401c40:	e002      	b.n	401c48 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401c42:	68fb      	ldr	r3, [r7, #12]
  401c44:	68ba      	ldr	r2, [r7, #8]
  401c46:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401c48:	687b      	ldr	r3, [r7, #4]
  401c4a:	2b00      	cmp	r3, #0
  401c4c:	d003      	beq.n	401c56 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401c4e:	68fb      	ldr	r3, [r7, #12]
  401c50:	68ba      	ldr	r2, [r7, #8]
  401c52:	631a      	str	r2, [r3, #48]	; 0x30
  401c54:	e002      	b.n	401c5c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401c56:	68fb      	ldr	r3, [r7, #12]
  401c58:	68ba      	ldr	r2, [r7, #8]
  401c5a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401c5c:	68fb      	ldr	r3, [r7, #12]
  401c5e:	68ba      	ldr	r2, [r7, #8]
  401c60:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401c62:	68fb      	ldr	r3, [r7, #12]
  401c64:	68ba      	ldr	r2, [r7, #8]
  401c66:	601a      	str	r2, [r3, #0]
}
  401c68:	bf00      	nop
  401c6a:	3710      	adds	r7, #16
  401c6c:	46bd      	mov	sp, r7
  401c6e:	bd80      	pop	{r7, pc}
  401c70:	00401cfd 	.word	0x00401cfd
  401c74:	00401a25 	.word	0x00401a25

00401c78 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401c78:	b480      	push	{r7}
  401c7a:	b085      	sub	sp, #20
  401c7c:	af00      	add	r7, sp, #0
  401c7e:	60f8      	str	r0, [r7, #12]
  401c80:	60b9      	str	r1, [r7, #8]
  401c82:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401c84:	687b      	ldr	r3, [r7, #4]
  401c86:	f003 0310 	and.w	r3, r3, #16
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	d020      	beq.n	401cd0 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401c8e:	68fb      	ldr	r3, [r7, #12]
  401c90:	68ba      	ldr	r2, [r7, #8]
  401c92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401c96:	687b      	ldr	r3, [r7, #4]
  401c98:	f003 0320 	and.w	r3, r3, #32
  401c9c:	2b00      	cmp	r3, #0
  401c9e:	d004      	beq.n	401caa <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401ca0:	68fb      	ldr	r3, [r7, #12]
  401ca2:	68ba      	ldr	r2, [r7, #8]
  401ca4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401ca8:	e003      	b.n	401cb2 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401caa:	68fb      	ldr	r3, [r7, #12]
  401cac:	68ba      	ldr	r2, [r7, #8]
  401cae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401cb2:	687b      	ldr	r3, [r7, #4]
  401cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d004      	beq.n	401cc6 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401cbc:	68fb      	ldr	r3, [r7, #12]
  401cbe:	68ba      	ldr	r2, [r7, #8]
  401cc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401cc4:	e008      	b.n	401cd8 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401cc6:	68fb      	ldr	r3, [r7, #12]
  401cc8:	68ba      	ldr	r2, [r7, #8]
  401cca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401cce:	e003      	b.n	401cd8 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401cd0:	68fb      	ldr	r3, [r7, #12]
  401cd2:	68ba      	ldr	r2, [r7, #8]
  401cd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401cd8:	bf00      	nop
  401cda:	3714      	adds	r7, #20
  401cdc:	46bd      	mov	sp, r7
  401cde:	bc80      	pop	{r7}
  401ce0:	4770      	bx	lr

00401ce2 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401ce2:	b480      	push	{r7}
  401ce4:	b083      	sub	sp, #12
  401ce6:	af00      	add	r7, sp, #0
  401ce8:	6078      	str	r0, [r7, #4]
  401cea:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401cec:	687b      	ldr	r3, [r7, #4]
  401cee:	683a      	ldr	r2, [r7, #0]
  401cf0:	641a      	str	r2, [r3, #64]	; 0x40
}
  401cf2:	bf00      	nop
  401cf4:	370c      	adds	r7, #12
  401cf6:	46bd      	mov	sp, r7
  401cf8:	bc80      	pop	{r7}
  401cfa:	4770      	bx	lr

00401cfc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401cfc:	b480      	push	{r7}
  401cfe:	b083      	sub	sp, #12
  401d00:	af00      	add	r7, sp, #0
  401d02:	6078      	str	r0, [r7, #4]
  401d04:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401d06:	687b      	ldr	r3, [r7, #4]
  401d08:	683a      	ldr	r2, [r7, #0]
  401d0a:	645a      	str	r2, [r3, #68]	; 0x44
}
  401d0c:	bf00      	nop
  401d0e:	370c      	adds	r7, #12
  401d10:	46bd      	mov	sp, r7
  401d12:	bc80      	pop	{r7}
  401d14:	4770      	bx	lr

00401d16 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401d16:	b480      	push	{r7}
  401d18:	b083      	sub	sp, #12
  401d1a:	af00      	add	r7, sp, #0
  401d1c:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401d1e:	687b      	ldr	r3, [r7, #4]
  401d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401d22:	4618      	mov	r0, r3
  401d24:	370c      	adds	r7, #12
  401d26:	46bd      	mov	sp, r7
  401d28:	bc80      	pop	{r7}
  401d2a:	4770      	bx	lr

00401d2c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401d2c:	b480      	push	{r7}
  401d2e:	b083      	sub	sp, #12
  401d30:	af00      	add	r7, sp, #0
  401d32:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401d34:	687b      	ldr	r3, [r7, #4]
  401d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401d38:	4618      	mov	r0, r3
  401d3a:	370c      	adds	r7, #12
  401d3c:	46bd      	mov	sp, r7
  401d3e:	bc80      	pop	{r7}
  401d40:	4770      	bx	lr
	...

00401d44 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401d44:	b590      	push	{r4, r7, lr}
  401d46:	b087      	sub	sp, #28
  401d48:	af02      	add	r7, sp, #8
  401d4a:	6078      	str	r0, [r7, #4]
  401d4c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401d4e:	6878      	ldr	r0, [r7, #4]
  401d50:	4b63      	ldr	r3, [pc, #396]	; (401ee0 <pio_configure_pin+0x19c>)
  401d52:	4798      	blx	r3
  401d54:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d56:	683b      	ldr	r3, [r7, #0]
  401d58:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d60:	d067      	beq.n	401e32 <pio_configure_pin+0xee>
  401d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d66:	d809      	bhi.n	401d7c <pio_configure_pin+0x38>
  401d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d6c:	d02b      	beq.n	401dc6 <pio_configure_pin+0x82>
  401d6e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d72:	d043      	beq.n	401dfc <pio_configure_pin+0xb8>
  401d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d78:	d00a      	beq.n	401d90 <pio_configure_pin+0x4c>
  401d7a:	e0a9      	b.n	401ed0 <pio_configure_pin+0x18c>
  401d7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d80:	d07e      	beq.n	401e80 <pio_configure_pin+0x13c>
  401d82:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d86:	d07b      	beq.n	401e80 <pio_configure_pin+0x13c>
  401d88:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d8c:	d06c      	beq.n	401e68 <pio_configure_pin+0x124>
  401d8e:	e09f      	b.n	401ed0 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401d90:	687b      	ldr	r3, [r7, #4]
  401d92:	f003 031f 	and.w	r3, r3, #31
  401d96:	2201      	movs	r2, #1
  401d98:	fa02 f303 	lsl.w	r3, r2, r3
  401d9c:	461a      	mov	r2, r3
  401d9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401da2:	68f8      	ldr	r0, [r7, #12]
  401da4:	4b4f      	ldr	r3, [pc, #316]	; (401ee4 <pio_configure_pin+0x1a0>)
  401da6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401da8:	687b      	ldr	r3, [r7, #4]
  401daa:	f003 031f 	and.w	r3, r3, #31
  401dae:	2201      	movs	r2, #1
  401db0:	fa02 f303 	lsl.w	r3, r2, r3
  401db4:	4619      	mov	r1, r3
  401db6:	683b      	ldr	r3, [r7, #0]
  401db8:	f003 0301 	and.w	r3, r3, #1
  401dbc:	461a      	mov	r2, r3
  401dbe:	68f8      	ldr	r0, [r7, #12]
  401dc0:	4b49      	ldr	r3, [pc, #292]	; (401ee8 <pio_configure_pin+0x1a4>)
  401dc2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401dc4:	e086      	b.n	401ed4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401dc6:	687b      	ldr	r3, [r7, #4]
  401dc8:	f003 031f 	and.w	r3, r3, #31
  401dcc:	2201      	movs	r2, #1
  401dce:	fa02 f303 	lsl.w	r3, r2, r3
  401dd2:	461a      	mov	r2, r3
  401dd4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401dd8:	68f8      	ldr	r0, [r7, #12]
  401dda:	4b42      	ldr	r3, [pc, #264]	; (401ee4 <pio_configure_pin+0x1a0>)
  401ddc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401dde:	687b      	ldr	r3, [r7, #4]
  401de0:	f003 031f 	and.w	r3, r3, #31
  401de4:	2201      	movs	r2, #1
  401de6:	fa02 f303 	lsl.w	r3, r2, r3
  401dea:	4619      	mov	r1, r3
  401dec:	683b      	ldr	r3, [r7, #0]
  401dee:	f003 0301 	and.w	r3, r3, #1
  401df2:	461a      	mov	r2, r3
  401df4:	68f8      	ldr	r0, [r7, #12]
  401df6:	4b3c      	ldr	r3, [pc, #240]	; (401ee8 <pio_configure_pin+0x1a4>)
  401df8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401dfa:	e06b      	b.n	401ed4 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401dfc:	687b      	ldr	r3, [r7, #4]
  401dfe:	f003 031f 	and.w	r3, r3, #31
  401e02:	2201      	movs	r2, #1
  401e04:	fa02 f303 	lsl.w	r3, r2, r3
  401e08:	461a      	mov	r2, r3
  401e0a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401e0e:	68f8      	ldr	r0, [r7, #12]
  401e10:	4b34      	ldr	r3, [pc, #208]	; (401ee4 <pio_configure_pin+0x1a0>)
  401e12:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401e14:	687b      	ldr	r3, [r7, #4]
  401e16:	f003 031f 	and.w	r3, r3, #31
  401e1a:	2201      	movs	r2, #1
  401e1c:	fa02 f303 	lsl.w	r3, r2, r3
  401e20:	4619      	mov	r1, r3
  401e22:	683b      	ldr	r3, [r7, #0]
  401e24:	f003 0301 	and.w	r3, r3, #1
  401e28:	461a      	mov	r2, r3
  401e2a:	68f8      	ldr	r0, [r7, #12]
  401e2c:	4b2e      	ldr	r3, [pc, #184]	; (401ee8 <pio_configure_pin+0x1a4>)
  401e2e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401e30:	e050      	b.n	401ed4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401e32:	687b      	ldr	r3, [r7, #4]
  401e34:	f003 031f 	and.w	r3, r3, #31
  401e38:	2201      	movs	r2, #1
  401e3a:	fa02 f303 	lsl.w	r3, r2, r3
  401e3e:	461a      	mov	r2, r3
  401e40:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401e44:	68f8      	ldr	r0, [r7, #12]
  401e46:	4b27      	ldr	r3, [pc, #156]	; (401ee4 <pio_configure_pin+0x1a0>)
  401e48:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401e4a:	687b      	ldr	r3, [r7, #4]
  401e4c:	f003 031f 	and.w	r3, r3, #31
  401e50:	2201      	movs	r2, #1
  401e52:	fa02 f303 	lsl.w	r3, r2, r3
  401e56:	4619      	mov	r1, r3
  401e58:	683b      	ldr	r3, [r7, #0]
  401e5a:	f003 0301 	and.w	r3, r3, #1
  401e5e:	461a      	mov	r2, r3
  401e60:	68f8      	ldr	r0, [r7, #12]
  401e62:	4b21      	ldr	r3, [pc, #132]	; (401ee8 <pio_configure_pin+0x1a4>)
  401e64:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401e66:	e035      	b.n	401ed4 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401e68:	687b      	ldr	r3, [r7, #4]
  401e6a:	f003 031f 	and.w	r3, r3, #31
  401e6e:	2201      	movs	r2, #1
  401e70:	fa02 f303 	lsl.w	r3, r2, r3
  401e74:	683a      	ldr	r2, [r7, #0]
  401e76:	4619      	mov	r1, r3
  401e78:	68f8      	ldr	r0, [r7, #12]
  401e7a:	4b1c      	ldr	r3, [pc, #112]	; (401eec <pio_configure_pin+0x1a8>)
  401e7c:	4798      	blx	r3
		break;
  401e7e:	e029      	b.n	401ed4 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e80:	687b      	ldr	r3, [r7, #4]
  401e82:	f003 031f 	and.w	r3, r3, #31
  401e86:	2201      	movs	r2, #1
  401e88:	fa02 f303 	lsl.w	r3, r2, r3
  401e8c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401e8e:	683b      	ldr	r3, [r7, #0]
  401e90:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e94:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e98:	bf0c      	ite	eq
  401e9a:	2301      	moveq	r3, #1
  401e9c:	2300      	movne	r3, #0
  401e9e:	b2db      	uxtb	r3, r3
  401ea0:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401ea2:	683b      	ldr	r3, [r7, #0]
  401ea4:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401ea8:	2b00      	cmp	r3, #0
  401eaa:	bf14      	ite	ne
  401eac:	2301      	movne	r3, #1
  401eae:	2300      	moveq	r3, #0
  401eb0:	b2db      	uxtb	r3, r3
  401eb2:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401eb4:	683b      	ldr	r3, [r7, #0]
  401eb6:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401eba:	2b00      	cmp	r3, #0
  401ebc:	bf14      	ite	ne
  401ebe:	2301      	movne	r3, #1
  401ec0:	2300      	moveq	r3, #0
  401ec2:	b2db      	uxtb	r3, r3
  401ec4:	9300      	str	r3, [sp, #0]
  401ec6:	4603      	mov	r3, r0
  401ec8:	68f8      	ldr	r0, [r7, #12]
  401eca:	4c09      	ldr	r4, [pc, #36]	; (401ef0 <pio_configure_pin+0x1ac>)
  401ecc:	47a0      	blx	r4
		break;
  401ece:	e001      	b.n	401ed4 <pio_configure_pin+0x190>

	default:
		return 0;
  401ed0:	2300      	movs	r3, #0
  401ed2:	e000      	b.n	401ed6 <pio_configure_pin+0x192>
	}

	return 1;
  401ed4:	2301      	movs	r3, #1
}
  401ed6:	4618      	mov	r0, r3
  401ed8:	3714      	adds	r7, #20
  401eda:	46bd      	mov	sp, r7
  401edc:	bd90      	pop	{r4, r7, pc}
  401ede:	bf00      	nop
  401ee0:	00401ef5 	.word	0x00401ef5
  401ee4:	00401a85 	.word	0x00401a85
  401ee8:	00401a25 	.word	0x00401a25
  401eec:	00401b95 	.word	0x00401b95
  401ef0:	00401c15 	.word	0x00401c15

00401ef4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401ef4:	b480      	push	{r7}
  401ef6:	b085      	sub	sp, #20
  401ef8:	af00      	add	r7, sp, #0
  401efa:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401efc:	687b      	ldr	r3, [r7, #4]
  401efe:	095b      	lsrs	r3, r3, #5
  401f00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401f04:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401f08:	025b      	lsls	r3, r3, #9
  401f0a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401f0c:	68fb      	ldr	r3, [r7, #12]
}
  401f0e:	4618      	mov	r0, r3
  401f10:	3714      	adds	r7, #20
  401f12:	46bd      	mov	sp, r7
  401f14:	bc80      	pop	{r7}
  401f16:	4770      	bx	lr

00401f18 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401f18:	b480      	push	{r7}
  401f1a:	b085      	sub	sp, #20
  401f1c:	af00      	add	r7, sp, #0
  401f1e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401f20:	491c      	ldr	r1, [pc, #112]	; (401f94 <pmc_switch_mck_to_pllack+0x7c>)
  401f22:	4b1c      	ldr	r3, [pc, #112]	; (401f94 <pmc_switch_mck_to_pllack+0x7c>)
  401f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401f2a:	687b      	ldr	r3, [r7, #4]
  401f2c:	4313      	orrs	r3, r2
  401f2e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f34:	60fb      	str	r3, [r7, #12]
  401f36:	e007      	b.n	401f48 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401f38:	68fb      	ldr	r3, [r7, #12]
  401f3a:	2b00      	cmp	r3, #0
  401f3c:	d101      	bne.n	401f42 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401f3e:	2301      	movs	r3, #1
  401f40:	e023      	b.n	401f8a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	3b01      	subs	r3, #1
  401f46:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f48:	4b12      	ldr	r3, [pc, #72]	; (401f94 <pmc_switch_mck_to_pllack+0x7c>)
  401f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f4c:	f003 0308 	and.w	r3, r3, #8
  401f50:	2b00      	cmp	r3, #0
  401f52:	d0f1      	beq.n	401f38 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401f54:	4a0f      	ldr	r2, [pc, #60]	; (401f94 <pmc_switch_mck_to_pllack+0x7c>)
  401f56:	4b0f      	ldr	r3, [pc, #60]	; (401f94 <pmc_switch_mck_to_pllack+0x7c>)
  401f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f5a:	f023 0303 	bic.w	r3, r3, #3
  401f5e:	f043 0302 	orr.w	r3, r3, #2
  401f62:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f68:	60fb      	str	r3, [r7, #12]
  401f6a:	e007      	b.n	401f7c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401f6c:	68fb      	ldr	r3, [r7, #12]
  401f6e:	2b00      	cmp	r3, #0
  401f70:	d101      	bne.n	401f76 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401f72:	2301      	movs	r3, #1
  401f74:	e009      	b.n	401f8a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401f76:	68fb      	ldr	r3, [r7, #12]
  401f78:	3b01      	subs	r3, #1
  401f7a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f7c:	4b05      	ldr	r3, [pc, #20]	; (401f94 <pmc_switch_mck_to_pllack+0x7c>)
  401f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f80:	f003 0308 	and.w	r3, r3, #8
  401f84:	2b00      	cmp	r3, #0
  401f86:	d0f1      	beq.n	401f6c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401f88:	2300      	movs	r3, #0
}
  401f8a:	4618      	mov	r0, r3
  401f8c:	3714      	adds	r7, #20
  401f8e:	46bd      	mov	sp, r7
  401f90:	bc80      	pop	{r7}
  401f92:	4770      	bx	lr
  401f94:	400e0400 	.word	0x400e0400

00401f98 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401f98:	b480      	push	{r7}
  401f9a:	b083      	sub	sp, #12
  401f9c:	af00      	add	r7, sp, #0
  401f9e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401fa0:	687b      	ldr	r3, [r7, #4]
  401fa2:	2b01      	cmp	r3, #1
  401fa4:	d107      	bne.n	401fb6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401fa6:	4a08      	ldr	r2, [pc, #32]	; (401fc8 <pmc_switch_sclk_to_32kxtal+0x30>)
  401fa8:	4b07      	ldr	r3, [pc, #28]	; (401fc8 <pmc_switch_sclk_to_32kxtal+0x30>)
  401faa:	689b      	ldr	r3, [r3, #8]
  401fac:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401fb4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401fb6:	4b04      	ldr	r3, [pc, #16]	; (401fc8 <pmc_switch_sclk_to_32kxtal+0x30>)
  401fb8:	4a04      	ldr	r2, [pc, #16]	; (401fcc <pmc_switch_sclk_to_32kxtal+0x34>)
  401fba:	601a      	str	r2, [r3, #0]
}
  401fbc:	bf00      	nop
  401fbe:	370c      	adds	r7, #12
  401fc0:	46bd      	mov	sp, r7
  401fc2:	bc80      	pop	{r7}
  401fc4:	4770      	bx	lr
  401fc6:	bf00      	nop
  401fc8:	400e1410 	.word	0x400e1410
  401fcc:	a5000008 	.word	0xa5000008

00401fd0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401fd0:	b480      	push	{r7}
  401fd2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401fd4:	4b09      	ldr	r3, [pc, #36]	; (401ffc <pmc_osc_is_ready_32kxtal+0x2c>)
  401fd6:	695b      	ldr	r3, [r3, #20]
  401fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401fdc:	2b00      	cmp	r3, #0
  401fde:	d007      	beq.n	401ff0 <pmc_osc_is_ready_32kxtal+0x20>
  401fe0:	4b07      	ldr	r3, [pc, #28]	; (402000 <pmc_osc_is_ready_32kxtal+0x30>)
  401fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401fe8:	2b00      	cmp	r3, #0
  401fea:	d001      	beq.n	401ff0 <pmc_osc_is_ready_32kxtal+0x20>
  401fec:	2301      	movs	r3, #1
  401fee:	e000      	b.n	401ff2 <pmc_osc_is_ready_32kxtal+0x22>
  401ff0:	2300      	movs	r3, #0
}
  401ff2:	4618      	mov	r0, r3
  401ff4:	46bd      	mov	sp, r7
  401ff6:	bc80      	pop	{r7}
  401ff8:	4770      	bx	lr
  401ffa:	bf00      	nop
  401ffc:	400e1410 	.word	0x400e1410
  402000:	400e0400 	.word	0x400e0400

00402004 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402004:	b480      	push	{r7}
  402006:	b083      	sub	sp, #12
  402008:	af00      	add	r7, sp, #0
  40200a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40200c:	4a18      	ldr	r2, [pc, #96]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  40200e:	4b18      	ldr	r3, [pc, #96]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  402010:	6a1b      	ldr	r3, [r3, #32]
  402012:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402016:	f043 0308 	orr.w	r3, r3, #8
  40201a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40201c:	bf00      	nop
  40201e:	4b14      	ldr	r3, [pc, #80]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  402020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402026:	2b00      	cmp	r3, #0
  402028:	d0f9      	beq.n	40201e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40202a:	4911      	ldr	r1, [pc, #68]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  40202c:	4b10      	ldr	r3, [pc, #64]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  40202e:	6a1b      	ldr	r3, [r3, #32]
  402030:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402038:	687a      	ldr	r2, [r7, #4]
  40203a:	4313      	orrs	r3, r2
  40203c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402040:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402042:	bf00      	nop
  402044:	4b0a      	ldr	r3, [pc, #40]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  402046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40204c:	2b00      	cmp	r3, #0
  40204e:	d0f9      	beq.n	402044 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402050:	4a07      	ldr	r2, [pc, #28]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  402052:	4b07      	ldr	r3, [pc, #28]	; (402070 <pmc_switch_mainck_to_fastrc+0x6c>)
  402054:	6a1b      	ldr	r3, [r3, #32]
  402056:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40205e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402062:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402064:	bf00      	nop
  402066:	370c      	adds	r7, #12
  402068:	46bd      	mov	sp, r7
  40206a:	bc80      	pop	{r7}
  40206c:	4770      	bx	lr
  40206e:	bf00      	nop
  402070:	400e0400 	.word	0x400e0400

00402074 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402074:	b480      	push	{r7}
  402076:	b083      	sub	sp, #12
  402078:	af00      	add	r7, sp, #0
  40207a:	6078      	str	r0, [r7, #4]
  40207c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40207e:	687b      	ldr	r3, [r7, #4]
  402080:	2b00      	cmp	r3, #0
  402082:	d008      	beq.n	402096 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402084:	4916      	ldr	r1, [pc, #88]	; (4020e0 <pmc_switch_mainck_to_xtal+0x6c>)
  402086:	4b16      	ldr	r3, [pc, #88]	; (4020e0 <pmc_switch_mainck_to_xtal+0x6c>)
  402088:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40208a:	4a16      	ldr	r2, [pc, #88]	; (4020e4 <pmc_switch_mainck_to_xtal+0x70>)
  40208c:	401a      	ands	r2, r3
  40208e:	4b16      	ldr	r3, [pc, #88]	; (4020e8 <pmc_switch_mainck_to_xtal+0x74>)
  402090:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402092:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402094:	e01e      	b.n	4020d4 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402096:	4912      	ldr	r1, [pc, #72]	; (4020e0 <pmc_switch_mainck_to_xtal+0x6c>)
  402098:	4b11      	ldr	r3, [pc, #68]	; (4020e0 <pmc_switch_mainck_to_xtal+0x6c>)
  40209a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40209c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4020a0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4020a4:	683a      	ldr	r2, [r7, #0]
  4020a6:	0212      	lsls	r2, r2, #8
  4020a8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4020aa:	4313      	orrs	r3, r2
  4020ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4020b0:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020b4:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4020b6:	bf00      	nop
  4020b8:	4b09      	ldr	r3, [pc, #36]	; (4020e0 <pmc_switch_mainck_to_xtal+0x6c>)
  4020ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4020bc:	f003 0301 	and.w	r3, r3, #1
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	d0f9      	beq.n	4020b8 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4020c4:	4a06      	ldr	r2, [pc, #24]	; (4020e0 <pmc_switch_mainck_to_xtal+0x6c>)
  4020c6:	4b06      	ldr	r3, [pc, #24]	; (4020e0 <pmc_switch_mainck_to_xtal+0x6c>)
  4020c8:	6a1b      	ldr	r3, [r3, #32]
  4020ca:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4020d2:	6213      	str	r3, [r2, #32]
}
  4020d4:	bf00      	nop
  4020d6:	370c      	adds	r7, #12
  4020d8:	46bd      	mov	sp, r7
  4020da:	bc80      	pop	{r7}
  4020dc:	4770      	bx	lr
  4020de:	bf00      	nop
  4020e0:	400e0400 	.word	0x400e0400
  4020e4:	fec8fffc 	.word	0xfec8fffc
  4020e8:	01370002 	.word	0x01370002

004020ec <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4020ec:	b480      	push	{r7}
  4020ee:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4020f0:	4b03      	ldr	r3, [pc, #12]	; (402100 <pmc_osc_is_ready_mainck+0x14>)
  4020f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4020f8:	4618      	mov	r0, r3
  4020fa:	46bd      	mov	sp, r7
  4020fc:	bc80      	pop	{r7}
  4020fe:	4770      	bx	lr
  402100:	400e0400 	.word	0x400e0400

00402104 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402104:	b480      	push	{r7}
  402106:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402108:	4b03      	ldr	r3, [pc, #12]	; (402118 <pmc_disable_pllack+0x14>)
  40210a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40210e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402110:	bf00      	nop
  402112:	46bd      	mov	sp, r7
  402114:	bc80      	pop	{r7}
  402116:	4770      	bx	lr
  402118:	400e0400 	.word	0x400e0400

0040211c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40211c:	b480      	push	{r7}
  40211e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402120:	4b03      	ldr	r3, [pc, #12]	; (402130 <pmc_is_locked_pllack+0x14>)
  402122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402124:	f003 0302 	and.w	r3, r3, #2
}
  402128:	4618      	mov	r0, r3
  40212a:	46bd      	mov	sp, r7
  40212c:	bc80      	pop	{r7}
  40212e:	4770      	bx	lr
  402130:	400e0400 	.word	0x400e0400

00402134 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  402134:	b480      	push	{r7}
  402136:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402138:	4b03      	ldr	r3, [pc, #12]	; (402148 <pmc_disable_pllbck+0x14>)
  40213a:	2200      	movs	r2, #0
  40213c:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40213e:	bf00      	nop
  402140:	46bd      	mov	sp, r7
  402142:	bc80      	pop	{r7}
  402144:	4770      	bx	lr
  402146:	bf00      	nop
  402148:	400e0400 	.word	0x400e0400

0040214c <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40214c:	b480      	push	{r7}
  40214e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402150:	4b03      	ldr	r3, [pc, #12]	; (402160 <pmc_is_locked_pllbck+0x14>)
  402152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402154:	f003 0304 	and.w	r3, r3, #4
}
  402158:	4618      	mov	r0, r3
  40215a:	46bd      	mov	sp, r7
  40215c:	bc80      	pop	{r7}
  40215e:	4770      	bx	lr
  402160:	400e0400 	.word	0x400e0400

00402164 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402164:	b480      	push	{r7}
  402166:	b083      	sub	sp, #12
  402168:	af00      	add	r7, sp, #0
  40216a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40216c:	687b      	ldr	r3, [r7, #4]
  40216e:	2b22      	cmp	r3, #34	; 0x22
  402170:	d901      	bls.n	402176 <pmc_enable_periph_clk+0x12>
		return 1;
  402172:	2301      	movs	r3, #1
  402174:	e02f      	b.n	4021d6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  402176:	687b      	ldr	r3, [r7, #4]
  402178:	2b1f      	cmp	r3, #31
  40217a:	d813      	bhi.n	4021a4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40217c:	4b18      	ldr	r3, [pc, #96]	; (4021e0 <pmc_enable_periph_clk+0x7c>)
  40217e:	699a      	ldr	r2, [r3, #24]
  402180:	2101      	movs	r1, #1
  402182:	687b      	ldr	r3, [r7, #4]
  402184:	fa01 f303 	lsl.w	r3, r1, r3
  402188:	401a      	ands	r2, r3
  40218a:	2101      	movs	r1, #1
  40218c:	687b      	ldr	r3, [r7, #4]
  40218e:	fa01 f303 	lsl.w	r3, r1, r3
  402192:	429a      	cmp	r2, r3
  402194:	d01e      	beq.n	4021d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402196:	4a12      	ldr	r2, [pc, #72]	; (4021e0 <pmc_enable_periph_clk+0x7c>)
  402198:	2101      	movs	r1, #1
  40219a:	687b      	ldr	r3, [r7, #4]
  40219c:	fa01 f303 	lsl.w	r3, r1, r3
  4021a0:	6113      	str	r3, [r2, #16]
  4021a2:	e017      	b.n	4021d4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4021a4:	687b      	ldr	r3, [r7, #4]
  4021a6:	3b20      	subs	r3, #32
  4021a8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4021aa:	4b0d      	ldr	r3, [pc, #52]	; (4021e0 <pmc_enable_periph_clk+0x7c>)
  4021ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4021b0:	2101      	movs	r1, #1
  4021b2:	687b      	ldr	r3, [r7, #4]
  4021b4:	fa01 f303 	lsl.w	r3, r1, r3
  4021b8:	401a      	ands	r2, r3
  4021ba:	2101      	movs	r1, #1
  4021bc:	687b      	ldr	r3, [r7, #4]
  4021be:	fa01 f303 	lsl.w	r3, r1, r3
  4021c2:	429a      	cmp	r2, r3
  4021c4:	d006      	beq.n	4021d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4021c6:	4a06      	ldr	r2, [pc, #24]	; (4021e0 <pmc_enable_periph_clk+0x7c>)
  4021c8:	2101      	movs	r1, #1
  4021ca:	687b      	ldr	r3, [r7, #4]
  4021cc:	fa01 f303 	lsl.w	r3, r1, r3
  4021d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4021d4:	2300      	movs	r3, #0
}
  4021d6:	4618      	mov	r0, r3
  4021d8:	370c      	adds	r7, #12
  4021da:	46bd      	mov	sp, r7
  4021dc:	bc80      	pop	{r7}
  4021de:	4770      	bx	lr
  4021e0:	400e0400 	.word	0x400e0400

004021e4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4021e4:	b480      	push	{r7}
  4021e6:	b087      	sub	sp, #28
  4021e8:	af00      	add	r7, sp, #0
  4021ea:	60f8      	str	r0, [r7, #12]
  4021ec:	60b9      	str	r1, [r7, #8]
  4021ee:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4021f0:	68fa      	ldr	r2, [r7, #12]
  4021f2:	68bb      	ldr	r3, [r7, #8]
  4021f4:	019b      	lsls	r3, r3, #6
  4021f6:	4413      	add	r3, r2
  4021f8:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4021fa:	697b      	ldr	r3, [r7, #20]
  4021fc:	2202      	movs	r2, #2
  4021fe:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  402200:	697b      	ldr	r3, [r7, #20]
  402202:	f04f 32ff 	mov.w	r2, #4294967295
  402206:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  402208:	697b      	ldr	r3, [r7, #20]
  40220a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40220c:	697b      	ldr	r3, [r7, #20]
  40220e:	687a      	ldr	r2, [r7, #4]
  402210:	605a      	str	r2, [r3, #4]
}
  402212:	bf00      	nop
  402214:	371c      	adds	r7, #28
  402216:	46bd      	mov	sp, r7
  402218:	bc80      	pop	{r7}
  40221a:	4770      	bx	lr

0040221c <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40221c:	b480      	push	{r7}
  40221e:	b083      	sub	sp, #12
  402220:	af00      	add	r7, sp, #0
  402222:	6078      	str	r0, [r7, #4]
  402224:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  402226:	687a      	ldr	r2, [r7, #4]
  402228:	683b      	ldr	r3, [r7, #0]
  40222a:	019b      	lsls	r3, r3, #6
  40222c:	4413      	add	r3, r2
  40222e:	2205      	movs	r2, #5
  402230:	601a      	str	r2, [r3, #0]
}
  402232:	bf00      	nop
  402234:	370c      	adds	r7, #12
  402236:	46bd      	mov	sp, r7
  402238:	bc80      	pop	{r7}
  40223a:	4770      	bx	lr

0040223c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  40223c:	b480      	push	{r7}
  40223e:	b085      	sub	sp, #20
  402240:	af00      	add	r7, sp, #0
  402242:	60f8      	str	r0, [r7, #12]
  402244:	60b9      	str	r1, [r7, #8]
  402246:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  402248:	68fa      	ldr	r2, [r7, #12]
  40224a:	68bb      	ldr	r3, [r7, #8]
  40224c:	019b      	lsls	r3, r3, #6
  40224e:	4413      	add	r3, r2
  402250:	331c      	adds	r3, #28
  402252:	687a      	ldr	r2, [r7, #4]
  402254:	601a      	str	r2, [r3, #0]
}
  402256:	bf00      	nop
  402258:	3714      	adds	r7, #20
  40225a:	46bd      	mov	sp, r7
  40225c:	bc80      	pop	{r7}
  40225e:	4770      	bx	lr

00402260 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  402260:	b480      	push	{r7}
  402262:	b087      	sub	sp, #28
  402264:	af00      	add	r7, sp, #0
  402266:	60f8      	str	r0, [r7, #12]
  402268:	60b9      	str	r1, [r7, #8]
  40226a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40226c:	68fa      	ldr	r2, [r7, #12]
  40226e:	68bb      	ldr	r3, [r7, #8]
  402270:	019b      	lsls	r3, r3, #6
  402272:	4413      	add	r3, r2
  402274:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  402276:	697b      	ldr	r3, [r7, #20]
  402278:	687a      	ldr	r2, [r7, #4]
  40227a:	625a      	str	r2, [r3, #36]	; 0x24
}
  40227c:	bf00      	nop
  40227e:	371c      	adds	r7, #28
  402280:	46bd      	mov	sp, r7
  402282:	bc80      	pop	{r7}
  402284:	4770      	bx	lr

00402286 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  402286:	b480      	push	{r7}
  402288:	b085      	sub	sp, #20
  40228a:	af00      	add	r7, sp, #0
  40228c:	6078      	str	r0, [r7, #4]
  40228e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402290:	687a      	ldr	r2, [r7, #4]
  402292:	683b      	ldr	r3, [r7, #0]
  402294:	019b      	lsls	r3, r3, #6
  402296:	4413      	add	r3, r2
  402298:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40229a:	68fb      	ldr	r3, [r7, #12]
  40229c:	6a1b      	ldr	r3, [r3, #32]
}
  40229e:	4618      	mov	r0, r3
  4022a0:	3714      	adds	r7, #20
  4022a2:	46bd      	mov	sp, r7
  4022a4:	bc80      	pop	{r7}
  4022a6:	4770      	bx	lr

004022a8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4022a8:	b480      	push	{r7}
  4022aa:	b08d      	sub	sp, #52	; 0x34
  4022ac:	af00      	add	r7, sp, #0
  4022ae:	60f8      	str	r0, [r7, #12]
  4022b0:	60b9      	str	r1, [r7, #8]
  4022b2:	607a      	str	r2, [r7, #4]
  4022b4:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4022b6:	2302      	movs	r3, #2
  4022b8:	613b      	str	r3, [r7, #16]
  4022ba:	2308      	movs	r3, #8
  4022bc:	617b      	str	r3, [r7, #20]
  4022be:	2320      	movs	r3, #32
  4022c0:	61bb      	str	r3, [r7, #24]
  4022c2:	2380      	movs	r3, #128	; 0x80
  4022c4:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4022c8:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4022ca:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4022cc:	2300      	movs	r3, #0
  4022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4022d0:	e01a      	b.n	402308 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022d4:	009b      	lsls	r3, r3, #2
  4022d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4022da:	4413      	add	r3, r2
  4022dc:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4022e0:	68ba      	ldr	r2, [r7, #8]
  4022e2:	fbb2 f3f3 	udiv	r3, r2, r3
  4022e6:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4022ea:	0c1b      	lsrs	r3, r3, #16
  4022ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4022ee:	68fa      	ldr	r2, [r7, #12]
  4022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4022f2:	429a      	cmp	r2, r3
  4022f4:	d901      	bls.n	4022fa <tc_find_mck_divisor+0x52>
			return 0;
  4022f6:	2300      	movs	r3, #0
  4022f8:	e023      	b.n	402342 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4022fa:	68fa      	ldr	r2, [r7, #12]
  4022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4022fe:	429a      	cmp	r2, r3
  402300:	d206      	bcs.n	402310 <tc_find_mck_divisor+0x68>
			ul_index++) {
  402302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402304:	3301      	adds	r3, #1
  402306:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  402308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40230a:	2b04      	cmp	r3, #4
  40230c:	d9e1      	bls.n	4022d2 <tc_find_mck_divisor+0x2a>
  40230e:	e000      	b.n	402312 <tc_find_mck_divisor+0x6a>
			break;
  402310:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  402312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402314:	2b04      	cmp	r3, #4
  402316:	d901      	bls.n	40231c <tc_find_mck_divisor+0x74>
		return 0;
  402318:	2300      	movs	r3, #0
  40231a:	e012      	b.n	402342 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  40231c:	687b      	ldr	r3, [r7, #4]
  40231e:	2b00      	cmp	r3, #0
  402320:	d008      	beq.n	402334 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  402322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402324:	009b      	lsls	r3, r3, #2
  402326:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40232a:	4413      	add	r3, r2
  40232c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  402330:	687b      	ldr	r3, [r7, #4]
  402332:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  402334:	683b      	ldr	r3, [r7, #0]
  402336:	2b00      	cmp	r3, #0
  402338:	d002      	beq.n	402340 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40233a:	683b      	ldr	r3, [r7, #0]
  40233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40233e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  402340:	2301      	movs	r3, #1
}
  402342:	4618      	mov	r0, r3
  402344:	3734      	adds	r7, #52	; 0x34
  402346:	46bd      	mov	sp, r7
  402348:	bc80      	pop	{r7}
  40234a:	4770      	bx	lr

0040234c <sysclk_enable_peripheral_clock>:
{
  40234c:	b580      	push	{r7, lr}
  40234e:	b082      	sub	sp, #8
  402350:	af00      	add	r7, sp, #0
  402352:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402354:	6878      	ldr	r0, [r7, #4]
  402356:	4b03      	ldr	r3, [pc, #12]	; (402364 <sysclk_enable_peripheral_clock+0x18>)
  402358:	4798      	blx	r3
}
  40235a:	bf00      	nop
  40235c:	3708      	adds	r7, #8
  40235e:	46bd      	mov	sp, r7
  402360:	bd80      	pop	{r7, pc}
  402362:	bf00      	nop
  402364:	00402165 	.word	0x00402165

00402368 <ioport_init>:
{
  402368:	b580      	push	{r7, lr}
  40236a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40236c:	200b      	movs	r0, #11
  40236e:	4b03      	ldr	r3, [pc, #12]	; (40237c <ioport_init+0x14>)
  402370:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  402372:	200c      	movs	r0, #12
  402374:	4b01      	ldr	r3, [pc, #4]	; (40237c <ioport_init+0x14>)
  402376:	4798      	blx	r3
}
  402378:	bf00      	nop
  40237a:	bd80      	pop	{r7, pc}
  40237c:	0040234d 	.word	0x0040234d

00402380 <ioport_set_pin_dir>:
{
  402380:	b480      	push	{r7}
  402382:	b08d      	sub	sp, #52	; 0x34
  402384:	af00      	add	r7, sp, #0
  402386:	6078      	str	r0, [r7, #4]
  402388:	460b      	mov	r3, r1
  40238a:	70fb      	strb	r3, [r7, #3]
  40238c:	687b      	ldr	r3, [r7, #4]
  40238e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402390:	78fb      	ldrb	r3, [r7, #3]
  402392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402398:	627b      	str	r3, [r7, #36]	; 0x24
  40239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40239c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40239e:	6a3b      	ldr	r3, [r7, #32]
  4023a0:	095b      	lsrs	r3, r3, #5
  4023a2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4023a4:	69fb      	ldr	r3, [r7, #28]
  4023a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4023aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4023ae:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4023b0:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4023b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4023b6:	2b01      	cmp	r3, #1
  4023b8:	d109      	bne.n	4023ce <ioport_set_pin_dir+0x4e>
  4023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023bc:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4023be:	697b      	ldr	r3, [r7, #20]
  4023c0:	f003 031f 	and.w	r3, r3, #31
  4023c4:	2201      	movs	r2, #1
  4023c6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4023c8:	69bb      	ldr	r3, [r7, #24]
  4023ca:	611a      	str	r2, [r3, #16]
  4023cc:	e00c      	b.n	4023e8 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4023ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4023d2:	2b00      	cmp	r3, #0
  4023d4:	d108      	bne.n	4023e8 <ioport_set_pin_dir+0x68>
  4023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023d8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4023da:	693b      	ldr	r3, [r7, #16]
  4023dc:	f003 031f 	and.w	r3, r3, #31
  4023e0:	2201      	movs	r2, #1
  4023e2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4023e4:	69bb      	ldr	r3, [r7, #24]
  4023e6:	615a      	str	r2, [r3, #20]
  4023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023ea:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4023ec:	68fb      	ldr	r3, [r7, #12]
  4023ee:	f003 031f 	and.w	r3, r3, #31
  4023f2:	2201      	movs	r2, #1
  4023f4:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4023f6:	69bb      	ldr	r3, [r7, #24]
  4023f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4023fc:	bf00      	nop
  4023fe:	3734      	adds	r7, #52	; 0x34
  402400:	46bd      	mov	sp, r7
  402402:	bc80      	pop	{r7}
  402404:	4770      	bx	lr

00402406 <ioport_set_pin_level>:
{
  402406:	b480      	push	{r7}
  402408:	b08b      	sub	sp, #44	; 0x2c
  40240a:	af00      	add	r7, sp, #0
  40240c:	6078      	str	r0, [r7, #4]
  40240e:	460b      	mov	r3, r1
  402410:	70fb      	strb	r3, [r7, #3]
  402412:	687b      	ldr	r3, [r7, #4]
  402414:	627b      	str	r3, [r7, #36]	; 0x24
  402416:	78fb      	ldrb	r3, [r7, #3]
  402418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40241e:	61fb      	str	r3, [r7, #28]
  402420:	69fb      	ldr	r3, [r7, #28]
  402422:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402424:	69bb      	ldr	r3, [r7, #24]
  402426:	095b      	lsrs	r3, r3, #5
  402428:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40242a:	697b      	ldr	r3, [r7, #20]
  40242c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402430:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402434:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402436:	613b      	str	r3, [r7, #16]
	if (level) {
  402438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40243c:	2b00      	cmp	r3, #0
  40243e:	d009      	beq.n	402454 <ioport_set_pin_level+0x4e>
  402440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402442:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402444:	68fb      	ldr	r3, [r7, #12]
  402446:	f003 031f 	and.w	r3, r3, #31
  40244a:	2201      	movs	r2, #1
  40244c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40244e:	693b      	ldr	r3, [r7, #16]
  402450:	631a      	str	r2, [r3, #48]	; 0x30
}
  402452:	e008      	b.n	402466 <ioport_set_pin_level+0x60>
  402454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402456:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402458:	68bb      	ldr	r3, [r7, #8]
  40245a:	f003 031f 	and.w	r3, r3, #31
  40245e:	2201      	movs	r2, #1
  402460:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402462:	693b      	ldr	r3, [r7, #16]
  402464:	635a      	str	r2, [r3, #52]	; 0x34
  402466:	bf00      	nop
  402468:	372c      	adds	r7, #44	; 0x2c
  40246a:	46bd      	mov	sp, r7
  40246c:	bc80      	pop	{r7}
  40246e:	4770      	bx	lr

00402470 <board_init>:
#include <board.h>
#include <conf_board.h>


void board_init(void)
{
  402470:	b580      	push	{r7, lr}
  402472:	af00      	add	r7, sp, #0
	ioport_init();
  402474:	4b0b      	ldr	r3, [pc, #44]	; (4024a4 <board_init+0x34>)
  402476:	4798      	blx	r3
	ioport_set_pin_dir(PIN_WIFI_RESET,IOPORT_DIR_OUTPUT);
  402478:	2101      	movs	r1, #1
  40247a:	2021      	movs	r0, #33	; 0x21
  40247c:	4b0a      	ldr	r3, [pc, #40]	; (4024a8 <board_init+0x38>)
  40247e:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,LOW);
  402480:	2100      	movs	r1, #0
  402482:	2021      	movs	r0, #33	; 0x21
  402484:	4b09      	ldr	r3, [pc, #36]	; (4024ac <board_init+0x3c>)
  402486:	4798      	blx	r3
	
	ioport_set_pin_dir(PIN_WIFI_NETWORK_STATUS,IOPORT_DIR_INPUT);
  402488:	2100      	movs	r1, #0
  40248a:	200b      	movs	r0, #11
  40248c:	4b06      	ldr	r3, [pc, #24]	; (4024a8 <board_init+0x38>)
  40248e:	4798      	blx	r3
	//ioport_set_pin_level(PIN_WIFI_NETWORK_STATUS,LOW);
	
	ioport_set_pin_dir(PUSH_BUTTON,IOPORT_DIR_INPUT);
  402490:	2100      	movs	r1, #0
  402492:	2000      	movs	r0, #0
  402494:	4b04      	ldr	r3, [pc, #16]	; (4024a8 <board_init+0x38>)
  402496:	4798      	blx	r3
	//ioport_set_pin_level(PUSH_BUTTON,HIGH);
	
	ioport_set_pin_dir(WIFI_COM_COMPLETE,IOPORT_DIR_INPUT);
  402498:	2100      	movs	r1, #0
  40249a:	200c      	movs	r0, #12
  40249c:	4b02      	ldr	r3, [pc, #8]	; (4024a8 <board_init+0x38>)
  40249e:	4798      	blx	r3
	//ioport_set_pin_level(WIFI_COM_COMPLETE,LOW);



}
  4024a0:	bf00      	nop
  4024a2:	bd80      	pop	{r7, pc}
  4024a4:	00402369 	.word	0x00402369
  4024a8:	00402381 	.word	0x00402381
  4024ac:	00402407 	.word	0x00402407

004024b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4024b0:	b580      	push	{r7, lr}
  4024b2:	b084      	sub	sp, #16
  4024b4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4024b6:	4b27      	ldr	r3, [pc, #156]	; (402554 <Reset_Handler+0xa4>)
  4024b8:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4024ba:	4b27      	ldr	r3, [pc, #156]	; (402558 <Reset_Handler+0xa8>)
  4024bc:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4024be:	68fa      	ldr	r2, [r7, #12]
  4024c0:	68bb      	ldr	r3, [r7, #8]
  4024c2:	429a      	cmp	r2, r3
  4024c4:	d90d      	bls.n	4024e2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4024c6:	e007      	b.n	4024d8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4024c8:	68bb      	ldr	r3, [r7, #8]
  4024ca:	1d1a      	adds	r2, r3, #4
  4024cc:	60ba      	str	r2, [r7, #8]
  4024ce:	68fa      	ldr	r2, [r7, #12]
  4024d0:	1d11      	adds	r1, r2, #4
  4024d2:	60f9      	str	r1, [r7, #12]
  4024d4:	6812      	ldr	r2, [r2, #0]
  4024d6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4024d8:	68bb      	ldr	r3, [r7, #8]
  4024da:	4a20      	ldr	r2, [pc, #128]	; (40255c <Reset_Handler+0xac>)
  4024dc:	4293      	cmp	r3, r2
  4024de:	d3f3      	bcc.n	4024c8 <Reset_Handler+0x18>
  4024e0:	e020      	b.n	402524 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  4024e2:	68fa      	ldr	r2, [r7, #12]
  4024e4:	68bb      	ldr	r3, [r7, #8]
  4024e6:	429a      	cmp	r2, r3
  4024e8:	d21c      	bcs.n	402524 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4024ea:	4a1c      	ldr	r2, [pc, #112]	; (40255c <Reset_Handler+0xac>)
  4024ec:	4b1a      	ldr	r3, [pc, #104]	; (402558 <Reset_Handler+0xa8>)
  4024ee:	1ad3      	subs	r3, r2, r3
  4024f0:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4024f2:	68fa      	ldr	r2, [r7, #12]
  4024f4:	687b      	ldr	r3, [r7, #4]
  4024f6:	4413      	add	r3, r2
  4024f8:	3b04      	subs	r3, #4
  4024fa:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4024fc:	68ba      	ldr	r2, [r7, #8]
  4024fe:	687b      	ldr	r3, [r7, #4]
  402500:	4413      	add	r3, r2
  402502:	3b04      	subs	r3, #4
  402504:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402506:	e00a      	b.n	40251e <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402508:	68bb      	ldr	r3, [r7, #8]
  40250a:	1f1a      	subs	r2, r3, #4
  40250c:	60ba      	str	r2, [r7, #8]
  40250e:	68fa      	ldr	r2, [r7, #12]
  402510:	1f11      	subs	r1, r2, #4
  402512:	60f9      	str	r1, [r7, #12]
  402514:	6812      	ldr	r2, [r2, #0]
  402516:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402518:	687b      	ldr	r3, [r7, #4]
  40251a:	3b04      	subs	r3, #4
  40251c:	607b      	str	r3, [r7, #4]
  40251e:	687b      	ldr	r3, [r7, #4]
  402520:	2b00      	cmp	r3, #0
  402522:	d1f1      	bne.n	402508 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402524:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402526:	4b0e      	ldr	r3, [pc, #56]	; (402560 <Reset_Handler+0xb0>)
  402528:	60bb      	str	r3, [r7, #8]
  40252a:	e004      	b.n	402536 <Reset_Handler+0x86>
		*pDest++ = 0;
  40252c:	68bb      	ldr	r3, [r7, #8]
  40252e:	1d1a      	adds	r2, r3, #4
  402530:	60ba      	str	r2, [r7, #8]
  402532:	2200      	movs	r2, #0
  402534:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402536:	68bb      	ldr	r3, [r7, #8]
  402538:	4a0a      	ldr	r2, [pc, #40]	; (402564 <Reset_Handler+0xb4>)
  40253a:	4293      	cmp	r3, r2
  40253c:	d3f6      	bcc.n	40252c <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40253e:	4b0a      	ldr	r3, [pc, #40]	; (402568 <Reset_Handler+0xb8>)
  402540:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402542:	4a0a      	ldr	r2, [pc, #40]	; (40256c <Reset_Handler+0xbc>)
  402544:	68fb      	ldr	r3, [r7, #12]
  402546:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402548:	4b09      	ldr	r3, [pc, #36]	; (402570 <Reset_Handler+0xc0>)
  40254a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40254c:	4b09      	ldr	r3, [pc, #36]	; (402574 <Reset_Handler+0xc4>)
  40254e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402550:	e7fe      	b.n	402550 <Reset_Handler+0xa0>
  402552:	bf00      	nop
  402554:	00407e1c 	.word	0x00407e1c
  402558:	20000000 	.word	0x20000000
  40255c:	20006b68 	.word	0x20006b68
  402560:	20006b68 	.word	0x20006b68
  402564:	20007118 	.word	0x20007118
  402568:	00400000 	.word	0x00400000
  40256c:	e000ed00 	.word	0xe000ed00
  402570:	00402cd5 	.word	0x00402cd5
  402574:	004028a9 	.word	0x004028a9

00402578 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402578:	b480      	push	{r7}
  40257a:	af00      	add	r7, sp, #0
	while (1) {
  40257c:	e7fe      	b.n	40257c <Dummy_Handler+0x4>
	...

00402580 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402580:	b480      	push	{r7}
  402582:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402584:	4b5d      	ldr	r3, [pc, #372]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  402586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402588:	f003 0303 	and.w	r3, r3, #3
  40258c:	2b03      	cmp	r3, #3
  40258e:	f200 8096 	bhi.w	4026be <SystemCoreClockUpdate+0x13e>
  402592:	a201      	add	r2, pc, #4	; (adr r2, 402598 <SystemCoreClockUpdate+0x18>)
  402594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402598:	004025a9 	.word	0x004025a9
  40259c:	004025c9 	.word	0x004025c9
  4025a0:	00402613 	.word	0x00402613
  4025a4:	00402613 	.word	0x00402613
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4025a8:	4b55      	ldr	r3, [pc, #340]	; (402700 <SystemCoreClockUpdate+0x180>)
  4025aa:	695b      	ldr	r3, [r3, #20]
  4025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4025b0:	2b00      	cmp	r3, #0
  4025b2:	d004      	beq.n	4025be <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4025b4:	4b53      	ldr	r3, [pc, #332]	; (402704 <SystemCoreClockUpdate+0x184>)
  4025b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4025ba:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4025bc:	e080      	b.n	4026c0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4025be:	4b51      	ldr	r3, [pc, #324]	; (402704 <SystemCoreClockUpdate+0x184>)
  4025c0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4025c4:	601a      	str	r2, [r3, #0]
		break;
  4025c6:	e07b      	b.n	4026c0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4025c8:	4b4c      	ldr	r3, [pc, #304]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  4025ca:	6a1b      	ldr	r3, [r3, #32]
  4025cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4025d0:	2b00      	cmp	r3, #0
  4025d2:	d003      	beq.n	4025dc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4025d4:	4b4b      	ldr	r3, [pc, #300]	; (402704 <SystemCoreClockUpdate+0x184>)
  4025d6:	4a4c      	ldr	r2, [pc, #304]	; (402708 <SystemCoreClockUpdate+0x188>)
  4025d8:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4025da:	e071      	b.n	4026c0 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025dc:	4b49      	ldr	r3, [pc, #292]	; (402704 <SystemCoreClockUpdate+0x184>)
  4025de:	4a4b      	ldr	r2, [pc, #300]	; (40270c <SystemCoreClockUpdate+0x18c>)
  4025e0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4025e2:	4b46      	ldr	r3, [pc, #280]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  4025e4:	6a1b      	ldr	r3, [r3, #32]
  4025e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4025ea:	2b10      	cmp	r3, #16
  4025ec:	d008      	beq.n	402600 <SystemCoreClockUpdate+0x80>
  4025ee:	2b20      	cmp	r3, #32
  4025f0:	d00a      	beq.n	402608 <SystemCoreClockUpdate+0x88>
  4025f2:	2b00      	cmp	r3, #0
  4025f4:	d000      	beq.n	4025f8 <SystemCoreClockUpdate+0x78>
			break;
  4025f6:	e00b      	b.n	402610 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025f8:	4b42      	ldr	r3, [pc, #264]	; (402704 <SystemCoreClockUpdate+0x184>)
  4025fa:	4a44      	ldr	r2, [pc, #272]	; (40270c <SystemCoreClockUpdate+0x18c>)
  4025fc:	601a      	str	r2, [r3, #0]
			break;
  4025fe:	e007      	b.n	402610 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402600:	4b40      	ldr	r3, [pc, #256]	; (402704 <SystemCoreClockUpdate+0x184>)
  402602:	4a43      	ldr	r2, [pc, #268]	; (402710 <SystemCoreClockUpdate+0x190>)
  402604:	601a      	str	r2, [r3, #0]
			break;
  402606:	e003      	b.n	402610 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402608:	4b3e      	ldr	r3, [pc, #248]	; (402704 <SystemCoreClockUpdate+0x184>)
  40260a:	4a3f      	ldr	r2, [pc, #252]	; (402708 <SystemCoreClockUpdate+0x188>)
  40260c:	601a      	str	r2, [r3, #0]
			break;
  40260e:	bf00      	nop
		break;
  402610:	e056      	b.n	4026c0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402612:	4b3a      	ldr	r3, [pc, #232]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  402614:	6a1b      	ldr	r3, [r3, #32]
  402616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40261a:	2b00      	cmp	r3, #0
  40261c:	d003      	beq.n	402626 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40261e:	4b39      	ldr	r3, [pc, #228]	; (402704 <SystemCoreClockUpdate+0x184>)
  402620:	4a39      	ldr	r2, [pc, #228]	; (402708 <SystemCoreClockUpdate+0x188>)
  402622:	601a      	str	r2, [r3, #0]
  402624:	e019      	b.n	40265a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402626:	4b37      	ldr	r3, [pc, #220]	; (402704 <SystemCoreClockUpdate+0x184>)
  402628:	4a38      	ldr	r2, [pc, #224]	; (40270c <SystemCoreClockUpdate+0x18c>)
  40262a:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40262c:	4b33      	ldr	r3, [pc, #204]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  40262e:	6a1b      	ldr	r3, [r3, #32]
  402630:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402634:	2b10      	cmp	r3, #16
  402636:	d008      	beq.n	40264a <SystemCoreClockUpdate+0xca>
  402638:	2b20      	cmp	r3, #32
  40263a:	d00a      	beq.n	402652 <SystemCoreClockUpdate+0xd2>
  40263c:	2b00      	cmp	r3, #0
  40263e:	d000      	beq.n	402642 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402640:	e00b      	b.n	40265a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402642:	4b30      	ldr	r3, [pc, #192]	; (402704 <SystemCoreClockUpdate+0x184>)
  402644:	4a31      	ldr	r2, [pc, #196]	; (40270c <SystemCoreClockUpdate+0x18c>)
  402646:	601a      	str	r2, [r3, #0]
					break;
  402648:	e007      	b.n	40265a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40264a:	4b2e      	ldr	r3, [pc, #184]	; (402704 <SystemCoreClockUpdate+0x184>)
  40264c:	4a30      	ldr	r2, [pc, #192]	; (402710 <SystemCoreClockUpdate+0x190>)
  40264e:	601a      	str	r2, [r3, #0]
					break;
  402650:	e003      	b.n	40265a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402652:	4b2c      	ldr	r3, [pc, #176]	; (402704 <SystemCoreClockUpdate+0x184>)
  402654:	4a2c      	ldr	r2, [pc, #176]	; (402708 <SystemCoreClockUpdate+0x188>)
  402656:	601a      	str	r2, [r3, #0]
					break;
  402658:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40265a:	4b28      	ldr	r3, [pc, #160]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  40265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40265e:	f003 0303 	and.w	r3, r3, #3
  402662:	2b02      	cmp	r3, #2
  402664:	d115      	bne.n	402692 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402666:	4b25      	ldr	r3, [pc, #148]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  402668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40266a:	0c1b      	lsrs	r3, r3, #16
  40266c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402670:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402672:	4a24      	ldr	r2, [pc, #144]	; (402704 <SystemCoreClockUpdate+0x184>)
  402674:	6812      	ldr	r2, [r2, #0]
  402676:	fb02 f303 	mul.w	r3, r2, r3
  40267a:	4a22      	ldr	r2, [pc, #136]	; (402704 <SystemCoreClockUpdate+0x184>)
  40267c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40267e:	4b1f      	ldr	r3, [pc, #124]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  402680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402682:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402684:	4a1f      	ldr	r2, [pc, #124]	; (402704 <SystemCoreClockUpdate+0x184>)
  402686:	6812      	ldr	r2, [r2, #0]
  402688:	fbb2 f3f3 	udiv	r3, r2, r3
  40268c:	4a1d      	ldr	r2, [pc, #116]	; (402704 <SystemCoreClockUpdate+0x184>)
  40268e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402690:	e016      	b.n	4026c0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402692:	4b1a      	ldr	r3, [pc, #104]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  402694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402696:	0c1b      	lsrs	r3, r3, #16
  402698:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40269c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40269e:	4a19      	ldr	r2, [pc, #100]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026a0:	6812      	ldr	r2, [r2, #0]
  4026a2:	fb02 f303 	mul.w	r3, r2, r3
  4026a6:	4a17      	ldr	r2, [pc, #92]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026a8:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4026aa:	4b14      	ldr	r3, [pc, #80]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  4026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4026ae:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4026b0:	4a14      	ldr	r2, [pc, #80]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026b2:	6812      	ldr	r2, [r2, #0]
  4026b4:	fbb2 f3f3 	udiv	r3, r2, r3
  4026b8:	4a12      	ldr	r2, [pc, #72]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026ba:	6013      	str	r3, [r2, #0]
		break;
  4026bc:	e000      	b.n	4026c0 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4026be:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4026c0:	4b0e      	ldr	r3, [pc, #56]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  4026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026c8:	2b70      	cmp	r3, #112	; 0x70
  4026ca:	d108      	bne.n	4026de <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4026cc:	4b0d      	ldr	r3, [pc, #52]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026ce:	681b      	ldr	r3, [r3, #0]
  4026d0:	4a10      	ldr	r2, [pc, #64]	; (402714 <SystemCoreClockUpdate+0x194>)
  4026d2:	fba2 2303 	umull	r2, r3, r2, r3
  4026d6:	085b      	lsrs	r3, r3, #1
  4026d8:	4a0a      	ldr	r2, [pc, #40]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026da:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4026dc:	e00a      	b.n	4026f4 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4026de:	4b07      	ldr	r3, [pc, #28]	; (4026fc <SystemCoreClockUpdate+0x17c>)
  4026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026e2:	091b      	lsrs	r3, r3, #4
  4026e4:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4026e8:	4a06      	ldr	r2, [pc, #24]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026ea:	6812      	ldr	r2, [r2, #0]
  4026ec:	fa22 f303 	lsr.w	r3, r2, r3
  4026f0:	4a04      	ldr	r2, [pc, #16]	; (402704 <SystemCoreClockUpdate+0x184>)
  4026f2:	6013      	str	r3, [r2, #0]
}
  4026f4:	bf00      	nop
  4026f6:	46bd      	mov	sp, r7
  4026f8:	bc80      	pop	{r7}
  4026fa:	4770      	bx	lr
  4026fc:	400e0400 	.word	0x400e0400
  402700:	400e1410 	.word	0x400e1410
  402704:	200061b4 	.word	0x200061b4
  402708:	00b71b00 	.word	0x00b71b00
  40270c:	003d0900 	.word	0x003d0900
  402710:	007a1200 	.word	0x007a1200
  402714:	aaaaaaab 	.word	0xaaaaaaab

00402718 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402718:	b480      	push	{r7}
  40271a:	b083      	sub	sp, #12
  40271c:	af00      	add	r7, sp, #0
  40271e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402720:	687b      	ldr	r3, [r7, #4]
  402722:	4a18      	ldr	r2, [pc, #96]	; (402784 <system_init_flash+0x6c>)
  402724:	4293      	cmp	r3, r2
  402726:	d804      	bhi.n	402732 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402728:	4b17      	ldr	r3, [pc, #92]	; (402788 <system_init_flash+0x70>)
  40272a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40272e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402730:	e023      	b.n	40277a <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402732:	687b      	ldr	r3, [r7, #4]
  402734:	4a15      	ldr	r2, [pc, #84]	; (40278c <system_init_flash+0x74>)
  402736:	4293      	cmp	r3, r2
  402738:	d803      	bhi.n	402742 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40273a:	4b13      	ldr	r3, [pc, #76]	; (402788 <system_init_flash+0x70>)
  40273c:	4a14      	ldr	r2, [pc, #80]	; (402790 <system_init_flash+0x78>)
  40273e:	601a      	str	r2, [r3, #0]
}
  402740:	e01b      	b.n	40277a <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402742:	687b      	ldr	r3, [r7, #4]
  402744:	4a13      	ldr	r2, [pc, #76]	; (402794 <system_init_flash+0x7c>)
  402746:	4293      	cmp	r3, r2
  402748:	d803      	bhi.n	402752 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40274a:	4b0f      	ldr	r3, [pc, #60]	; (402788 <system_init_flash+0x70>)
  40274c:	4a12      	ldr	r2, [pc, #72]	; (402798 <system_init_flash+0x80>)
  40274e:	601a      	str	r2, [r3, #0]
}
  402750:	e013      	b.n	40277a <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402752:	687b      	ldr	r3, [r7, #4]
  402754:	4a11      	ldr	r2, [pc, #68]	; (40279c <system_init_flash+0x84>)
  402756:	4293      	cmp	r3, r2
  402758:	d803      	bhi.n	402762 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40275a:	4b0b      	ldr	r3, [pc, #44]	; (402788 <system_init_flash+0x70>)
  40275c:	4a10      	ldr	r2, [pc, #64]	; (4027a0 <system_init_flash+0x88>)
  40275e:	601a      	str	r2, [r3, #0]
}
  402760:	e00b      	b.n	40277a <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402762:	687b      	ldr	r3, [r7, #4]
  402764:	4a0f      	ldr	r2, [pc, #60]	; (4027a4 <system_init_flash+0x8c>)
  402766:	4293      	cmp	r3, r2
  402768:	d804      	bhi.n	402774 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40276a:	4b07      	ldr	r3, [pc, #28]	; (402788 <system_init_flash+0x70>)
  40276c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402770:	601a      	str	r2, [r3, #0]
}
  402772:	e002      	b.n	40277a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402774:	4b04      	ldr	r3, [pc, #16]	; (402788 <system_init_flash+0x70>)
  402776:	4a0c      	ldr	r2, [pc, #48]	; (4027a8 <system_init_flash+0x90>)
  402778:	601a      	str	r2, [r3, #0]
}
  40277a:	bf00      	nop
  40277c:	370c      	adds	r7, #12
  40277e:	46bd      	mov	sp, r7
  402780:	bc80      	pop	{r7}
  402782:	4770      	bx	lr
  402784:	01312cff 	.word	0x01312cff
  402788:	400e0a00 	.word	0x400e0a00
  40278c:	026259ff 	.word	0x026259ff
  402790:	04000100 	.word	0x04000100
  402794:	039386ff 	.word	0x039386ff
  402798:	04000200 	.word	0x04000200
  40279c:	04c4b3ff 	.word	0x04c4b3ff
  4027a0:	04000300 	.word	0x04000300
  4027a4:	05f5e0ff 	.word	0x05f5e0ff
  4027a8:	04000500 	.word	0x04000500

004027ac <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4027ac:	b480      	push	{r7}
  4027ae:	b085      	sub	sp, #20
  4027b0:	af00      	add	r7, sp, #0
  4027b2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4027b4:	4b10      	ldr	r3, [pc, #64]	; (4027f8 <_sbrk+0x4c>)
  4027b6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4027b8:	4b10      	ldr	r3, [pc, #64]	; (4027fc <_sbrk+0x50>)
  4027ba:	681b      	ldr	r3, [r3, #0]
  4027bc:	2b00      	cmp	r3, #0
  4027be:	d102      	bne.n	4027c6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4027c0:	4b0e      	ldr	r3, [pc, #56]	; (4027fc <_sbrk+0x50>)
  4027c2:	4a0f      	ldr	r2, [pc, #60]	; (402800 <_sbrk+0x54>)
  4027c4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4027c6:	4b0d      	ldr	r3, [pc, #52]	; (4027fc <_sbrk+0x50>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4027cc:	68ba      	ldr	r2, [r7, #8]
  4027ce:	687b      	ldr	r3, [r7, #4]
  4027d0:	441a      	add	r2, r3
  4027d2:	68fb      	ldr	r3, [r7, #12]
  4027d4:	429a      	cmp	r2, r3
  4027d6:	dd02      	ble.n	4027de <_sbrk+0x32>
		return (caddr_t) -1;	
  4027d8:	f04f 33ff 	mov.w	r3, #4294967295
  4027dc:	e006      	b.n	4027ec <_sbrk+0x40>
	}

	heap += incr;
  4027de:	4b07      	ldr	r3, [pc, #28]	; (4027fc <_sbrk+0x50>)
  4027e0:	681a      	ldr	r2, [r3, #0]
  4027e2:	687b      	ldr	r3, [r7, #4]
  4027e4:	4413      	add	r3, r2
  4027e6:	4a05      	ldr	r2, [pc, #20]	; (4027fc <_sbrk+0x50>)
  4027e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4027ea:	68bb      	ldr	r3, [r7, #8]
}
  4027ec:	4618      	mov	r0, r3
  4027ee:	3714      	adds	r7, #20
  4027f0:	46bd      	mov	sp, r7
  4027f2:	bc80      	pop	{r7}
  4027f4:	4770      	bx	lr
  4027f6:	bf00      	nop
  4027f8:	2001fffc 	.word	0x2001fffc
  4027fc:	20006c28 	.word	0x20006c28
  402800:	2000a118 	.word	0x2000a118

00402804 <osc_get_rate>:
{
  402804:	b480      	push	{r7}
  402806:	b083      	sub	sp, #12
  402808:	af00      	add	r7, sp, #0
  40280a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40280c:	687b      	ldr	r3, [r7, #4]
  40280e:	2b07      	cmp	r3, #7
  402810:	d825      	bhi.n	40285e <osc_get_rate+0x5a>
  402812:	a201      	add	r2, pc, #4	; (adr r2, 402818 <osc_get_rate+0x14>)
  402814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402818:	00402839 	.word	0x00402839
  40281c:	0040283f 	.word	0x0040283f
  402820:	00402845 	.word	0x00402845
  402824:	0040284b 	.word	0x0040284b
  402828:	0040284f 	.word	0x0040284f
  40282c:	00402853 	.word	0x00402853
  402830:	00402857 	.word	0x00402857
  402834:	0040285b 	.word	0x0040285b
		return OSC_SLCK_32K_RC_HZ;
  402838:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40283c:	e010      	b.n	402860 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40283e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402842:	e00d      	b.n	402860 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402848:	e00a      	b.n	402860 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40284a:	4b08      	ldr	r3, [pc, #32]	; (40286c <osc_get_rate+0x68>)
  40284c:	e008      	b.n	402860 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40284e:	4b08      	ldr	r3, [pc, #32]	; (402870 <osc_get_rate+0x6c>)
  402850:	e006      	b.n	402860 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402852:	4b08      	ldr	r3, [pc, #32]	; (402874 <osc_get_rate+0x70>)
  402854:	e004      	b.n	402860 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402856:	4b07      	ldr	r3, [pc, #28]	; (402874 <osc_get_rate+0x70>)
  402858:	e002      	b.n	402860 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40285a:	4b06      	ldr	r3, [pc, #24]	; (402874 <osc_get_rate+0x70>)
  40285c:	e000      	b.n	402860 <osc_get_rate+0x5c>
	return 0;
  40285e:	2300      	movs	r3, #0
}
  402860:	4618      	mov	r0, r3
  402862:	370c      	adds	r7, #12
  402864:	46bd      	mov	sp, r7
  402866:	bc80      	pop	{r7}
  402868:	4770      	bx	lr
  40286a:	bf00      	nop
  40286c:	003d0900 	.word	0x003d0900
  402870:	007a1200 	.word	0x007a1200
  402874:	00b71b00 	.word	0x00b71b00

00402878 <sysclk_get_main_hz>:
{
  402878:	b580      	push	{r7, lr}
  40287a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40287c:	2006      	movs	r0, #6
  40287e:	4b04      	ldr	r3, [pc, #16]	; (402890 <sysclk_get_main_hz+0x18>)
  402880:	4798      	blx	r3
  402882:	4602      	mov	r2, r0
  402884:	4613      	mov	r3, r2
  402886:	009b      	lsls	r3, r3, #2
  402888:	4413      	add	r3, r2
  40288a:	009b      	lsls	r3, r3, #2
}
  40288c:	4618      	mov	r0, r3
  40288e:	bd80      	pop	{r7, pc}
  402890:	00402805 	.word	0x00402805

00402894 <sysclk_get_cpu_hz>:
{
  402894:	b580      	push	{r7, lr}
  402896:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402898:	4b02      	ldr	r3, [pc, #8]	; (4028a4 <sysclk_get_cpu_hz+0x10>)
  40289a:	4798      	blx	r3
  40289c:	4603      	mov	r3, r0
  40289e:	085b      	lsrs	r3, r3, #1
}
  4028a0:	4618      	mov	r0, r3
  4028a2:	bd80      	pop	{r7, pc}
  4028a4:	00402879 	.word	0x00402879

004028a8 <main>:
// Global variables because 2/3 of us are mechanical engineers and that's just how we roll
volatile uint32_t receivedMessage;


int main (void)
{
  4028a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028ac:	b085      	sub	sp, #20
  4028ae:	af00      	add	r7, sp, #0
	// boilerplate
	sysclk_init();
  4028b0:	4b33      	ldr	r3, [pc, #204]	; (402980 <main+0xd8>)
  4028b2:	4798      	blx	r3
	wdt_disable(WDT);
  4028b4:	4833      	ldr	r0, [pc, #204]	; (402984 <main+0xdc>)
  4028b6:	4b34      	ldr	r3, [pc, #208]	; (402988 <main+0xe0>)
  4028b8:	4798      	blx	r3
	board_init();
  4028ba:	4b34      	ldr	r3, [pc, #208]	; (40298c <main+0xe4>)
  4028bc:	4798      	blx	r3
	
	
	// start the clock that counts the seconds
	configure_tc();
  4028be:	4b34      	ldr	r3, [pc, #208]	; (402990 <main+0xe8>)
  4028c0:	4798      	blx	r3
	tc_start(TC0, 0);
  4028c2:	2100      	movs	r1, #0
  4028c4:	4833      	ldr	r0, [pc, #204]	; (402994 <main+0xec>)
  4028c6:	4b34      	ldr	r3, [pc, #208]	; (402998 <main+0xf0>)
  4028c8:	4798      	blx	r3

	// Configure the Wifi UART communication stuff
	configure_usart_wifi();
  4028ca:	4b34      	ldr	r3, [pc, #208]	; (40299c <main+0xf4>)
  4028cc:	4798      	blx	r3
	configure_wifi_comm_pin();
  4028ce:	4b34      	ldr	r3, [pc, #208]	; (4029a0 <main+0xf8>)
  4028d0:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  4028d2:	4b34      	ldr	r3, [pc, #208]	; (4029a4 <main+0xfc>)
  4028d4:	4798      	blx	r3
	// Configure the Wifi programming communication stuff
	//configure_usart_programmer();
	//configure_programmer_interfacePins();
	
	// Reset the wifi
	resetWifi();
  4028d6:	4b34      	ldr	r3, [pc, #208]	; (4029a8 <main+0x100>)
  4028d8:	4798      	blx	r3
	//delay_ms(8000); // RE-ENABLE ME

	// Configure programmer usart
 	configure_usart_prog();
  4028da:	4b34      	ldr	r3, [pc, #208]	; (4029ac <main+0x104>)
  4028dc:	4798      	blx	r3
	Clear_Target();
  4028de:	4b34      	ldr	r3, [pc, #208]	; (4029b0 <main+0x108>)
  4028e0:	4798      	blx	r3
	Write_Program();
  4028e2:	4b34      	ldr	r3, [pc, #208]	; (4029b4 <main+0x10c>)
  4028e4:	4798      	blx	r3
			
		}
		else{
			delay_ms(5000);
		}
		delay_ms(5000);///xxxxxxxxxxxxxxxxxxxxxDELETE_MExxxxxxxxxxxxx
  4028e6:	4b34      	ldr	r3, [pc, #208]	; (4029b8 <main+0x110>)
  4028e8:	4798      	blx	r3
  4028ea:	4603      	mov	r3, r0
  4028ec:	4619      	mov	r1, r3
  4028ee:	f04f 0200 	mov.w	r2, #0
  4028f2:	460b      	mov	r3, r1
  4028f4:	4614      	mov	r4, r2
  4028f6:	00a0      	lsls	r0, r4, #2
  4028f8:	60f8      	str	r0, [r7, #12]
  4028fa:	68f8      	ldr	r0, [r7, #12]
  4028fc:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  402900:	60f8      	str	r0, [r7, #12]
  402902:	009b      	lsls	r3, r3, #2
  402904:	60bb      	str	r3, [r7, #8]
  402906:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  40290a:	185b      	adds	r3, r3, r1
  40290c:	eb44 0402 	adc.w	r4, r4, r2
  402910:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  402914:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  402918:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  40291c:	4653      	mov	r3, sl
  40291e:	465c      	mov	r4, fp
  402920:	1a5b      	subs	r3, r3, r1
  402922:	eb64 0402 	sbc.w	r4, r4, r2
  402926:	ea4f 1904 	mov.w	r9, r4, lsl #4
  40292a:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  40292e:	ea4f 1803 	mov.w	r8, r3, lsl #4
  402932:	4643      	mov	r3, r8
  402934:	464c      	mov	r4, r9
  402936:	185b      	adds	r3, r3, r1
  402938:	eb44 0402 	adc.w	r4, r4, r2
  40293c:	00e2      	lsls	r2, r4, #3
  40293e:	607a      	str	r2, [r7, #4]
  402940:	687a      	ldr	r2, [r7, #4]
  402942:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  402946:	607a      	str	r2, [r7, #4]
  402948:	00db      	lsls	r3, r3, #3
  40294a:	603b      	str	r3, [r7, #0]
  40294c:	e9d7 3400 	ldrd	r3, r4, [r7]
  402950:	4619      	mov	r1, r3
  402952:	4622      	mov	r2, r4
  402954:	f243 63af 	movw	r3, #13999	; 0x36af
  402958:	f04f 0400 	mov.w	r4, #0
  40295c:	18cd      	adds	r5, r1, r3
  40295e:	eb42 0604 	adc.w	r6, r2, r4
  402962:	4628      	mov	r0, r5
  402964:	4631      	mov	r1, r6
  402966:	4c15      	ldr	r4, [pc, #84]	; (4029bc <main+0x114>)
  402968:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40296c:	f04f 0300 	mov.w	r3, #0
  402970:	47a0      	blx	r4
  402972:	4603      	mov	r3, r0
  402974:	460c      	mov	r4, r1
  402976:	4618      	mov	r0, r3
  402978:	4b11      	ldr	r3, [pc, #68]	; (4029c0 <main+0x118>)
  40297a:	4798      	blx	r3
		if(1){
  40297c:	e7b3      	b.n	4028e6 <main+0x3e>
  40297e:	bf00      	nop
  402980:	004019b5 	.word	0x004019b5
  402984:	400e1450 	.word	0x400e1450
  402988:	00400635 	.word	0x00400635
  40298c:	00402471 	.word	0x00402471
  402990:	00401021 	.word	0x00401021
  402994:	40010000 	.word	0x40010000
  402998:	0040221d 	.word	0x0040221d
  40299c:	00401421 	.word	0x00401421
  4029a0:	004014e9 	.word	0x004014e9
  4029a4:	00401549 	.word	0x00401549
  4029a8:	004015a1 	.word	0x004015a1
  4029ac:	00400dcd 	.word	0x00400dcd
  4029b0:	004009ed 	.word	0x004009ed
  4029b4:	00400821 	.word	0x00400821
  4029b8:	00402895 	.word	0x00402895
  4029bc:	004029c5 	.word	0x004029c5
  4029c0:	20000001 	.word	0x20000001

004029c4 <__aeabi_uldivmod>:
  4029c4:	b953      	cbnz	r3, 4029dc <__aeabi_uldivmod+0x18>
  4029c6:	b94a      	cbnz	r2, 4029dc <__aeabi_uldivmod+0x18>
  4029c8:	2900      	cmp	r1, #0
  4029ca:	bf08      	it	eq
  4029cc:	2800      	cmpeq	r0, #0
  4029ce:	bf1c      	itt	ne
  4029d0:	f04f 31ff 	movne.w	r1, #4294967295
  4029d4:	f04f 30ff 	movne.w	r0, #4294967295
  4029d8:	f000 b97a 	b.w	402cd0 <__aeabi_idiv0>
  4029dc:	f1ad 0c08 	sub.w	ip, sp, #8
  4029e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4029e4:	f000 f806 	bl	4029f4 <__udivmoddi4>
  4029e8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4029ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4029f0:	b004      	add	sp, #16
  4029f2:	4770      	bx	lr

004029f4 <__udivmoddi4>:
  4029f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029f8:	468c      	mov	ip, r1
  4029fa:	460d      	mov	r5, r1
  4029fc:	4604      	mov	r4, r0
  4029fe:	9e08      	ldr	r6, [sp, #32]
  402a00:	2b00      	cmp	r3, #0
  402a02:	d151      	bne.n	402aa8 <__udivmoddi4+0xb4>
  402a04:	428a      	cmp	r2, r1
  402a06:	4617      	mov	r7, r2
  402a08:	d96d      	bls.n	402ae6 <__udivmoddi4+0xf2>
  402a0a:	fab2 fe82 	clz	lr, r2
  402a0e:	f1be 0f00 	cmp.w	lr, #0
  402a12:	d00b      	beq.n	402a2c <__udivmoddi4+0x38>
  402a14:	f1ce 0c20 	rsb	ip, lr, #32
  402a18:	fa01 f50e 	lsl.w	r5, r1, lr
  402a1c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402a20:	fa02 f70e 	lsl.w	r7, r2, lr
  402a24:	ea4c 0c05 	orr.w	ip, ip, r5
  402a28:	fa00 f40e 	lsl.w	r4, r0, lr
  402a2c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402a30:	0c25      	lsrs	r5, r4, #16
  402a32:	fbbc f8fa 	udiv	r8, ip, sl
  402a36:	fa1f f987 	uxth.w	r9, r7
  402a3a:	fb0a cc18 	mls	ip, sl, r8, ip
  402a3e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402a42:	fb08 f309 	mul.w	r3, r8, r9
  402a46:	42ab      	cmp	r3, r5
  402a48:	d90a      	bls.n	402a60 <__udivmoddi4+0x6c>
  402a4a:	19ed      	adds	r5, r5, r7
  402a4c:	f108 32ff 	add.w	r2, r8, #4294967295
  402a50:	f080 8123 	bcs.w	402c9a <__udivmoddi4+0x2a6>
  402a54:	42ab      	cmp	r3, r5
  402a56:	f240 8120 	bls.w	402c9a <__udivmoddi4+0x2a6>
  402a5a:	f1a8 0802 	sub.w	r8, r8, #2
  402a5e:	443d      	add	r5, r7
  402a60:	1aed      	subs	r5, r5, r3
  402a62:	b2a4      	uxth	r4, r4
  402a64:	fbb5 f0fa 	udiv	r0, r5, sl
  402a68:	fb0a 5510 	mls	r5, sl, r0, r5
  402a6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402a70:	fb00 f909 	mul.w	r9, r0, r9
  402a74:	45a1      	cmp	r9, r4
  402a76:	d909      	bls.n	402a8c <__udivmoddi4+0x98>
  402a78:	19e4      	adds	r4, r4, r7
  402a7a:	f100 33ff 	add.w	r3, r0, #4294967295
  402a7e:	f080 810a 	bcs.w	402c96 <__udivmoddi4+0x2a2>
  402a82:	45a1      	cmp	r9, r4
  402a84:	f240 8107 	bls.w	402c96 <__udivmoddi4+0x2a2>
  402a88:	3802      	subs	r0, #2
  402a8a:	443c      	add	r4, r7
  402a8c:	eba4 0409 	sub.w	r4, r4, r9
  402a90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402a94:	2100      	movs	r1, #0
  402a96:	2e00      	cmp	r6, #0
  402a98:	d061      	beq.n	402b5e <__udivmoddi4+0x16a>
  402a9a:	fa24 f40e 	lsr.w	r4, r4, lr
  402a9e:	2300      	movs	r3, #0
  402aa0:	6034      	str	r4, [r6, #0]
  402aa2:	6073      	str	r3, [r6, #4]
  402aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402aa8:	428b      	cmp	r3, r1
  402aaa:	d907      	bls.n	402abc <__udivmoddi4+0xc8>
  402aac:	2e00      	cmp	r6, #0
  402aae:	d054      	beq.n	402b5a <__udivmoddi4+0x166>
  402ab0:	2100      	movs	r1, #0
  402ab2:	e886 0021 	stmia.w	r6, {r0, r5}
  402ab6:	4608      	mov	r0, r1
  402ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402abc:	fab3 f183 	clz	r1, r3
  402ac0:	2900      	cmp	r1, #0
  402ac2:	f040 808e 	bne.w	402be2 <__udivmoddi4+0x1ee>
  402ac6:	42ab      	cmp	r3, r5
  402ac8:	d302      	bcc.n	402ad0 <__udivmoddi4+0xdc>
  402aca:	4282      	cmp	r2, r0
  402acc:	f200 80fa 	bhi.w	402cc4 <__udivmoddi4+0x2d0>
  402ad0:	1a84      	subs	r4, r0, r2
  402ad2:	eb65 0503 	sbc.w	r5, r5, r3
  402ad6:	2001      	movs	r0, #1
  402ad8:	46ac      	mov	ip, r5
  402ada:	2e00      	cmp	r6, #0
  402adc:	d03f      	beq.n	402b5e <__udivmoddi4+0x16a>
  402ade:	e886 1010 	stmia.w	r6, {r4, ip}
  402ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ae6:	b912      	cbnz	r2, 402aee <__udivmoddi4+0xfa>
  402ae8:	2701      	movs	r7, #1
  402aea:	fbb7 f7f2 	udiv	r7, r7, r2
  402aee:	fab7 fe87 	clz	lr, r7
  402af2:	f1be 0f00 	cmp.w	lr, #0
  402af6:	d134      	bne.n	402b62 <__udivmoddi4+0x16e>
  402af8:	1beb      	subs	r3, r5, r7
  402afa:	0c3a      	lsrs	r2, r7, #16
  402afc:	fa1f fc87 	uxth.w	ip, r7
  402b00:	2101      	movs	r1, #1
  402b02:	fbb3 f8f2 	udiv	r8, r3, r2
  402b06:	0c25      	lsrs	r5, r4, #16
  402b08:	fb02 3318 	mls	r3, r2, r8, r3
  402b0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402b10:	fb0c f308 	mul.w	r3, ip, r8
  402b14:	42ab      	cmp	r3, r5
  402b16:	d907      	bls.n	402b28 <__udivmoddi4+0x134>
  402b18:	19ed      	adds	r5, r5, r7
  402b1a:	f108 30ff 	add.w	r0, r8, #4294967295
  402b1e:	d202      	bcs.n	402b26 <__udivmoddi4+0x132>
  402b20:	42ab      	cmp	r3, r5
  402b22:	f200 80d1 	bhi.w	402cc8 <__udivmoddi4+0x2d4>
  402b26:	4680      	mov	r8, r0
  402b28:	1aed      	subs	r5, r5, r3
  402b2a:	b2a3      	uxth	r3, r4
  402b2c:	fbb5 f0f2 	udiv	r0, r5, r2
  402b30:	fb02 5510 	mls	r5, r2, r0, r5
  402b34:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402b38:	fb0c fc00 	mul.w	ip, ip, r0
  402b3c:	45a4      	cmp	ip, r4
  402b3e:	d907      	bls.n	402b50 <__udivmoddi4+0x15c>
  402b40:	19e4      	adds	r4, r4, r7
  402b42:	f100 33ff 	add.w	r3, r0, #4294967295
  402b46:	d202      	bcs.n	402b4e <__udivmoddi4+0x15a>
  402b48:	45a4      	cmp	ip, r4
  402b4a:	f200 80b8 	bhi.w	402cbe <__udivmoddi4+0x2ca>
  402b4e:	4618      	mov	r0, r3
  402b50:	eba4 040c 	sub.w	r4, r4, ip
  402b54:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402b58:	e79d      	b.n	402a96 <__udivmoddi4+0xa2>
  402b5a:	4631      	mov	r1, r6
  402b5c:	4630      	mov	r0, r6
  402b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b62:	f1ce 0420 	rsb	r4, lr, #32
  402b66:	fa05 f30e 	lsl.w	r3, r5, lr
  402b6a:	fa07 f70e 	lsl.w	r7, r7, lr
  402b6e:	fa20 f804 	lsr.w	r8, r0, r4
  402b72:	0c3a      	lsrs	r2, r7, #16
  402b74:	fa25 f404 	lsr.w	r4, r5, r4
  402b78:	ea48 0803 	orr.w	r8, r8, r3
  402b7c:	fbb4 f1f2 	udiv	r1, r4, r2
  402b80:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402b84:	fb02 4411 	mls	r4, r2, r1, r4
  402b88:	fa1f fc87 	uxth.w	ip, r7
  402b8c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402b90:	fb01 f30c 	mul.w	r3, r1, ip
  402b94:	42ab      	cmp	r3, r5
  402b96:	fa00 f40e 	lsl.w	r4, r0, lr
  402b9a:	d909      	bls.n	402bb0 <__udivmoddi4+0x1bc>
  402b9c:	19ed      	adds	r5, r5, r7
  402b9e:	f101 30ff 	add.w	r0, r1, #4294967295
  402ba2:	f080 808a 	bcs.w	402cba <__udivmoddi4+0x2c6>
  402ba6:	42ab      	cmp	r3, r5
  402ba8:	f240 8087 	bls.w	402cba <__udivmoddi4+0x2c6>
  402bac:	3902      	subs	r1, #2
  402bae:	443d      	add	r5, r7
  402bb0:	1aeb      	subs	r3, r5, r3
  402bb2:	fa1f f588 	uxth.w	r5, r8
  402bb6:	fbb3 f0f2 	udiv	r0, r3, r2
  402bba:	fb02 3310 	mls	r3, r2, r0, r3
  402bbe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402bc2:	fb00 f30c 	mul.w	r3, r0, ip
  402bc6:	42ab      	cmp	r3, r5
  402bc8:	d907      	bls.n	402bda <__udivmoddi4+0x1e6>
  402bca:	19ed      	adds	r5, r5, r7
  402bcc:	f100 38ff 	add.w	r8, r0, #4294967295
  402bd0:	d26f      	bcs.n	402cb2 <__udivmoddi4+0x2be>
  402bd2:	42ab      	cmp	r3, r5
  402bd4:	d96d      	bls.n	402cb2 <__udivmoddi4+0x2be>
  402bd6:	3802      	subs	r0, #2
  402bd8:	443d      	add	r5, r7
  402bda:	1aeb      	subs	r3, r5, r3
  402bdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402be0:	e78f      	b.n	402b02 <__udivmoddi4+0x10e>
  402be2:	f1c1 0720 	rsb	r7, r1, #32
  402be6:	fa22 f807 	lsr.w	r8, r2, r7
  402bea:	408b      	lsls	r3, r1
  402bec:	fa05 f401 	lsl.w	r4, r5, r1
  402bf0:	ea48 0303 	orr.w	r3, r8, r3
  402bf4:	fa20 fe07 	lsr.w	lr, r0, r7
  402bf8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402bfc:	40fd      	lsrs	r5, r7
  402bfe:	ea4e 0e04 	orr.w	lr, lr, r4
  402c02:	fbb5 f9fc 	udiv	r9, r5, ip
  402c06:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402c0a:	fb0c 5519 	mls	r5, ip, r9, r5
  402c0e:	fa1f f883 	uxth.w	r8, r3
  402c12:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402c16:	fb09 f408 	mul.w	r4, r9, r8
  402c1a:	42ac      	cmp	r4, r5
  402c1c:	fa02 f201 	lsl.w	r2, r2, r1
  402c20:	fa00 fa01 	lsl.w	sl, r0, r1
  402c24:	d908      	bls.n	402c38 <__udivmoddi4+0x244>
  402c26:	18ed      	adds	r5, r5, r3
  402c28:	f109 30ff 	add.w	r0, r9, #4294967295
  402c2c:	d243      	bcs.n	402cb6 <__udivmoddi4+0x2c2>
  402c2e:	42ac      	cmp	r4, r5
  402c30:	d941      	bls.n	402cb6 <__udivmoddi4+0x2c2>
  402c32:	f1a9 0902 	sub.w	r9, r9, #2
  402c36:	441d      	add	r5, r3
  402c38:	1b2d      	subs	r5, r5, r4
  402c3a:	fa1f fe8e 	uxth.w	lr, lr
  402c3e:	fbb5 f0fc 	udiv	r0, r5, ip
  402c42:	fb0c 5510 	mls	r5, ip, r0, r5
  402c46:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402c4a:	fb00 f808 	mul.w	r8, r0, r8
  402c4e:	45a0      	cmp	r8, r4
  402c50:	d907      	bls.n	402c62 <__udivmoddi4+0x26e>
  402c52:	18e4      	adds	r4, r4, r3
  402c54:	f100 35ff 	add.w	r5, r0, #4294967295
  402c58:	d229      	bcs.n	402cae <__udivmoddi4+0x2ba>
  402c5a:	45a0      	cmp	r8, r4
  402c5c:	d927      	bls.n	402cae <__udivmoddi4+0x2ba>
  402c5e:	3802      	subs	r0, #2
  402c60:	441c      	add	r4, r3
  402c62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402c66:	eba4 0408 	sub.w	r4, r4, r8
  402c6a:	fba0 8902 	umull	r8, r9, r0, r2
  402c6e:	454c      	cmp	r4, r9
  402c70:	46c6      	mov	lr, r8
  402c72:	464d      	mov	r5, r9
  402c74:	d315      	bcc.n	402ca2 <__udivmoddi4+0x2ae>
  402c76:	d012      	beq.n	402c9e <__udivmoddi4+0x2aa>
  402c78:	b156      	cbz	r6, 402c90 <__udivmoddi4+0x29c>
  402c7a:	ebba 030e 	subs.w	r3, sl, lr
  402c7e:	eb64 0405 	sbc.w	r4, r4, r5
  402c82:	fa04 f707 	lsl.w	r7, r4, r7
  402c86:	40cb      	lsrs	r3, r1
  402c88:	431f      	orrs	r7, r3
  402c8a:	40cc      	lsrs	r4, r1
  402c8c:	6037      	str	r7, [r6, #0]
  402c8e:	6074      	str	r4, [r6, #4]
  402c90:	2100      	movs	r1, #0
  402c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c96:	4618      	mov	r0, r3
  402c98:	e6f8      	b.n	402a8c <__udivmoddi4+0x98>
  402c9a:	4690      	mov	r8, r2
  402c9c:	e6e0      	b.n	402a60 <__udivmoddi4+0x6c>
  402c9e:	45c2      	cmp	sl, r8
  402ca0:	d2ea      	bcs.n	402c78 <__udivmoddi4+0x284>
  402ca2:	ebb8 0e02 	subs.w	lr, r8, r2
  402ca6:	eb69 0503 	sbc.w	r5, r9, r3
  402caa:	3801      	subs	r0, #1
  402cac:	e7e4      	b.n	402c78 <__udivmoddi4+0x284>
  402cae:	4628      	mov	r0, r5
  402cb0:	e7d7      	b.n	402c62 <__udivmoddi4+0x26e>
  402cb2:	4640      	mov	r0, r8
  402cb4:	e791      	b.n	402bda <__udivmoddi4+0x1e6>
  402cb6:	4681      	mov	r9, r0
  402cb8:	e7be      	b.n	402c38 <__udivmoddi4+0x244>
  402cba:	4601      	mov	r1, r0
  402cbc:	e778      	b.n	402bb0 <__udivmoddi4+0x1bc>
  402cbe:	3802      	subs	r0, #2
  402cc0:	443c      	add	r4, r7
  402cc2:	e745      	b.n	402b50 <__udivmoddi4+0x15c>
  402cc4:	4608      	mov	r0, r1
  402cc6:	e708      	b.n	402ada <__udivmoddi4+0xe6>
  402cc8:	f1a8 0802 	sub.w	r8, r8, #2
  402ccc:	443d      	add	r5, r7
  402cce:	e72b      	b.n	402b28 <__udivmoddi4+0x134>

00402cd0 <__aeabi_idiv0>:
  402cd0:	4770      	bx	lr
  402cd2:	bf00      	nop

00402cd4 <__libc_init_array>:
  402cd4:	b570      	push	{r4, r5, r6, lr}
  402cd6:	4e0f      	ldr	r6, [pc, #60]	; (402d14 <__libc_init_array+0x40>)
  402cd8:	4d0f      	ldr	r5, [pc, #60]	; (402d18 <__libc_init_array+0x44>)
  402cda:	1b76      	subs	r6, r6, r5
  402cdc:	10b6      	asrs	r6, r6, #2
  402cde:	bf18      	it	ne
  402ce0:	2400      	movne	r4, #0
  402ce2:	d005      	beq.n	402cf0 <__libc_init_array+0x1c>
  402ce4:	3401      	adds	r4, #1
  402ce6:	f855 3b04 	ldr.w	r3, [r5], #4
  402cea:	4798      	blx	r3
  402cec:	42a6      	cmp	r6, r4
  402cee:	d1f9      	bne.n	402ce4 <__libc_init_array+0x10>
  402cf0:	4e0a      	ldr	r6, [pc, #40]	; (402d1c <__libc_init_array+0x48>)
  402cf2:	4d0b      	ldr	r5, [pc, #44]	; (402d20 <__libc_init_array+0x4c>)
  402cf4:	1b76      	subs	r6, r6, r5
  402cf6:	f005 f87b 	bl	407df0 <_init>
  402cfa:	10b6      	asrs	r6, r6, #2
  402cfc:	bf18      	it	ne
  402cfe:	2400      	movne	r4, #0
  402d00:	d006      	beq.n	402d10 <__libc_init_array+0x3c>
  402d02:	3401      	adds	r4, #1
  402d04:	f855 3b04 	ldr.w	r3, [r5], #4
  402d08:	4798      	blx	r3
  402d0a:	42a6      	cmp	r6, r4
  402d0c:	d1f9      	bne.n	402d02 <__libc_init_array+0x2e>
  402d0e:	bd70      	pop	{r4, r5, r6, pc}
  402d10:	bd70      	pop	{r4, r5, r6, pc}
  402d12:	bf00      	nop
  402d14:	00407dfc 	.word	0x00407dfc
  402d18:	00407dfc 	.word	0x00407dfc
  402d1c:	00407e04 	.word	0x00407e04
  402d20:	00407dfc 	.word	0x00407dfc

00402d24 <memset>:
  402d24:	b470      	push	{r4, r5, r6}
  402d26:	0786      	lsls	r6, r0, #30
  402d28:	d046      	beq.n	402db8 <memset+0x94>
  402d2a:	1e54      	subs	r4, r2, #1
  402d2c:	2a00      	cmp	r2, #0
  402d2e:	d041      	beq.n	402db4 <memset+0x90>
  402d30:	b2ca      	uxtb	r2, r1
  402d32:	4603      	mov	r3, r0
  402d34:	e002      	b.n	402d3c <memset+0x18>
  402d36:	f114 34ff 	adds.w	r4, r4, #4294967295
  402d3a:	d33b      	bcc.n	402db4 <memset+0x90>
  402d3c:	f803 2b01 	strb.w	r2, [r3], #1
  402d40:	079d      	lsls	r5, r3, #30
  402d42:	d1f8      	bne.n	402d36 <memset+0x12>
  402d44:	2c03      	cmp	r4, #3
  402d46:	d92e      	bls.n	402da6 <memset+0x82>
  402d48:	b2cd      	uxtb	r5, r1
  402d4a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402d4e:	2c0f      	cmp	r4, #15
  402d50:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402d54:	d919      	bls.n	402d8a <memset+0x66>
  402d56:	f103 0210 	add.w	r2, r3, #16
  402d5a:	4626      	mov	r6, r4
  402d5c:	3e10      	subs	r6, #16
  402d5e:	2e0f      	cmp	r6, #15
  402d60:	f842 5c10 	str.w	r5, [r2, #-16]
  402d64:	f842 5c0c 	str.w	r5, [r2, #-12]
  402d68:	f842 5c08 	str.w	r5, [r2, #-8]
  402d6c:	f842 5c04 	str.w	r5, [r2, #-4]
  402d70:	f102 0210 	add.w	r2, r2, #16
  402d74:	d8f2      	bhi.n	402d5c <memset+0x38>
  402d76:	f1a4 0210 	sub.w	r2, r4, #16
  402d7a:	f022 020f 	bic.w	r2, r2, #15
  402d7e:	f004 040f 	and.w	r4, r4, #15
  402d82:	3210      	adds	r2, #16
  402d84:	2c03      	cmp	r4, #3
  402d86:	4413      	add	r3, r2
  402d88:	d90d      	bls.n	402da6 <memset+0x82>
  402d8a:	461e      	mov	r6, r3
  402d8c:	4622      	mov	r2, r4
  402d8e:	3a04      	subs	r2, #4
  402d90:	2a03      	cmp	r2, #3
  402d92:	f846 5b04 	str.w	r5, [r6], #4
  402d96:	d8fa      	bhi.n	402d8e <memset+0x6a>
  402d98:	1f22      	subs	r2, r4, #4
  402d9a:	f022 0203 	bic.w	r2, r2, #3
  402d9e:	3204      	adds	r2, #4
  402da0:	4413      	add	r3, r2
  402da2:	f004 0403 	and.w	r4, r4, #3
  402da6:	b12c      	cbz	r4, 402db4 <memset+0x90>
  402da8:	b2c9      	uxtb	r1, r1
  402daa:	441c      	add	r4, r3
  402dac:	f803 1b01 	strb.w	r1, [r3], #1
  402db0:	429c      	cmp	r4, r3
  402db2:	d1fb      	bne.n	402dac <memset+0x88>
  402db4:	bc70      	pop	{r4, r5, r6}
  402db6:	4770      	bx	lr
  402db8:	4614      	mov	r4, r2
  402dba:	4603      	mov	r3, r0
  402dbc:	e7c2      	b.n	402d44 <memset+0x20>
  402dbe:	bf00      	nop

00402dc0 <sprintf>:
  402dc0:	b40e      	push	{r1, r2, r3}
  402dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  402dc4:	b09c      	sub	sp, #112	; 0x70
  402dc6:	ab21      	add	r3, sp, #132	; 0x84
  402dc8:	490f      	ldr	r1, [pc, #60]	; (402e08 <sprintf+0x48>)
  402dca:	f853 2b04 	ldr.w	r2, [r3], #4
  402dce:	9301      	str	r3, [sp, #4]
  402dd0:	4605      	mov	r5, r0
  402dd2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  402dd6:	6808      	ldr	r0, [r1, #0]
  402dd8:	9502      	str	r5, [sp, #8]
  402dda:	f44f 7702 	mov.w	r7, #520	; 0x208
  402dde:	f64f 76ff 	movw	r6, #65535	; 0xffff
  402de2:	a902      	add	r1, sp, #8
  402de4:	9506      	str	r5, [sp, #24]
  402de6:	f8ad 7014 	strh.w	r7, [sp, #20]
  402dea:	9404      	str	r4, [sp, #16]
  402dec:	9407      	str	r4, [sp, #28]
  402dee:	f8ad 6016 	strh.w	r6, [sp, #22]
  402df2:	f000 facd 	bl	403390 <_svfprintf_r>
  402df6:	9b02      	ldr	r3, [sp, #8]
  402df8:	2200      	movs	r2, #0
  402dfa:	701a      	strb	r2, [r3, #0]
  402dfc:	b01c      	add	sp, #112	; 0x70
  402dfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  402e02:	b003      	add	sp, #12
  402e04:	4770      	bx	lr
  402e06:	bf00      	nop
  402e08:	200061b8 	.word	0x200061b8

00402e0c <strcpy>:
  402e0c:	ea80 0201 	eor.w	r2, r0, r1
  402e10:	4684      	mov	ip, r0
  402e12:	f012 0f03 	tst.w	r2, #3
  402e16:	d14f      	bne.n	402eb8 <strcpy+0xac>
  402e18:	f011 0f03 	tst.w	r1, #3
  402e1c:	d132      	bne.n	402e84 <strcpy+0x78>
  402e1e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  402e22:	f011 0f04 	tst.w	r1, #4
  402e26:	f851 3b04 	ldr.w	r3, [r1], #4
  402e2a:	d00b      	beq.n	402e44 <strcpy+0x38>
  402e2c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402e30:	439a      	bics	r2, r3
  402e32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e36:	bf04      	itt	eq
  402e38:	f84c 3b04 	streq.w	r3, [ip], #4
  402e3c:	f851 3b04 	ldreq.w	r3, [r1], #4
  402e40:	d116      	bne.n	402e70 <strcpy+0x64>
  402e42:	bf00      	nop
  402e44:	f851 4b04 	ldr.w	r4, [r1], #4
  402e48:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402e4c:	439a      	bics	r2, r3
  402e4e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e52:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  402e56:	d10b      	bne.n	402e70 <strcpy+0x64>
  402e58:	f84c 3b04 	str.w	r3, [ip], #4
  402e5c:	43a2      	bics	r2, r4
  402e5e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402e62:	bf04      	itt	eq
  402e64:	f851 3b04 	ldreq.w	r3, [r1], #4
  402e68:	f84c 4b04 	streq.w	r4, [ip], #4
  402e6c:	d0ea      	beq.n	402e44 <strcpy+0x38>
  402e6e:	4623      	mov	r3, r4
  402e70:	f80c 3b01 	strb.w	r3, [ip], #1
  402e74:	f013 0fff 	tst.w	r3, #255	; 0xff
  402e78:	ea4f 2333 	mov.w	r3, r3, ror #8
  402e7c:	d1f8      	bne.n	402e70 <strcpy+0x64>
  402e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402e82:	4770      	bx	lr
  402e84:	f011 0f01 	tst.w	r1, #1
  402e88:	d006      	beq.n	402e98 <strcpy+0x8c>
  402e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
  402e8e:	f80c 2b01 	strb.w	r2, [ip], #1
  402e92:	2a00      	cmp	r2, #0
  402e94:	bf08      	it	eq
  402e96:	4770      	bxeq	lr
  402e98:	f011 0f02 	tst.w	r1, #2
  402e9c:	d0bf      	beq.n	402e1e <strcpy+0x12>
  402e9e:	f831 2b02 	ldrh.w	r2, [r1], #2
  402ea2:	f012 0fff 	tst.w	r2, #255	; 0xff
  402ea6:	bf16      	itet	ne
  402ea8:	f82c 2b02 	strhne.w	r2, [ip], #2
  402eac:	f88c 2000 	strbeq.w	r2, [ip]
  402eb0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  402eb4:	d1b3      	bne.n	402e1e <strcpy+0x12>
  402eb6:	4770      	bx	lr
  402eb8:	f811 2b01 	ldrb.w	r2, [r1], #1
  402ebc:	f80c 2b01 	strb.w	r2, [ip], #1
  402ec0:	2a00      	cmp	r2, #0
  402ec2:	d1f9      	bne.n	402eb8 <strcpy+0xac>
  402ec4:	4770      	bx	lr
  402ec6:	bf00      	nop

00402ec8 <critical_factorization>:
  402ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ecc:	f04f 0e01 	mov.w	lr, #1
  402ed0:	4674      	mov	r4, lr
  402ed2:	2500      	movs	r5, #0
  402ed4:	f04f 36ff 	mov.w	r6, #4294967295
  402ed8:	192b      	adds	r3, r5, r4
  402eda:	428b      	cmp	r3, r1
  402edc:	eb00 0706 	add.w	r7, r0, r6
  402ee0:	d20d      	bcs.n	402efe <critical_factorization+0x36>
  402ee2:	5d3f      	ldrb	r7, [r7, r4]
  402ee4:	f810 c003 	ldrb.w	ip, [r0, r3]
  402ee8:	45bc      	cmp	ip, r7
  402eea:	d22d      	bcs.n	402f48 <critical_factorization+0x80>
  402eec:	461d      	mov	r5, r3
  402eee:	2401      	movs	r4, #1
  402ef0:	eba3 0e06 	sub.w	lr, r3, r6
  402ef4:	192b      	adds	r3, r5, r4
  402ef6:	428b      	cmp	r3, r1
  402ef8:	eb00 0706 	add.w	r7, r0, r6
  402efc:	d3f1      	bcc.n	402ee2 <critical_factorization+0x1a>
  402efe:	f04f 0801 	mov.w	r8, #1
  402f02:	f8c2 e000 	str.w	lr, [r2]
  402f06:	4644      	mov	r4, r8
  402f08:	2500      	movs	r5, #0
  402f0a:	f04f 37ff 	mov.w	r7, #4294967295
  402f0e:	192b      	adds	r3, r5, r4
  402f10:	4299      	cmp	r1, r3
  402f12:	eb00 0e07 	add.w	lr, r0, r7
  402f16:	d90e      	bls.n	402f36 <critical_factorization+0x6e>
  402f18:	f81e e004 	ldrb.w	lr, [lr, r4]
  402f1c:	f810 c003 	ldrb.w	ip, [r0, r3]
  402f20:	45f4      	cmp	ip, lr
  402f22:	d918      	bls.n	402f56 <critical_factorization+0x8e>
  402f24:	461d      	mov	r5, r3
  402f26:	2401      	movs	r4, #1
  402f28:	eba3 0807 	sub.w	r8, r3, r7
  402f2c:	192b      	adds	r3, r5, r4
  402f2e:	4299      	cmp	r1, r3
  402f30:	eb00 0e07 	add.w	lr, r0, r7
  402f34:	d8f0      	bhi.n	402f18 <critical_factorization+0x50>
  402f36:	3701      	adds	r7, #1
  402f38:	1c70      	adds	r0, r6, #1
  402f3a:	4287      	cmp	r7, r0
  402f3c:	bf24      	itt	cs
  402f3e:	f8c2 8000 	strcs.w	r8, [r2]
  402f42:	4638      	movcs	r0, r7
  402f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f48:	d00c      	beq.n	402f64 <critical_factorization+0x9c>
  402f4a:	f04f 0e01 	mov.w	lr, #1
  402f4e:	462e      	mov	r6, r5
  402f50:	4674      	mov	r4, lr
  402f52:	4475      	add	r5, lr
  402f54:	e7c0      	b.n	402ed8 <critical_factorization+0x10>
  402f56:	d00b      	beq.n	402f70 <critical_factorization+0xa8>
  402f58:	f04f 0801 	mov.w	r8, #1
  402f5c:	462f      	mov	r7, r5
  402f5e:	4644      	mov	r4, r8
  402f60:	4445      	add	r5, r8
  402f62:	e7d4      	b.n	402f0e <critical_factorization+0x46>
  402f64:	4574      	cmp	r4, lr
  402f66:	bf12      	itee	ne
  402f68:	3401      	addne	r4, #1
  402f6a:	461d      	moveq	r5, r3
  402f6c:	2401      	moveq	r4, #1
  402f6e:	e7b3      	b.n	402ed8 <critical_factorization+0x10>
  402f70:	4544      	cmp	r4, r8
  402f72:	bf12      	itee	ne
  402f74:	3401      	addne	r4, #1
  402f76:	461d      	moveq	r5, r3
  402f78:	2401      	moveq	r4, #1
  402f7a:	e7c8      	b.n	402f0e <critical_factorization+0x46>

00402f7c <two_way_long_needle>:
  402f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f80:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  402f84:	4616      	mov	r6, r2
  402f86:	4605      	mov	r5, r0
  402f88:	468b      	mov	fp, r1
  402f8a:	4610      	mov	r0, r2
  402f8c:	4619      	mov	r1, r3
  402f8e:	aa03      	add	r2, sp, #12
  402f90:	461c      	mov	r4, r3
  402f92:	f7ff ff99 	bl	402ec8 <critical_factorization>
  402f96:	ab03      	add	r3, sp, #12
  402f98:	4681      	mov	r9, r0
  402f9a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  402f9e:	f843 4f04 	str.w	r4, [r3, #4]!
  402fa2:	4293      	cmp	r3, r2
  402fa4:	d1fb      	bne.n	402f9e <two_way_long_needle+0x22>
  402fa6:	b14c      	cbz	r4, 402fbc <two_way_long_needle+0x40>
  402fa8:	1e63      	subs	r3, r4, #1
  402faa:	1e72      	subs	r2, r6, #1
  402fac:	a804      	add	r0, sp, #16
  402fae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402fb2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  402fb6:	f113 33ff 	adds.w	r3, r3, #4294967295
  402fba:	d2f8      	bcs.n	402fae <two_way_long_needle+0x32>
  402fbc:	9903      	ldr	r1, [sp, #12]
  402fbe:	464a      	mov	r2, r9
  402fc0:	4431      	add	r1, r6
  402fc2:	4630      	mov	r0, r6
  402fc4:	f002 ff14 	bl	405df0 <memcmp>
  402fc8:	2800      	cmp	r0, #0
  402fca:	d16f      	bne.n	4030ac <two_way_long_needle+0x130>
  402fcc:	f109 33ff 	add.w	r3, r9, #4294967295
  402fd0:	9300      	str	r3, [sp, #0]
  402fd2:	18f3      	adds	r3, r6, r3
  402fd4:	4682      	mov	sl, r0
  402fd6:	9301      	str	r3, [sp, #4]
  402fd8:	4623      	mov	r3, r4
  402fda:	4680      	mov	r8, r0
  402fdc:	4654      	mov	r4, sl
  402fde:	4658      	mov	r0, fp
  402fe0:	469a      	mov	sl, r3
  402fe2:	eb08 070a 	add.w	r7, r8, sl
  402fe6:	1a3a      	subs	r2, r7, r0
  402fe8:	2100      	movs	r1, #0
  402fea:	4428      	add	r0, r5
  402fec:	f002 feb0 	bl	405d50 <memchr>
  402ff0:	2800      	cmp	r0, #0
  402ff2:	d156      	bne.n	4030a2 <two_way_long_needle+0x126>
  402ff4:	2f00      	cmp	r7, #0
  402ff6:	d054      	beq.n	4030a2 <two_way_long_needle+0x126>
  402ff8:	19eb      	adds	r3, r5, r7
  402ffa:	aa04      	add	r2, sp, #16
  402ffc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403004:	b14b      	cbz	r3, 40301a <two_way_long_needle+0x9e>
  403006:	b124      	cbz	r4, 403012 <two_way_long_needle+0x96>
  403008:	9a03      	ldr	r2, [sp, #12]
  40300a:	4293      	cmp	r3, r2
  40300c:	d201      	bcs.n	403012 <two_way_long_needle+0x96>
  40300e:	ebaa 0302 	sub.w	r3, sl, r2
  403012:	4498      	add	r8, r3
  403014:	2400      	movs	r4, #0
  403016:	4638      	mov	r0, r7
  403018:	e7e3      	b.n	402fe2 <two_way_long_needle+0x66>
  40301a:	454c      	cmp	r4, r9
  40301c:	4623      	mov	r3, r4
  40301e:	f10a 3eff 	add.w	lr, sl, #4294967295
  403022:	bf38      	it	cc
  403024:	464b      	movcc	r3, r9
  403026:	4573      	cmp	r3, lr
  403028:	d213      	bcs.n	403052 <two_way_long_needle+0xd6>
  40302a:	eb08 0203 	add.w	r2, r8, r3
  40302e:	f816 c003 	ldrb.w	ip, [r6, r3]
  403032:	5ca8      	ldrb	r0, [r5, r2]
  403034:	4584      	cmp	ip, r0
  403036:	442a      	add	r2, r5
  403038:	eb06 0103 	add.w	r1, r6, r3
  40303c:	d006      	beq.n	40304c <two_way_long_needle+0xd0>
  40303e:	e02c      	b.n	40309a <two_way_long_needle+0x11e>
  403040:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403044:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403048:	4584      	cmp	ip, r0
  40304a:	d126      	bne.n	40309a <two_way_long_needle+0x11e>
  40304c:	3301      	adds	r3, #1
  40304e:	4573      	cmp	r3, lr
  403050:	d3f6      	bcc.n	403040 <two_way_long_needle+0xc4>
  403052:	454c      	cmp	r4, r9
  403054:	9900      	ldr	r1, [sp, #0]
  403056:	f080 8089 	bcs.w	40316c <two_way_long_needle+0x1f0>
  40305a:	9b00      	ldr	r3, [sp, #0]
  40305c:	eb08 0203 	add.w	r2, r8, r3
  403060:	9b01      	ldr	r3, [sp, #4]
  403062:	5ca8      	ldrb	r0, [r5, r2]
  403064:	781b      	ldrb	r3, [r3, #0]
  403066:	4298      	cmp	r0, r3
  403068:	442a      	add	r2, r5
  40306a:	d17f      	bne.n	40316c <two_way_long_needle+0x1f0>
  40306c:	9801      	ldr	r0, [sp, #4]
  40306e:	f104 3bff 	add.w	fp, r4, #4294967295
  403072:	e006      	b.n	403082 <two_way_long_needle+0x106>
  403074:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403078:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40307c:	45f4      	cmp	ip, lr
  40307e:	d103      	bne.n	403088 <two_way_long_needle+0x10c>
  403080:	4619      	mov	r1, r3
  403082:	1e4b      	subs	r3, r1, #1
  403084:	459b      	cmp	fp, r3
  403086:	d1f5      	bne.n	403074 <two_way_long_needle+0xf8>
  403088:	3401      	adds	r4, #1
  40308a:	428c      	cmp	r4, r1
  40308c:	d870      	bhi.n	403170 <two_way_long_needle+0x1f4>
  40308e:	9c03      	ldr	r4, [sp, #12]
  403090:	4638      	mov	r0, r7
  403092:	44a0      	add	r8, r4
  403094:	ebaa 0404 	sub.w	r4, sl, r4
  403098:	e7a3      	b.n	402fe2 <two_way_long_needle+0x66>
  40309a:	f1c9 0201 	rsb	r2, r9, #1
  40309e:	4490      	add	r8, r2
  4030a0:	e7b7      	b.n	403012 <two_way_long_needle+0x96>
  4030a2:	2000      	movs	r0, #0
  4030a4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4030a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ac:	eba4 0309 	sub.w	r3, r4, r9
  4030b0:	454b      	cmp	r3, r9
  4030b2:	bf38      	it	cc
  4030b4:	464b      	movcc	r3, r9
  4030b6:	3301      	adds	r3, #1
  4030b8:	f109 38ff 	add.w	r8, r9, #4294967295
  4030bc:	9303      	str	r3, [sp, #12]
  4030be:	eb06 0308 	add.w	r3, r6, r8
  4030c2:	4658      	mov	r0, fp
  4030c4:	f04f 0a00 	mov.w	sl, #0
  4030c8:	46cb      	mov	fp, r9
  4030ca:	4699      	mov	r9, r3
  4030cc:	eb0a 0704 	add.w	r7, sl, r4
  4030d0:	1a3a      	subs	r2, r7, r0
  4030d2:	2100      	movs	r1, #0
  4030d4:	4428      	add	r0, r5
  4030d6:	f002 fe3b 	bl	405d50 <memchr>
  4030da:	2800      	cmp	r0, #0
  4030dc:	d1e1      	bne.n	4030a2 <two_way_long_needle+0x126>
  4030de:	2f00      	cmp	r7, #0
  4030e0:	d0df      	beq.n	4030a2 <two_way_long_needle+0x126>
  4030e2:	19eb      	adds	r3, r5, r7
  4030e4:	aa04      	add	r2, sp, #16
  4030e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4030ee:	bba3      	cbnz	r3, 40315a <two_way_long_needle+0x1de>
  4030f0:	1e61      	subs	r1, r4, #1
  4030f2:	458b      	cmp	fp, r1
  4030f4:	d215      	bcs.n	403122 <two_way_long_needle+0x1a6>
  4030f6:	eb0a 020b 	add.w	r2, sl, fp
  4030fa:	f816 300b 	ldrb.w	r3, [r6, fp]
  4030fe:	f815 e002 	ldrb.w	lr, [r5, r2]
  403102:	459e      	cmp	lr, r3
  403104:	442a      	add	r2, r5
  403106:	eb06 000b 	add.w	r0, r6, fp
  40310a:	465b      	mov	r3, fp
  40310c:	d006      	beq.n	40311c <two_way_long_needle+0x1a0>
  40310e:	e027      	b.n	403160 <two_way_long_needle+0x1e4>
  403110:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403114:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  403118:	45f4      	cmp	ip, lr
  40311a:	d121      	bne.n	403160 <two_way_long_needle+0x1e4>
  40311c:	3301      	adds	r3, #1
  40311e:	428b      	cmp	r3, r1
  403120:	d3f6      	bcc.n	403110 <two_way_long_needle+0x194>
  403122:	f1b8 3fff 	cmp.w	r8, #4294967295
  403126:	d011      	beq.n	40314c <two_way_long_needle+0x1d0>
  403128:	eb0a 0208 	add.w	r2, sl, r8
  40312c:	f899 1000 	ldrb.w	r1, [r9]
  403130:	5cab      	ldrb	r3, [r5, r2]
  403132:	4299      	cmp	r1, r3
  403134:	442a      	add	r2, r5
  403136:	d10f      	bne.n	403158 <two_way_long_needle+0x1dc>
  403138:	464b      	mov	r3, r9
  40313a:	e005      	b.n	403148 <two_way_long_needle+0x1cc>
  40313c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403140:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403144:	4288      	cmp	r0, r1
  403146:	d107      	bne.n	403158 <two_way_long_needle+0x1dc>
  403148:	42b3      	cmp	r3, r6
  40314a:	d1f7      	bne.n	40313c <two_way_long_needle+0x1c0>
  40314c:	eb05 000a 	add.w	r0, r5, sl
  403150:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403158:	9b03      	ldr	r3, [sp, #12]
  40315a:	449a      	add	sl, r3
  40315c:	4638      	mov	r0, r7
  40315e:	e7b5      	b.n	4030cc <two_way_long_needle+0x150>
  403160:	f1cb 0201 	rsb	r2, fp, #1
  403164:	4492      	add	sl, r2
  403166:	449a      	add	sl, r3
  403168:	4638      	mov	r0, r7
  40316a:	e7af      	b.n	4030cc <two_way_long_needle+0x150>
  40316c:	4649      	mov	r1, r9
  40316e:	e78b      	b.n	403088 <two_way_long_needle+0x10c>
  403170:	eb05 0008 	add.w	r0, r5, r8
  403174:	e796      	b.n	4030a4 <two_way_long_needle+0x128>
  403176:	bf00      	nop

00403178 <strstr>:
  403178:	7802      	ldrb	r2, [r0, #0]
  40317a:	2a00      	cmp	r2, #0
  40317c:	f000 8101 	beq.w	403382 <strstr+0x20a>
  403180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403184:	f891 8000 	ldrb.w	r8, [r1]
  403188:	b085      	sub	sp, #20
  40318a:	4644      	mov	r4, r8
  40318c:	f1b8 0f00 	cmp.w	r8, #0
  403190:	d016      	beq.n	4031c0 <strstr+0x48>
  403192:	4686      	mov	lr, r0
  403194:	f101 0c01 	add.w	ip, r1, #1
  403198:	2701      	movs	r7, #1
  40319a:	e003      	b.n	4031a4 <strstr+0x2c>
  40319c:	f813 4b01 	ldrb.w	r4, [r3], #1
  4031a0:	b16c      	cbz	r4, 4031be <strstr+0x46>
  4031a2:	469c      	mov	ip, r3
  4031a4:	42a2      	cmp	r2, r4
  4031a6:	bf14      	ite	ne
  4031a8:	2700      	movne	r7, #0
  4031aa:	f007 0701 	andeq.w	r7, r7, #1
  4031ae:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4031b2:	4663      	mov	r3, ip
  4031b4:	2a00      	cmp	r2, #0
  4031b6:	d1f1      	bne.n	40319c <strstr+0x24>
  4031b8:	f89c 3000 	ldrb.w	r3, [ip]
  4031bc:	b9fb      	cbnz	r3, 4031fe <strstr+0x86>
  4031be:	b117      	cbz	r7, 4031c6 <strstr+0x4e>
  4031c0:	b005      	add	sp, #20
  4031c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031c6:	460e      	mov	r6, r1
  4031c8:	4605      	mov	r5, r0
  4031ca:	4641      	mov	r1, r8
  4031cc:	3001      	adds	r0, #1
  4031ce:	ebac 0406 	sub.w	r4, ip, r6
  4031d2:	f003 f9ef 	bl	4065b4 <strchr>
  4031d6:	4607      	mov	r7, r0
  4031d8:	b188      	cbz	r0, 4031fe <strstr+0x86>
  4031da:	2c01      	cmp	r4, #1
  4031dc:	d0f0      	beq.n	4031c0 <strstr+0x48>
  4031de:	1928      	adds	r0, r5, r4
  4031e0:	4287      	cmp	r7, r0
  4031e2:	bf94      	ite	ls
  4031e4:	1bc1      	subls	r1, r0, r7
  4031e6:	2101      	movhi	r1, #1
  4031e8:	2c1f      	cmp	r4, #31
  4031ea:	468b      	mov	fp, r1
  4031ec:	d90b      	bls.n	403206 <strstr+0x8e>
  4031ee:	4623      	mov	r3, r4
  4031f0:	4632      	mov	r2, r6
  4031f2:	4638      	mov	r0, r7
  4031f4:	f7ff fec2 	bl	402f7c <two_way_long_needle>
  4031f8:	b005      	add	sp, #20
  4031fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031fe:	2000      	movs	r0, #0
  403200:	b005      	add	sp, #20
  403202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403206:	aa03      	add	r2, sp, #12
  403208:	4621      	mov	r1, r4
  40320a:	4630      	mov	r0, r6
  40320c:	f7ff fe5c 	bl	402ec8 <critical_factorization>
  403210:	9903      	ldr	r1, [sp, #12]
  403212:	4680      	mov	r8, r0
  403214:	4602      	mov	r2, r0
  403216:	4431      	add	r1, r6
  403218:	4630      	mov	r0, r6
  40321a:	f002 fde9 	bl	405df0 <memcmp>
  40321e:	2800      	cmp	r0, #0
  403220:	d157      	bne.n	4032d2 <strstr+0x15a>
  403222:	f108 33ff 	add.w	r3, r8, #4294967295
  403226:	9300      	str	r3, [sp, #0]
  403228:	18f3      	adds	r3, r6, r3
  40322a:	4681      	mov	r9, r0
  40322c:	4605      	mov	r5, r0
  40322e:	9301      	str	r3, [sp, #4]
  403230:	4658      	mov	r0, fp
  403232:	46b2      	mov	sl, r6
  403234:	1966      	adds	r6, r4, r5
  403236:	1a32      	subs	r2, r6, r0
  403238:	2100      	movs	r1, #0
  40323a:	4438      	add	r0, r7
  40323c:	f002 fd88 	bl	405d50 <memchr>
  403240:	2800      	cmp	r0, #0
  403242:	d1dc      	bne.n	4031fe <strstr+0x86>
  403244:	2e00      	cmp	r6, #0
  403246:	d0da      	beq.n	4031fe <strstr+0x86>
  403248:	45c8      	cmp	r8, r9
  40324a:	4643      	mov	r3, r8
  40324c:	bf38      	it	cc
  40324e:	464b      	movcc	r3, r9
  403250:	429c      	cmp	r4, r3
  403252:	d912      	bls.n	40327a <strstr+0x102>
  403254:	195a      	adds	r2, r3, r5
  403256:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40325a:	5cb8      	ldrb	r0, [r7, r2]
  40325c:	4281      	cmp	r1, r0
  40325e:	443a      	add	r2, r7
  403260:	eb0a 0e03 	add.w	lr, sl, r3
  403264:	d006      	beq.n	403274 <strstr+0xfc>
  403266:	e02c      	b.n	4032c2 <strstr+0x14a>
  403268:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40326c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403270:	4288      	cmp	r0, r1
  403272:	d126      	bne.n	4032c2 <strstr+0x14a>
  403274:	3301      	adds	r3, #1
  403276:	429c      	cmp	r4, r3
  403278:	d1f6      	bne.n	403268 <strstr+0xf0>
  40327a:	45c8      	cmp	r8, r9
  40327c:	9900      	ldr	r1, [sp, #0]
  40327e:	f240 8083 	bls.w	403388 <strstr+0x210>
  403282:	9b00      	ldr	r3, [sp, #0]
  403284:	18ea      	adds	r2, r5, r3
  403286:	9b01      	ldr	r3, [sp, #4]
  403288:	5cb8      	ldrb	r0, [r7, r2]
  40328a:	781b      	ldrb	r3, [r3, #0]
  40328c:	4298      	cmp	r0, r3
  40328e:	443a      	add	r2, r7
  403290:	d17a      	bne.n	403388 <strstr+0x210>
  403292:	9801      	ldr	r0, [sp, #4]
  403294:	f109 3bff 	add.w	fp, r9, #4294967295
  403298:	e006      	b.n	4032a8 <strstr+0x130>
  40329a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40329e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4032a2:	45f4      	cmp	ip, lr
  4032a4:	d103      	bne.n	4032ae <strstr+0x136>
  4032a6:	4619      	mov	r1, r3
  4032a8:	1e4b      	subs	r3, r1, #1
  4032aa:	455b      	cmp	r3, fp
  4032ac:	d1f5      	bne.n	40329a <strstr+0x122>
  4032ae:	f109 0901 	add.w	r9, r9, #1
  4032b2:	4589      	cmp	r9, r1
  4032b4:	d857      	bhi.n	403366 <strstr+0x1ee>
  4032b6:	9b03      	ldr	r3, [sp, #12]
  4032b8:	4630      	mov	r0, r6
  4032ba:	441d      	add	r5, r3
  4032bc:	eba4 0903 	sub.w	r9, r4, r3
  4032c0:	e7b8      	b.n	403234 <strstr+0xbc>
  4032c2:	f1c8 0201 	rsb	r2, r8, #1
  4032c6:	4415      	add	r5, r2
  4032c8:	441d      	add	r5, r3
  4032ca:	f04f 0900 	mov.w	r9, #0
  4032ce:	4630      	mov	r0, r6
  4032d0:	e7b0      	b.n	403234 <strstr+0xbc>
  4032d2:	eba4 0308 	sub.w	r3, r4, r8
  4032d6:	4543      	cmp	r3, r8
  4032d8:	bf38      	it	cc
  4032da:	4643      	movcc	r3, r8
  4032dc:	3301      	adds	r3, #1
  4032de:	f108 39ff 	add.w	r9, r8, #4294967295
  4032e2:	9303      	str	r3, [sp, #12]
  4032e4:	eb06 0309 	add.w	r3, r6, r9
  4032e8:	4658      	mov	r0, fp
  4032ea:	2500      	movs	r5, #0
  4032ec:	46bb      	mov	fp, r7
  4032ee:	469a      	mov	sl, r3
  4032f0:	1967      	adds	r7, r4, r5
  4032f2:	1a3a      	subs	r2, r7, r0
  4032f4:	2100      	movs	r1, #0
  4032f6:	4458      	add	r0, fp
  4032f8:	f002 fd2a 	bl	405d50 <memchr>
  4032fc:	2800      	cmp	r0, #0
  4032fe:	f47f af7e 	bne.w	4031fe <strstr+0x86>
  403302:	2f00      	cmp	r7, #0
  403304:	f43f af7b 	beq.w	4031fe <strstr+0x86>
  403308:	4544      	cmp	r4, r8
  40330a:	d915      	bls.n	403338 <strstr+0x1c0>
  40330c:	eb08 0205 	add.w	r2, r8, r5
  403310:	f816 3008 	ldrb.w	r3, [r6, r8]
  403314:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403318:	4298      	cmp	r0, r3
  40331a:	445a      	add	r2, fp
  40331c:	eb06 0108 	add.w	r1, r6, r8
  403320:	4643      	mov	r3, r8
  403322:	d006      	beq.n	403332 <strstr+0x1ba>
  403324:	e023      	b.n	40336e <strstr+0x1f6>
  403326:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40332a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40332e:	4586      	cmp	lr, r0
  403330:	d11d      	bne.n	40336e <strstr+0x1f6>
  403332:	3301      	adds	r3, #1
  403334:	429c      	cmp	r4, r3
  403336:	d1f6      	bne.n	403326 <strstr+0x1ae>
  403338:	f1b9 3fff 	cmp.w	r9, #4294967295
  40333c:	d012      	beq.n	403364 <strstr+0x1ec>
  40333e:	eb05 0209 	add.w	r2, r5, r9
  403342:	f89a 3000 	ldrb.w	r3, [sl]
  403346:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40334a:	4299      	cmp	r1, r3
  40334c:	445a      	add	r2, fp
  40334e:	d114      	bne.n	40337a <strstr+0x202>
  403350:	4653      	mov	r3, sl
  403352:	e005      	b.n	403360 <strstr+0x1e8>
  403354:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403358:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40335c:	4288      	cmp	r0, r1
  40335e:	d10c      	bne.n	40337a <strstr+0x202>
  403360:	42b3      	cmp	r3, r6
  403362:	d1f7      	bne.n	403354 <strstr+0x1dc>
  403364:	465f      	mov	r7, fp
  403366:	1978      	adds	r0, r7, r5
  403368:	b005      	add	sp, #20
  40336a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40336e:	f1c8 0201 	rsb	r2, r8, #1
  403372:	4415      	add	r5, r2
  403374:	441d      	add	r5, r3
  403376:	4638      	mov	r0, r7
  403378:	e7ba      	b.n	4032f0 <strstr+0x178>
  40337a:	9b03      	ldr	r3, [sp, #12]
  40337c:	4638      	mov	r0, r7
  40337e:	441d      	add	r5, r3
  403380:	e7b6      	b.n	4032f0 <strstr+0x178>
  403382:	780b      	ldrb	r3, [r1, #0]
  403384:	b913      	cbnz	r3, 40338c <strstr+0x214>
  403386:	4770      	bx	lr
  403388:	4641      	mov	r1, r8
  40338a:	e790      	b.n	4032ae <strstr+0x136>
  40338c:	2000      	movs	r0, #0
  40338e:	4770      	bx	lr

00403390 <_svfprintf_r>:
  403390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403394:	b0c3      	sub	sp, #268	; 0x10c
  403396:	460c      	mov	r4, r1
  403398:	910b      	str	r1, [sp, #44]	; 0x2c
  40339a:	4692      	mov	sl, r2
  40339c:	930f      	str	r3, [sp, #60]	; 0x3c
  40339e:	900c      	str	r0, [sp, #48]	; 0x30
  4033a0:	f002 fa0e 	bl	4057c0 <_localeconv_r>
  4033a4:	6803      	ldr	r3, [r0, #0]
  4033a6:	931a      	str	r3, [sp, #104]	; 0x68
  4033a8:	4618      	mov	r0, r3
  4033aa:	f003 f989 	bl	4066c0 <strlen>
  4033ae:	89a3      	ldrh	r3, [r4, #12]
  4033b0:	9019      	str	r0, [sp, #100]	; 0x64
  4033b2:	0619      	lsls	r1, r3, #24
  4033b4:	d503      	bpl.n	4033be <_svfprintf_r+0x2e>
  4033b6:	6923      	ldr	r3, [r4, #16]
  4033b8:	2b00      	cmp	r3, #0
  4033ba:	f001 8003 	beq.w	4043c4 <_svfprintf_r+0x1034>
  4033be:	2300      	movs	r3, #0
  4033c0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4033c4:	9313      	str	r3, [sp, #76]	; 0x4c
  4033c6:	9315      	str	r3, [sp, #84]	; 0x54
  4033c8:	9314      	str	r3, [sp, #80]	; 0x50
  4033ca:	9327      	str	r3, [sp, #156]	; 0x9c
  4033cc:	9326      	str	r3, [sp, #152]	; 0x98
  4033ce:	9318      	str	r3, [sp, #96]	; 0x60
  4033d0:	931b      	str	r3, [sp, #108]	; 0x6c
  4033d2:	9309      	str	r3, [sp, #36]	; 0x24
  4033d4:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4033d8:	46c8      	mov	r8, r9
  4033da:	9316      	str	r3, [sp, #88]	; 0x58
  4033dc:	9317      	str	r3, [sp, #92]	; 0x5c
  4033de:	f89a 3000 	ldrb.w	r3, [sl]
  4033e2:	4654      	mov	r4, sl
  4033e4:	b1e3      	cbz	r3, 403420 <_svfprintf_r+0x90>
  4033e6:	2b25      	cmp	r3, #37	; 0x25
  4033e8:	d102      	bne.n	4033f0 <_svfprintf_r+0x60>
  4033ea:	e019      	b.n	403420 <_svfprintf_r+0x90>
  4033ec:	2b25      	cmp	r3, #37	; 0x25
  4033ee:	d003      	beq.n	4033f8 <_svfprintf_r+0x68>
  4033f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4033f4:	2b00      	cmp	r3, #0
  4033f6:	d1f9      	bne.n	4033ec <_svfprintf_r+0x5c>
  4033f8:	eba4 050a 	sub.w	r5, r4, sl
  4033fc:	b185      	cbz	r5, 403420 <_svfprintf_r+0x90>
  4033fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403400:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403402:	f8c8 a000 	str.w	sl, [r8]
  403406:	3301      	adds	r3, #1
  403408:	442a      	add	r2, r5
  40340a:	2b07      	cmp	r3, #7
  40340c:	f8c8 5004 	str.w	r5, [r8, #4]
  403410:	9227      	str	r2, [sp, #156]	; 0x9c
  403412:	9326      	str	r3, [sp, #152]	; 0x98
  403414:	dc7f      	bgt.n	403516 <_svfprintf_r+0x186>
  403416:	f108 0808 	add.w	r8, r8, #8
  40341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40341c:	442b      	add	r3, r5
  40341e:	9309      	str	r3, [sp, #36]	; 0x24
  403420:	7823      	ldrb	r3, [r4, #0]
  403422:	2b00      	cmp	r3, #0
  403424:	d07f      	beq.n	403526 <_svfprintf_r+0x196>
  403426:	2300      	movs	r3, #0
  403428:	461a      	mov	r2, r3
  40342a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40342e:	4619      	mov	r1, r3
  403430:	930d      	str	r3, [sp, #52]	; 0x34
  403432:	469b      	mov	fp, r3
  403434:	f04f 30ff 	mov.w	r0, #4294967295
  403438:	7863      	ldrb	r3, [r4, #1]
  40343a:	900a      	str	r0, [sp, #40]	; 0x28
  40343c:	f104 0a01 	add.w	sl, r4, #1
  403440:	f10a 0a01 	add.w	sl, sl, #1
  403444:	f1a3 0020 	sub.w	r0, r3, #32
  403448:	2858      	cmp	r0, #88	; 0x58
  40344a:	f200 83c1 	bhi.w	403bd0 <_svfprintf_r+0x840>
  40344e:	e8df f010 	tbh	[pc, r0, lsl #1]
  403452:	0238      	.short	0x0238
  403454:	03bf03bf 	.word	0x03bf03bf
  403458:	03bf0240 	.word	0x03bf0240
  40345c:	03bf03bf 	.word	0x03bf03bf
  403460:	03bf03bf 	.word	0x03bf03bf
  403464:	024503bf 	.word	0x024503bf
  403468:	03bf0203 	.word	0x03bf0203
  40346c:	026b005d 	.word	0x026b005d
  403470:	028603bf 	.word	0x028603bf
  403474:	039d039d 	.word	0x039d039d
  403478:	039d039d 	.word	0x039d039d
  40347c:	039d039d 	.word	0x039d039d
  403480:	039d039d 	.word	0x039d039d
  403484:	03bf039d 	.word	0x03bf039d
  403488:	03bf03bf 	.word	0x03bf03bf
  40348c:	03bf03bf 	.word	0x03bf03bf
  403490:	03bf03bf 	.word	0x03bf03bf
  403494:	03bf03bf 	.word	0x03bf03bf
  403498:	033703bf 	.word	0x033703bf
  40349c:	03bf0357 	.word	0x03bf0357
  4034a0:	03bf0357 	.word	0x03bf0357
  4034a4:	03bf03bf 	.word	0x03bf03bf
  4034a8:	039803bf 	.word	0x039803bf
  4034ac:	03bf03bf 	.word	0x03bf03bf
  4034b0:	03bf03ad 	.word	0x03bf03ad
  4034b4:	03bf03bf 	.word	0x03bf03bf
  4034b8:	03bf03bf 	.word	0x03bf03bf
  4034bc:	03bf0259 	.word	0x03bf0259
  4034c0:	031e03bf 	.word	0x031e03bf
  4034c4:	03bf03bf 	.word	0x03bf03bf
  4034c8:	03bf03bf 	.word	0x03bf03bf
  4034cc:	03bf03bf 	.word	0x03bf03bf
  4034d0:	03bf03bf 	.word	0x03bf03bf
  4034d4:	03bf03bf 	.word	0x03bf03bf
  4034d8:	02db02c6 	.word	0x02db02c6
  4034dc:	03570357 	.word	0x03570357
  4034e0:	028b0357 	.word	0x028b0357
  4034e4:	03bf02db 	.word	0x03bf02db
  4034e8:	029003bf 	.word	0x029003bf
  4034ec:	029d03bf 	.word	0x029d03bf
  4034f0:	02b401cc 	.word	0x02b401cc
  4034f4:	03bf0208 	.word	0x03bf0208
  4034f8:	03bf01e1 	.word	0x03bf01e1
  4034fc:	03bf007e 	.word	0x03bf007e
  403500:	020d03bf 	.word	0x020d03bf
  403504:	980d      	ldr	r0, [sp, #52]	; 0x34
  403506:	930f      	str	r3, [sp, #60]	; 0x3c
  403508:	4240      	negs	r0, r0
  40350a:	900d      	str	r0, [sp, #52]	; 0x34
  40350c:	f04b 0b04 	orr.w	fp, fp, #4
  403510:	f89a 3000 	ldrb.w	r3, [sl]
  403514:	e794      	b.n	403440 <_svfprintf_r+0xb0>
  403516:	aa25      	add	r2, sp, #148	; 0x94
  403518:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40351a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40351c:	f003 f93e 	bl	40679c <__ssprint_r>
  403520:	b940      	cbnz	r0, 403534 <_svfprintf_r+0x1a4>
  403522:	46c8      	mov	r8, r9
  403524:	e779      	b.n	40341a <_svfprintf_r+0x8a>
  403526:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403528:	b123      	cbz	r3, 403534 <_svfprintf_r+0x1a4>
  40352a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40352c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40352e:	aa25      	add	r2, sp, #148	; 0x94
  403530:	f003 f934 	bl	40679c <__ssprint_r>
  403534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403536:	899b      	ldrh	r3, [r3, #12]
  403538:	f013 0f40 	tst.w	r3, #64	; 0x40
  40353c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40353e:	bf18      	it	ne
  403540:	f04f 33ff 	movne.w	r3, #4294967295
  403544:	9309      	str	r3, [sp, #36]	; 0x24
  403546:	9809      	ldr	r0, [sp, #36]	; 0x24
  403548:	b043      	add	sp, #268	; 0x10c
  40354a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40354e:	f01b 0f20 	tst.w	fp, #32
  403552:	9311      	str	r3, [sp, #68]	; 0x44
  403554:	f040 81dd 	bne.w	403912 <_svfprintf_r+0x582>
  403558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40355a:	f01b 0f10 	tst.w	fp, #16
  40355e:	4613      	mov	r3, r2
  403560:	f040 856e 	bne.w	404040 <_svfprintf_r+0xcb0>
  403564:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403568:	f000 856a 	beq.w	404040 <_svfprintf_r+0xcb0>
  40356c:	8814      	ldrh	r4, [r2, #0]
  40356e:	3204      	adds	r2, #4
  403570:	2500      	movs	r5, #0
  403572:	2301      	movs	r3, #1
  403574:	920f      	str	r2, [sp, #60]	; 0x3c
  403576:	2700      	movs	r7, #0
  403578:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40357c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40357e:	1c4a      	adds	r2, r1, #1
  403580:	f000 8265 	beq.w	403a4e <_svfprintf_r+0x6be>
  403584:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403588:	9207      	str	r2, [sp, #28]
  40358a:	ea54 0205 	orrs.w	r2, r4, r5
  40358e:	f040 8264 	bne.w	403a5a <_svfprintf_r+0x6ca>
  403592:	2900      	cmp	r1, #0
  403594:	f040 843c 	bne.w	403e10 <_svfprintf_r+0xa80>
  403598:	2b00      	cmp	r3, #0
  40359a:	f040 84d7 	bne.w	403f4c <_svfprintf_r+0xbbc>
  40359e:	f01b 0301 	ands.w	r3, fp, #1
  4035a2:	930e      	str	r3, [sp, #56]	; 0x38
  4035a4:	f000 8604 	beq.w	4041b0 <_svfprintf_r+0xe20>
  4035a8:	ae42      	add	r6, sp, #264	; 0x108
  4035aa:	2330      	movs	r3, #48	; 0x30
  4035ac:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4035b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4035b4:	4293      	cmp	r3, r2
  4035b6:	bfb8      	it	lt
  4035b8:	4613      	movlt	r3, r2
  4035ba:	9308      	str	r3, [sp, #32]
  4035bc:	2300      	movs	r3, #0
  4035be:	9312      	str	r3, [sp, #72]	; 0x48
  4035c0:	b117      	cbz	r7, 4035c8 <_svfprintf_r+0x238>
  4035c2:	9b08      	ldr	r3, [sp, #32]
  4035c4:	3301      	adds	r3, #1
  4035c6:	9308      	str	r3, [sp, #32]
  4035c8:	9b07      	ldr	r3, [sp, #28]
  4035ca:	f013 0302 	ands.w	r3, r3, #2
  4035ce:	9310      	str	r3, [sp, #64]	; 0x40
  4035d0:	d002      	beq.n	4035d8 <_svfprintf_r+0x248>
  4035d2:	9b08      	ldr	r3, [sp, #32]
  4035d4:	3302      	adds	r3, #2
  4035d6:	9308      	str	r3, [sp, #32]
  4035d8:	9b07      	ldr	r3, [sp, #28]
  4035da:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4035de:	f040 830e 	bne.w	403bfe <_svfprintf_r+0x86e>
  4035e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4035e4:	9a08      	ldr	r2, [sp, #32]
  4035e6:	eba3 0b02 	sub.w	fp, r3, r2
  4035ea:	f1bb 0f00 	cmp.w	fp, #0
  4035ee:	f340 8306 	ble.w	403bfe <_svfprintf_r+0x86e>
  4035f2:	f1bb 0f10 	cmp.w	fp, #16
  4035f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4035f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4035fa:	dd29      	ble.n	403650 <_svfprintf_r+0x2c0>
  4035fc:	4643      	mov	r3, r8
  4035fe:	4621      	mov	r1, r4
  403600:	46a8      	mov	r8, r5
  403602:	2710      	movs	r7, #16
  403604:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403606:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403608:	e006      	b.n	403618 <_svfprintf_r+0x288>
  40360a:	f1ab 0b10 	sub.w	fp, fp, #16
  40360e:	f1bb 0f10 	cmp.w	fp, #16
  403612:	f103 0308 	add.w	r3, r3, #8
  403616:	dd18      	ble.n	40364a <_svfprintf_r+0x2ba>
  403618:	3201      	adds	r2, #1
  40361a:	48b7      	ldr	r0, [pc, #732]	; (4038f8 <_svfprintf_r+0x568>)
  40361c:	9226      	str	r2, [sp, #152]	; 0x98
  40361e:	3110      	adds	r1, #16
  403620:	2a07      	cmp	r2, #7
  403622:	9127      	str	r1, [sp, #156]	; 0x9c
  403624:	e883 0081 	stmia.w	r3, {r0, r7}
  403628:	ddef      	ble.n	40360a <_svfprintf_r+0x27a>
  40362a:	aa25      	add	r2, sp, #148	; 0x94
  40362c:	4629      	mov	r1, r5
  40362e:	4620      	mov	r0, r4
  403630:	f003 f8b4 	bl	40679c <__ssprint_r>
  403634:	2800      	cmp	r0, #0
  403636:	f47f af7d 	bne.w	403534 <_svfprintf_r+0x1a4>
  40363a:	f1ab 0b10 	sub.w	fp, fp, #16
  40363e:	f1bb 0f10 	cmp.w	fp, #16
  403642:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403644:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403646:	464b      	mov	r3, r9
  403648:	dce6      	bgt.n	403618 <_svfprintf_r+0x288>
  40364a:	4645      	mov	r5, r8
  40364c:	460c      	mov	r4, r1
  40364e:	4698      	mov	r8, r3
  403650:	3201      	adds	r2, #1
  403652:	4ba9      	ldr	r3, [pc, #676]	; (4038f8 <_svfprintf_r+0x568>)
  403654:	9226      	str	r2, [sp, #152]	; 0x98
  403656:	445c      	add	r4, fp
  403658:	2a07      	cmp	r2, #7
  40365a:	9427      	str	r4, [sp, #156]	; 0x9c
  40365c:	e888 0808 	stmia.w	r8, {r3, fp}
  403660:	f300 8498 	bgt.w	403f94 <_svfprintf_r+0xc04>
  403664:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403668:	f108 0808 	add.w	r8, r8, #8
  40366c:	b177      	cbz	r7, 40368c <_svfprintf_r+0x2fc>
  40366e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403670:	3301      	adds	r3, #1
  403672:	3401      	adds	r4, #1
  403674:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403678:	2201      	movs	r2, #1
  40367a:	2b07      	cmp	r3, #7
  40367c:	9427      	str	r4, [sp, #156]	; 0x9c
  40367e:	9326      	str	r3, [sp, #152]	; 0x98
  403680:	e888 0006 	stmia.w	r8, {r1, r2}
  403684:	f300 83db 	bgt.w	403e3e <_svfprintf_r+0xaae>
  403688:	f108 0808 	add.w	r8, r8, #8
  40368c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40368e:	b16b      	cbz	r3, 4036ac <_svfprintf_r+0x31c>
  403690:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403692:	3301      	adds	r3, #1
  403694:	3402      	adds	r4, #2
  403696:	a91e      	add	r1, sp, #120	; 0x78
  403698:	2202      	movs	r2, #2
  40369a:	2b07      	cmp	r3, #7
  40369c:	9427      	str	r4, [sp, #156]	; 0x9c
  40369e:	9326      	str	r3, [sp, #152]	; 0x98
  4036a0:	e888 0006 	stmia.w	r8, {r1, r2}
  4036a4:	f300 83d6 	bgt.w	403e54 <_svfprintf_r+0xac4>
  4036a8:	f108 0808 	add.w	r8, r8, #8
  4036ac:	2d80      	cmp	r5, #128	; 0x80
  4036ae:	f000 8315 	beq.w	403cdc <_svfprintf_r+0x94c>
  4036b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4036b6:	1a9f      	subs	r7, r3, r2
  4036b8:	2f00      	cmp	r7, #0
  4036ba:	dd36      	ble.n	40372a <_svfprintf_r+0x39a>
  4036bc:	2f10      	cmp	r7, #16
  4036be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4036c0:	4d8e      	ldr	r5, [pc, #568]	; (4038fc <_svfprintf_r+0x56c>)
  4036c2:	dd27      	ble.n	403714 <_svfprintf_r+0x384>
  4036c4:	4642      	mov	r2, r8
  4036c6:	4621      	mov	r1, r4
  4036c8:	46b0      	mov	r8, r6
  4036ca:	f04f 0b10 	mov.w	fp, #16
  4036ce:	462e      	mov	r6, r5
  4036d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4036d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4036d4:	e004      	b.n	4036e0 <_svfprintf_r+0x350>
  4036d6:	3f10      	subs	r7, #16
  4036d8:	2f10      	cmp	r7, #16
  4036da:	f102 0208 	add.w	r2, r2, #8
  4036de:	dd15      	ble.n	40370c <_svfprintf_r+0x37c>
  4036e0:	3301      	adds	r3, #1
  4036e2:	3110      	adds	r1, #16
  4036e4:	2b07      	cmp	r3, #7
  4036e6:	9127      	str	r1, [sp, #156]	; 0x9c
  4036e8:	9326      	str	r3, [sp, #152]	; 0x98
  4036ea:	e882 0840 	stmia.w	r2, {r6, fp}
  4036ee:	ddf2      	ble.n	4036d6 <_svfprintf_r+0x346>
  4036f0:	aa25      	add	r2, sp, #148	; 0x94
  4036f2:	4629      	mov	r1, r5
  4036f4:	4620      	mov	r0, r4
  4036f6:	f003 f851 	bl	40679c <__ssprint_r>
  4036fa:	2800      	cmp	r0, #0
  4036fc:	f47f af1a 	bne.w	403534 <_svfprintf_r+0x1a4>
  403700:	3f10      	subs	r7, #16
  403702:	2f10      	cmp	r7, #16
  403704:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403706:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403708:	464a      	mov	r2, r9
  40370a:	dce9      	bgt.n	4036e0 <_svfprintf_r+0x350>
  40370c:	4635      	mov	r5, r6
  40370e:	460c      	mov	r4, r1
  403710:	4646      	mov	r6, r8
  403712:	4690      	mov	r8, r2
  403714:	3301      	adds	r3, #1
  403716:	443c      	add	r4, r7
  403718:	2b07      	cmp	r3, #7
  40371a:	9427      	str	r4, [sp, #156]	; 0x9c
  40371c:	9326      	str	r3, [sp, #152]	; 0x98
  40371e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403722:	f300 8381 	bgt.w	403e28 <_svfprintf_r+0xa98>
  403726:	f108 0808 	add.w	r8, r8, #8
  40372a:	9b07      	ldr	r3, [sp, #28]
  40372c:	05df      	lsls	r7, r3, #23
  40372e:	f100 8268 	bmi.w	403c02 <_svfprintf_r+0x872>
  403732:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403734:	990e      	ldr	r1, [sp, #56]	; 0x38
  403736:	f8c8 6000 	str.w	r6, [r8]
  40373a:	3301      	adds	r3, #1
  40373c:	440c      	add	r4, r1
  40373e:	2b07      	cmp	r3, #7
  403740:	9427      	str	r4, [sp, #156]	; 0x9c
  403742:	f8c8 1004 	str.w	r1, [r8, #4]
  403746:	9326      	str	r3, [sp, #152]	; 0x98
  403748:	f300 834d 	bgt.w	403de6 <_svfprintf_r+0xa56>
  40374c:	f108 0808 	add.w	r8, r8, #8
  403750:	9b07      	ldr	r3, [sp, #28]
  403752:	075b      	lsls	r3, r3, #29
  403754:	d53a      	bpl.n	4037cc <_svfprintf_r+0x43c>
  403756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403758:	9a08      	ldr	r2, [sp, #32]
  40375a:	1a9d      	subs	r5, r3, r2
  40375c:	2d00      	cmp	r5, #0
  40375e:	dd35      	ble.n	4037cc <_svfprintf_r+0x43c>
  403760:	2d10      	cmp	r5, #16
  403762:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403764:	dd20      	ble.n	4037a8 <_svfprintf_r+0x418>
  403766:	2610      	movs	r6, #16
  403768:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40376a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40376e:	e004      	b.n	40377a <_svfprintf_r+0x3ea>
  403770:	3d10      	subs	r5, #16
  403772:	2d10      	cmp	r5, #16
  403774:	f108 0808 	add.w	r8, r8, #8
  403778:	dd16      	ble.n	4037a8 <_svfprintf_r+0x418>
  40377a:	3301      	adds	r3, #1
  40377c:	4a5e      	ldr	r2, [pc, #376]	; (4038f8 <_svfprintf_r+0x568>)
  40377e:	9326      	str	r3, [sp, #152]	; 0x98
  403780:	3410      	adds	r4, #16
  403782:	2b07      	cmp	r3, #7
  403784:	9427      	str	r4, [sp, #156]	; 0x9c
  403786:	e888 0044 	stmia.w	r8, {r2, r6}
  40378a:	ddf1      	ble.n	403770 <_svfprintf_r+0x3e0>
  40378c:	aa25      	add	r2, sp, #148	; 0x94
  40378e:	4659      	mov	r1, fp
  403790:	4638      	mov	r0, r7
  403792:	f003 f803 	bl	40679c <__ssprint_r>
  403796:	2800      	cmp	r0, #0
  403798:	f47f aecc 	bne.w	403534 <_svfprintf_r+0x1a4>
  40379c:	3d10      	subs	r5, #16
  40379e:	2d10      	cmp	r5, #16
  4037a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4037a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4037a4:	46c8      	mov	r8, r9
  4037a6:	dce8      	bgt.n	40377a <_svfprintf_r+0x3ea>
  4037a8:	3301      	adds	r3, #1
  4037aa:	4a53      	ldr	r2, [pc, #332]	; (4038f8 <_svfprintf_r+0x568>)
  4037ac:	9326      	str	r3, [sp, #152]	; 0x98
  4037ae:	442c      	add	r4, r5
  4037b0:	2b07      	cmp	r3, #7
  4037b2:	9427      	str	r4, [sp, #156]	; 0x9c
  4037b4:	e888 0024 	stmia.w	r8, {r2, r5}
  4037b8:	dd08      	ble.n	4037cc <_svfprintf_r+0x43c>
  4037ba:	aa25      	add	r2, sp, #148	; 0x94
  4037bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037c0:	f002 ffec 	bl	40679c <__ssprint_r>
  4037c4:	2800      	cmp	r0, #0
  4037c6:	f47f aeb5 	bne.w	403534 <_svfprintf_r+0x1a4>
  4037ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4037cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4037d0:	9908      	ldr	r1, [sp, #32]
  4037d2:	428a      	cmp	r2, r1
  4037d4:	bfac      	ite	ge
  4037d6:	189b      	addge	r3, r3, r2
  4037d8:	185b      	addlt	r3, r3, r1
  4037da:	9309      	str	r3, [sp, #36]	; 0x24
  4037dc:	2c00      	cmp	r4, #0
  4037de:	f040 830d 	bne.w	403dfc <_svfprintf_r+0xa6c>
  4037e2:	2300      	movs	r3, #0
  4037e4:	9326      	str	r3, [sp, #152]	; 0x98
  4037e6:	46c8      	mov	r8, r9
  4037e8:	e5f9      	b.n	4033de <_svfprintf_r+0x4e>
  4037ea:	9311      	str	r3, [sp, #68]	; 0x44
  4037ec:	f01b 0320 	ands.w	r3, fp, #32
  4037f0:	f040 81e3 	bne.w	403bba <_svfprintf_r+0x82a>
  4037f4:	f01b 0210 	ands.w	r2, fp, #16
  4037f8:	f040 842e 	bne.w	404058 <_svfprintf_r+0xcc8>
  4037fc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403800:	f000 842a 	beq.w	404058 <_svfprintf_r+0xcc8>
  403804:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403806:	4613      	mov	r3, r2
  403808:	460a      	mov	r2, r1
  40380a:	3204      	adds	r2, #4
  40380c:	880c      	ldrh	r4, [r1, #0]
  40380e:	920f      	str	r2, [sp, #60]	; 0x3c
  403810:	2500      	movs	r5, #0
  403812:	e6b0      	b.n	403576 <_svfprintf_r+0x1e6>
  403814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403816:	9311      	str	r3, [sp, #68]	; 0x44
  403818:	6816      	ldr	r6, [r2, #0]
  40381a:	2400      	movs	r4, #0
  40381c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403820:	1d15      	adds	r5, r2, #4
  403822:	2e00      	cmp	r6, #0
  403824:	f000 86a7 	beq.w	404576 <_svfprintf_r+0x11e6>
  403828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40382a:	1c53      	adds	r3, r2, #1
  40382c:	f000 8609 	beq.w	404442 <_svfprintf_r+0x10b2>
  403830:	4621      	mov	r1, r4
  403832:	4630      	mov	r0, r6
  403834:	f002 fa8c 	bl	405d50 <memchr>
  403838:	2800      	cmp	r0, #0
  40383a:	f000 86e1 	beq.w	404600 <_svfprintf_r+0x1270>
  40383e:	1b83      	subs	r3, r0, r6
  403840:	930e      	str	r3, [sp, #56]	; 0x38
  403842:	940a      	str	r4, [sp, #40]	; 0x28
  403844:	950f      	str	r5, [sp, #60]	; 0x3c
  403846:	f8cd b01c 	str.w	fp, [sp, #28]
  40384a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40384e:	9308      	str	r3, [sp, #32]
  403850:	9412      	str	r4, [sp, #72]	; 0x48
  403852:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403856:	e6b3      	b.n	4035c0 <_svfprintf_r+0x230>
  403858:	f89a 3000 	ldrb.w	r3, [sl]
  40385c:	2201      	movs	r2, #1
  40385e:	212b      	movs	r1, #43	; 0x2b
  403860:	e5ee      	b.n	403440 <_svfprintf_r+0xb0>
  403862:	f04b 0b20 	orr.w	fp, fp, #32
  403866:	f89a 3000 	ldrb.w	r3, [sl]
  40386a:	e5e9      	b.n	403440 <_svfprintf_r+0xb0>
  40386c:	9311      	str	r3, [sp, #68]	; 0x44
  40386e:	2a00      	cmp	r2, #0
  403870:	f040 8795 	bne.w	40479e <_svfprintf_r+0x140e>
  403874:	4b22      	ldr	r3, [pc, #136]	; (403900 <_svfprintf_r+0x570>)
  403876:	9318      	str	r3, [sp, #96]	; 0x60
  403878:	f01b 0f20 	tst.w	fp, #32
  40387c:	f040 8111 	bne.w	403aa2 <_svfprintf_r+0x712>
  403880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403882:	f01b 0f10 	tst.w	fp, #16
  403886:	4613      	mov	r3, r2
  403888:	f040 83e1 	bne.w	40404e <_svfprintf_r+0xcbe>
  40388c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403890:	f000 83dd 	beq.w	40404e <_svfprintf_r+0xcbe>
  403894:	3304      	adds	r3, #4
  403896:	8814      	ldrh	r4, [r2, #0]
  403898:	930f      	str	r3, [sp, #60]	; 0x3c
  40389a:	2500      	movs	r5, #0
  40389c:	f01b 0f01 	tst.w	fp, #1
  4038a0:	f000 810c 	beq.w	403abc <_svfprintf_r+0x72c>
  4038a4:	ea54 0305 	orrs.w	r3, r4, r5
  4038a8:	f000 8108 	beq.w	403abc <_svfprintf_r+0x72c>
  4038ac:	2330      	movs	r3, #48	; 0x30
  4038ae:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4038b2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4038b6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4038ba:	f04b 0b02 	orr.w	fp, fp, #2
  4038be:	2302      	movs	r3, #2
  4038c0:	e659      	b.n	403576 <_svfprintf_r+0x1e6>
  4038c2:	f89a 3000 	ldrb.w	r3, [sl]
  4038c6:	2900      	cmp	r1, #0
  4038c8:	f47f adba 	bne.w	403440 <_svfprintf_r+0xb0>
  4038cc:	2201      	movs	r2, #1
  4038ce:	2120      	movs	r1, #32
  4038d0:	e5b6      	b.n	403440 <_svfprintf_r+0xb0>
  4038d2:	f04b 0b01 	orr.w	fp, fp, #1
  4038d6:	f89a 3000 	ldrb.w	r3, [sl]
  4038da:	e5b1      	b.n	403440 <_svfprintf_r+0xb0>
  4038dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4038de:	6823      	ldr	r3, [r4, #0]
  4038e0:	930d      	str	r3, [sp, #52]	; 0x34
  4038e2:	4618      	mov	r0, r3
  4038e4:	2800      	cmp	r0, #0
  4038e6:	4623      	mov	r3, r4
  4038e8:	f103 0304 	add.w	r3, r3, #4
  4038ec:	f6ff ae0a 	blt.w	403504 <_svfprintf_r+0x174>
  4038f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4038f2:	f89a 3000 	ldrb.w	r3, [sl]
  4038f6:	e5a3      	b.n	403440 <_svfprintf_r+0xb0>
  4038f8:	00407bb0 	.word	0x00407bb0
  4038fc:	00407bc0 	.word	0x00407bc0
  403900:	00407b90 	.word	0x00407b90
  403904:	f04b 0b10 	orr.w	fp, fp, #16
  403908:	f01b 0f20 	tst.w	fp, #32
  40390c:	9311      	str	r3, [sp, #68]	; 0x44
  40390e:	f43f ae23 	beq.w	403558 <_svfprintf_r+0x1c8>
  403912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403914:	3507      	adds	r5, #7
  403916:	f025 0307 	bic.w	r3, r5, #7
  40391a:	f103 0208 	add.w	r2, r3, #8
  40391e:	e9d3 4500 	ldrd	r4, r5, [r3]
  403922:	920f      	str	r2, [sp, #60]	; 0x3c
  403924:	2301      	movs	r3, #1
  403926:	e626      	b.n	403576 <_svfprintf_r+0x1e6>
  403928:	f89a 3000 	ldrb.w	r3, [sl]
  40392c:	2b2a      	cmp	r3, #42	; 0x2a
  40392e:	f10a 0401 	add.w	r4, sl, #1
  403932:	f000 8727 	beq.w	404784 <_svfprintf_r+0x13f4>
  403936:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40393a:	2809      	cmp	r0, #9
  40393c:	46a2      	mov	sl, r4
  40393e:	f200 86ad 	bhi.w	40469c <_svfprintf_r+0x130c>
  403942:	2300      	movs	r3, #0
  403944:	461c      	mov	r4, r3
  403946:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40394a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40394e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403952:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403956:	2809      	cmp	r0, #9
  403958:	d9f5      	bls.n	403946 <_svfprintf_r+0x5b6>
  40395a:	940a      	str	r4, [sp, #40]	; 0x28
  40395c:	e572      	b.n	403444 <_svfprintf_r+0xb4>
  40395e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403962:	f89a 3000 	ldrb.w	r3, [sl]
  403966:	e56b      	b.n	403440 <_svfprintf_r+0xb0>
  403968:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40396c:	f89a 3000 	ldrb.w	r3, [sl]
  403970:	e566      	b.n	403440 <_svfprintf_r+0xb0>
  403972:	f89a 3000 	ldrb.w	r3, [sl]
  403976:	2b6c      	cmp	r3, #108	; 0x6c
  403978:	bf03      	ittte	eq
  40397a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40397e:	f04b 0b20 	orreq.w	fp, fp, #32
  403982:	f10a 0a01 	addeq.w	sl, sl, #1
  403986:	f04b 0b10 	orrne.w	fp, fp, #16
  40398a:	e559      	b.n	403440 <_svfprintf_r+0xb0>
  40398c:	2a00      	cmp	r2, #0
  40398e:	f040 8711 	bne.w	4047b4 <_svfprintf_r+0x1424>
  403992:	f01b 0f20 	tst.w	fp, #32
  403996:	f040 84f9 	bne.w	40438c <_svfprintf_r+0xffc>
  40399a:	f01b 0f10 	tst.w	fp, #16
  40399e:	f040 84ac 	bne.w	4042fa <_svfprintf_r+0xf6a>
  4039a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4039a6:	f000 84a8 	beq.w	4042fa <_svfprintf_r+0xf6a>
  4039aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4039ac:	6813      	ldr	r3, [r2, #0]
  4039ae:	3204      	adds	r2, #4
  4039b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4039b2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4039b6:	801a      	strh	r2, [r3, #0]
  4039b8:	e511      	b.n	4033de <_svfprintf_r+0x4e>
  4039ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4039bc:	4bb3      	ldr	r3, [pc, #716]	; (403c8c <_svfprintf_r+0x8fc>)
  4039be:	680c      	ldr	r4, [r1, #0]
  4039c0:	9318      	str	r3, [sp, #96]	; 0x60
  4039c2:	2230      	movs	r2, #48	; 0x30
  4039c4:	2378      	movs	r3, #120	; 0x78
  4039c6:	3104      	adds	r1, #4
  4039c8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4039cc:	9311      	str	r3, [sp, #68]	; 0x44
  4039ce:	f04b 0b02 	orr.w	fp, fp, #2
  4039d2:	910f      	str	r1, [sp, #60]	; 0x3c
  4039d4:	2500      	movs	r5, #0
  4039d6:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4039da:	2302      	movs	r3, #2
  4039dc:	e5cb      	b.n	403576 <_svfprintf_r+0x1e6>
  4039de:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4039e0:	9311      	str	r3, [sp, #68]	; 0x44
  4039e2:	680a      	ldr	r2, [r1, #0]
  4039e4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4039e8:	2300      	movs	r3, #0
  4039ea:	460a      	mov	r2, r1
  4039ec:	461f      	mov	r7, r3
  4039ee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4039f2:	3204      	adds	r2, #4
  4039f4:	2301      	movs	r3, #1
  4039f6:	9308      	str	r3, [sp, #32]
  4039f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4039fc:	970a      	str	r7, [sp, #40]	; 0x28
  4039fe:	9712      	str	r7, [sp, #72]	; 0x48
  403a00:	920f      	str	r2, [sp, #60]	; 0x3c
  403a02:	930e      	str	r3, [sp, #56]	; 0x38
  403a04:	ae28      	add	r6, sp, #160	; 0xa0
  403a06:	e5df      	b.n	4035c8 <_svfprintf_r+0x238>
  403a08:	9311      	str	r3, [sp, #68]	; 0x44
  403a0a:	2a00      	cmp	r2, #0
  403a0c:	f040 86ea 	bne.w	4047e4 <_svfprintf_r+0x1454>
  403a10:	f01b 0f20 	tst.w	fp, #32
  403a14:	d15d      	bne.n	403ad2 <_svfprintf_r+0x742>
  403a16:	f01b 0f10 	tst.w	fp, #16
  403a1a:	f040 8308 	bne.w	40402e <_svfprintf_r+0xc9e>
  403a1e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403a22:	f000 8304 	beq.w	40402e <_svfprintf_r+0xc9e>
  403a26:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403a28:	f9b1 4000 	ldrsh.w	r4, [r1]
  403a2c:	3104      	adds	r1, #4
  403a2e:	17e5      	asrs	r5, r4, #31
  403a30:	4622      	mov	r2, r4
  403a32:	462b      	mov	r3, r5
  403a34:	910f      	str	r1, [sp, #60]	; 0x3c
  403a36:	2a00      	cmp	r2, #0
  403a38:	f173 0300 	sbcs.w	r3, r3, #0
  403a3c:	db58      	blt.n	403af0 <_svfprintf_r+0x760>
  403a3e:	990a      	ldr	r1, [sp, #40]	; 0x28
  403a40:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403a44:	1c4a      	adds	r2, r1, #1
  403a46:	f04f 0301 	mov.w	r3, #1
  403a4a:	f47f ad9b 	bne.w	403584 <_svfprintf_r+0x1f4>
  403a4e:	ea54 0205 	orrs.w	r2, r4, r5
  403a52:	f000 81df 	beq.w	403e14 <_svfprintf_r+0xa84>
  403a56:	f8cd b01c 	str.w	fp, [sp, #28]
  403a5a:	2b01      	cmp	r3, #1
  403a5c:	f000 827b 	beq.w	403f56 <_svfprintf_r+0xbc6>
  403a60:	2b02      	cmp	r3, #2
  403a62:	f040 8206 	bne.w	403e72 <_svfprintf_r+0xae2>
  403a66:	9818      	ldr	r0, [sp, #96]	; 0x60
  403a68:	464e      	mov	r6, r9
  403a6a:	0923      	lsrs	r3, r4, #4
  403a6c:	f004 010f 	and.w	r1, r4, #15
  403a70:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403a74:	092a      	lsrs	r2, r5, #4
  403a76:	461c      	mov	r4, r3
  403a78:	4615      	mov	r5, r2
  403a7a:	5c43      	ldrb	r3, [r0, r1]
  403a7c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403a80:	ea54 0305 	orrs.w	r3, r4, r5
  403a84:	d1f1      	bne.n	403a6a <_svfprintf_r+0x6da>
  403a86:	eba9 0306 	sub.w	r3, r9, r6
  403a8a:	930e      	str	r3, [sp, #56]	; 0x38
  403a8c:	e590      	b.n	4035b0 <_svfprintf_r+0x220>
  403a8e:	9311      	str	r3, [sp, #68]	; 0x44
  403a90:	2a00      	cmp	r2, #0
  403a92:	f040 86a3 	bne.w	4047dc <_svfprintf_r+0x144c>
  403a96:	4b7e      	ldr	r3, [pc, #504]	; (403c90 <_svfprintf_r+0x900>)
  403a98:	9318      	str	r3, [sp, #96]	; 0x60
  403a9a:	f01b 0f20 	tst.w	fp, #32
  403a9e:	f43f aeef 	beq.w	403880 <_svfprintf_r+0x4f0>
  403aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403aa4:	3507      	adds	r5, #7
  403aa6:	f025 0307 	bic.w	r3, r5, #7
  403aaa:	f103 0208 	add.w	r2, r3, #8
  403aae:	f01b 0f01 	tst.w	fp, #1
  403ab2:	920f      	str	r2, [sp, #60]	; 0x3c
  403ab4:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ab8:	f47f aef4 	bne.w	4038a4 <_svfprintf_r+0x514>
  403abc:	2302      	movs	r3, #2
  403abe:	e55a      	b.n	403576 <_svfprintf_r+0x1e6>
  403ac0:	9311      	str	r3, [sp, #68]	; 0x44
  403ac2:	2a00      	cmp	r2, #0
  403ac4:	f040 8686 	bne.w	4047d4 <_svfprintf_r+0x1444>
  403ac8:	f04b 0b10 	orr.w	fp, fp, #16
  403acc:	f01b 0f20 	tst.w	fp, #32
  403ad0:	d0a1      	beq.n	403a16 <_svfprintf_r+0x686>
  403ad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ad4:	3507      	adds	r5, #7
  403ad6:	f025 0507 	bic.w	r5, r5, #7
  403ada:	e9d5 2300 	ldrd	r2, r3, [r5]
  403ade:	2a00      	cmp	r2, #0
  403ae0:	f105 0108 	add.w	r1, r5, #8
  403ae4:	461d      	mov	r5, r3
  403ae6:	f173 0300 	sbcs.w	r3, r3, #0
  403aea:	910f      	str	r1, [sp, #60]	; 0x3c
  403aec:	4614      	mov	r4, r2
  403aee:	daa6      	bge.n	403a3e <_svfprintf_r+0x6ae>
  403af0:	272d      	movs	r7, #45	; 0x2d
  403af2:	4264      	negs	r4, r4
  403af4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403af8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403afc:	2301      	movs	r3, #1
  403afe:	e53d      	b.n	40357c <_svfprintf_r+0x1ec>
  403b00:	9311      	str	r3, [sp, #68]	; 0x44
  403b02:	2a00      	cmp	r2, #0
  403b04:	f040 8662 	bne.w	4047cc <_svfprintf_r+0x143c>
  403b08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b0a:	3507      	adds	r5, #7
  403b0c:	f025 0307 	bic.w	r3, r5, #7
  403b10:	f103 0208 	add.w	r2, r3, #8
  403b14:	920f      	str	r2, [sp, #60]	; 0x3c
  403b16:	681a      	ldr	r2, [r3, #0]
  403b18:	9215      	str	r2, [sp, #84]	; 0x54
  403b1a:	685b      	ldr	r3, [r3, #4]
  403b1c:	9314      	str	r3, [sp, #80]	; 0x50
  403b1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403b20:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403b22:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403b26:	4628      	mov	r0, r5
  403b28:	4621      	mov	r1, r4
  403b2a:	f04f 32ff 	mov.w	r2, #4294967295
  403b2e:	4b59      	ldr	r3, [pc, #356]	; (403c94 <_svfprintf_r+0x904>)
  403b30:	f003 fefa 	bl	407928 <__aeabi_dcmpun>
  403b34:	2800      	cmp	r0, #0
  403b36:	f040 834a 	bne.w	4041ce <_svfprintf_r+0xe3e>
  403b3a:	4628      	mov	r0, r5
  403b3c:	4621      	mov	r1, r4
  403b3e:	f04f 32ff 	mov.w	r2, #4294967295
  403b42:	4b54      	ldr	r3, [pc, #336]	; (403c94 <_svfprintf_r+0x904>)
  403b44:	f003 fed2 	bl	4078ec <__aeabi_dcmple>
  403b48:	2800      	cmp	r0, #0
  403b4a:	f040 8340 	bne.w	4041ce <_svfprintf_r+0xe3e>
  403b4e:	a815      	add	r0, sp, #84	; 0x54
  403b50:	c80d      	ldmia	r0, {r0, r2, r3}
  403b52:	9914      	ldr	r1, [sp, #80]	; 0x50
  403b54:	f003 fec0 	bl	4078d8 <__aeabi_dcmplt>
  403b58:	2800      	cmp	r0, #0
  403b5a:	f040 8530 	bne.w	4045be <_svfprintf_r+0x122e>
  403b5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403b62:	4e4d      	ldr	r6, [pc, #308]	; (403c98 <_svfprintf_r+0x908>)
  403b64:	4b4d      	ldr	r3, [pc, #308]	; (403c9c <_svfprintf_r+0x90c>)
  403b66:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403b6a:	9007      	str	r0, [sp, #28]
  403b6c:	9811      	ldr	r0, [sp, #68]	; 0x44
  403b6e:	2203      	movs	r2, #3
  403b70:	2100      	movs	r1, #0
  403b72:	9208      	str	r2, [sp, #32]
  403b74:	910a      	str	r1, [sp, #40]	; 0x28
  403b76:	2847      	cmp	r0, #71	; 0x47
  403b78:	bfd8      	it	le
  403b7a:	461e      	movle	r6, r3
  403b7c:	920e      	str	r2, [sp, #56]	; 0x38
  403b7e:	9112      	str	r1, [sp, #72]	; 0x48
  403b80:	e51e      	b.n	4035c0 <_svfprintf_r+0x230>
  403b82:	f04b 0b08 	orr.w	fp, fp, #8
  403b86:	f89a 3000 	ldrb.w	r3, [sl]
  403b8a:	e459      	b.n	403440 <_svfprintf_r+0xb0>
  403b8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b90:	2300      	movs	r3, #0
  403b92:	461c      	mov	r4, r3
  403b94:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403b98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403b9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403ba0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403ba4:	2809      	cmp	r0, #9
  403ba6:	d9f5      	bls.n	403b94 <_svfprintf_r+0x804>
  403ba8:	940d      	str	r4, [sp, #52]	; 0x34
  403baa:	e44b      	b.n	403444 <_svfprintf_r+0xb4>
  403bac:	f04b 0b10 	orr.w	fp, fp, #16
  403bb0:	9311      	str	r3, [sp, #68]	; 0x44
  403bb2:	f01b 0320 	ands.w	r3, fp, #32
  403bb6:	f43f ae1d 	beq.w	4037f4 <_svfprintf_r+0x464>
  403bba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403bbc:	3507      	adds	r5, #7
  403bbe:	f025 0307 	bic.w	r3, r5, #7
  403bc2:	f103 0208 	add.w	r2, r3, #8
  403bc6:	e9d3 4500 	ldrd	r4, r5, [r3]
  403bca:	920f      	str	r2, [sp, #60]	; 0x3c
  403bcc:	2300      	movs	r3, #0
  403bce:	e4d2      	b.n	403576 <_svfprintf_r+0x1e6>
  403bd0:	9311      	str	r3, [sp, #68]	; 0x44
  403bd2:	2a00      	cmp	r2, #0
  403bd4:	f040 85e7 	bne.w	4047a6 <_svfprintf_r+0x1416>
  403bd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bda:	2a00      	cmp	r2, #0
  403bdc:	f43f aca3 	beq.w	403526 <_svfprintf_r+0x196>
  403be0:	2300      	movs	r3, #0
  403be2:	2101      	movs	r1, #1
  403be4:	461f      	mov	r7, r3
  403be6:	9108      	str	r1, [sp, #32]
  403be8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403bec:	f8cd b01c 	str.w	fp, [sp, #28]
  403bf0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403bf4:	930a      	str	r3, [sp, #40]	; 0x28
  403bf6:	9312      	str	r3, [sp, #72]	; 0x48
  403bf8:	910e      	str	r1, [sp, #56]	; 0x38
  403bfa:	ae28      	add	r6, sp, #160	; 0xa0
  403bfc:	e4e4      	b.n	4035c8 <_svfprintf_r+0x238>
  403bfe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403c00:	e534      	b.n	40366c <_svfprintf_r+0x2dc>
  403c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403c04:	2b65      	cmp	r3, #101	; 0x65
  403c06:	f340 80a7 	ble.w	403d58 <_svfprintf_r+0x9c8>
  403c0a:	a815      	add	r0, sp, #84	; 0x54
  403c0c:	c80d      	ldmia	r0, {r0, r2, r3}
  403c0e:	9914      	ldr	r1, [sp, #80]	; 0x50
  403c10:	f003 fe58 	bl	4078c4 <__aeabi_dcmpeq>
  403c14:	2800      	cmp	r0, #0
  403c16:	f000 8150 	beq.w	403eba <_svfprintf_r+0xb2a>
  403c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c1c:	4a20      	ldr	r2, [pc, #128]	; (403ca0 <_svfprintf_r+0x910>)
  403c1e:	f8c8 2000 	str.w	r2, [r8]
  403c22:	3301      	adds	r3, #1
  403c24:	3401      	adds	r4, #1
  403c26:	2201      	movs	r2, #1
  403c28:	2b07      	cmp	r3, #7
  403c2a:	9427      	str	r4, [sp, #156]	; 0x9c
  403c2c:	9326      	str	r3, [sp, #152]	; 0x98
  403c2e:	f8c8 2004 	str.w	r2, [r8, #4]
  403c32:	f300 836a 	bgt.w	40430a <_svfprintf_r+0xf7a>
  403c36:	f108 0808 	add.w	r8, r8, #8
  403c3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403c3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403c40:	4293      	cmp	r3, r2
  403c42:	db03      	blt.n	403c4c <_svfprintf_r+0x8bc>
  403c44:	9b07      	ldr	r3, [sp, #28]
  403c46:	07dd      	lsls	r5, r3, #31
  403c48:	f57f ad82 	bpl.w	403750 <_svfprintf_r+0x3c0>
  403c4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c4e:	9919      	ldr	r1, [sp, #100]	; 0x64
  403c50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403c52:	f8c8 2000 	str.w	r2, [r8]
  403c56:	3301      	adds	r3, #1
  403c58:	440c      	add	r4, r1
  403c5a:	2b07      	cmp	r3, #7
  403c5c:	f8c8 1004 	str.w	r1, [r8, #4]
  403c60:	9427      	str	r4, [sp, #156]	; 0x9c
  403c62:	9326      	str	r3, [sp, #152]	; 0x98
  403c64:	f300 839e 	bgt.w	4043a4 <_svfprintf_r+0x1014>
  403c68:	f108 0808 	add.w	r8, r8, #8
  403c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403c6e:	1e5e      	subs	r6, r3, #1
  403c70:	2e00      	cmp	r6, #0
  403c72:	f77f ad6d 	ble.w	403750 <_svfprintf_r+0x3c0>
  403c76:	2e10      	cmp	r6, #16
  403c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c7a:	4d0a      	ldr	r5, [pc, #40]	; (403ca4 <_svfprintf_r+0x914>)
  403c7c:	f340 81f5 	ble.w	40406a <_svfprintf_r+0xcda>
  403c80:	4622      	mov	r2, r4
  403c82:	2710      	movs	r7, #16
  403c84:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403c88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403c8a:	e013      	b.n	403cb4 <_svfprintf_r+0x924>
  403c8c:	00407b90 	.word	0x00407b90
  403c90:	00407b7c 	.word	0x00407b7c
  403c94:	7fefffff 	.word	0x7fefffff
  403c98:	00407b70 	.word	0x00407b70
  403c9c:	00407b6c 	.word	0x00407b6c
  403ca0:	00407bac 	.word	0x00407bac
  403ca4:	00407bc0 	.word	0x00407bc0
  403ca8:	f108 0808 	add.w	r8, r8, #8
  403cac:	3e10      	subs	r6, #16
  403cae:	2e10      	cmp	r6, #16
  403cb0:	f340 81da 	ble.w	404068 <_svfprintf_r+0xcd8>
  403cb4:	3301      	adds	r3, #1
  403cb6:	3210      	adds	r2, #16
  403cb8:	2b07      	cmp	r3, #7
  403cba:	9227      	str	r2, [sp, #156]	; 0x9c
  403cbc:	9326      	str	r3, [sp, #152]	; 0x98
  403cbe:	e888 00a0 	stmia.w	r8, {r5, r7}
  403cc2:	ddf1      	ble.n	403ca8 <_svfprintf_r+0x918>
  403cc4:	aa25      	add	r2, sp, #148	; 0x94
  403cc6:	4621      	mov	r1, r4
  403cc8:	4658      	mov	r0, fp
  403cca:	f002 fd67 	bl	40679c <__ssprint_r>
  403cce:	2800      	cmp	r0, #0
  403cd0:	f47f ac30 	bne.w	403534 <_svfprintf_r+0x1a4>
  403cd4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403cd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403cd8:	46c8      	mov	r8, r9
  403cda:	e7e7      	b.n	403cac <_svfprintf_r+0x91c>
  403cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403cde:	9a08      	ldr	r2, [sp, #32]
  403ce0:	1a9f      	subs	r7, r3, r2
  403ce2:	2f00      	cmp	r7, #0
  403ce4:	f77f ace5 	ble.w	4036b2 <_svfprintf_r+0x322>
  403ce8:	2f10      	cmp	r7, #16
  403cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403cec:	4db6      	ldr	r5, [pc, #728]	; (403fc8 <_svfprintf_r+0xc38>)
  403cee:	dd27      	ble.n	403d40 <_svfprintf_r+0x9b0>
  403cf0:	4642      	mov	r2, r8
  403cf2:	4621      	mov	r1, r4
  403cf4:	46b0      	mov	r8, r6
  403cf6:	f04f 0b10 	mov.w	fp, #16
  403cfa:	462e      	mov	r6, r5
  403cfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403cfe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403d00:	e004      	b.n	403d0c <_svfprintf_r+0x97c>
  403d02:	3f10      	subs	r7, #16
  403d04:	2f10      	cmp	r7, #16
  403d06:	f102 0208 	add.w	r2, r2, #8
  403d0a:	dd15      	ble.n	403d38 <_svfprintf_r+0x9a8>
  403d0c:	3301      	adds	r3, #1
  403d0e:	3110      	adds	r1, #16
  403d10:	2b07      	cmp	r3, #7
  403d12:	9127      	str	r1, [sp, #156]	; 0x9c
  403d14:	9326      	str	r3, [sp, #152]	; 0x98
  403d16:	e882 0840 	stmia.w	r2, {r6, fp}
  403d1a:	ddf2      	ble.n	403d02 <_svfprintf_r+0x972>
  403d1c:	aa25      	add	r2, sp, #148	; 0x94
  403d1e:	4629      	mov	r1, r5
  403d20:	4620      	mov	r0, r4
  403d22:	f002 fd3b 	bl	40679c <__ssprint_r>
  403d26:	2800      	cmp	r0, #0
  403d28:	f47f ac04 	bne.w	403534 <_svfprintf_r+0x1a4>
  403d2c:	3f10      	subs	r7, #16
  403d2e:	2f10      	cmp	r7, #16
  403d30:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403d32:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d34:	464a      	mov	r2, r9
  403d36:	dce9      	bgt.n	403d0c <_svfprintf_r+0x97c>
  403d38:	4635      	mov	r5, r6
  403d3a:	460c      	mov	r4, r1
  403d3c:	4646      	mov	r6, r8
  403d3e:	4690      	mov	r8, r2
  403d40:	3301      	adds	r3, #1
  403d42:	443c      	add	r4, r7
  403d44:	2b07      	cmp	r3, #7
  403d46:	9427      	str	r4, [sp, #156]	; 0x9c
  403d48:	9326      	str	r3, [sp, #152]	; 0x98
  403d4a:	e888 00a0 	stmia.w	r8, {r5, r7}
  403d4e:	f300 8232 	bgt.w	4041b6 <_svfprintf_r+0xe26>
  403d52:	f108 0808 	add.w	r8, r8, #8
  403d56:	e4ac      	b.n	4036b2 <_svfprintf_r+0x322>
  403d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403d5a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403d5c:	2b01      	cmp	r3, #1
  403d5e:	f340 81fe 	ble.w	40415e <_svfprintf_r+0xdce>
  403d62:	3701      	adds	r7, #1
  403d64:	3401      	adds	r4, #1
  403d66:	2301      	movs	r3, #1
  403d68:	2f07      	cmp	r7, #7
  403d6a:	9427      	str	r4, [sp, #156]	; 0x9c
  403d6c:	9726      	str	r7, [sp, #152]	; 0x98
  403d6e:	f8c8 6000 	str.w	r6, [r8]
  403d72:	f8c8 3004 	str.w	r3, [r8, #4]
  403d76:	f300 8203 	bgt.w	404180 <_svfprintf_r+0xdf0>
  403d7a:	f108 0808 	add.w	r8, r8, #8
  403d7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403d80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403d82:	f8c8 3000 	str.w	r3, [r8]
  403d86:	3701      	adds	r7, #1
  403d88:	4414      	add	r4, r2
  403d8a:	2f07      	cmp	r7, #7
  403d8c:	9427      	str	r4, [sp, #156]	; 0x9c
  403d8e:	9726      	str	r7, [sp, #152]	; 0x98
  403d90:	f8c8 2004 	str.w	r2, [r8, #4]
  403d94:	f300 8200 	bgt.w	404198 <_svfprintf_r+0xe08>
  403d98:	f108 0808 	add.w	r8, r8, #8
  403d9c:	a815      	add	r0, sp, #84	; 0x54
  403d9e:	c80d      	ldmia	r0, {r0, r2, r3}
  403da0:	9914      	ldr	r1, [sp, #80]	; 0x50
  403da2:	f003 fd8f 	bl	4078c4 <__aeabi_dcmpeq>
  403da6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403da8:	2800      	cmp	r0, #0
  403daa:	f040 8101 	bne.w	403fb0 <_svfprintf_r+0xc20>
  403dae:	3b01      	subs	r3, #1
  403db0:	3701      	adds	r7, #1
  403db2:	3601      	adds	r6, #1
  403db4:	441c      	add	r4, r3
  403db6:	2f07      	cmp	r7, #7
  403db8:	9726      	str	r7, [sp, #152]	; 0x98
  403dba:	9427      	str	r4, [sp, #156]	; 0x9c
  403dbc:	f8c8 6000 	str.w	r6, [r8]
  403dc0:	f8c8 3004 	str.w	r3, [r8, #4]
  403dc4:	f300 8127 	bgt.w	404016 <_svfprintf_r+0xc86>
  403dc8:	f108 0808 	add.w	r8, r8, #8
  403dcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403dce:	f8c8 2004 	str.w	r2, [r8, #4]
  403dd2:	3701      	adds	r7, #1
  403dd4:	4414      	add	r4, r2
  403dd6:	ab21      	add	r3, sp, #132	; 0x84
  403dd8:	2f07      	cmp	r7, #7
  403dda:	9427      	str	r4, [sp, #156]	; 0x9c
  403ddc:	9726      	str	r7, [sp, #152]	; 0x98
  403dde:	f8c8 3000 	str.w	r3, [r8]
  403de2:	f77f acb3 	ble.w	40374c <_svfprintf_r+0x3bc>
  403de6:	aa25      	add	r2, sp, #148	; 0x94
  403de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403dea:	980c      	ldr	r0, [sp, #48]	; 0x30
  403dec:	f002 fcd6 	bl	40679c <__ssprint_r>
  403df0:	2800      	cmp	r0, #0
  403df2:	f47f ab9f 	bne.w	403534 <_svfprintf_r+0x1a4>
  403df6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403df8:	46c8      	mov	r8, r9
  403dfa:	e4a9      	b.n	403750 <_svfprintf_r+0x3c0>
  403dfc:	aa25      	add	r2, sp, #148	; 0x94
  403dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e00:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e02:	f002 fccb 	bl	40679c <__ssprint_r>
  403e06:	2800      	cmp	r0, #0
  403e08:	f43f aceb 	beq.w	4037e2 <_svfprintf_r+0x452>
  403e0c:	f7ff bb92 	b.w	403534 <_svfprintf_r+0x1a4>
  403e10:	f8dd b01c 	ldr.w	fp, [sp, #28]
  403e14:	2b01      	cmp	r3, #1
  403e16:	f000 8134 	beq.w	404082 <_svfprintf_r+0xcf2>
  403e1a:	2b02      	cmp	r3, #2
  403e1c:	d125      	bne.n	403e6a <_svfprintf_r+0xada>
  403e1e:	f8cd b01c 	str.w	fp, [sp, #28]
  403e22:	2400      	movs	r4, #0
  403e24:	2500      	movs	r5, #0
  403e26:	e61e      	b.n	403a66 <_svfprintf_r+0x6d6>
  403e28:	aa25      	add	r2, sp, #148	; 0x94
  403e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e2c:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e2e:	f002 fcb5 	bl	40679c <__ssprint_r>
  403e32:	2800      	cmp	r0, #0
  403e34:	f47f ab7e 	bne.w	403534 <_svfprintf_r+0x1a4>
  403e38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e3a:	46c8      	mov	r8, r9
  403e3c:	e475      	b.n	40372a <_svfprintf_r+0x39a>
  403e3e:	aa25      	add	r2, sp, #148	; 0x94
  403e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e42:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e44:	f002 fcaa 	bl	40679c <__ssprint_r>
  403e48:	2800      	cmp	r0, #0
  403e4a:	f47f ab73 	bne.w	403534 <_svfprintf_r+0x1a4>
  403e4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e50:	46c8      	mov	r8, r9
  403e52:	e41b      	b.n	40368c <_svfprintf_r+0x2fc>
  403e54:	aa25      	add	r2, sp, #148	; 0x94
  403e56:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e58:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e5a:	f002 fc9f 	bl	40679c <__ssprint_r>
  403e5e:	2800      	cmp	r0, #0
  403e60:	f47f ab68 	bne.w	403534 <_svfprintf_r+0x1a4>
  403e64:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e66:	46c8      	mov	r8, r9
  403e68:	e420      	b.n	4036ac <_svfprintf_r+0x31c>
  403e6a:	f8cd b01c 	str.w	fp, [sp, #28]
  403e6e:	2400      	movs	r4, #0
  403e70:	2500      	movs	r5, #0
  403e72:	4649      	mov	r1, r9
  403e74:	e000      	b.n	403e78 <_svfprintf_r+0xae8>
  403e76:	4631      	mov	r1, r6
  403e78:	08e2      	lsrs	r2, r4, #3
  403e7a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403e7e:	08e8      	lsrs	r0, r5, #3
  403e80:	f004 0307 	and.w	r3, r4, #7
  403e84:	4605      	mov	r5, r0
  403e86:	4614      	mov	r4, r2
  403e88:	3330      	adds	r3, #48	; 0x30
  403e8a:	ea54 0205 	orrs.w	r2, r4, r5
  403e8e:	f801 3c01 	strb.w	r3, [r1, #-1]
  403e92:	f101 36ff 	add.w	r6, r1, #4294967295
  403e96:	d1ee      	bne.n	403e76 <_svfprintf_r+0xae6>
  403e98:	9a07      	ldr	r2, [sp, #28]
  403e9a:	07d2      	lsls	r2, r2, #31
  403e9c:	f57f adf3 	bpl.w	403a86 <_svfprintf_r+0x6f6>
  403ea0:	2b30      	cmp	r3, #48	; 0x30
  403ea2:	f43f adf0 	beq.w	403a86 <_svfprintf_r+0x6f6>
  403ea6:	3902      	subs	r1, #2
  403ea8:	2330      	movs	r3, #48	; 0x30
  403eaa:	f806 3c01 	strb.w	r3, [r6, #-1]
  403eae:	eba9 0301 	sub.w	r3, r9, r1
  403eb2:	930e      	str	r3, [sp, #56]	; 0x38
  403eb4:	460e      	mov	r6, r1
  403eb6:	f7ff bb7b 	b.w	4035b0 <_svfprintf_r+0x220>
  403eba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403ebc:	2900      	cmp	r1, #0
  403ebe:	f340 822e 	ble.w	40431e <_svfprintf_r+0xf8e>
  403ec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403ec4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403ec6:	4293      	cmp	r3, r2
  403ec8:	bfa8      	it	ge
  403eca:	4613      	movge	r3, r2
  403ecc:	2b00      	cmp	r3, #0
  403ece:	461f      	mov	r7, r3
  403ed0:	dd0d      	ble.n	403eee <_svfprintf_r+0xb5e>
  403ed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ed4:	f8c8 6000 	str.w	r6, [r8]
  403ed8:	3301      	adds	r3, #1
  403eda:	443c      	add	r4, r7
  403edc:	2b07      	cmp	r3, #7
  403ede:	9427      	str	r4, [sp, #156]	; 0x9c
  403ee0:	f8c8 7004 	str.w	r7, [r8, #4]
  403ee4:	9326      	str	r3, [sp, #152]	; 0x98
  403ee6:	f300 831f 	bgt.w	404528 <_svfprintf_r+0x1198>
  403eea:	f108 0808 	add.w	r8, r8, #8
  403eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403ef0:	2f00      	cmp	r7, #0
  403ef2:	bfa8      	it	ge
  403ef4:	1bdb      	subge	r3, r3, r7
  403ef6:	2b00      	cmp	r3, #0
  403ef8:	461f      	mov	r7, r3
  403efa:	f340 80d6 	ble.w	4040aa <_svfprintf_r+0xd1a>
  403efe:	2f10      	cmp	r7, #16
  403f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f02:	4d31      	ldr	r5, [pc, #196]	; (403fc8 <_svfprintf_r+0xc38>)
  403f04:	f340 81ed 	ble.w	4042e2 <_svfprintf_r+0xf52>
  403f08:	4642      	mov	r2, r8
  403f0a:	4621      	mov	r1, r4
  403f0c:	46b0      	mov	r8, r6
  403f0e:	f04f 0b10 	mov.w	fp, #16
  403f12:	462e      	mov	r6, r5
  403f14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f18:	e004      	b.n	403f24 <_svfprintf_r+0xb94>
  403f1a:	3208      	adds	r2, #8
  403f1c:	3f10      	subs	r7, #16
  403f1e:	2f10      	cmp	r7, #16
  403f20:	f340 81db 	ble.w	4042da <_svfprintf_r+0xf4a>
  403f24:	3301      	adds	r3, #1
  403f26:	3110      	adds	r1, #16
  403f28:	2b07      	cmp	r3, #7
  403f2a:	9127      	str	r1, [sp, #156]	; 0x9c
  403f2c:	9326      	str	r3, [sp, #152]	; 0x98
  403f2e:	e882 0840 	stmia.w	r2, {r6, fp}
  403f32:	ddf2      	ble.n	403f1a <_svfprintf_r+0xb8a>
  403f34:	aa25      	add	r2, sp, #148	; 0x94
  403f36:	4629      	mov	r1, r5
  403f38:	4620      	mov	r0, r4
  403f3a:	f002 fc2f 	bl	40679c <__ssprint_r>
  403f3e:	2800      	cmp	r0, #0
  403f40:	f47f aaf8 	bne.w	403534 <_svfprintf_r+0x1a4>
  403f44:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f46:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f48:	464a      	mov	r2, r9
  403f4a:	e7e7      	b.n	403f1c <_svfprintf_r+0xb8c>
  403f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f4e:	930e      	str	r3, [sp, #56]	; 0x38
  403f50:	464e      	mov	r6, r9
  403f52:	f7ff bb2d 	b.w	4035b0 <_svfprintf_r+0x220>
  403f56:	2d00      	cmp	r5, #0
  403f58:	bf08      	it	eq
  403f5a:	2c0a      	cmpeq	r4, #10
  403f5c:	f0c0 808f 	bcc.w	40407e <_svfprintf_r+0xcee>
  403f60:	464e      	mov	r6, r9
  403f62:	4620      	mov	r0, r4
  403f64:	4629      	mov	r1, r5
  403f66:	220a      	movs	r2, #10
  403f68:	2300      	movs	r3, #0
  403f6a:	f7fe fd2b 	bl	4029c4 <__aeabi_uldivmod>
  403f6e:	3230      	adds	r2, #48	; 0x30
  403f70:	f806 2d01 	strb.w	r2, [r6, #-1]!
  403f74:	4620      	mov	r0, r4
  403f76:	4629      	mov	r1, r5
  403f78:	2300      	movs	r3, #0
  403f7a:	220a      	movs	r2, #10
  403f7c:	f7fe fd22 	bl	4029c4 <__aeabi_uldivmod>
  403f80:	4604      	mov	r4, r0
  403f82:	460d      	mov	r5, r1
  403f84:	ea54 0305 	orrs.w	r3, r4, r5
  403f88:	d1eb      	bne.n	403f62 <_svfprintf_r+0xbd2>
  403f8a:	eba9 0306 	sub.w	r3, r9, r6
  403f8e:	930e      	str	r3, [sp, #56]	; 0x38
  403f90:	f7ff bb0e 	b.w	4035b0 <_svfprintf_r+0x220>
  403f94:	aa25      	add	r2, sp, #148	; 0x94
  403f96:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403f98:	980c      	ldr	r0, [sp, #48]	; 0x30
  403f9a:	f002 fbff 	bl	40679c <__ssprint_r>
  403f9e:	2800      	cmp	r0, #0
  403fa0:	f47f aac8 	bne.w	403534 <_svfprintf_r+0x1a4>
  403fa4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403fa8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403faa:	46c8      	mov	r8, r9
  403fac:	f7ff bb5e 	b.w	40366c <_svfprintf_r+0x2dc>
  403fb0:	1e5e      	subs	r6, r3, #1
  403fb2:	2e00      	cmp	r6, #0
  403fb4:	f77f af0a 	ble.w	403dcc <_svfprintf_r+0xa3c>
  403fb8:	2e10      	cmp	r6, #16
  403fba:	4d03      	ldr	r5, [pc, #12]	; (403fc8 <_svfprintf_r+0xc38>)
  403fbc:	dd22      	ble.n	404004 <_svfprintf_r+0xc74>
  403fbe:	4622      	mov	r2, r4
  403fc0:	f04f 0b10 	mov.w	fp, #16
  403fc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403fc6:	e006      	b.n	403fd6 <_svfprintf_r+0xc46>
  403fc8:	00407bc0 	.word	0x00407bc0
  403fcc:	3e10      	subs	r6, #16
  403fce:	2e10      	cmp	r6, #16
  403fd0:	f108 0808 	add.w	r8, r8, #8
  403fd4:	dd15      	ble.n	404002 <_svfprintf_r+0xc72>
  403fd6:	3701      	adds	r7, #1
  403fd8:	3210      	adds	r2, #16
  403fda:	2f07      	cmp	r7, #7
  403fdc:	9227      	str	r2, [sp, #156]	; 0x9c
  403fde:	9726      	str	r7, [sp, #152]	; 0x98
  403fe0:	e888 0820 	stmia.w	r8, {r5, fp}
  403fe4:	ddf2      	ble.n	403fcc <_svfprintf_r+0xc3c>
  403fe6:	aa25      	add	r2, sp, #148	; 0x94
  403fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fea:	4620      	mov	r0, r4
  403fec:	f002 fbd6 	bl	40679c <__ssprint_r>
  403ff0:	2800      	cmp	r0, #0
  403ff2:	f47f aa9f 	bne.w	403534 <_svfprintf_r+0x1a4>
  403ff6:	3e10      	subs	r6, #16
  403ff8:	2e10      	cmp	r6, #16
  403ffa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403ffc:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403ffe:	46c8      	mov	r8, r9
  404000:	dce9      	bgt.n	403fd6 <_svfprintf_r+0xc46>
  404002:	4614      	mov	r4, r2
  404004:	3701      	adds	r7, #1
  404006:	4434      	add	r4, r6
  404008:	2f07      	cmp	r7, #7
  40400a:	9427      	str	r4, [sp, #156]	; 0x9c
  40400c:	9726      	str	r7, [sp, #152]	; 0x98
  40400e:	e888 0060 	stmia.w	r8, {r5, r6}
  404012:	f77f aed9 	ble.w	403dc8 <_svfprintf_r+0xa38>
  404016:	aa25      	add	r2, sp, #148	; 0x94
  404018:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40401a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40401c:	f002 fbbe 	bl	40679c <__ssprint_r>
  404020:	2800      	cmp	r0, #0
  404022:	f47f aa87 	bne.w	403534 <_svfprintf_r+0x1a4>
  404026:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404028:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40402a:	46c8      	mov	r8, r9
  40402c:	e6ce      	b.n	403dcc <_svfprintf_r+0xa3c>
  40402e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404030:	6814      	ldr	r4, [r2, #0]
  404032:	4613      	mov	r3, r2
  404034:	3304      	adds	r3, #4
  404036:	17e5      	asrs	r5, r4, #31
  404038:	930f      	str	r3, [sp, #60]	; 0x3c
  40403a:	4622      	mov	r2, r4
  40403c:	462b      	mov	r3, r5
  40403e:	e4fa      	b.n	403a36 <_svfprintf_r+0x6a6>
  404040:	3204      	adds	r2, #4
  404042:	681c      	ldr	r4, [r3, #0]
  404044:	920f      	str	r2, [sp, #60]	; 0x3c
  404046:	2301      	movs	r3, #1
  404048:	2500      	movs	r5, #0
  40404a:	f7ff ba94 	b.w	403576 <_svfprintf_r+0x1e6>
  40404e:	681c      	ldr	r4, [r3, #0]
  404050:	3304      	adds	r3, #4
  404052:	930f      	str	r3, [sp, #60]	; 0x3c
  404054:	2500      	movs	r5, #0
  404056:	e421      	b.n	40389c <_svfprintf_r+0x50c>
  404058:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40405a:	460a      	mov	r2, r1
  40405c:	3204      	adds	r2, #4
  40405e:	680c      	ldr	r4, [r1, #0]
  404060:	920f      	str	r2, [sp, #60]	; 0x3c
  404062:	2500      	movs	r5, #0
  404064:	f7ff ba87 	b.w	403576 <_svfprintf_r+0x1e6>
  404068:	4614      	mov	r4, r2
  40406a:	3301      	adds	r3, #1
  40406c:	4434      	add	r4, r6
  40406e:	2b07      	cmp	r3, #7
  404070:	9427      	str	r4, [sp, #156]	; 0x9c
  404072:	9326      	str	r3, [sp, #152]	; 0x98
  404074:	e888 0060 	stmia.w	r8, {r5, r6}
  404078:	f77f ab68 	ble.w	40374c <_svfprintf_r+0x3bc>
  40407c:	e6b3      	b.n	403de6 <_svfprintf_r+0xa56>
  40407e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404082:	f8cd b01c 	str.w	fp, [sp, #28]
  404086:	ae42      	add	r6, sp, #264	; 0x108
  404088:	3430      	adds	r4, #48	; 0x30
  40408a:	2301      	movs	r3, #1
  40408c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404090:	930e      	str	r3, [sp, #56]	; 0x38
  404092:	f7ff ba8d 	b.w	4035b0 <_svfprintf_r+0x220>
  404096:	aa25      	add	r2, sp, #148	; 0x94
  404098:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40409a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40409c:	f002 fb7e 	bl	40679c <__ssprint_r>
  4040a0:	2800      	cmp	r0, #0
  4040a2:	f47f aa47 	bne.w	403534 <_svfprintf_r+0x1a4>
  4040a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040a8:	46c8      	mov	r8, r9
  4040aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4040ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040ae:	429a      	cmp	r2, r3
  4040b0:	db44      	blt.n	40413c <_svfprintf_r+0xdac>
  4040b2:	9b07      	ldr	r3, [sp, #28]
  4040b4:	07d9      	lsls	r1, r3, #31
  4040b6:	d441      	bmi.n	40413c <_svfprintf_r+0xdac>
  4040b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040ba:	9812      	ldr	r0, [sp, #72]	; 0x48
  4040bc:	1a9a      	subs	r2, r3, r2
  4040be:	1a1d      	subs	r5, r3, r0
  4040c0:	4295      	cmp	r5, r2
  4040c2:	bfa8      	it	ge
  4040c4:	4615      	movge	r5, r2
  4040c6:	2d00      	cmp	r5, #0
  4040c8:	dd0e      	ble.n	4040e8 <_svfprintf_r+0xd58>
  4040ca:	9926      	ldr	r1, [sp, #152]	; 0x98
  4040cc:	f8c8 5004 	str.w	r5, [r8, #4]
  4040d0:	3101      	adds	r1, #1
  4040d2:	4406      	add	r6, r0
  4040d4:	442c      	add	r4, r5
  4040d6:	2907      	cmp	r1, #7
  4040d8:	f8c8 6000 	str.w	r6, [r8]
  4040dc:	9427      	str	r4, [sp, #156]	; 0x9c
  4040de:	9126      	str	r1, [sp, #152]	; 0x98
  4040e0:	f300 823b 	bgt.w	40455a <_svfprintf_r+0x11ca>
  4040e4:	f108 0808 	add.w	r8, r8, #8
  4040e8:	2d00      	cmp	r5, #0
  4040ea:	bfac      	ite	ge
  4040ec:	1b56      	subge	r6, r2, r5
  4040ee:	4616      	movlt	r6, r2
  4040f0:	2e00      	cmp	r6, #0
  4040f2:	f77f ab2d 	ble.w	403750 <_svfprintf_r+0x3c0>
  4040f6:	2e10      	cmp	r6, #16
  4040f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040fa:	4db0      	ldr	r5, [pc, #704]	; (4043bc <_svfprintf_r+0x102c>)
  4040fc:	ddb5      	ble.n	40406a <_svfprintf_r+0xcda>
  4040fe:	4622      	mov	r2, r4
  404100:	2710      	movs	r7, #16
  404102:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404106:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404108:	e004      	b.n	404114 <_svfprintf_r+0xd84>
  40410a:	f108 0808 	add.w	r8, r8, #8
  40410e:	3e10      	subs	r6, #16
  404110:	2e10      	cmp	r6, #16
  404112:	dda9      	ble.n	404068 <_svfprintf_r+0xcd8>
  404114:	3301      	adds	r3, #1
  404116:	3210      	adds	r2, #16
  404118:	2b07      	cmp	r3, #7
  40411a:	9227      	str	r2, [sp, #156]	; 0x9c
  40411c:	9326      	str	r3, [sp, #152]	; 0x98
  40411e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404122:	ddf2      	ble.n	40410a <_svfprintf_r+0xd7a>
  404124:	aa25      	add	r2, sp, #148	; 0x94
  404126:	4621      	mov	r1, r4
  404128:	4658      	mov	r0, fp
  40412a:	f002 fb37 	bl	40679c <__ssprint_r>
  40412e:	2800      	cmp	r0, #0
  404130:	f47f aa00 	bne.w	403534 <_svfprintf_r+0x1a4>
  404134:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404136:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404138:	46c8      	mov	r8, r9
  40413a:	e7e8      	b.n	40410e <_svfprintf_r+0xd7e>
  40413c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40413e:	9819      	ldr	r0, [sp, #100]	; 0x64
  404140:	991a      	ldr	r1, [sp, #104]	; 0x68
  404142:	f8c8 1000 	str.w	r1, [r8]
  404146:	3301      	adds	r3, #1
  404148:	4404      	add	r4, r0
  40414a:	2b07      	cmp	r3, #7
  40414c:	9427      	str	r4, [sp, #156]	; 0x9c
  40414e:	f8c8 0004 	str.w	r0, [r8, #4]
  404152:	9326      	str	r3, [sp, #152]	; 0x98
  404154:	f300 81f5 	bgt.w	404542 <_svfprintf_r+0x11b2>
  404158:	f108 0808 	add.w	r8, r8, #8
  40415c:	e7ac      	b.n	4040b8 <_svfprintf_r+0xd28>
  40415e:	9b07      	ldr	r3, [sp, #28]
  404160:	07da      	lsls	r2, r3, #31
  404162:	f53f adfe 	bmi.w	403d62 <_svfprintf_r+0x9d2>
  404166:	3701      	adds	r7, #1
  404168:	3401      	adds	r4, #1
  40416a:	2301      	movs	r3, #1
  40416c:	2f07      	cmp	r7, #7
  40416e:	9427      	str	r4, [sp, #156]	; 0x9c
  404170:	9726      	str	r7, [sp, #152]	; 0x98
  404172:	f8c8 6000 	str.w	r6, [r8]
  404176:	f8c8 3004 	str.w	r3, [r8, #4]
  40417a:	f77f ae25 	ble.w	403dc8 <_svfprintf_r+0xa38>
  40417e:	e74a      	b.n	404016 <_svfprintf_r+0xc86>
  404180:	aa25      	add	r2, sp, #148	; 0x94
  404182:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404184:	980c      	ldr	r0, [sp, #48]	; 0x30
  404186:	f002 fb09 	bl	40679c <__ssprint_r>
  40418a:	2800      	cmp	r0, #0
  40418c:	f47f a9d2 	bne.w	403534 <_svfprintf_r+0x1a4>
  404190:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404192:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404194:	46c8      	mov	r8, r9
  404196:	e5f2      	b.n	403d7e <_svfprintf_r+0x9ee>
  404198:	aa25      	add	r2, sp, #148	; 0x94
  40419a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40419c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40419e:	f002 fafd 	bl	40679c <__ssprint_r>
  4041a2:	2800      	cmp	r0, #0
  4041a4:	f47f a9c6 	bne.w	403534 <_svfprintf_r+0x1a4>
  4041a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041aa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4041ac:	46c8      	mov	r8, r9
  4041ae:	e5f5      	b.n	403d9c <_svfprintf_r+0xa0c>
  4041b0:	464e      	mov	r6, r9
  4041b2:	f7ff b9fd 	b.w	4035b0 <_svfprintf_r+0x220>
  4041b6:	aa25      	add	r2, sp, #148	; 0x94
  4041b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041ba:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041bc:	f002 faee 	bl	40679c <__ssprint_r>
  4041c0:	2800      	cmp	r0, #0
  4041c2:	f47f a9b7 	bne.w	403534 <_svfprintf_r+0x1a4>
  4041c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041c8:	46c8      	mov	r8, r9
  4041ca:	f7ff ba72 	b.w	4036b2 <_svfprintf_r+0x322>
  4041ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4041d0:	4622      	mov	r2, r4
  4041d2:	4620      	mov	r0, r4
  4041d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4041d6:	4623      	mov	r3, r4
  4041d8:	4621      	mov	r1, r4
  4041da:	f003 fba5 	bl	407928 <__aeabi_dcmpun>
  4041de:	2800      	cmp	r0, #0
  4041e0:	f040 8286 	bne.w	4046f0 <_svfprintf_r+0x1360>
  4041e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4041e6:	3301      	adds	r3, #1
  4041e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4041ea:	f023 0320 	bic.w	r3, r3, #32
  4041ee:	930e      	str	r3, [sp, #56]	; 0x38
  4041f0:	f000 81e2 	beq.w	4045b8 <_svfprintf_r+0x1228>
  4041f4:	2b47      	cmp	r3, #71	; 0x47
  4041f6:	f000 811e 	beq.w	404436 <_svfprintf_r+0x10a6>
  4041fa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4041fe:	9307      	str	r3, [sp, #28]
  404200:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404202:	1e1f      	subs	r7, r3, #0
  404204:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404206:	9308      	str	r3, [sp, #32]
  404208:	bfbb      	ittet	lt
  40420a:	463b      	movlt	r3, r7
  40420c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404210:	2300      	movge	r3, #0
  404212:	232d      	movlt	r3, #45	; 0x2d
  404214:	9310      	str	r3, [sp, #64]	; 0x40
  404216:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404218:	2b66      	cmp	r3, #102	; 0x66
  40421a:	f000 81bb 	beq.w	404594 <_svfprintf_r+0x1204>
  40421e:	2b46      	cmp	r3, #70	; 0x46
  404220:	f000 80df 	beq.w	4043e2 <_svfprintf_r+0x1052>
  404224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404226:	9a08      	ldr	r2, [sp, #32]
  404228:	2b45      	cmp	r3, #69	; 0x45
  40422a:	bf0c      	ite	eq
  40422c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40422e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404230:	a823      	add	r0, sp, #140	; 0x8c
  404232:	a920      	add	r1, sp, #128	; 0x80
  404234:	bf08      	it	eq
  404236:	1c5d      	addeq	r5, r3, #1
  404238:	9004      	str	r0, [sp, #16]
  40423a:	9103      	str	r1, [sp, #12]
  40423c:	a81f      	add	r0, sp, #124	; 0x7c
  40423e:	2102      	movs	r1, #2
  404240:	463b      	mov	r3, r7
  404242:	9002      	str	r0, [sp, #8]
  404244:	9501      	str	r5, [sp, #4]
  404246:	9100      	str	r1, [sp, #0]
  404248:	980c      	ldr	r0, [sp, #48]	; 0x30
  40424a:	f000 fb75 	bl	404938 <_dtoa_r>
  40424e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404250:	2b67      	cmp	r3, #103	; 0x67
  404252:	4606      	mov	r6, r0
  404254:	f040 81e0 	bne.w	404618 <_svfprintf_r+0x1288>
  404258:	f01b 0f01 	tst.w	fp, #1
  40425c:	f000 8246 	beq.w	4046ec <_svfprintf_r+0x135c>
  404260:	1974      	adds	r4, r6, r5
  404262:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404264:	9808      	ldr	r0, [sp, #32]
  404266:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404268:	4639      	mov	r1, r7
  40426a:	f003 fb2b 	bl	4078c4 <__aeabi_dcmpeq>
  40426e:	2800      	cmp	r0, #0
  404270:	f040 8165 	bne.w	40453e <_svfprintf_r+0x11ae>
  404274:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404276:	42a3      	cmp	r3, r4
  404278:	d206      	bcs.n	404288 <_svfprintf_r+0xef8>
  40427a:	2130      	movs	r1, #48	; 0x30
  40427c:	1c5a      	adds	r2, r3, #1
  40427e:	9223      	str	r2, [sp, #140]	; 0x8c
  404280:	7019      	strb	r1, [r3, #0]
  404282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404284:	429c      	cmp	r4, r3
  404286:	d8f9      	bhi.n	40427c <_svfprintf_r+0xeec>
  404288:	1b9b      	subs	r3, r3, r6
  40428a:	9313      	str	r3, [sp, #76]	; 0x4c
  40428c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40428e:	2b47      	cmp	r3, #71	; 0x47
  404290:	f000 80e9 	beq.w	404466 <_svfprintf_r+0x10d6>
  404294:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404296:	2b65      	cmp	r3, #101	; 0x65
  404298:	f340 81cd 	ble.w	404636 <_svfprintf_r+0x12a6>
  40429c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40429e:	2b66      	cmp	r3, #102	; 0x66
  4042a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4042a2:	9312      	str	r3, [sp, #72]	; 0x48
  4042a4:	f000 819e 	beq.w	4045e4 <_svfprintf_r+0x1254>
  4042a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4042ac:	4619      	mov	r1, r3
  4042ae:	4291      	cmp	r1, r2
  4042b0:	f300 818a 	bgt.w	4045c8 <_svfprintf_r+0x1238>
  4042b4:	f01b 0f01 	tst.w	fp, #1
  4042b8:	f040 8213 	bne.w	4046e2 <_svfprintf_r+0x1352>
  4042bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4042c0:	9308      	str	r3, [sp, #32]
  4042c2:	2367      	movs	r3, #103	; 0x67
  4042c4:	920e      	str	r2, [sp, #56]	; 0x38
  4042c6:	9311      	str	r3, [sp, #68]	; 0x44
  4042c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4042ca:	2b00      	cmp	r3, #0
  4042cc:	f040 80c4 	bne.w	404458 <_svfprintf_r+0x10c8>
  4042d0:	930a      	str	r3, [sp, #40]	; 0x28
  4042d2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4042d6:	f7ff b973 	b.w	4035c0 <_svfprintf_r+0x230>
  4042da:	4635      	mov	r5, r6
  4042dc:	460c      	mov	r4, r1
  4042de:	4646      	mov	r6, r8
  4042e0:	4690      	mov	r8, r2
  4042e2:	3301      	adds	r3, #1
  4042e4:	443c      	add	r4, r7
  4042e6:	2b07      	cmp	r3, #7
  4042e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4042ea:	9326      	str	r3, [sp, #152]	; 0x98
  4042ec:	e888 00a0 	stmia.w	r8, {r5, r7}
  4042f0:	f73f aed1 	bgt.w	404096 <_svfprintf_r+0xd06>
  4042f4:	f108 0808 	add.w	r8, r8, #8
  4042f8:	e6d7      	b.n	4040aa <_svfprintf_r+0xd1a>
  4042fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4042fc:	6813      	ldr	r3, [r2, #0]
  4042fe:	3204      	adds	r2, #4
  404300:	920f      	str	r2, [sp, #60]	; 0x3c
  404302:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404304:	601a      	str	r2, [r3, #0]
  404306:	f7ff b86a 	b.w	4033de <_svfprintf_r+0x4e>
  40430a:	aa25      	add	r2, sp, #148	; 0x94
  40430c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40430e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404310:	f002 fa44 	bl	40679c <__ssprint_r>
  404314:	2800      	cmp	r0, #0
  404316:	f47f a90d 	bne.w	403534 <_svfprintf_r+0x1a4>
  40431a:	46c8      	mov	r8, r9
  40431c:	e48d      	b.n	403c3a <_svfprintf_r+0x8aa>
  40431e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404320:	4a27      	ldr	r2, [pc, #156]	; (4043c0 <_svfprintf_r+0x1030>)
  404322:	f8c8 2000 	str.w	r2, [r8]
  404326:	3301      	adds	r3, #1
  404328:	3401      	adds	r4, #1
  40432a:	2201      	movs	r2, #1
  40432c:	2b07      	cmp	r3, #7
  40432e:	9427      	str	r4, [sp, #156]	; 0x9c
  404330:	9326      	str	r3, [sp, #152]	; 0x98
  404332:	f8c8 2004 	str.w	r2, [r8, #4]
  404336:	dc72      	bgt.n	40441e <_svfprintf_r+0x108e>
  404338:	f108 0808 	add.w	r8, r8, #8
  40433c:	b929      	cbnz	r1, 40434a <_svfprintf_r+0xfba>
  40433e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404340:	b91b      	cbnz	r3, 40434a <_svfprintf_r+0xfba>
  404342:	9b07      	ldr	r3, [sp, #28]
  404344:	07d8      	lsls	r0, r3, #31
  404346:	f57f aa03 	bpl.w	403750 <_svfprintf_r+0x3c0>
  40434a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40434c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40434e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404350:	f8c8 2000 	str.w	r2, [r8]
  404354:	3301      	adds	r3, #1
  404356:	4602      	mov	r2, r0
  404358:	4422      	add	r2, r4
  40435a:	2b07      	cmp	r3, #7
  40435c:	9227      	str	r2, [sp, #156]	; 0x9c
  40435e:	f8c8 0004 	str.w	r0, [r8, #4]
  404362:	9326      	str	r3, [sp, #152]	; 0x98
  404364:	f300 818d 	bgt.w	404682 <_svfprintf_r+0x12f2>
  404368:	f108 0808 	add.w	r8, r8, #8
  40436c:	2900      	cmp	r1, #0
  40436e:	f2c0 8165 	blt.w	40463c <_svfprintf_r+0x12ac>
  404372:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404374:	f8c8 6000 	str.w	r6, [r8]
  404378:	3301      	adds	r3, #1
  40437a:	188c      	adds	r4, r1, r2
  40437c:	2b07      	cmp	r3, #7
  40437e:	9427      	str	r4, [sp, #156]	; 0x9c
  404380:	9326      	str	r3, [sp, #152]	; 0x98
  404382:	f8c8 1004 	str.w	r1, [r8, #4]
  404386:	f77f a9e1 	ble.w	40374c <_svfprintf_r+0x3bc>
  40438a:	e52c      	b.n	403de6 <_svfprintf_r+0xa56>
  40438c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40438e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404390:	6813      	ldr	r3, [r2, #0]
  404392:	17cd      	asrs	r5, r1, #31
  404394:	4608      	mov	r0, r1
  404396:	3204      	adds	r2, #4
  404398:	4629      	mov	r1, r5
  40439a:	920f      	str	r2, [sp, #60]	; 0x3c
  40439c:	e9c3 0100 	strd	r0, r1, [r3]
  4043a0:	f7ff b81d 	b.w	4033de <_svfprintf_r+0x4e>
  4043a4:	aa25      	add	r2, sp, #148	; 0x94
  4043a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043aa:	f002 f9f7 	bl	40679c <__ssprint_r>
  4043ae:	2800      	cmp	r0, #0
  4043b0:	f47f a8c0 	bne.w	403534 <_svfprintf_r+0x1a4>
  4043b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043b6:	46c8      	mov	r8, r9
  4043b8:	e458      	b.n	403c6c <_svfprintf_r+0x8dc>
  4043ba:	bf00      	nop
  4043bc:	00407bc0 	.word	0x00407bc0
  4043c0:	00407bac 	.word	0x00407bac
  4043c4:	2140      	movs	r1, #64	; 0x40
  4043c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043c8:	f001 fa0c 	bl	4057e4 <_malloc_r>
  4043cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4043ce:	6010      	str	r0, [r2, #0]
  4043d0:	6110      	str	r0, [r2, #16]
  4043d2:	2800      	cmp	r0, #0
  4043d4:	f000 81f2 	beq.w	4047bc <_svfprintf_r+0x142c>
  4043d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4043da:	2340      	movs	r3, #64	; 0x40
  4043dc:	6153      	str	r3, [r2, #20]
  4043de:	f7fe bfee 	b.w	4033be <_svfprintf_r+0x2e>
  4043e2:	a823      	add	r0, sp, #140	; 0x8c
  4043e4:	a920      	add	r1, sp, #128	; 0x80
  4043e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4043e8:	9004      	str	r0, [sp, #16]
  4043ea:	9103      	str	r1, [sp, #12]
  4043ec:	a81f      	add	r0, sp, #124	; 0x7c
  4043ee:	2103      	movs	r1, #3
  4043f0:	9002      	str	r0, [sp, #8]
  4043f2:	9a08      	ldr	r2, [sp, #32]
  4043f4:	9401      	str	r4, [sp, #4]
  4043f6:	463b      	mov	r3, r7
  4043f8:	9100      	str	r1, [sp, #0]
  4043fa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043fc:	f000 fa9c 	bl	404938 <_dtoa_r>
  404400:	4625      	mov	r5, r4
  404402:	4606      	mov	r6, r0
  404404:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404406:	2b46      	cmp	r3, #70	; 0x46
  404408:	eb06 0405 	add.w	r4, r6, r5
  40440c:	f47f af29 	bne.w	404262 <_svfprintf_r+0xed2>
  404410:	7833      	ldrb	r3, [r6, #0]
  404412:	2b30      	cmp	r3, #48	; 0x30
  404414:	f000 8178 	beq.w	404708 <_svfprintf_r+0x1378>
  404418:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40441a:	442c      	add	r4, r5
  40441c:	e721      	b.n	404262 <_svfprintf_r+0xed2>
  40441e:	aa25      	add	r2, sp, #148	; 0x94
  404420:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404422:	980c      	ldr	r0, [sp, #48]	; 0x30
  404424:	f002 f9ba 	bl	40679c <__ssprint_r>
  404428:	2800      	cmp	r0, #0
  40442a:	f47f a883 	bne.w	403534 <_svfprintf_r+0x1a4>
  40442e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404430:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404432:	46c8      	mov	r8, r9
  404434:	e782      	b.n	40433c <_svfprintf_r+0xfac>
  404436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404438:	2b00      	cmp	r3, #0
  40443a:	bf08      	it	eq
  40443c:	2301      	moveq	r3, #1
  40443e:	930a      	str	r3, [sp, #40]	; 0x28
  404440:	e6db      	b.n	4041fa <_svfprintf_r+0xe6a>
  404442:	4630      	mov	r0, r6
  404444:	940a      	str	r4, [sp, #40]	; 0x28
  404446:	f002 f93b 	bl	4066c0 <strlen>
  40444a:	950f      	str	r5, [sp, #60]	; 0x3c
  40444c:	900e      	str	r0, [sp, #56]	; 0x38
  40444e:	f8cd b01c 	str.w	fp, [sp, #28]
  404452:	4603      	mov	r3, r0
  404454:	f7ff b9f9 	b.w	40384a <_svfprintf_r+0x4ba>
  404458:	272d      	movs	r7, #45	; 0x2d
  40445a:	2300      	movs	r3, #0
  40445c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404460:	930a      	str	r3, [sp, #40]	; 0x28
  404462:	f7ff b8ae 	b.w	4035c2 <_svfprintf_r+0x232>
  404466:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404468:	9312      	str	r3, [sp, #72]	; 0x48
  40446a:	461a      	mov	r2, r3
  40446c:	3303      	adds	r3, #3
  40446e:	db04      	blt.n	40447a <_svfprintf_r+0x10ea>
  404470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404472:	4619      	mov	r1, r3
  404474:	4291      	cmp	r1, r2
  404476:	f6bf af17 	bge.w	4042a8 <_svfprintf_r+0xf18>
  40447a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40447c:	3b02      	subs	r3, #2
  40447e:	9311      	str	r3, [sp, #68]	; 0x44
  404480:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404484:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404488:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40448a:	3b01      	subs	r3, #1
  40448c:	2b00      	cmp	r3, #0
  40448e:	931f      	str	r3, [sp, #124]	; 0x7c
  404490:	bfbd      	ittte	lt
  404492:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404494:	f1c3 0301 	rsblt	r3, r3, #1
  404498:	222d      	movlt	r2, #45	; 0x2d
  40449a:	222b      	movge	r2, #43	; 0x2b
  40449c:	2b09      	cmp	r3, #9
  40449e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4044a2:	f340 8116 	ble.w	4046d2 <_svfprintf_r+0x1342>
  4044a6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4044aa:	4620      	mov	r0, r4
  4044ac:	4dab      	ldr	r5, [pc, #684]	; (40475c <_svfprintf_r+0x13cc>)
  4044ae:	e000      	b.n	4044b2 <_svfprintf_r+0x1122>
  4044b0:	4610      	mov	r0, r2
  4044b2:	fb85 1203 	smull	r1, r2, r5, r3
  4044b6:	17d9      	asrs	r1, r3, #31
  4044b8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4044bc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4044c0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4044c4:	3230      	adds	r2, #48	; 0x30
  4044c6:	2909      	cmp	r1, #9
  4044c8:	f800 2c01 	strb.w	r2, [r0, #-1]
  4044cc:	460b      	mov	r3, r1
  4044ce:	f100 32ff 	add.w	r2, r0, #4294967295
  4044d2:	dced      	bgt.n	4044b0 <_svfprintf_r+0x1120>
  4044d4:	3330      	adds	r3, #48	; 0x30
  4044d6:	3802      	subs	r0, #2
  4044d8:	b2d9      	uxtb	r1, r3
  4044da:	4284      	cmp	r4, r0
  4044dc:	f802 1c01 	strb.w	r1, [r2, #-1]
  4044e0:	f240 8165 	bls.w	4047ae <_svfprintf_r+0x141e>
  4044e4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4044e8:	4613      	mov	r3, r2
  4044ea:	e001      	b.n	4044f0 <_svfprintf_r+0x1160>
  4044ec:	f813 1b01 	ldrb.w	r1, [r3], #1
  4044f0:	f800 1b01 	strb.w	r1, [r0], #1
  4044f4:	42a3      	cmp	r3, r4
  4044f6:	d1f9      	bne.n	4044ec <_svfprintf_r+0x115c>
  4044f8:	3301      	adds	r3, #1
  4044fa:	1a9b      	subs	r3, r3, r2
  4044fc:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404500:	4413      	add	r3, r2
  404502:	aa21      	add	r2, sp, #132	; 0x84
  404504:	1a9b      	subs	r3, r3, r2
  404506:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404508:	931b      	str	r3, [sp, #108]	; 0x6c
  40450a:	2a01      	cmp	r2, #1
  40450c:	4413      	add	r3, r2
  40450e:	930e      	str	r3, [sp, #56]	; 0x38
  404510:	f340 8119 	ble.w	404746 <_svfprintf_r+0x13b6>
  404514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404516:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404518:	4413      	add	r3, r2
  40451a:	930e      	str	r3, [sp, #56]	; 0x38
  40451c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404520:	9308      	str	r3, [sp, #32]
  404522:	2300      	movs	r3, #0
  404524:	9312      	str	r3, [sp, #72]	; 0x48
  404526:	e6cf      	b.n	4042c8 <_svfprintf_r+0xf38>
  404528:	aa25      	add	r2, sp, #148	; 0x94
  40452a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40452c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40452e:	f002 f935 	bl	40679c <__ssprint_r>
  404532:	2800      	cmp	r0, #0
  404534:	f47e affe 	bne.w	403534 <_svfprintf_r+0x1a4>
  404538:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40453a:	46c8      	mov	r8, r9
  40453c:	e4d7      	b.n	403eee <_svfprintf_r+0xb5e>
  40453e:	4623      	mov	r3, r4
  404540:	e6a2      	b.n	404288 <_svfprintf_r+0xef8>
  404542:	aa25      	add	r2, sp, #148	; 0x94
  404544:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404546:	980c      	ldr	r0, [sp, #48]	; 0x30
  404548:	f002 f928 	bl	40679c <__ssprint_r>
  40454c:	2800      	cmp	r0, #0
  40454e:	f47e aff1 	bne.w	403534 <_svfprintf_r+0x1a4>
  404552:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404554:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404556:	46c8      	mov	r8, r9
  404558:	e5ae      	b.n	4040b8 <_svfprintf_r+0xd28>
  40455a:	aa25      	add	r2, sp, #148	; 0x94
  40455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40455e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404560:	f002 f91c 	bl	40679c <__ssprint_r>
  404564:	2800      	cmp	r0, #0
  404566:	f47e afe5 	bne.w	403534 <_svfprintf_r+0x1a4>
  40456a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40456c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40456e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404570:	1a9a      	subs	r2, r3, r2
  404572:	46c8      	mov	r8, r9
  404574:	e5b8      	b.n	4040e8 <_svfprintf_r+0xd58>
  404576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404578:	9612      	str	r6, [sp, #72]	; 0x48
  40457a:	2b06      	cmp	r3, #6
  40457c:	bf28      	it	cs
  40457e:	2306      	movcs	r3, #6
  404580:	960a      	str	r6, [sp, #40]	; 0x28
  404582:	4637      	mov	r7, r6
  404584:	9308      	str	r3, [sp, #32]
  404586:	950f      	str	r5, [sp, #60]	; 0x3c
  404588:	f8cd b01c 	str.w	fp, [sp, #28]
  40458c:	930e      	str	r3, [sp, #56]	; 0x38
  40458e:	4e74      	ldr	r6, [pc, #464]	; (404760 <_svfprintf_r+0x13d0>)
  404590:	f7ff b816 	b.w	4035c0 <_svfprintf_r+0x230>
  404594:	a823      	add	r0, sp, #140	; 0x8c
  404596:	a920      	add	r1, sp, #128	; 0x80
  404598:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40459a:	9004      	str	r0, [sp, #16]
  40459c:	9103      	str	r1, [sp, #12]
  40459e:	a81f      	add	r0, sp, #124	; 0x7c
  4045a0:	2103      	movs	r1, #3
  4045a2:	9002      	str	r0, [sp, #8]
  4045a4:	9a08      	ldr	r2, [sp, #32]
  4045a6:	9501      	str	r5, [sp, #4]
  4045a8:	463b      	mov	r3, r7
  4045aa:	9100      	str	r1, [sp, #0]
  4045ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045ae:	f000 f9c3 	bl	404938 <_dtoa_r>
  4045b2:	4606      	mov	r6, r0
  4045b4:	1944      	adds	r4, r0, r5
  4045b6:	e72b      	b.n	404410 <_svfprintf_r+0x1080>
  4045b8:	2306      	movs	r3, #6
  4045ba:	930a      	str	r3, [sp, #40]	; 0x28
  4045bc:	e61d      	b.n	4041fa <_svfprintf_r+0xe6a>
  4045be:	272d      	movs	r7, #45	; 0x2d
  4045c0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4045c4:	f7ff bacd 	b.w	403b62 <_svfprintf_r+0x7d2>
  4045c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4045ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045cc:	4413      	add	r3, r2
  4045ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4045d0:	930e      	str	r3, [sp, #56]	; 0x38
  4045d2:	2a00      	cmp	r2, #0
  4045d4:	f340 80b0 	ble.w	404738 <_svfprintf_r+0x13a8>
  4045d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4045dc:	9308      	str	r3, [sp, #32]
  4045de:	2367      	movs	r3, #103	; 0x67
  4045e0:	9311      	str	r3, [sp, #68]	; 0x44
  4045e2:	e671      	b.n	4042c8 <_svfprintf_r+0xf38>
  4045e4:	2b00      	cmp	r3, #0
  4045e6:	f340 80c3 	ble.w	404770 <_svfprintf_r+0x13e0>
  4045ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4045ec:	2a00      	cmp	r2, #0
  4045ee:	f040 8099 	bne.w	404724 <_svfprintf_r+0x1394>
  4045f2:	f01b 0f01 	tst.w	fp, #1
  4045f6:	f040 8095 	bne.w	404724 <_svfprintf_r+0x1394>
  4045fa:	9308      	str	r3, [sp, #32]
  4045fc:	930e      	str	r3, [sp, #56]	; 0x38
  4045fe:	e663      	b.n	4042c8 <_svfprintf_r+0xf38>
  404600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404602:	9308      	str	r3, [sp, #32]
  404604:	930e      	str	r3, [sp, #56]	; 0x38
  404606:	900a      	str	r0, [sp, #40]	; 0x28
  404608:	950f      	str	r5, [sp, #60]	; 0x3c
  40460a:	f8cd b01c 	str.w	fp, [sp, #28]
  40460e:	9012      	str	r0, [sp, #72]	; 0x48
  404610:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404614:	f7fe bfd4 	b.w	4035c0 <_svfprintf_r+0x230>
  404618:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40461a:	2b47      	cmp	r3, #71	; 0x47
  40461c:	f47f ae20 	bne.w	404260 <_svfprintf_r+0xed0>
  404620:	f01b 0f01 	tst.w	fp, #1
  404624:	f47f aeee 	bne.w	404404 <_svfprintf_r+0x1074>
  404628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40462a:	1b9b      	subs	r3, r3, r6
  40462c:	9313      	str	r3, [sp, #76]	; 0x4c
  40462e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404630:	2b47      	cmp	r3, #71	; 0x47
  404632:	f43f af18 	beq.w	404466 <_svfprintf_r+0x10d6>
  404636:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404638:	9312      	str	r3, [sp, #72]	; 0x48
  40463a:	e721      	b.n	404480 <_svfprintf_r+0x10f0>
  40463c:	424f      	negs	r7, r1
  40463e:	3110      	adds	r1, #16
  404640:	4d48      	ldr	r5, [pc, #288]	; (404764 <_svfprintf_r+0x13d4>)
  404642:	da2f      	bge.n	4046a4 <_svfprintf_r+0x1314>
  404644:	2410      	movs	r4, #16
  404646:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40464a:	e004      	b.n	404656 <_svfprintf_r+0x12c6>
  40464c:	f108 0808 	add.w	r8, r8, #8
  404650:	3f10      	subs	r7, #16
  404652:	2f10      	cmp	r7, #16
  404654:	dd26      	ble.n	4046a4 <_svfprintf_r+0x1314>
  404656:	3301      	adds	r3, #1
  404658:	3210      	adds	r2, #16
  40465a:	2b07      	cmp	r3, #7
  40465c:	9227      	str	r2, [sp, #156]	; 0x9c
  40465e:	9326      	str	r3, [sp, #152]	; 0x98
  404660:	f8c8 5000 	str.w	r5, [r8]
  404664:	f8c8 4004 	str.w	r4, [r8, #4]
  404668:	ddf0      	ble.n	40464c <_svfprintf_r+0x12bc>
  40466a:	aa25      	add	r2, sp, #148	; 0x94
  40466c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40466e:	4658      	mov	r0, fp
  404670:	f002 f894 	bl	40679c <__ssprint_r>
  404674:	2800      	cmp	r0, #0
  404676:	f47e af5d 	bne.w	403534 <_svfprintf_r+0x1a4>
  40467a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40467c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40467e:	46c8      	mov	r8, r9
  404680:	e7e6      	b.n	404650 <_svfprintf_r+0x12c0>
  404682:	aa25      	add	r2, sp, #148	; 0x94
  404684:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404686:	980c      	ldr	r0, [sp, #48]	; 0x30
  404688:	f002 f888 	bl	40679c <__ssprint_r>
  40468c:	2800      	cmp	r0, #0
  40468e:	f47e af51 	bne.w	403534 <_svfprintf_r+0x1a4>
  404692:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404694:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404696:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404698:	46c8      	mov	r8, r9
  40469a:	e667      	b.n	40436c <_svfprintf_r+0xfdc>
  40469c:	2000      	movs	r0, #0
  40469e:	900a      	str	r0, [sp, #40]	; 0x28
  4046a0:	f7fe bed0 	b.w	403444 <_svfprintf_r+0xb4>
  4046a4:	3301      	adds	r3, #1
  4046a6:	443a      	add	r2, r7
  4046a8:	2b07      	cmp	r3, #7
  4046aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4046ae:	9227      	str	r2, [sp, #156]	; 0x9c
  4046b0:	9326      	str	r3, [sp, #152]	; 0x98
  4046b2:	f108 0808 	add.w	r8, r8, #8
  4046b6:	f77f ae5c 	ble.w	404372 <_svfprintf_r+0xfe2>
  4046ba:	aa25      	add	r2, sp, #148	; 0x94
  4046bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046c0:	f002 f86c 	bl	40679c <__ssprint_r>
  4046c4:	2800      	cmp	r0, #0
  4046c6:	f47e af35 	bne.w	403534 <_svfprintf_r+0x1a4>
  4046ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4046cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046ce:	46c8      	mov	r8, r9
  4046d0:	e64f      	b.n	404372 <_svfprintf_r+0xfe2>
  4046d2:	3330      	adds	r3, #48	; 0x30
  4046d4:	2230      	movs	r2, #48	; 0x30
  4046d6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4046da:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4046de:	ab22      	add	r3, sp, #136	; 0x88
  4046e0:	e70f      	b.n	404502 <_svfprintf_r+0x1172>
  4046e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4046e6:	4413      	add	r3, r2
  4046e8:	930e      	str	r3, [sp, #56]	; 0x38
  4046ea:	e775      	b.n	4045d8 <_svfprintf_r+0x1248>
  4046ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4046ee:	e5cb      	b.n	404288 <_svfprintf_r+0xef8>
  4046f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4046f2:	4e1d      	ldr	r6, [pc, #116]	; (404768 <_svfprintf_r+0x13d8>)
  4046f4:	2b00      	cmp	r3, #0
  4046f6:	bfb6      	itet	lt
  4046f8:	272d      	movlt	r7, #45	; 0x2d
  4046fa:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4046fe:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404702:	4b1a      	ldr	r3, [pc, #104]	; (40476c <_svfprintf_r+0x13dc>)
  404704:	f7ff ba2f 	b.w	403b66 <_svfprintf_r+0x7d6>
  404708:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40470a:	9808      	ldr	r0, [sp, #32]
  40470c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40470e:	4639      	mov	r1, r7
  404710:	f003 f8d8 	bl	4078c4 <__aeabi_dcmpeq>
  404714:	2800      	cmp	r0, #0
  404716:	f47f ae7f 	bne.w	404418 <_svfprintf_r+0x1088>
  40471a:	f1c5 0501 	rsb	r5, r5, #1
  40471e:	951f      	str	r5, [sp, #124]	; 0x7c
  404720:	442c      	add	r4, r5
  404722:	e59e      	b.n	404262 <_svfprintf_r+0xed2>
  404724:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404726:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404728:	4413      	add	r3, r2
  40472a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40472c:	441a      	add	r2, r3
  40472e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404732:	920e      	str	r2, [sp, #56]	; 0x38
  404734:	9308      	str	r3, [sp, #32]
  404736:	e5c7      	b.n	4042c8 <_svfprintf_r+0xf38>
  404738:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40473a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40473c:	f1c3 0301 	rsb	r3, r3, #1
  404740:	441a      	add	r2, r3
  404742:	4613      	mov	r3, r2
  404744:	e7d0      	b.n	4046e8 <_svfprintf_r+0x1358>
  404746:	f01b 0301 	ands.w	r3, fp, #1
  40474a:	9312      	str	r3, [sp, #72]	; 0x48
  40474c:	f47f aee2 	bne.w	404514 <_svfprintf_r+0x1184>
  404750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404752:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404756:	9308      	str	r3, [sp, #32]
  404758:	e5b6      	b.n	4042c8 <_svfprintf_r+0xf38>
  40475a:	bf00      	nop
  40475c:	66666667 	.word	0x66666667
  404760:	00407ba4 	.word	0x00407ba4
  404764:	00407bc0 	.word	0x00407bc0
  404768:	00407b78 	.word	0x00407b78
  40476c:	00407b74 	.word	0x00407b74
  404770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404772:	b913      	cbnz	r3, 40477a <_svfprintf_r+0x13ea>
  404774:	f01b 0f01 	tst.w	fp, #1
  404778:	d002      	beq.n	404780 <_svfprintf_r+0x13f0>
  40477a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40477c:	3301      	adds	r3, #1
  40477e:	e7d4      	b.n	40472a <_svfprintf_r+0x139a>
  404780:	2301      	movs	r3, #1
  404782:	e73a      	b.n	4045fa <_svfprintf_r+0x126a>
  404784:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404786:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40478a:	6828      	ldr	r0, [r5, #0]
  40478c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404790:	900a      	str	r0, [sp, #40]	; 0x28
  404792:	4628      	mov	r0, r5
  404794:	3004      	adds	r0, #4
  404796:	46a2      	mov	sl, r4
  404798:	900f      	str	r0, [sp, #60]	; 0x3c
  40479a:	f7fe be51 	b.w	403440 <_svfprintf_r+0xb0>
  40479e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4047a2:	f7ff b867 	b.w	403874 <_svfprintf_r+0x4e4>
  4047a6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4047aa:	f7ff ba15 	b.w	403bd8 <_svfprintf_r+0x848>
  4047ae:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4047b2:	e6a6      	b.n	404502 <_svfprintf_r+0x1172>
  4047b4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4047b8:	f7ff b8eb 	b.w	403992 <_svfprintf_r+0x602>
  4047bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4047be:	230c      	movs	r3, #12
  4047c0:	6013      	str	r3, [r2, #0]
  4047c2:	f04f 33ff 	mov.w	r3, #4294967295
  4047c6:	9309      	str	r3, [sp, #36]	; 0x24
  4047c8:	f7fe bebd 	b.w	403546 <_svfprintf_r+0x1b6>
  4047cc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4047d0:	f7ff b99a 	b.w	403b08 <_svfprintf_r+0x778>
  4047d4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4047d8:	f7ff b976 	b.w	403ac8 <_svfprintf_r+0x738>
  4047dc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4047e0:	f7ff b959 	b.w	403a96 <_svfprintf_r+0x706>
  4047e4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4047e8:	f7ff b912 	b.w	403a10 <_svfprintf_r+0x680>

004047ec <register_fini>:
  4047ec:	4b02      	ldr	r3, [pc, #8]	; (4047f8 <register_fini+0xc>)
  4047ee:	b113      	cbz	r3, 4047f6 <register_fini+0xa>
  4047f0:	4802      	ldr	r0, [pc, #8]	; (4047fc <register_fini+0x10>)
  4047f2:	f000 b805 	b.w	404800 <atexit>
  4047f6:	4770      	bx	lr
  4047f8:	00000000 	.word	0x00000000
  4047fc:	0040578d 	.word	0x0040578d

00404800 <atexit>:
  404800:	2300      	movs	r3, #0
  404802:	4601      	mov	r1, r0
  404804:	461a      	mov	r2, r3
  404806:	4618      	mov	r0, r3
  404808:	f002 b846 	b.w	406898 <__register_exitproc>

0040480c <quorem>:
  40480c:	6902      	ldr	r2, [r0, #16]
  40480e:	690b      	ldr	r3, [r1, #16]
  404810:	4293      	cmp	r3, r2
  404812:	f300 808d 	bgt.w	404930 <quorem+0x124>
  404816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40481a:	f103 38ff 	add.w	r8, r3, #4294967295
  40481e:	f101 0714 	add.w	r7, r1, #20
  404822:	f100 0b14 	add.w	fp, r0, #20
  404826:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40482a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40482e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404832:	b083      	sub	sp, #12
  404834:	3201      	adds	r2, #1
  404836:	fbb3 f9f2 	udiv	r9, r3, r2
  40483a:	eb0b 0304 	add.w	r3, fp, r4
  40483e:	9400      	str	r4, [sp, #0]
  404840:	eb07 0a04 	add.w	sl, r7, r4
  404844:	9301      	str	r3, [sp, #4]
  404846:	f1b9 0f00 	cmp.w	r9, #0
  40484a:	d039      	beq.n	4048c0 <quorem+0xb4>
  40484c:	2500      	movs	r5, #0
  40484e:	462e      	mov	r6, r5
  404850:	46bc      	mov	ip, r7
  404852:	46de      	mov	lr, fp
  404854:	f85c 4b04 	ldr.w	r4, [ip], #4
  404858:	f8de 3000 	ldr.w	r3, [lr]
  40485c:	b2a2      	uxth	r2, r4
  40485e:	fb09 5502 	mla	r5, r9, r2, r5
  404862:	0c22      	lsrs	r2, r4, #16
  404864:	0c2c      	lsrs	r4, r5, #16
  404866:	fb09 4202 	mla	r2, r9, r2, r4
  40486a:	b2ad      	uxth	r5, r5
  40486c:	1b75      	subs	r5, r6, r5
  40486e:	b296      	uxth	r6, r2
  404870:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404874:	fa15 f383 	uxtah	r3, r5, r3
  404878:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40487c:	b29b      	uxth	r3, r3
  40487e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404882:	45e2      	cmp	sl, ip
  404884:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404888:	f84e 3b04 	str.w	r3, [lr], #4
  40488c:	ea4f 4626 	mov.w	r6, r6, asr #16
  404890:	d2e0      	bcs.n	404854 <quorem+0x48>
  404892:	9b00      	ldr	r3, [sp, #0]
  404894:	f85b 3003 	ldr.w	r3, [fp, r3]
  404898:	b993      	cbnz	r3, 4048c0 <quorem+0xb4>
  40489a:	9c01      	ldr	r4, [sp, #4]
  40489c:	1f23      	subs	r3, r4, #4
  40489e:	459b      	cmp	fp, r3
  4048a0:	d20c      	bcs.n	4048bc <quorem+0xb0>
  4048a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4048a6:	b94b      	cbnz	r3, 4048bc <quorem+0xb0>
  4048a8:	f1a4 0308 	sub.w	r3, r4, #8
  4048ac:	e002      	b.n	4048b4 <quorem+0xa8>
  4048ae:	681a      	ldr	r2, [r3, #0]
  4048b0:	3b04      	subs	r3, #4
  4048b2:	b91a      	cbnz	r2, 4048bc <quorem+0xb0>
  4048b4:	459b      	cmp	fp, r3
  4048b6:	f108 38ff 	add.w	r8, r8, #4294967295
  4048ba:	d3f8      	bcc.n	4048ae <quorem+0xa2>
  4048bc:	f8c0 8010 	str.w	r8, [r0, #16]
  4048c0:	4604      	mov	r4, r0
  4048c2:	f001 fd69 	bl	406398 <__mcmp>
  4048c6:	2800      	cmp	r0, #0
  4048c8:	db2e      	blt.n	404928 <quorem+0x11c>
  4048ca:	f109 0901 	add.w	r9, r9, #1
  4048ce:	465d      	mov	r5, fp
  4048d0:	2300      	movs	r3, #0
  4048d2:	f857 1b04 	ldr.w	r1, [r7], #4
  4048d6:	6828      	ldr	r0, [r5, #0]
  4048d8:	b28a      	uxth	r2, r1
  4048da:	1a9a      	subs	r2, r3, r2
  4048dc:	0c0b      	lsrs	r3, r1, #16
  4048de:	fa12 f280 	uxtah	r2, r2, r0
  4048e2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4048e6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4048ea:	b292      	uxth	r2, r2
  4048ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4048f0:	45ba      	cmp	sl, r7
  4048f2:	f845 2b04 	str.w	r2, [r5], #4
  4048f6:	ea4f 4323 	mov.w	r3, r3, asr #16
  4048fa:	d2ea      	bcs.n	4048d2 <quorem+0xc6>
  4048fc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404900:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404904:	b982      	cbnz	r2, 404928 <quorem+0x11c>
  404906:	1f1a      	subs	r2, r3, #4
  404908:	4593      	cmp	fp, r2
  40490a:	d20b      	bcs.n	404924 <quorem+0x118>
  40490c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404910:	b942      	cbnz	r2, 404924 <quorem+0x118>
  404912:	3b08      	subs	r3, #8
  404914:	e002      	b.n	40491c <quorem+0x110>
  404916:	681a      	ldr	r2, [r3, #0]
  404918:	3b04      	subs	r3, #4
  40491a:	b91a      	cbnz	r2, 404924 <quorem+0x118>
  40491c:	459b      	cmp	fp, r3
  40491e:	f108 38ff 	add.w	r8, r8, #4294967295
  404922:	d3f8      	bcc.n	404916 <quorem+0x10a>
  404924:	f8c4 8010 	str.w	r8, [r4, #16]
  404928:	4648      	mov	r0, r9
  40492a:	b003      	add	sp, #12
  40492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404930:	2000      	movs	r0, #0
  404932:	4770      	bx	lr
  404934:	0000      	movs	r0, r0
	...

00404938 <_dtoa_r>:
  404938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40493c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40493e:	b09b      	sub	sp, #108	; 0x6c
  404940:	4604      	mov	r4, r0
  404942:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404944:	4692      	mov	sl, r2
  404946:	469b      	mov	fp, r3
  404948:	b141      	cbz	r1, 40495c <_dtoa_r+0x24>
  40494a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40494c:	604a      	str	r2, [r1, #4]
  40494e:	2301      	movs	r3, #1
  404950:	4093      	lsls	r3, r2
  404952:	608b      	str	r3, [r1, #8]
  404954:	f001 fb48 	bl	405fe8 <_Bfree>
  404958:	2300      	movs	r3, #0
  40495a:	6423      	str	r3, [r4, #64]	; 0x40
  40495c:	f1bb 0f00 	cmp.w	fp, #0
  404960:	465d      	mov	r5, fp
  404962:	db35      	blt.n	4049d0 <_dtoa_r+0x98>
  404964:	2300      	movs	r3, #0
  404966:	6033      	str	r3, [r6, #0]
  404968:	4b9d      	ldr	r3, [pc, #628]	; (404be0 <_dtoa_r+0x2a8>)
  40496a:	43ab      	bics	r3, r5
  40496c:	d015      	beq.n	40499a <_dtoa_r+0x62>
  40496e:	4650      	mov	r0, sl
  404970:	4659      	mov	r1, fp
  404972:	2200      	movs	r2, #0
  404974:	2300      	movs	r3, #0
  404976:	f002 ffa5 	bl	4078c4 <__aeabi_dcmpeq>
  40497a:	4680      	mov	r8, r0
  40497c:	2800      	cmp	r0, #0
  40497e:	d02d      	beq.n	4049dc <_dtoa_r+0xa4>
  404980:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404982:	2301      	movs	r3, #1
  404984:	6013      	str	r3, [r2, #0]
  404986:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404988:	2b00      	cmp	r3, #0
  40498a:	f000 80bd 	beq.w	404b08 <_dtoa_r+0x1d0>
  40498e:	4895      	ldr	r0, [pc, #596]	; (404be4 <_dtoa_r+0x2ac>)
  404990:	6018      	str	r0, [r3, #0]
  404992:	3801      	subs	r0, #1
  404994:	b01b      	add	sp, #108	; 0x6c
  404996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40499a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40499c:	f242 730f 	movw	r3, #9999	; 0x270f
  4049a0:	6013      	str	r3, [r2, #0]
  4049a2:	f1ba 0f00 	cmp.w	sl, #0
  4049a6:	d10d      	bne.n	4049c4 <_dtoa_r+0x8c>
  4049a8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4049ac:	b955      	cbnz	r5, 4049c4 <_dtoa_r+0x8c>
  4049ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4049b0:	488d      	ldr	r0, [pc, #564]	; (404be8 <_dtoa_r+0x2b0>)
  4049b2:	2b00      	cmp	r3, #0
  4049b4:	d0ee      	beq.n	404994 <_dtoa_r+0x5c>
  4049b6:	f100 0308 	add.w	r3, r0, #8
  4049ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4049bc:	6013      	str	r3, [r2, #0]
  4049be:	b01b      	add	sp, #108	; 0x6c
  4049c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4049c6:	4889      	ldr	r0, [pc, #548]	; (404bec <_dtoa_r+0x2b4>)
  4049c8:	2b00      	cmp	r3, #0
  4049ca:	d0e3      	beq.n	404994 <_dtoa_r+0x5c>
  4049cc:	1cc3      	adds	r3, r0, #3
  4049ce:	e7f4      	b.n	4049ba <_dtoa_r+0x82>
  4049d0:	2301      	movs	r3, #1
  4049d2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4049d6:	6033      	str	r3, [r6, #0]
  4049d8:	46ab      	mov	fp, r5
  4049da:	e7c5      	b.n	404968 <_dtoa_r+0x30>
  4049dc:	aa18      	add	r2, sp, #96	; 0x60
  4049de:	ab19      	add	r3, sp, #100	; 0x64
  4049e0:	9201      	str	r2, [sp, #4]
  4049e2:	9300      	str	r3, [sp, #0]
  4049e4:	4652      	mov	r2, sl
  4049e6:	465b      	mov	r3, fp
  4049e8:	4620      	mov	r0, r4
  4049ea:	f001 fd75 	bl	4064d8 <__d2b>
  4049ee:	0d2b      	lsrs	r3, r5, #20
  4049f0:	4681      	mov	r9, r0
  4049f2:	d071      	beq.n	404ad8 <_dtoa_r+0x1a0>
  4049f4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4049f8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4049fc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4049fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404a02:	4650      	mov	r0, sl
  404a04:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404a08:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404a0c:	2200      	movs	r2, #0
  404a0e:	4b78      	ldr	r3, [pc, #480]	; (404bf0 <_dtoa_r+0x2b8>)
  404a10:	f002 fb3c 	bl	40708c <__aeabi_dsub>
  404a14:	a36c      	add	r3, pc, #432	; (adr r3, 404bc8 <_dtoa_r+0x290>)
  404a16:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a1a:	f002 fceb 	bl	4073f4 <__aeabi_dmul>
  404a1e:	a36c      	add	r3, pc, #432	; (adr r3, 404bd0 <_dtoa_r+0x298>)
  404a20:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a24:	f002 fb34 	bl	407090 <__adddf3>
  404a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404a2c:	4630      	mov	r0, r6
  404a2e:	f002 fc7b 	bl	407328 <__aeabi_i2d>
  404a32:	a369      	add	r3, pc, #420	; (adr r3, 404bd8 <_dtoa_r+0x2a0>)
  404a34:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a38:	f002 fcdc 	bl	4073f4 <__aeabi_dmul>
  404a3c:	4602      	mov	r2, r0
  404a3e:	460b      	mov	r3, r1
  404a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404a44:	f002 fb24 	bl	407090 <__adddf3>
  404a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404a4c:	f002 ff82 	bl	407954 <__aeabi_d2iz>
  404a50:	2200      	movs	r2, #0
  404a52:	9002      	str	r0, [sp, #8]
  404a54:	2300      	movs	r3, #0
  404a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404a5a:	f002 ff3d 	bl	4078d8 <__aeabi_dcmplt>
  404a5e:	2800      	cmp	r0, #0
  404a60:	f040 8173 	bne.w	404d4a <_dtoa_r+0x412>
  404a64:	9d02      	ldr	r5, [sp, #8]
  404a66:	2d16      	cmp	r5, #22
  404a68:	f200 815d 	bhi.w	404d26 <_dtoa_r+0x3ee>
  404a6c:	4b61      	ldr	r3, [pc, #388]	; (404bf4 <_dtoa_r+0x2bc>)
  404a6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404a72:	e9d3 0100 	ldrd	r0, r1, [r3]
  404a76:	4652      	mov	r2, sl
  404a78:	465b      	mov	r3, fp
  404a7a:	f002 ff4b 	bl	407914 <__aeabi_dcmpgt>
  404a7e:	2800      	cmp	r0, #0
  404a80:	f000 81c5 	beq.w	404e0e <_dtoa_r+0x4d6>
  404a84:	1e6b      	subs	r3, r5, #1
  404a86:	9302      	str	r3, [sp, #8]
  404a88:	2300      	movs	r3, #0
  404a8a:	930e      	str	r3, [sp, #56]	; 0x38
  404a8c:	1bbf      	subs	r7, r7, r6
  404a8e:	1e7b      	subs	r3, r7, #1
  404a90:	9306      	str	r3, [sp, #24]
  404a92:	f100 8154 	bmi.w	404d3e <_dtoa_r+0x406>
  404a96:	2300      	movs	r3, #0
  404a98:	9308      	str	r3, [sp, #32]
  404a9a:	9b02      	ldr	r3, [sp, #8]
  404a9c:	2b00      	cmp	r3, #0
  404a9e:	f2c0 8145 	blt.w	404d2c <_dtoa_r+0x3f4>
  404aa2:	9a06      	ldr	r2, [sp, #24]
  404aa4:	930d      	str	r3, [sp, #52]	; 0x34
  404aa6:	4611      	mov	r1, r2
  404aa8:	4419      	add	r1, r3
  404aaa:	2300      	movs	r3, #0
  404aac:	9106      	str	r1, [sp, #24]
  404aae:	930c      	str	r3, [sp, #48]	; 0x30
  404ab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ab2:	2b09      	cmp	r3, #9
  404ab4:	d82a      	bhi.n	404b0c <_dtoa_r+0x1d4>
  404ab6:	2b05      	cmp	r3, #5
  404ab8:	f340 865b 	ble.w	405772 <_dtoa_r+0xe3a>
  404abc:	3b04      	subs	r3, #4
  404abe:	9324      	str	r3, [sp, #144]	; 0x90
  404ac0:	2500      	movs	r5, #0
  404ac2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ac4:	3b02      	subs	r3, #2
  404ac6:	2b03      	cmp	r3, #3
  404ac8:	f200 8642 	bhi.w	405750 <_dtoa_r+0xe18>
  404acc:	e8df f013 	tbh	[pc, r3, lsl #1]
  404ad0:	02c903d4 	.word	0x02c903d4
  404ad4:	046103df 	.word	0x046103df
  404ad8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404ada:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404adc:	443e      	add	r6, r7
  404ade:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404ae2:	2b20      	cmp	r3, #32
  404ae4:	f340 818e 	ble.w	404e04 <_dtoa_r+0x4cc>
  404ae8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404aec:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404af0:	409d      	lsls	r5, r3
  404af2:	fa2a f000 	lsr.w	r0, sl, r0
  404af6:	4328      	orrs	r0, r5
  404af8:	f002 fc06 	bl	407308 <__aeabi_ui2d>
  404afc:	2301      	movs	r3, #1
  404afe:	3e01      	subs	r6, #1
  404b00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404b04:	9314      	str	r3, [sp, #80]	; 0x50
  404b06:	e781      	b.n	404a0c <_dtoa_r+0xd4>
  404b08:	483b      	ldr	r0, [pc, #236]	; (404bf8 <_dtoa_r+0x2c0>)
  404b0a:	e743      	b.n	404994 <_dtoa_r+0x5c>
  404b0c:	2100      	movs	r1, #0
  404b0e:	6461      	str	r1, [r4, #68]	; 0x44
  404b10:	4620      	mov	r0, r4
  404b12:	9125      	str	r1, [sp, #148]	; 0x94
  404b14:	f001 fa42 	bl	405f9c <_Balloc>
  404b18:	f04f 33ff 	mov.w	r3, #4294967295
  404b1c:	930a      	str	r3, [sp, #40]	; 0x28
  404b1e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404b20:	930f      	str	r3, [sp, #60]	; 0x3c
  404b22:	2301      	movs	r3, #1
  404b24:	9004      	str	r0, [sp, #16]
  404b26:	6420      	str	r0, [r4, #64]	; 0x40
  404b28:	9224      	str	r2, [sp, #144]	; 0x90
  404b2a:	930b      	str	r3, [sp, #44]	; 0x2c
  404b2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404b2e:	2b00      	cmp	r3, #0
  404b30:	f2c0 80d9 	blt.w	404ce6 <_dtoa_r+0x3ae>
  404b34:	9a02      	ldr	r2, [sp, #8]
  404b36:	2a0e      	cmp	r2, #14
  404b38:	f300 80d5 	bgt.w	404ce6 <_dtoa_r+0x3ae>
  404b3c:	4b2d      	ldr	r3, [pc, #180]	; (404bf4 <_dtoa_r+0x2bc>)
  404b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404b42:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b46:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404b4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404b4c:	2b00      	cmp	r3, #0
  404b4e:	f2c0 83ba 	blt.w	4052c6 <_dtoa_r+0x98e>
  404b52:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404b56:	4650      	mov	r0, sl
  404b58:	462a      	mov	r2, r5
  404b5a:	4633      	mov	r3, r6
  404b5c:	4659      	mov	r1, fp
  404b5e:	f002 fd73 	bl	407648 <__aeabi_ddiv>
  404b62:	f002 fef7 	bl	407954 <__aeabi_d2iz>
  404b66:	4680      	mov	r8, r0
  404b68:	f002 fbde 	bl	407328 <__aeabi_i2d>
  404b6c:	462a      	mov	r2, r5
  404b6e:	4633      	mov	r3, r6
  404b70:	f002 fc40 	bl	4073f4 <__aeabi_dmul>
  404b74:	460b      	mov	r3, r1
  404b76:	4602      	mov	r2, r0
  404b78:	4659      	mov	r1, fp
  404b7a:	4650      	mov	r0, sl
  404b7c:	f002 fa86 	bl	40708c <__aeabi_dsub>
  404b80:	9d04      	ldr	r5, [sp, #16]
  404b82:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404b86:	702b      	strb	r3, [r5, #0]
  404b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b8a:	2b01      	cmp	r3, #1
  404b8c:	4606      	mov	r6, r0
  404b8e:	460f      	mov	r7, r1
  404b90:	f105 0501 	add.w	r5, r5, #1
  404b94:	d068      	beq.n	404c68 <_dtoa_r+0x330>
  404b96:	2200      	movs	r2, #0
  404b98:	4b18      	ldr	r3, [pc, #96]	; (404bfc <_dtoa_r+0x2c4>)
  404b9a:	f002 fc2b 	bl	4073f4 <__aeabi_dmul>
  404b9e:	2200      	movs	r2, #0
  404ba0:	2300      	movs	r3, #0
  404ba2:	4606      	mov	r6, r0
  404ba4:	460f      	mov	r7, r1
  404ba6:	f002 fe8d 	bl	4078c4 <__aeabi_dcmpeq>
  404baa:	2800      	cmp	r0, #0
  404bac:	f040 8088 	bne.w	404cc0 <_dtoa_r+0x388>
  404bb0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404bb4:	f04f 0a00 	mov.w	sl, #0
  404bb8:	f8df b040 	ldr.w	fp, [pc, #64]	; 404bfc <_dtoa_r+0x2c4>
  404bbc:	940c      	str	r4, [sp, #48]	; 0x30
  404bbe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404bc2:	e028      	b.n	404c16 <_dtoa_r+0x2de>
  404bc4:	f3af 8000 	nop.w
  404bc8:	636f4361 	.word	0x636f4361
  404bcc:	3fd287a7 	.word	0x3fd287a7
  404bd0:	8b60c8b3 	.word	0x8b60c8b3
  404bd4:	3fc68a28 	.word	0x3fc68a28
  404bd8:	509f79fb 	.word	0x509f79fb
  404bdc:	3fd34413 	.word	0x3fd34413
  404be0:	7ff00000 	.word	0x7ff00000
  404be4:	00407bad 	.word	0x00407bad
  404be8:	00407bd0 	.word	0x00407bd0
  404bec:	00407bdc 	.word	0x00407bdc
  404bf0:	3ff80000 	.word	0x3ff80000
  404bf4:	00407c08 	.word	0x00407c08
  404bf8:	00407bac 	.word	0x00407bac
  404bfc:	40240000 	.word	0x40240000
  404c00:	f002 fbf8 	bl	4073f4 <__aeabi_dmul>
  404c04:	2200      	movs	r2, #0
  404c06:	2300      	movs	r3, #0
  404c08:	4606      	mov	r6, r0
  404c0a:	460f      	mov	r7, r1
  404c0c:	f002 fe5a 	bl	4078c4 <__aeabi_dcmpeq>
  404c10:	2800      	cmp	r0, #0
  404c12:	f040 83c1 	bne.w	405398 <_dtoa_r+0xa60>
  404c16:	4642      	mov	r2, r8
  404c18:	464b      	mov	r3, r9
  404c1a:	4630      	mov	r0, r6
  404c1c:	4639      	mov	r1, r7
  404c1e:	f002 fd13 	bl	407648 <__aeabi_ddiv>
  404c22:	f002 fe97 	bl	407954 <__aeabi_d2iz>
  404c26:	4604      	mov	r4, r0
  404c28:	f002 fb7e 	bl	407328 <__aeabi_i2d>
  404c2c:	4642      	mov	r2, r8
  404c2e:	464b      	mov	r3, r9
  404c30:	f002 fbe0 	bl	4073f4 <__aeabi_dmul>
  404c34:	4602      	mov	r2, r0
  404c36:	460b      	mov	r3, r1
  404c38:	4630      	mov	r0, r6
  404c3a:	4639      	mov	r1, r7
  404c3c:	f002 fa26 	bl	40708c <__aeabi_dsub>
  404c40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404c44:	9e04      	ldr	r6, [sp, #16]
  404c46:	f805 eb01 	strb.w	lr, [r5], #1
  404c4a:	eba5 0e06 	sub.w	lr, r5, r6
  404c4e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404c50:	45b6      	cmp	lr, r6
  404c52:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404c56:	4652      	mov	r2, sl
  404c58:	465b      	mov	r3, fp
  404c5a:	d1d1      	bne.n	404c00 <_dtoa_r+0x2c8>
  404c5c:	46a0      	mov	r8, r4
  404c5e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404c62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404c64:	4606      	mov	r6, r0
  404c66:	460f      	mov	r7, r1
  404c68:	4632      	mov	r2, r6
  404c6a:	463b      	mov	r3, r7
  404c6c:	4630      	mov	r0, r6
  404c6e:	4639      	mov	r1, r7
  404c70:	f002 fa0e 	bl	407090 <__adddf3>
  404c74:	4606      	mov	r6, r0
  404c76:	460f      	mov	r7, r1
  404c78:	4602      	mov	r2, r0
  404c7a:	460b      	mov	r3, r1
  404c7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404c80:	f002 fe2a 	bl	4078d8 <__aeabi_dcmplt>
  404c84:	b948      	cbnz	r0, 404c9a <_dtoa_r+0x362>
  404c86:	4632      	mov	r2, r6
  404c88:	463b      	mov	r3, r7
  404c8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404c8e:	f002 fe19 	bl	4078c4 <__aeabi_dcmpeq>
  404c92:	b1a8      	cbz	r0, 404cc0 <_dtoa_r+0x388>
  404c94:	f018 0f01 	tst.w	r8, #1
  404c98:	d012      	beq.n	404cc0 <_dtoa_r+0x388>
  404c9a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404c9e:	9a04      	ldr	r2, [sp, #16]
  404ca0:	1e6b      	subs	r3, r5, #1
  404ca2:	e004      	b.n	404cae <_dtoa_r+0x376>
  404ca4:	429a      	cmp	r2, r3
  404ca6:	f000 8401 	beq.w	4054ac <_dtoa_r+0xb74>
  404caa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404cae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404cb2:	f103 0501 	add.w	r5, r3, #1
  404cb6:	d0f5      	beq.n	404ca4 <_dtoa_r+0x36c>
  404cb8:	f108 0801 	add.w	r8, r8, #1
  404cbc:	f883 8000 	strb.w	r8, [r3]
  404cc0:	4649      	mov	r1, r9
  404cc2:	4620      	mov	r0, r4
  404cc4:	f001 f990 	bl	405fe8 <_Bfree>
  404cc8:	2200      	movs	r2, #0
  404cca:	9b02      	ldr	r3, [sp, #8]
  404ccc:	702a      	strb	r2, [r5, #0]
  404cce:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404cd0:	3301      	adds	r3, #1
  404cd2:	6013      	str	r3, [r2, #0]
  404cd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404cd6:	2b00      	cmp	r3, #0
  404cd8:	f000 839e 	beq.w	405418 <_dtoa_r+0xae0>
  404cdc:	9804      	ldr	r0, [sp, #16]
  404cde:	601d      	str	r5, [r3, #0]
  404ce0:	b01b      	add	sp, #108	; 0x6c
  404ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ce8:	2a00      	cmp	r2, #0
  404cea:	d03e      	beq.n	404d6a <_dtoa_r+0x432>
  404cec:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404cee:	2a01      	cmp	r2, #1
  404cf0:	f340 8311 	ble.w	405316 <_dtoa_r+0x9de>
  404cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404cf8:	1e5f      	subs	r7, r3, #1
  404cfa:	42ba      	cmp	r2, r7
  404cfc:	f2c0 838f 	blt.w	40541e <_dtoa_r+0xae6>
  404d00:	1bd7      	subs	r7, r2, r7
  404d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d04:	2b00      	cmp	r3, #0
  404d06:	f2c0 848b 	blt.w	405620 <_dtoa_r+0xce8>
  404d0a:	9d08      	ldr	r5, [sp, #32]
  404d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d0e:	9a08      	ldr	r2, [sp, #32]
  404d10:	441a      	add	r2, r3
  404d12:	9208      	str	r2, [sp, #32]
  404d14:	9a06      	ldr	r2, [sp, #24]
  404d16:	2101      	movs	r1, #1
  404d18:	441a      	add	r2, r3
  404d1a:	4620      	mov	r0, r4
  404d1c:	9206      	str	r2, [sp, #24]
  404d1e:	f001 f9fd 	bl	40611c <__i2b>
  404d22:	4606      	mov	r6, r0
  404d24:	e024      	b.n	404d70 <_dtoa_r+0x438>
  404d26:	2301      	movs	r3, #1
  404d28:	930e      	str	r3, [sp, #56]	; 0x38
  404d2a:	e6af      	b.n	404a8c <_dtoa_r+0x154>
  404d2c:	9a08      	ldr	r2, [sp, #32]
  404d2e:	9b02      	ldr	r3, [sp, #8]
  404d30:	1ad2      	subs	r2, r2, r3
  404d32:	425b      	negs	r3, r3
  404d34:	930c      	str	r3, [sp, #48]	; 0x30
  404d36:	2300      	movs	r3, #0
  404d38:	9208      	str	r2, [sp, #32]
  404d3a:	930d      	str	r3, [sp, #52]	; 0x34
  404d3c:	e6b8      	b.n	404ab0 <_dtoa_r+0x178>
  404d3e:	f1c7 0301 	rsb	r3, r7, #1
  404d42:	9308      	str	r3, [sp, #32]
  404d44:	2300      	movs	r3, #0
  404d46:	9306      	str	r3, [sp, #24]
  404d48:	e6a7      	b.n	404a9a <_dtoa_r+0x162>
  404d4a:	9d02      	ldr	r5, [sp, #8]
  404d4c:	4628      	mov	r0, r5
  404d4e:	f002 faeb 	bl	407328 <__aeabi_i2d>
  404d52:	4602      	mov	r2, r0
  404d54:	460b      	mov	r3, r1
  404d56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404d5a:	f002 fdb3 	bl	4078c4 <__aeabi_dcmpeq>
  404d5e:	2800      	cmp	r0, #0
  404d60:	f47f ae80 	bne.w	404a64 <_dtoa_r+0x12c>
  404d64:	1e6b      	subs	r3, r5, #1
  404d66:	9302      	str	r3, [sp, #8]
  404d68:	e67c      	b.n	404a64 <_dtoa_r+0x12c>
  404d6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404d6c:	9d08      	ldr	r5, [sp, #32]
  404d6e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404d70:	2d00      	cmp	r5, #0
  404d72:	dd0c      	ble.n	404d8e <_dtoa_r+0x456>
  404d74:	9906      	ldr	r1, [sp, #24]
  404d76:	2900      	cmp	r1, #0
  404d78:	460b      	mov	r3, r1
  404d7a:	dd08      	ble.n	404d8e <_dtoa_r+0x456>
  404d7c:	42a9      	cmp	r1, r5
  404d7e:	9a08      	ldr	r2, [sp, #32]
  404d80:	bfa8      	it	ge
  404d82:	462b      	movge	r3, r5
  404d84:	1ad2      	subs	r2, r2, r3
  404d86:	1aed      	subs	r5, r5, r3
  404d88:	1acb      	subs	r3, r1, r3
  404d8a:	9208      	str	r2, [sp, #32]
  404d8c:	9306      	str	r3, [sp, #24]
  404d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404d90:	b1d3      	cbz	r3, 404dc8 <_dtoa_r+0x490>
  404d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404d94:	2b00      	cmp	r3, #0
  404d96:	f000 82b7 	beq.w	405308 <_dtoa_r+0x9d0>
  404d9a:	2f00      	cmp	r7, #0
  404d9c:	dd10      	ble.n	404dc0 <_dtoa_r+0x488>
  404d9e:	4631      	mov	r1, r6
  404da0:	463a      	mov	r2, r7
  404da2:	4620      	mov	r0, r4
  404da4:	f001 fa56 	bl	406254 <__pow5mult>
  404da8:	464a      	mov	r2, r9
  404daa:	4601      	mov	r1, r0
  404dac:	4606      	mov	r6, r0
  404dae:	4620      	mov	r0, r4
  404db0:	f001 f9be 	bl	406130 <__multiply>
  404db4:	4649      	mov	r1, r9
  404db6:	4680      	mov	r8, r0
  404db8:	4620      	mov	r0, r4
  404dba:	f001 f915 	bl	405fe8 <_Bfree>
  404dbe:	46c1      	mov	r9, r8
  404dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404dc2:	1bda      	subs	r2, r3, r7
  404dc4:	f040 82a1 	bne.w	40530a <_dtoa_r+0x9d2>
  404dc8:	2101      	movs	r1, #1
  404dca:	4620      	mov	r0, r4
  404dcc:	f001 f9a6 	bl	40611c <__i2b>
  404dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dd2:	2b00      	cmp	r3, #0
  404dd4:	4680      	mov	r8, r0
  404dd6:	dd1c      	ble.n	404e12 <_dtoa_r+0x4da>
  404dd8:	4601      	mov	r1, r0
  404dda:	461a      	mov	r2, r3
  404ddc:	4620      	mov	r0, r4
  404dde:	f001 fa39 	bl	406254 <__pow5mult>
  404de2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404de4:	2b01      	cmp	r3, #1
  404de6:	4680      	mov	r8, r0
  404de8:	f340 8254 	ble.w	405294 <_dtoa_r+0x95c>
  404dec:	2300      	movs	r3, #0
  404dee:	930c      	str	r3, [sp, #48]	; 0x30
  404df0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404df4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404df8:	6918      	ldr	r0, [r3, #16]
  404dfa:	f001 f93f 	bl	40607c <__hi0bits>
  404dfe:	f1c0 0020 	rsb	r0, r0, #32
  404e02:	e010      	b.n	404e26 <_dtoa_r+0x4ee>
  404e04:	f1c3 0520 	rsb	r5, r3, #32
  404e08:	fa0a f005 	lsl.w	r0, sl, r5
  404e0c:	e674      	b.n	404af8 <_dtoa_r+0x1c0>
  404e0e:	900e      	str	r0, [sp, #56]	; 0x38
  404e10:	e63c      	b.n	404a8c <_dtoa_r+0x154>
  404e12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e14:	2b01      	cmp	r3, #1
  404e16:	f340 8287 	ble.w	405328 <_dtoa_r+0x9f0>
  404e1a:	2300      	movs	r3, #0
  404e1c:	930c      	str	r3, [sp, #48]	; 0x30
  404e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e20:	2001      	movs	r0, #1
  404e22:	2b00      	cmp	r3, #0
  404e24:	d1e4      	bne.n	404df0 <_dtoa_r+0x4b8>
  404e26:	9a06      	ldr	r2, [sp, #24]
  404e28:	4410      	add	r0, r2
  404e2a:	f010 001f 	ands.w	r0, r0, #31
  404e2e:	f000 80a1 	beq.w	404f74 <_dtoa_r+0x63c>
  404e32:	f1c0 0320 	rsb	r3, r0, #32
  404e36:	2b04      	cmp	r3, #4
  404e38:	f340 849e 	ble.w	405778 <_dtoa_r+0xe40>
  404e3c:	9b08      	ldr	r3, [sp, #32]
  404e3e:	f1c0 001c 	rsb	r0, r0, #28
  404e42:	4403      	add	r3, r0
  404e44:	9308      	str	r3, [sp, #32]
  404e46:	4613      	mov	r3, r2
  404e48:	4403      	add	r3, r0
  404e4a:	4405      	add	r5, r0
  404e4c:	9306      	str	r3, [sp, #24]
  404e4e:	9b08      	ldr	r3, [sp, #32]
  404e50:	2b00      	cmp	r3, #0
  404e52:	dd05      	ble.n	404e60 <_dtoa_r+0x528>
  404e54:	4649      	mov	r1, r9
  404e56:	461a      	mov	r2, r3
  404e58:	4620      	mov	r0, r4
  404e5a:	f001 fa4b 	bl	4062f4 <__lshift>
  404e5e:	4681      	mov	r9, r0
  404e60:	9b06      	ldr	r3, [sp, #24]
  404e62:	2b00      	cmp	r3, #0
  404e64:	dd05      	ble.n	404e72 <_dtoa_r+0x53a>
  404e66:	4641      	mov	r1, r8
  404e68:	461a      	mov	r2, r3
  404e6a:	4620      	mov	r0, r4
  404e6c:	f001 fa42 	bl	4062f4 <__lshift>
  404e70:	4680      	mov	r8, r0
  404e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e74:	2b00      	cmp	r3, #0
  404e76:	f040 8086 	bne.w	404f86 <_dtoa_r+0x64e>
  404e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e7c:	2b00      	cmp	r3, #0
  404e7e:	f340 8266 	ble.w	40534e <_dtoa_r+0xa16>
  404e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404e84:	2b00      	cmp	r3, #0
  404e86:	f000 8098 	beq.w	404fba <_dtoa_r+0x682>
  404e8a:	2d00      	cmp	r5, #0
  404e8c:	dd05      	ble.n	404e9a <_dtoa_r+0x562>
  404e8e:	4631      	mov	r1, r6
  404e90:	462a      	mov	r2, r5
  404e92:	4620      	mov	r0, r4
  404e94:	f001 fa2e 	bl	4062f4 <__lshift>
  404e98:	4606      	mov	r6, r0
  404e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404e9c:	2b00      	cmp	r3, #0
  404e9e:	f040 8337 	bne.w	405510 <_dtoa_r+0xbd8>
  404ea2:	9606      	str	r6, [sp, #24]
  404ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ea6:	9a04      	ldr	r2, [sp, #16]
  404ea8:	f8dd b018 	ldr.w	fp, [sp, #24]
  404eac:	3b01      	subs	r3, #1
  404eae:	18d3      	adds	r3, r2, r3
  404eb0:	930b      	str	r3, [sp, #44]	; 0x2c
  404eb2:	f00a 0301 	and.w	r3, sl, #1
  404eb6:	930c      	str	r3, [sp, #48]	; 0x30
  404eb8:	4617      	mov	r7, r2
  404eba:	46c2      	mov	sl, r8
  404ebc:	4651      	mov	r1, sl
  404ebe:	4648      	mov	r0, r9
  404ec0:	f7ff fca4 	bl	40480c <quorem>
  404ec4:	4631      	mov	r1, r6
  404ec6:	4605      	mov	r5, r0
  404ec8:	4648      	mov	r0, r9
  404eca:	f001 fa65 	bl	406398 <__mcmp>
  404ece:	465a      	mov	r2, fp
  404ed0:	900a      	str	r0, [sp, #40]	; 0x28
  404ed2:	4651      	mov	r1, sl
  404ed4:	4620      	mov	r0, r4
  404ed6:	f001 fa7b 	bl	4063d0 <__mdiff>
  404eda:	68c2      	ldr	r2, [r0, #12]
  404edc:	4680      	mov	r8, r0
  404ede:	f105 0330 	add.w	r3, r5, #48	; 0x30
  404ee2:	2a00      	cmp	r2, #0
  404ee4:	f040 822b 	bne.w	40533e <_dtoa_r+0xa06>
  404ee8:	4601      	mov	r1, r0
  404eea:	4648      	mov	r0, r9
  404eec:	9308      	str	r3, [sp, #32]
  404eee:	f001 fa53 	bl	406398 <__mcmp>
  404ef2:	4641      	mov	r1, r8
  404ef4:	9006      	str	r0, [sp, #24]
  404ef6:	4620      	mov	r0, r4
  404ef8:	f001 f876 	bl	405fe8 <_Bfree>
  404efc:	9a06      	ldr	r2, [sp, #24]
  404efe:	9b08      	ldr	r3, [sp, #32]
  404f00:	b932      	cbnz	r2, 404f10 <_dtoa_r+0x5d8>
  404f02:	9924      	ldr	r1, [sp, #144]	; 0x90
  404f04:	b921      	cbnz	r1, 404f10 <_dtoa_r+0x5d8>
  404f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404f08:	2a00      	cmp	r2, #0
  404f0a:	f000 83ef 	beq.w	4056ec <_dtoa_r+0xdb4>
  404f0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f10:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f12:	2900      	cmp	r1, #0
  404f14:	f2c0 829f 	blt.w	405456 <_dtoa_r+0xb1e>
  404f18:	d105      	bne.n	404f26 <_dtoa_r+0x5ee>
  404f1a:	9924      	ldr	r1, [sp, #144]	; 0x90
  404f1c:	b919      	cbnz	r1, 404f26 <_dtoa_r+0x5ee>
  404f1e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404f20:	2900      	cmp	r1, #0
  404f22:	f000 8298 	beq.w	405456 <_dtoa_r+0xb1e>
  404f26:	2a00      	cmp	r2, #0
  404f28:	f300 8306 	bgt.w	405538 <_dtoa_r+0xc00>
  404f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f2e:	703b      	strb	r3, [r7, #0]
  404f30:	f107 0801 	add.w	r8, r7, #1
  404f34:	4297      	cmp	r7, r2
  404f36:	4645      	mov	r5, r8
  404f38:	f000 830c 	beq.w	405554 <_dtoa_r+0xc1c>
  404f3c:	4649      	mov	r1, r9
  404f3e:	2300      	movs	r3, #0
  404f40:	220a      	movs	r2, #10
  404f42:	4620      	mov	r0, r4
  404f44:	f001 f85a 	bl	405ffc <__multadd>
  404f48:	455e      	cmp	r6, fp
  404f4a:	4681      	mov	r9, r0
  404f4c:	4631      	mov	r1, r6
  404f4e:	f04f 0300 	mov.w	r3, #0
  404f52:	f04f 020a 	mov.w	r2, #10
  404f56:	4620      	mov	r0, r4
  404f58:	f000 81eb 	beq.w	405332 <_dtoa_r+0x9fa>
  404f5c:	f001 f84e 	bl	405ffc <__multadd>
  404f60:	4659      	mov	r1, fp
  404f62:	4606      	mov	r6, r0
  404f64:	2300      	movs	r3, #0
  404f66:	220a      	movs	r2, #10
  404f68:	4620      	mov	r0, r4
  404f6a:	f001 f847 	bl	405ffc <__multadd>
  404f6e:	4647      	mov	r7, r8
  404f70:	4683      	mov	fp, r0
  404f72:	e7a3      	b.n	404ebc <_dtoa_r+0x584>
  404f74:	201c      	movs	r0, #28
  404f76:	9b08      	ldr	r3, [sp, #32]
  404f78:	4403      	add	r3, r0
  404f7a:	9308      	str	r3, [sp, #32]
  404f7c:	9b06      	ldr	r3, [sp, #24]
  404f7e:	4403      	add	r3, r0
  404f80:	4405      	add	r5, r0
  404f82:	9306      	str	r3, [sp, #24]
  404f84:	e763      	b.n	404e4e <_dtoa_r+0x516>
  404f86:	4641      	mov	r1, r8
  404f88:	4648      	mov	r0, r9
  404f8a:	f001 fa05 	bl	406398 <__mcmp>
  404f8e:	2800      	cmp	r0, #0
  404f90:	f6bf af73 	bge.w	404e7a <_dtoa_r+0x542>
  404f94:	9f02      	ldr	r7, [sp, #8]
  404f96:	4649      	mov	r1, r9
  404f98:	2300      	movs	r3, #0
  404f9a:	220a      	movs	r2, #10
  404f9c:	4620      	mov	r0, r4
  404f9e:	3f01      	subs	r7, #1
  404fa0:	9702      	str	r7, [sp, #8]
  404fa2:	f001 f82b 	bl	405ffc <__multadd>
  404fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fa8:	4681      	mov	r9, r0
  404faa:	2b00      	cmp	r3, #0
  404fac:	f040 83b6 	bne.w	40571c <_dtoa_r+0xde4>
  404fb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404fb2:	2b00      	cmp	r3, #0
  404fb4:	f340 83bf 	ble.w	405736 <_dtoa_r+0xdfe>
  404fb8:	930a      	str	r3, [sp, #40]	; 0x28
  404fba:	f8dd b010 	ldr.w	fp, [sp, #16]
  404fbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404fc0:	465d      	mov	r5, fp
  404fc2:	e002      	b.n	404fca <_dtoa_r+0x692>
  404fc4:	f001 f81a 	bl	405ffc <__multadd>
  404fc8:	4681      	mov	r9, r0
  404fca:	4641      	mov	r1, r8
  404fcc:	4648      	mov	r0, r9
  404fce:	f7ff fc1d 	bl	40480c <quorem>
  404fd2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  404fd6:	f805 ab01 	strb.w	sl, [r5], #1
  404fda:	eba5 030b 	sub.w	r3, r5, fp
  404fde:	42bb      	cmp	r3, r7
  404fe0:	f04f 020a 	mov.w	r2, #10
  404fe4:	f04f 0300 	mov.w	r3, #0
  404fe8:	4649      	mov	r1, r9
  404fea:	4620      	mov	r0, r4
  404fec:	dbea      	blt.n	404fc4 <_dtoa_r+0x68c>
  404fee:	9b04      	ldr	r3, [sp, #16]
  404ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404ff2:	2a01      	cmp	r2, #1
  404ff4:	bfac      	ite	ge
  404ff6:	189b      	addge	r3, r3, r2
  404ff8:	3301      	addlt	r3, #1
  404ffa:	461d      	mov	r5, r3
  404ffc:	f04f 0b00 	mov.w	fp, #0
  405000:	4649      	mov	r1, r9
  405002:	2201      	movs	r2, #1
  405004:	4620      	mov	r0, r4
  405006:	f001 f975 	bl	4062f4 <__lshift>
  40500a:	4641      	mov	r1, r8
  40500c:	4681      	mov	r9, r0
  40500e:	f001 f9c3 	bl	406398 <__mcmp>
  405012:	2800      	cmp	r0, #0
  405014:	f340 823d 	ble.w	405492 <_dtoa_r+0xb5a>
  405018:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40501c:	9904      	ldr	r1, [sp, #16]
  40501e:	1e6b      	subs	r3, r5, #1
  405020:	e004      	b.n	40502c <_dtoa_r+0x6f4>
  405022:	428b      	cmp	r3, r1
  405024:	f000 81ae 	beq.w	405384 <_dtoa_r+0xa4c>
  405028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40502c:	2a39      	cmp	r2, #57	; 0x39
  40502e:	f103 0501 	add.w	r5, r3, #1
  405032:	d0f6      	beq.n	405022 <_dtoa_r+0x6ea>
  405034:	3201      	adds	r2, #1
  405036:	701a      	strb	r2, [r3, #0]
  405038:	4641      	mov	r1, r8
  40503a:	4620      	mov	r0, r4
  40503c:	f000 ffd4 	bl	405fe8 <_Bfree>
  405040:	2e00      	cmp	r6, #0
  405042:	f43f ae3d 	beq.w	404cc0 <_dtoa_r+0x388>
  405046:	f1bb 0f00 	cmp.w	fp, #0
  40504a:	d005      	beq.n	405058 <_dtoa_r+0x720>
  40504c:	45b3      	cmp	fp, r6
  40504e:	d003      	beq.n	405058 <_dtoa_r+0x720>
  405050:	4659      	mov	r1, fp
  405052:	4620      	mov	r0, r4
  405054:	f000 ffc8 	bl	405fe8 <_Bfree>
  405058:	4631      	mov	r1, r6
  40505a:	4620      	mov	r0, r4
  40505c:	f000 ffc4 	bl	405fe8 <_Bfree>
  405060:	e62e      	b.n	404cc0 <_dtoa_r+0x388>
  405062:	2300      	movs	r3, #0
  405064:	930b      	str	r3, [sp, #44]	; 0x2c
  405066:	9b02      	ldr	r3, [sp, #8]
  405068:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40506a:	4413      	add	r3, r2
  40506c:	930f      	str	r3, [sp, #60]	; 0x3c
  40506e:	3301      	adds	r3, #1
  405070:	2b01      	cmp	r3, #1
  405072:	461f      	mov	r7, r3
  405074:	461e      	mov	r6, r3
  405076:	930a      	str	r3, [sp, #40]	; 0x28
  405078:	bfb8      	it	lt
  40507a:	2701      	movlt	r7, #1
  40507c:	2100      	movs	r1, #0
  40507e:	2f17      	cmp	r7, #23
  405080:	6461      	str	r1, [r4, #68]	; 0x44
  405082:	d90a      	bls.n	40509a <_dtoa_r+0x762>
  405084:	2201      	movs	r2, #1
  405086:	2304      	movs	r3, #4
  405088:	005b      	lsls	r3, r3, #1
  40508a:	f103 0014 	add.w	r0, r3, #20
  40508e:	4287      	cmp	r7, r0
  405090:	4611      	mov	r1, r2
  405092:	f102 0201 	add.w	r2, r2, #1
  405096:	d2f7      	bcs.n	405088 <_dtoa_r+0x750>
  405098:	6461      	str	r1, [r4, #68]	; 0x44
  40509a:	4620      	mov	r0, r4
  40509c:	f000 ff7e 	bl	405f9c <_Balloc>
  4050a0:	2e0e      	cmp	r6, #14
  4050a2:	9004      	str	r0, [sp, #16]
  4050a4:	6420      	str	r0, [r4, #64]	; 0x40
  4050a6:	f63f ad41 	bhi.w	404b2c <_dtoa_r+0x1f4>
  4050aa:	2d00      	cmp	r5, #0
  4050ac:	f43f ad3e 	beq.w	404b2c <_dtoa_r+0x1f4>
  4050b0:	9902      	ldr	r1, [sp, #8]
  4050b2:	2900      	cmp	r1, #0
  4050b4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4050b8:	f340 8202 	ble.w	4054c0 <_dtoa_r+0xb88>
  4050bc:	4bb8      	ldr	r3, [pc, #736]	; (4053a0 <_dtoa_r+0xa68>)
  4050be:	f001 020f 	and.w	r2, r1, #15
  4050c2:	110d      	asrs	r5, r1, #4
  4050c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4050c8:	06e9      	lsls	r1, r5, #27
  4050ca:	e9d3 6700 	ldrd	r6, r7, [r3]
  4050ce:	f140 81ae 	bpl.w	40542e <_dtoa_r+0xaf6>
  4050d2:	4bb4      	ldr	r3, [pc, #720]	; (4053a4 <_dtoa_r+0xa6c>)
  4050d4:	4650      	mov	r0, sl
  4050d6:	4659      	mov	r1, fp
  4050d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4050dc:	f002 fab4 	bl	407648 <__aeabi_ddiv>
  4050e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4050e4:	f005 050f 	and.w	r5, r5, #15
  4050e8:	f04f 0a03 	mov.w	sl, #3
  4050ec:	b18d      	cbz	r5, 405112 <_dtoa_r+0x7da>
  4050ee:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4053a4 <_dtoa_r+0xa6c>
  4050f2:	07ea      	lsls	r2, r5, #31
  4050f4:	d509      	bpl.n	40510a <_dtoa_r+0x7d2>
  4050f6:	4630      	mov	r0, r6
  4050f8:	4639      	mov	r1, r7
  4050fa:	e9d8 2300 	ldrd	r2, r3, [r8]
  4050fe:	f002 f979 	bl	4073f4 <__aeabi_dmul>
  405102:	f10a 0a01 	add.w	sl, sl, #1
  405106:	4606      	mov	r6, r0
  405108:	460f      	mov	r7, r1
  40510a:	106d      	asrs	r5, r5, #1
  40510c:	f108 0808 	add.w	r8, r8, #8
  405110:	d1ef      	bne.n	4050f2 <_dtoa_r+0x7ba>
  405112:	463b      	mov	r3, r7
  405114:	4632      	mov	r2, r6
  405116:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40511a:	f002 fa95 	bl	407648 <__aeabi_ddiv>
  40511e:	4607      	mov	r7, r0
  405120:	4688      	mov	r8, r1
  405122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405124:	b143      	cbz	r3, 405138 <_dtoa_r+0x800>
  405126:	2200      	movs	r2, #0
  405128:	4b9f      	ldr	r3, [pc, #636]	; (4053a8 <_dtoa_r+0xa70>)
  40512a:	4638      	mov	r0, r7
  40512c:	4641      	mov	r1, r8
  40512e:	f002 fbd3 	bl	4078d8 <__aeabi_dcmplt>
  405132:	2800      	cmp	r0, #0
  405134:	f040 8286 	bne.w	405644 <_dtoa_r+0xd0c>
  405138:	4650      	mov	r0, sl
  40513a:	f002 f8f5 	bl	407328 <__aeabi_i2d>
  40513e:	463a      	mov	r2, r7
  405140:	4643      	mov	r3, r8
  405142:	f002 f957 	bl	4073f4 <__aeabi_dmul>
  405146:	4b99      	ldr	r3, [pc, #612]	; (4053ac <_dtoa_r+0xa74>)
  405148:	2200      	movs	r2, #0
  40514a:	f001 ffa1 	bl	407090 <__adddf3>
  40514e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405150:	4605      	mov	r5, r0
  405152:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405156:	2b00      	cmp	r3, #0
  405158:	f000 813e 	beq.w	4053d8 <_dtoa_r+0xaa0>
  40515c:	9b02      	ldr	r3, [sp, #8]
  40515e:	9315      	str	r3, [sp, #84]	; 0x54
  405160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405162:	9312      	str	r3, [sp, #72]	; 0x48
  405164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405166:	2b00      	cmp	r3, #0
  405168:	f000 81fa 	beq.w	405560 <_dtoa_r+0xc28>
  40516c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40516e:	4b8c      	ldr	r3, [pc, #560]	; (4053a0 <_dtoa_r+0xa68>)
  405170:	498f      	ldr	r1, [pc, #572]	; (4053b0 <_dtoa_r+0xa78>)
  405172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405176:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40517a:	2000      	movs	r0, #0
  40517c:	f002 fa64 	bl	407648 <__aeabi_ddiv>
  405180:	462a      	mov	r2, r5
  405182:	4633      	mov	r3, r6
  405184:	f001 ff82 	bl	40708c <__aeabi_dsub>
  405188:	4682      	mov	sl, r0
  40518a:	468b      	mov	fp, r1
  40518c:	4638      	mov	r0, r7
  40518e:	4641      	mov	r1, r8
  405190:	f002 fbe0 	bl	407954 <__aeabi_d2iz>
  405194:	4605      	mov	r5, r0
  405196:	f002 f8c7 	bl	407328 <__aeabi_i2d>
  40519a:	4602      	mov	r2, r0
  40519c:	460b      	mov	r3, r1
  40519e:	4638      	mov	r0, r7
  4051a0:	4641      	mov	r1, r8
  4051a2:	f001 ff73 	bl	40708c <__aeabi_dsub>
  4051a6:	3530      	adds	r5, #48	; 0x30
  4051a8:	fa5f f885 	uxtb.w	r8, r5
  4051ac:	9d04      	ldr	r5, [sp, #16]
  4051ae:	4606      	mov	r6, r0
  4051b0:	460f      	mov	r7, r1
  4051b2:	f885 8000 	strb.w	r8, [r5]
  4051b6:	4602      	mov	r2, r0
  4051b8:	460b      	mov	r3, r1
  4051ba:	4650      	mov	r0, sl
  4051bc:	4659      	mov	r1, fp
  4051be:	3501      	adds	r5, #1
  4051c0:	f002 fba8 	bl	407914 <__aeabi_dcmpgt>
  4051c4:	2800      	cmp	r0, #0
  4051c6:	d154      	bne.n	405272 <_dtoa_r+0x93a>
  4051c8:	4632      	mov	r2, r6
  4051ca:	463b      	mov	r3, r7
  4051cc:	2000      	movs	r0, #0
  4051ce:	4976      	ldr	r1, [pc, #472]	; (4053a8 <_dtoa_r+0xa70>)
  4051d0:	f001 ff5c 	bl	40708c <__aeabi_dsub>
  4051d4:	4602      	mov	r2, r0
  4051d6:	460b      	mov	r3, r1
  4051d8:	4650      	mov	r0, sl
  4051da:	4659      	mov	r1, fp
  4051dc:	f002 fb9a 	bl	407914 <__aeabi_dcmpgt>
  4051e0:	2800      	cmp	r0, #0
  4051e2:	f040 8270 	bne.w	4056c6 <_dtoa_r+0xd8e>
  4051e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4051e8:	2a01      	cmp	r2, #1
  4051ea:	f000 8111 	beq.w	405410 <_dtoa_r+0xad8>
  4051ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4051f0:	9a04      	ldr	r2, [sp, #16]
  4051f2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4051f6:	4413      	add	r3, r2
  4051f8:	4699      	mov	r9, r3
  4051fa:	e00d      	b.n	405218 <_dtoa_r+0x8e0>
  4051fc:	2000      	movs	r0, #0
  4051fe:	496a      	ldr	r1, [pc, #424]	; (4053a8 <_dtoa_r+0xa70>)
  405200:	f001 ff44 	bl	40708c <__aeabi_dsub>
  405204:	4652      	mov	r2, sl
  405206:	465b      	mov	r3, fp
  405208:	f002 fb66 	bl	4078d8 <__aeabi_dcmplt>
  40520c:	2800      	cmp	r0, #0
  40520e:	f040 8258 	bne.w	4056c2 <_dtoa_r+0xd8a>
  405212:	454d      	cmp	r5, r9
  405214:	f000 80fa 	beq.w	40540c <_dtoa_r+0xad4>
  405218:	4650      	mov	r0, sl
  40521a:	4659      	mov	r1, fp
  40521c:	2200      	movs	r2, #0
  40521e:	4b65      	ldr	r3, [pc, #404]	; (4053b4 <_dtoa_r+0xa7c>)
  405220:	f002 f8e8 	bl	4073f4 <__aeabi_dmul>
  405224:	2200      	movs	r2, #0
  405226:	4b63      	ldr	r3, [pc, #396]	; (4053b4 <_dtoa_r+0xa7c>)
  405228:	4682      	mov	sl, r0
  40522a:	468b      	mov	fp, r1
  40522c:	4630      	mov	r0, r6
  40522e:	4639      	mov	r1, r7
  405230:	f002 f8e0 	bl	4073f4 <__aeabi_dmul>
  405234:	460f      	mov	r7, r1
  405236:	4606      	mov	r6, r0
  405238:	f002 fb8c 	bl	407954 <__aeabi_d2iz>
  40523c:	4680      	mov	r8, r0
  40523e:	f002 f873 	bl	407328 <__aeabi_i2d>
  405242:	4602      	mov	r2, r0
  405244:	460b      	mov	r3, r1
  405246:	4630      	mov	r0, r6
  405248:	4639      	mov	r1, r7
  40524a:	f001 ff1f 	bl	40708c <__aeabi_dsub>
  40524e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405252:	fa5f f888 	uxtb.w	r8, r8
  405256:	4652      	mov	r2, sl
  405258:	465b      	mov	r3, fp
  40525a:	f805 8b01 	strb.w	r8, [r5], #1
  40525e:	4606      	mov	r6, r0
  405260:	460f      	mov	r7, r1
  405262:	f002 fb39 	bl	4078d8 <__aeabi_dcmplt>
  405266:	4632      	mov	r2, r6
  405268:	463b      	mov	r3, r7
  40526a:	2800      	cmp	r0, #0
  40526c:	d0c6      	beq.n	4051fc <_dtoa_r+0x8c4>
  40526e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405272:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405274:	9302      	str	r3, [sp, #8]
  405276:	e523      	b.n	404cc0 <_dtoa_r+0x388>
  405278:	2300      	movs	r3, #0
  40527a:	930b      	str	r3, [sp, #44]	; 0x2c
  40527c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40527e:	2b00      	cmp	r3, #0
  405280:	f340 80dc 	ble.w	40543c <_dtoa_r+0xb04>
  405284:	461f      	mov	r7, r3
  405286:	461e      	mov	r6, r3
  405288:	930f      	str	r3, [sp, #60]	; 0x3c
  40528a:	930a      	str	r3, [sp, #40]	; 0x28
  40528c:	e6f6      	b.n	40507c <_dtoa_r+0x744>
  40528e:	2301      	movs	r3, #1
  405290:	930b      	str	r3, [sp, #44]	; 0x2c
  405292:	e7f3      	b.n	40527c <_dtoa_r+0x944>
  405294:	f1ba 0f00 	cmp.w	sl, #0
  405298:	f47f ada8 	bne.w	404dec <_dtoa_r+0x4b4>
  40529c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4052a0:	2b00      	cmp	r3, #0
  4052a2:	f47f adba 	bne.w	404e1a <_dtoa_r+0x4e2>
  4052a6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4052aa:	0d3f      	lsrs	r7, r7, #20
  4052ac:	053f      	lsls	r7, r7, #20
  4052ae:	2f00      	cmp	r7, #0
  4052b0:	f000 820d 	beq.w	4056ce <_dtoa_r+0xd96>
  4052b4:	9b08      	ldr	r3, [sp, #32]
  4052b6:	3301      	adds	r3, #1
  4052b8:	9308      	str	r3, [sp, #32]
  4052ba:	9b06      	ldr	r3, [sp, #24]
  4052bc:	3301      	adds	r3, #1
  4052be:	9306      	str	r3, [sp, #24]
  4052c0:	2301      	movs	r3, #1
  4052c2:	930c      	str	r3, [sp, #48]	; 0x30
  4052c4:	e5ab      	b.n	404e1e <_dtoa_r+0x4e6>
  4052c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052c8:	2b00      	cmp	r3, #0
  4052ca:	f73f ac42 	bgt.w	404b52 <_dtoa_r+0x21a>
  4052ce:	f040 8221 	bne.w	405714 <_dtoa_r+0xddc>
  4052d2:	2200      	movs	r2, #0
  4052d4:	4b38      	ldr	r3, [pc, #224]	; (4053b8 <_dtoa_r+0xa80>)
  4052d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4052da:	f002 f88b 	bl	4073f4 <__aeabi_dmul>
  4052de:	4652      	mov	r2, sl
  4052e0:	465b      	mov	r3, fp
  4052e2:	f002 fb0d 	bl	407900 <__aeabi_dcmpge>
  4052e6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4052ea:	4646      	mov	r6, r8
  4052ec:	2800      	cmp	r0, #0
  4052ee:	d041      	beq.n	405374 <_dtoa_r+0xa3c>
  4052f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4052f2:	9d04      	ldr	r5, [sp, #16]
  4052f4:	43db      	mvns	r3, r3
  4052f6:	9302      	str	r3, [sp, #8]
  4052f8:	4641      	mov	r1, r8
  4052fa:	4620      	mov	r0, r4
  4052fc:	f000 fe74 	bl	405fe8 <_Bfree>
  405300:	2e00      	cmp	r6, #0
  405302:	f43f acdd 	beq.w	404cc0 <_dtoa_r+0x388>
  405306:	e6a7      	b.n	405058 <_dtoa_r+0x720>
  405308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40530a:	4649      	mov	r1, r9
  40530c:	4620      	mov	r0, r4
  40530e:	f000 ffa1 	bl	406254 <__pow5mult>
  405312:	4681      	mov	r9, r0
  405314:	e558      	b.n	404dc8 <_dtoa_r+0x490>
  405316:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405318:	2a00      	cmp	r2, #0
  40531a:	f000 8187 	beq.w	40562c <_dtoa_r+0xcf4>
  40531e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405322:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405324:	9d08      	ldr	r5, [sp, #32]
  405326:	e4f2      	b.n	404d0e <_dtoa_r+0x3d6>
  405328:	f1ba 0f00 	cmp.w	sl, #0
  40532c:	f47f ad75 	bne.w	404e1a <_dtoa_r+0x4e2>
  405330:	e7b4      	b.n	40529c <_dtoa_r+0x964>
  405332:	f000 fe63 	bl	405ffc <__multadd>
  405336:	4647      	mov	r7, r8
  405338:	4606      	mov	r6, r0
  40533a:	4683      	mov	fp, r0
  40533c:	e5be      	b.n	404ebc <_dtoa_r+0x584>
  40533e:	4601      	mov	r1, r0
  405340:	4620      	mov	r0, r4
  405342:	9306      	str	r3, [sp, #24]
  405344:	f000 fe50 	bl	405fe8 <_Bfree>
  405348:	2201      	movs	r2, #1
  40534a:	9b06      	ldr	r3, [sp, #24]
  40534c:	e5e0      	b.n	404f10 <_dtoa_r+0x5d8>
  40534e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405350:	2b02      	cmp	r3, #2
  405352:	f77f ad96 	ble.w	404e82 <_dtoa_r+0x54a>
  405356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405358:	2b00      	cmp	r3, #0
  40535a:	d1c9      	bne.n	4052f0 <_dtoa_r+0x9b8>
  40535c:	4641      	mov	r1, r8
  40535e:	2205      	movs	r2, #5
  405360:	4620      	mov	r0, r4
  405362:	f000 fe4b 	bl	405ffc <__multadd>
  405366:	4601      	mov	r1, r0
  405368:	4680      	mov	r8, r0
  40536a:	4648      	mov	r0, r9
  40536c:	f001 f814 	bl	406398 <__mcmp>
  405370:	2800      	cmp	r0, #0
  405372:	ddbd      	ble.n	4052f0 <_dtoa_r+0x9b8>
  405374:	9a02      	ldr	r2, [sp, #8]
  405376:	9904      	ldr	r1, [sp, #16]
  405378:	2331      	movs	r3, #49	; 0x31
  40537a:	3201      	adds	r2, #1
  40537c:	9202      	str	r2, [sp, #8]
  40537e:	700b      	strb	r3, [r1, #0]
  405380:	1c4d      	adds	r5, r1, #1
  405382:	e7b9      	b.n	4052f8 <_dtoa_r+0x9c0>
  405384:	9a02      	ldr	r2, [sp, #8]
  405386:	3201      	adds	r2, #1
  405388:	9202      	str	r2, [sp, #8]
  40538a:	9a04      	ldr	r2, [sp, #16]
  40538c:	2331      	movs	r3, #49	; 0x31
  40538e:	7013      	strb	r3, [r2, #0]
  405390:	e652      	b.n	405038 <_dtoa_r+0x700>
  405392:	2301      	movs	r3, #1
  405394:	930b      	str	r3, [sp, #44]	; 0x2c
  405396:	e666      	b.n	405066 <_dtoa_r+0x72e>
  405398:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40539c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40539e:	e48f      	b.n	404cc0 <_dtoa_r+0x388>
  4053a0:	00407c08 	.word	0x00407c08
  4053a4:	00407be0 	.word	0x00407be0
  4053a8:	3ff00000 	.word	0x3ff00000
  4053ac:	401c0000 	.word	0x401c0000
  4053b0:	3fe00000 	.word	0x3fe00000
  4053b4:	40240000 	.word	0x40240000
  4053b8:	40140000 	.word	0x40140000
  4053bc:	4650      	mov	r0, sl
  4053be:	f001 ffb3 	bl	407328 <__aeabi_i2d>
  4053c2:	463a      	mov	r2, r7
  4053c4:	4643      	mov	r3, r8
  4053c6:	f002 f815 	bl	4073f4 <__aeabi_dmul>
  4053ca:	2200      	movs	r2, #0
  4053cc:	4bc1      	ldr	r3, [pc, #772]	; (4056d4 <_dtoa_r+0xd9c>)
  4053ce:	f001 fe5f 	bl	407090 <__adddf3>
  4053d2:	4605      	mov	r5, r0
  4053d4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4053d8:	4641      	mov	r1, r8
  4053da:	2200      	movs	r2, #0
  4053dc:	4bbe      	ldr	r3, [pc, #760]	; (4056d8 <_dtoa_r+0xda0>)
  4053de:	4638      	mov	r0, r7
  4053e0:	f001 fe54 	bl	40708c <__aeabi_dsub>
  4053e4:	462a      	mov	r2, r5
  4053e6:	4633      	mov	r3, r6
  4053e8:	4682      	mov	sl, r0
  4053ea:	468b      	mov	fp, r1
  4053ec:	f002 fa92 	bl	407914 <__aeabi_dcmpgt>
  4053f0:	4680      	mov	r8, r0
  4053f2:	2800      	cmp	r0, #0
  4053f4:	f040 8110 	bne.w	405618 <_dtoa_r+0xce0>
  4053f8:	462a      	mov	r2, r5
  4053fa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4053fe:	4650      	mov	r0, sl
  405400:	4659      	mov	r1, fp
  405402:	f002 fa69 	bl	4078d8 <__aeabi_dcmplt>
  405406:	b118      	cbz	r0, 405410 <_dtoa_r+0xad8>
  405408:	4646      	mov	r6, r8
  40540a:	e771      	b.n	4052f0 <_dtoa_r+0x9b8>
  40540c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405410:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405414:	f7ff bb8a 	b.w	404b2c <_dtoa_r+0x1f4>
  405418:	9804      	ldr	r0, [sp, #16]
  40541a:	f7ff babb 	b.w	404994 <_dtoa_r+0x5c>
  40541e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405420:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405422:	970c      	str	r7, [sp, #48]	; 0x30
  405424:	1afb      	subs	r3, r7, r3
  405426:	441a      	add	r2, r3
  405428:	920d      	str	r2, [sp, #52]	; 0x34
  40542a:	2700      	movs	r7, #0
  40542c:	e469      	b.n	404d02 <_dtoa_r+0x3ca>
  40542e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405432:	f04f 0a02 	mov.w	sl, #2
  405436:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40543a:	e657      	b.n	4050ec <_dtoa_r+0x7b4>
  40543c:	2100      	movs	r1, #0
  40543e:	2301      	movs	r3, #1
  405440:	6461      	str	r1, [r4, #68]	; 0x44
  405442:	4620      	mov	r0, r4
  405444:	9325      	str	r3, [sp, #148]	; 0x94
  405446:	f000 fda9 	bl	405f9c <_Balloc>
  40544a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40544c:	9004      	str	r0, [sp, #16]
  40544e:	6420      	str	r0, [r4, #64]	; 0x40
  405450:	930a      	str	r3, [sp, #40]	; 0x28
  405452:	930f      	str	r3, [sp, #60]	; 0x3c
  405454:	e629      	b.n	4050aa <_dtoa_r+0x772>
  405456:	2a00      	cmp	r2, #0
  405458:	46d0      	mov	r8, sl
  40545a:	f8cd b018 	str.w	fp, [sp, #24]
  40545e:	469a      	mov	sl, r3
  405460:	dd11      	ble.n	405486 <_dtoa_r+0xb4e>
  405462:	4649      	mov	r1, r9
  405464:	2201      	movs	r2, #1
  405466:	4620      	mov	r0, r4
  405468:	f000 ff44 	bl	4062f4 <__lshift>
  40546c:	4641      	mov	r1, r8
  40546e:	4681      	mov	r9, r0
  405470:	f000 ff92 	bl	406398 <__mcmp>
  405474:	2800      	cmp	r0, #0
  405476:	f340 8146 	ble.w	405706 <_dtoa_r+0xdce>
  40547a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40547e:	f000 8106 	beq.w	40568e <_dtoa_r+0xd56>
  405482:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405486:	46b3      	mov	fp, r6
  405488:	f887 a000 	strb.w	sl, [r7]
  40548c:	1c7d      	adds	r5, r7, #1
  40548e:	9e06      	ldr	r6, [sp, #24]
  405490:	e5d2      	b.n	405038 <_dtoa_r+0x700>
  405492:	d104      	bne.n	40549e <_dtoa_r+0xb66>
  405494:	f01a 0f01 	tst.w	sl, #1
  405498:	d001      	beq.n	40549e <_dtoa_r+0xb66>
  40549a:	e5bd      	b.n	405018 <_dtoa_r+0x6e0>
  40549c:	4615      	mov	r5, r2
  40549e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4054a2:	2b30      	cmp	r3, #48	; 0x30
  4054a4:	f105 32ff 	add.w	r2, r5, #4294967295
  4054a8:	d0f8      	beq.n	40549c <_dtoa_r+0xb64>
  4054aa:	e5c5      	b.n	405038 <_dtoa_r+0x700>
  4054ac:	9904      	ldr	r1, [sp, #16]
  4054ae:	2230      	movs	r2, #48	; 0x30
  4054b0:	700a      	strb	r2, [r1, #0]
  4054b2:	9a02      	ldr	r2, [sp, #8]
  4054b4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4054b8:	3201      	adds	r2, #1
  4054ba:	9202      	str	r2, [sp, #8]
  4054bc:	f7ff bbfc 	b.w	404cb8 <_dtoa_r+0x380>
  4054c0:	f000 80bb 	beq.w	40563a <_dtoa_r+0xd02>
  4054c4:	9b02      	ldr	r3, [sp, #8]
  4054c6:	425d      	negs	r5, r3
  4054c8:	4b84      	ldr	r3, [pc, #528]	; (4056dc <_dtoa_r+0xda4>)
  4054ca:	f005 020f 	and.w	r2, r5, #15
  4054ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4054da:	f001 ff8b 	bl	4073f4 <__aeabi_dmul>
  4054de:	112d      	asrs	r5, r5, #4
  4054e0:	4607      	mov	r7, r0
  4054e2:	4688      	mov	r8, r1
  4054e4:	f000 812c 	beq.w	405740 <_dtoa_r+0xe08>
  4054e8:	4e7d      	ldr	r6, [pc, #500]	; (4056e0 <_dtoa_r+0xda8>)
  4054ea:	f04f 0a02 	mov.w	sl, #2
  4054ee:	07eb      	lsls	r3, r5, #31
  4054f0:	d509      	bpl.n	405506 <_dtoa_r+0xbce>
  4054f2:	4638      	mov	r0, r7
  4054f4:	4641      	mov	r1, r8
  4054f6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4054fa:	f001 ff7b 	bl	4073f4 <__aeabi_dmul>
  4054fe:	f10a 0a01 	add.w	sl, sl, #1
  405502:	4607      	mov	r7, r0
  405504:	4688      	mov	r8, r1
  405506:	106d      	asrs	r5, r5, #1
  405508:	f106 0608 	add.w	r6, r6, #8
  40550c:	d1ef      	bne.n	4054ee <_dtoa_r+0xbb6>
  40550e:	e608      	b.n	405122 <_dtoa_r+0x7ea>
  405510:	6871      	ldr	r1, [r6, #4]
  405512:	4620      	mov	r0, r4
  405514:	f000 fd42 	bl	405f9c <_Balloc>
  405518:	6933      	ldr	r3, [r6, #16]
  40551a:	3302      	adds	r3, #2
  40551c:	009a      	lsls	r2, r3, #2
  40551e:	4605      	mov	r5, r0
  405520:	f106 010c 	add.w	r1, r6, #12
  405524:	300c      	adds	r0, #12
  405526:	f000 fc93 	bl	405e50 <memcpy>
  40552a:	4629      	mov	r1, r5
  40552c:	2201      	movs	r2, #1
  40552e:	4620      	mov	r0, r4
  405530:	f000 fee0 	bl	4062f4 <__lshift>
  405534:	9006      	str	r0, [sp, #24]
  405536:	e4b5      	b.n	404ea4 <_dtoa_r+0x56c>
  405538:	2b39      	cmp	r3, #57	; 0x39
  40553a:	f8cd b018 	str.w	fp, [sp, #24]
  40553e:	46d0      	mov	r8, sl
  405540:	f000 80a5 	beq.w	40568e <_dtoa_r+0xd56>
  405544:	f103 0a01 	add.w	sl, r3, #1
  405548:	46b3      	mov	fp, r6
  40554a:	f887 a000 	strb.w	sl, [r7]
  40554e:	1c7d      	adds	r5, r7, #1
  405550:	9e06      	ldr	r6, [sp, #24]
  405552:	e571      	b.n	405038 <_dtoa_r+0x700>
  405554:	465a      	mov	r2, fp
  405556:	46d0      	mov	r8, sl
  405558:	46b3      	mov	fp, r6
  40555a:	469a      	mov	sl, r3
  40555c:	4616      	mov	r6, r2
  40555e:	e54f      	b.n	405000 <_dtoa_r+0x6c8>
  405560:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405562:	495e      	ldr	r1, [pc, #376]	; (4056dc <_dtoa_r+0xda4>)
  405564:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405568:	462a      	mov	r2, r5
  40556a:	4633      	mov	r3, r6
  40556c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405570:	f001 ff40 	bl	4073f4 <__aeabi_dmul>
  405574:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405578:	4638      	mov	r0, r7
  40557a:	4641      	mov	r1, r8
  40557c:	f002 f9ea 	bl	407954 <__aeabi_d2iz>
  405580:	4605      	mov	r5, r0
  405582:	f001 fed1 	bl	407328 <__aeabi_i2d>
  405586:	460b      	mov	r3, r1
  405588:	4602      	mov	r2, r0
  40558a:	4641      	mov	r1, r8
  40558c:	4638      	mov	r0, r7
  40558e:	f001 fd7d 	bl	40708c <__aeabi_dsub>
  405592:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405594:	460f      	mov	r7, r1
  405596:	9904      	ldr	r1, [sp, #16]
  405598:	3530      	adds	r5, #48	; 0x30
  40559a:	2b01      	cmp	r3, #1
  40559c:	700d      	strb	r5, [r1, #0]
  40559e:	4606      	mov	r6, r0
  4055a0:	f101 0501 	add.w	r5, r1, #1
  4055a4:	d026      	beq.n	4055f4 <_dtoa_r+0xcbc>
  4055a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4055a8:	9a04      	ldr	r2, [sp, #16]
  4055aa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4056e8 <_dtoa_r+0xdb0>
  4055ae:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4055b2:	4413      	add	r3, r2
  4055b4:	f04f 0a00 	mov.w	sl, #0
  4055b8:	4699      	mov	r9, r3
  4055ba:	4652      	mov	r2, sl
  4055bc:	465b      	mov	r3, fp
  4055be:	4630      	mov	r0, r6
  4055c0:	4639      	mov	r1, r7
  4055c2:	f001 ff17 	bl	4073f4 <__aeabi_dmul>
  4055c6:	460f      	mov	r7, r1
  4055c8:	4606      	mov	r6, r0
  4055ca:	f002 f9c3 	bl	407954 <__aeabi_d2iz>
  4055ce:	4680      	mov	r8, r0
  4055d0:	f001 feaa 	bl	407328 <__aeabi_i2d>
  4055d4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4055d8:	4602      	mov	r2, r0
  4055da:	460b      	mov	r3, r1
  4055dc:	4630      	mov	r0, r6
  4055de:	4639      	mov	r1, r7
  4055e0:	f001 fd54 	bl	40708c <__aeabi_dsub>
  4055e4:	f805 8b01 	strb.w	r8, [r5], #1
  4055e8:	454d      	cmp	r5, r9
  4055ea:	4606      	mov	r6, r0
  4055ec:	460f      	mov	r7, r1
  4055ee:	d1e4      	bne.n	4055ba <_dtoa_r+0xc82>
  4055f0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4055f4:	4b3b      	ldr	r3, [pc, #236]	; (4056e4 <_dtoa_r+0xdac>)
  4055f6:	2200      	movs	r2, #0
  4055f8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4055fc:	f001 fd48 	bl	407090 <__adddf3>
  405600:	4632      	mov	r2, r6
  405602:	463b      	mov	r3, r7
  405604:	f002 f968 	bl	4078d8 <__aeabi_dcmplt>
  405608:	2800      	cmp	r0, #0
  40560a:	d046      	beq.n	40569a <_dtoa_r+0xd62>
  40560c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40560e:	9302      	str	r3, [sp, #8]
  405610:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405614:	f7ff bb43 	b.w	404c9e <_dtoa_r+0x366>
  405618:	f04f 0800 	mov.w	r8, #0
  40561c:	4646      	mov	r6, r8
  40561e:	e6a9      	b.n	405374 <_dtoa_r+0xa3c>
  405620:	9b08      	ldr	r3, [sp, #32]
  405622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405624:	1a9d      	subs	r5, r3, r2
  405626:	2300      	movs	r3, #0
  405628:	f7ff bb71 	b.w	404d0e <_dtoa_r+0x3d6>
  40562c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40562e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405630:	9d08      	ldr	r5, [sp, #32]
  405632:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405636:	f7ff bb6a 	b.w	404d0e <_dtoa_r+0x3d6>
  40563a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40563e:	f04f 0a02 	mov.w	sl, #2
  405642:	e56e      	b.n	405122 <_dtoa_r+0x7ea>
  405644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405646:	2b00      	cmp	r3, #0
  405648:	f43f aeb8 	beq.w	4053bc <_dtoa_r+0xa84>
  40564c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40564e:	2b00      	cmp	r3, #0
  405650:	f77f aede 	ble.w	405410 <_dtoa_r+0xad8>
  405654:	2200      	movs	r2, #0
  405656:	4b24      	ldr	r3, [pc, #144]	; (4056e8 <_dtoa_r+0xdb0>)
  405658:	4638      	mov	r0, r7
  40565a:	4641      	mov	r1, r8
  40565c:	f001 feca 	bl	4073f4 <__aeabi_dmul>
  405660:	4607      	mov	r7, r0
  405662:	4688      	mov	r8, r1
  405664:	f10a 0001 	add.w	r0, sl, #1
  405668:	f001 fe5e 	bl	407328 <__aeabi_i2d>
  40566c:	463a      	mov	r2, r7
  40566e:	4643      	mov	r3, r8
  405670:	f001 fec0 	bl	4073f4 <__aeabi_dmul>
  405674:	2200      	movs	r2, #0
  405676:	4b17      	ldr	r3, [pc, #92]	; (4056d4 <_dtoa_r+0xd9c>)
  405678:	f001 fd0a 	bl	407090 <__adddf3>
  40567c:	9a02      	ldr	r2, [sp, #8]
  40567e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405680:	9312      	str	r3, [sp, #72]	; 0x48
  405682:	3a01      	subs	r2, #1
  405684:	4605      	mov	r5, r0
  405686:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40568a:	9215      	str	r2, [sp, #84]	; 0x54
  40568c:	e56a      	b.n	405164 <_dtoa_r+0x82c>
  40568e:	2239      	movs	r2, #57	; 0x39
  405690:	46b3      	mov	fp, r6
  405692:	703a      	strb	r2, [r7, #0]
  405694:	9e06      	ldr	r6, [sp, #24]
  405696:	1c7d      	adds	r5, r7, #1
  405698:	e4c0      	b.n	40501c <_dtoa_r+0x6e4>
  40569a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40569e:	2000      	movs	r0, #0
  4056a0:	4910      	ldr	r1, [pc, #64]	; (4056e4 <_dtoa_r+0xdac>)
  4056a2:	f001 fcf3 	bl	40708c <__aeabi_dsub>
  4056a6:	4632      	mov	r2, r6
  4056a8:	463b      	mov	r3, r7
  4056aa:	f002 f933 	bl	407914 <__aeabi_dcmpgt>
  4056ae:	b908      	cbnz	r0, 4056b4 <_dtoa_r+0xd7c>
  4056b0:	e6ae      	b.n	405410 <_dtoa_r+0xad8>
  4056b2:	4615      	mov	r5, r2
  4056b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4056b8:	2b30      	cmp	r3, #48	; 0x30
  4056ba:	f105 32ff 	add.w	r2, r5, #4294967295
  4056be:	d0f8      	beq.n	4056b2 <_dtoa_r+0xd7a>
  4056c0:	e5d7      	b.n	405272 <_dtoa_r+0x93a>
  4056c2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4056c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4056c8:	9302      	str	r3, [sp, #8]
  4056ca:	f7ff bae8 	b.w	404c9e <_dtoa_r+0x366>
  4056ce:	970c      	str	r7, [sp, #48]	; 0x30
  4056d0:	f7ff bba5 	b.w	404e1e <_dtoa_r+0x4e6>
  4056d4:	401c0000 	.word	0x401c0000
  4056d8:	40140000 	.word	0x40140000
  4056dc:	00407c08 	.word	0x00407c08
  4056e0:	00407be0 	.word	0x00407be0
  4056e4:	3fe00000 	.word	0x3fe00000
  4056e8:	40240000 	.word	0x40240000
  4056ec:	2b39      	cmp	r3, #57	; 0x39
  4056ee:	f8cd b018 	str.w	fp, [sp, #24]
  4056f2:	46d0      	mov	r8, sl
  4056f4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4056f8:	469a      	mov	sl, r3
  4056fa:	d0c8      	beq.n	40568e <_dtoa_r+0xd56>
  4056fc:	f1bb 0f00 	cmp.w	fp, #0
  405700:	f73f aebf 	bgt.w	405482 <_dtoa_r+0xb4a>
  405704:	e6bf      	b.n	405486 <_dtoa_r+0xb4e>
  405706:	f47f aebe 	bne.w	405486 <_dtoa_r+0xb4e>
  40570a:	f01a 0f01 	tst.w	sl, #1
  40570e:	f43f aeba 	beq.w	405486 <_dtoa_r+0xb4e>
  405712:	e6b2      	b.n	40547a <_dtoa_r+0xb42>
  405714:	f04f 0800 	mov.w	r8, #0
  405718:	4646      	mov	r6, r8
  40571a:	e5e9      	b.n	4052f0 <_dtoa_r+0x9b8>
  40571c:	4631      	mov	r1, r6
  40571e:	2300      	movs	r3, #0
  405720:	220a      	movs	r2, #10
  405722:	4620      	mov	r0, r4
  405724:	f000 fc6a 	bl	405ffc <__multadd>
  405728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40572a:	2b00      	cmp	r3, #0
  40572c:	4606      	mov	r6, r0
  40572e:	dd0a      	ble.n	405746 <_dtoa_r+0xe0e>
  405730:	930a      	str	r3, [sp, #40]	; 0x28
  405732:	f7ff bbaa 	b.w	404e8a <_dtoa_r+0x552>
  405736:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405738:	2b02      	cmp	r3, #2
  40573a:	dc23      	bgt.n	405784 <_dtoa_r+0xe4c>
  40573c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40573e:	e43b      	b.n	404fb8 <_dtoa_r+0x680>
  405740:	f04f 0a02 	mov.w	sl, #2
  405744:	e4ed      	b.n	405122 <_dtoa_r+0x7ea>
  405746:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405748:	2b02      	cmp	r3, #2
  40574a:	dc1b      	bgt.n	405784 <_dtoa_r+0xe4c>
  40574c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40574e:	e7ef      	b.n	405730 <_dtoa_r+0xdf8>
  405750:	2500      	movs	r5, #0
  405752:	6465      	str	r5, [r4, #68]	; 0x44
  405754:	4629      	mov	r1, r5
  405756:	4620      	mov	r0, r4
  405758:	f000 fc20 	bl	405f9c <_Balloc>
  40575c:	f04f 33ff 	mov.w	r3, #4294967295
  405760:	930a      	str	r3, [sp, #40]	; 0x28
  405762:	930f      	str	r3, [sp, #60]	; 0x3c
  405764:	2301      	movs	r3, #1
  405766:	9004      	str	r0, [sp, #16]
  405768:	9525      	str	r5, [sp, #148]	; 0x94
  40576a:	6420      	str	r0, [r4, #64]	; 0x40
  40576c:	930b      	str	r3, [sp, #44]	; 0x2c
  40576e:	f7ff b9dd 	b.w	404b2c <_dtoa_r+0x1f4>
  405772:	2501      	movs	r5, #1
  405774:	f7ff b9a5 	b.w	404ac2 <_dtoa_r+0x18a>
  405778:	f43f ab69 	beq.w	404e4e <_dtoa_r+0x516>
  40577c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405780:	f7ff bbf9 	b.w	404f76 <_dtoa_r+0x63e>
  405784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405786:	930a      	str	r3, [sp, #40]	; 0x28
  405788:	e5e5      	b.n	405356 <_dtoa_r+0xa1e>
  40578a:	bf00      	nop

0040578c <__libc_fini_array>:
  40578c:	b538      	push	{r3, r4, r5, lr}
  40578e:	4c0a      	ldr	r4, [pc, #40]	; (4057b8 <__libc_fini_array+0x2c>)
  405790:	4d0a      	ldr	r5, [pc, #40]	; (4057bc <__libc_fini_array+0x30>)
  405792:	1b64      	subs	r4, r4, r5
  405794:	10a4      	asrs	r4, r4, #2
  405796:	d00a      	beq.n	4057ae <__libc_fini_array+0x22>
  405798:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40579c:	3b01      	subs	r3, #1
  40579e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4057a2:	3c01      	subs	r4, #1
  4057a4:	f855 3904 	ldr.w	r3, [r5], #-4
  4057a8:	4798      	blx	r3
  4057aa:	2c00      	cmp	r4, #0
  4057ac:	d1f9      	bne.n	4057a2 <__libc_fini_array+0x16>
  4057ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4057b2:	f002 bb27 	b.w	407e04 <_fini>
  4057b6:	bf00      	nop
  4057b8:	00407e14 	.word	0x00407e14
  4057bc:	00407e10 	.word	0x00407e10

004057c0 <_localeconv_r>:
  4057c0:	4a04      	ldr	r2, [pc, #16]	; (4057d4 <_localeconv_r+0x14>)
  4057c2:	4b05      	ldr	r3, [pc, #20]	; (4057d8 <_localeconv_r+0x18>)
  4057c4:	6812      	ldr	r2, [r2, #0]
  4057c6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4057c8:	2800      	cmp	r0, #0
  4057ca:	bf08      	it	eq
  4057cc:	4618      	moveq	r0, r3
  4057ce:	30f0      	adds	r0, #240	; 0xf0
  4057d0:	4770      	bx	lr
  4057d2:	bf00      	nop
  4057d4:	200061b8 	.word	0x200061b8
  4057d8:	200069fc 	.word	0x200069fc

004057dc <__retarget_lock_acquire_recursive>:
  4057dc:	4770      	bx	lr
  4057de:	bf00      	nop

004057e0 <__retarget_lock_release_recursive>:
  4057e0:	4770      	bx	lr
  4057e2:	bf00      	nop

004057e4 <_malloc_r>:
  4057e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057e8:	f101 060b 	add.w	r6, r1, #11
  4057ec:	2e16      	cmp	r6, #22
  4057ee:	b083      	sub	sp, #12
  4057f0:	4605      	mov	r5, r0
  4057f2:	f240 809e 	bls.w	405932 <_malloc_r+0x14e>
  4057f6:	f036 0607 	bics.w	r6, r6, #7
  4057fa:	f100 80bd 	bmi.w	405978 <_malloc_r+0x194>
  4057fe:	42b1      	cmp	r1, r6
  405800:	f200 80ba 	bhi.w	405978 <_malloc_r+0x194>
  405804:	f000 fbbe 	bl	405f84 <__malloc_lock>
  405808:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40580c:	f0c0 8293 	bcc.w	405d36 <_malloc_r+0x552>
  405810:	0a73      	lsrs	r3, r6, #9
  405812:	f000 80b8 	beq.w	405986 <_malloc_r+0x1a2>
  405816:	2b04      	cmp	r3, #4
  405818:	f200 8179 	bhi.w	405b0e <_malloc_r+0x32a>
  40581c:	09b3      	lsrs	r3, r6, #6
  40581e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405822:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405826:	00c3      	lsls	r3, r0, #3
  405828:	4fbf      	ldr	r7, [pc, #764]	; (405b28 <_malloc_r+0x344>)
  40582a:	443b      	add	r3, r7
  40582c:	f1a3 0108 	sub.w	r1, r3, #8
  405830:	685c      	ldr	r4, [r3, #4]
  405832:	42a1      	cmp	r1, r4
  405834:	d106      	bne.n	405844 <_malloc_r+0x60>
  405836:	e00c      	b.n	405852 <_malloc_r+0x6e>
  405838:	2a00      	cmp	r2, #0
  40583a:	f280 80aa 	bge.w	405992 <_malloc_r+0x1ae>
  40583e:	68e4      	ldr	r4, [r4, #12]
  405840:	42a1      	cmp	r1, r4
  405842:	d006      	beq.n	405852 <_malloc_r+0x6e>
  405844:	6863      	ldr	r3, [r4, #4]
  405846:	f023 0303 	bic.w	r3, r3, #3
  40584a:	1b9a      	subs	r2, r3, r6
  40584c:	2a0f      	cmp	r2, #15
  40584e:	ddf3      	ble.n	405838 <_malloc_r+0x54>
  405850:	4670      	mov	r0, lr
  405852:	693c      	ldr	r4, [r7, #16]
  405854:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405b3c <_malloc_r+0x358>
  405858:	4574      	cmp	r4, lr
  40585a:	f000 81ab 	beq.w	405bb4 <_malloc_r+0x3d0>
  40585e:	6863      	ldr	r3, [r4, #4]
  405860:	f023 0303 	bic.w	r3, r3, #3
  405864:	1b9a      	subs	r2, r3, r6
  405866:	2a0f      	cmp	r2, #15
  405868:	f300 8190 	bgt.w	405b8c <_malloc_r+0x3a8>
  40586c:	2a00      	cmp	r2, #0
  40586e:	f8c7 e014 	str.w	lr, [r7, #20]
  405872:	f8c7 e010 	str.w	lr, [r7, #16]
  405876:	f280 809d 	bge.w	4059b4 <_malloc_r+0x1d0>
  40587a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40587e:	f080 8161 	bcs.w	405b44 <_malloc_r+0x360>
  405882:	08db      	lsrs	r3, r3, #3
  405884:	f103 0c01 	add.w	ip, r3, #1
  405888:	1099      	asrs	r1, r3, #2
  40588a:	687a      	ldr	r2, [r7, #4]
  40588c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405890:	f8c4 8008 	str.w	r8, [r4, #8]
  405894:	2301      	movs	r3, #1
  405896:	408b      	lsls	r3, r1
  405898:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40589c:	4313      	orrs	r3, r2
  40589e:	3908      	subs	r1, #8
  4058a0:	60e1      	str	r1, [r4, #12]
  4058a2:	607b      	str	r3, [r7, #4]
  4058a4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4058a8:	f8c8 400c 	str.w	r4, [r8, #12]
  4058ac:	1082      	asrs	r2, r0, #2
  4058ae:	2401      	movs	r4, #1
  4058b0:	4094      	lsls	r4, r2
  4058b2:	429c      	cmp	r4, r3
  4058b4:	f200 808b 	bhi.w	4059ce <_malloc_r+0x1ea>
  4058b8:	421c      	tst	r4, r3
  4058ba:	d106      	bne.n	4058ca <_malloc_r+0xe6>
  4058bc:	f020 0003 	bic.w	r0, r0, #3
  4058c0:	0064      	lsls	r4, r4, #1
  4058c2:	421c      	tst	r4, r3
  4058c4:	f100 0004 	add.w	r0, r0, #4
  4058c8:	d0fa      	beq.n	4058c0 <_malloc_r+0xdc>
  4058ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4058ce:	46cc      	mov	ip, r9
  4058d0:	4680      	mov	r8, r0
  4058d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4058d6:	459c      	cmp	ip, r3
  4058d8:	d107      	bne.n	4058ea <_malloc_r+0x106>
  4058da:	e16d      	b.n	405bb8 <_malloc_r+0x3d4>
  4058dc:	2a00      	cmp	r2, #0
  4058de:	f280 817b 	bge.w	405bd8 <_malloc_r+0x3f4>
  4058e2:	68db      	ldr	r3, [r3, #12]
  4058e4:	459c      	cmp	ip, r3
  4058e6:	f000 8167 	beq.w	405bb8 <_malloc_r+0x3d4>
  4058ea:	6859      	ldr	r1, [r3, #4]
  4058ec:	f021 0103 	bic.w	r1, r1, #3
  4058f0:	1b8a      	subs	r2, r1, r6
  4058f2:	2a0f      	cmp	r2, #15
  4058f4:	ddf2      	ble.n	4058dc <_malloc_r+0xf8>
  4058f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4058fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4058fe:	9300      	str	r3, [sp, #0]
  405900:	199c      	adds	r4, r3, r6
  405902:	4628      	mov	r0, r5
  405904:	f046 0601 	orr.w	r6, r6, #1
  405908:	f042 0501 	orr.w	r5, r2, #1
  40590c:	605e      	str	r6, [r3, #4]
  40590e:	f8c8 c00c 	str.w	ip, [r8, #12]
  405912:	f8cc 8008 	str.w	r8, [ip, #8]
  405916:	617c      	str	r4, [r7, #20]
  405918:	613c      	str	r4, [r7, #16]
  40591a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40591e:	f8c4 e008 	str.w	lr, [r4, #8]
  405922:	6065      	str	r5, [r4, #4]
  405924:	505a      	str	r2, [r3, r1]
  405926:	f000 fb33 	bl	405f90 <__malloc_unlock>
  40592a:	9b00      	ldr	r3, [sp, #0]
  40592c:	f103 0408 	add.w	r4, r3, #8
  405930:	e01e      	b.n	405970 <_malloc_r+0x18c>
  405932:	2910      	cmp	r1, #16
  405934:	d820      	bhi.n	405978 <_malloc_r+0x194>
  405936:	f000 fb25 	bl	405f84 <__malloc_lock>
  40593a:	2610      	movs	r6, #16
  40593c:	2318      	movs	r3, #24
  40593e:	2002      	movs	r0, #2
  405940:	4f79      	ldr	r7, [pc, #484]	; (405b28 <_malloc_r+0x344>)
  405942:	443b      	add	r3, r7
  405944:	f1a3 0208 	sub.w	r2, r3, #8
  405948:	685c      	ldr	r4, [r3, #4]
  40594a:	4294      	cmp	r4, r2
  40594c:	f000 813d 	beq.w	405bca <_malloc_r+0x3e6>
  405950:	6863      	ldr	r3, [r4, #4]
  405952:	68e1      	ldr	r1, [r4, #12]
  405954:	68a6      	ldr	r6, [r4, #8]
  405956:	f023 0303 	bic.w	r3, r3, #3
  40595a:	4423      	add	r3, r4
  40595c:	4628      	mov	r0, r5
  40595e:	685a      	ldr	r2, [r3, #4]
  405960:	60f1      	str	r1, [r6, #12]
  405962:	f042 0201 	orr.w	r2, r2, #1
  405966:	608e      	str	r6, [r1, #8]
  405968:	605a      	str	r2, [r3, #4]
  40596a:	f000 fb11 	bl	405f90 <__malloc_unlock>
  40596e:	3408      	adds	r4, #8
  405970:	4620      	mov	r0, r4
  405972:	b003      	add	sp, #12
  405974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405978:	2400      	movs	r4, #0
  40597a:	230c      	movs	r3, #12
  40597c:	4620      	mov	r0, r4
  40597e:	602b      	str	r3, [r5, #0]
  405980:	b003      	add	sp, #12
  405982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405986:	2040      	movs	r0, #64	; 0x40
  405988:	f44f 7300 	mov.w	r3, #512	; 0x200
  40598c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405990:	e74a      	b.n	405828 <_malloc_r+0x44>
  405992:	4423      	add	r3, r4
  405994:	68e1      	ldr	r1, [r4, #12]
  405996:	685a      	ldr	r2, [r3, #4]
  405998:	68a6      	ldr	r6, [r4, #8]
  40599a:	f042 0201 	orr.w	r2, r2, #1
  40599e:	60f1      	str	r1, [r6, #12]
  4059a0:	4628      	mov	r0, r5
  4059a2:	608e      	str	r6, [r1, #8]
  4059a4:	605a      	str	r2, [r3, #4]
  4059a6:	f000 faf3 	bl	405f90 <__malloc_unlock>
  4059aa:	3408      	adds	r4, #8
  4059ac:	4620      	mov	r0, r4
  4059ae:	b003      	add	sp, #12
  4059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059b4:	4423      	add	r3, r4
  4059b6:	4628      	mov	r0, r5
  4059b8:	685a      	ldr	r2, [r3, #4]
  4059ba:	f042 0201 	orr.w	r2, r2, #1
  4059be:	605a      	str	r2, [r3, #4]
  4059c0:	f000 fae6 	bl	405f90 <__malloc_unlock>
  4059c4:	3408      	adds	r4, #8
  4059c6:	4620      	mov	r0, r4
  4059c8:	b003      	add	sp, #12
  4059ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059ce:	68bc      	ldr	r4, [r7, #8]
  4059d0:	6863      	ldr	r3, [r4, #4]
  4059d2:	f023 0803 	bic.w	r8, r3, #3
  4059d6:	45b0      	cmp	r8, r6
  4059d8:	d304      	bcc.n	4059e4 <_malloc_r+0x200>
  4059da:	eba8 0306 	sub.w	r3, r8, r6
  4059de:	2b0f      	cmp	r3, #15
  4059e0:	f300 8085 	bgt.w	405aee <_malloc_r+0x30a>
  4059e4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405b40 <_malloc_r+0x35c>
  4059e8:	4b50      	ldr	r3, [pc, #320]	; (405b2c <_malloc_r+0x348>)
  4059ea:	f8d9 2000 	ldr.w	r2, [r9]
  4059ee:	681b      	ldr	r3, [r3, #0]
  4059f0:	3201      	adds	r2, #1
  4059f2:	4433      	add	r3, r6
  4059f4:	eb04 0a08 	add.w	sl, r4, r8
  4059f8:	f000 8155 	beq.w	405ca6 <_malloc_r+0x4c2>
  4059fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405a00:	330f      	adds	r3, #15
  405a02:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405a06:	f02b 0b0f 	bic.w	fp, fp, #15
  405a0a:	4659      	mov	r1, fp
  405a0c:	4628      	mov	r0, r5
  405a0e:	f000 fdbf 	bl	406590 <_sbrk_r>
  405a12:	1c41      	adds	r1, r0, #1
  405a14:	4602      	mov	r2, r0
  405a16:	f000 80fc 	beq.w	405c12 <_malloc_r+0x42e>
  405a1a:	4582      	cmp	sl, r0
  405a1c:	f200 80f7 	bhi.w	405c0e <_malloc_r+0x42a>
  405a20:	4b43      	ldr	r3, [pc, #268]	; (405b30 <_malloc_r+0x34c>)
  405a22:	6819      	ldr	r1, [r3, #0]
  405a24:	4459      	add	r1, fp
  405a26:	6019      	str	r1, [r3, #0]
  405a28:	f000 814d 	beq.w	405cc6 <_malloc_r+0x4e2>
  405a2c:	f8d9 0000 	ldr.w	r0, [r9]
  405a30:	3001      	adds	r0, #1
  405a32:	bf1b      	ittet	ne
  405a34:	eba2 0a0a 	subne.w	sl, r2, sl
  405a38:	4451      	addne	r1, sl
  405a3a:	f8c9 2000 	streq.w	r2, [r9]
  405a3e:	6019      	strne	r1, [r3, #0]
  405a40:	f012 0107 	ands.w	r1, r2, #7
  405a44:	f000 8115 	beq.w	405c72 <_malloc_r+0x48e>
  405a48:	f1c1 0008 	rsb	r0, r1, #8
  405a4c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405a50:	4402      	add	r2, r0
  405a52:	3108      	adds	r1, #8
  405a54:	eb02 090b 	add.w	r9, r2, fp
  405a58:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405a5c:	eba1 0909 	sub.w	r9, r1, r9
  405a60:	4649      	mov	r1, r9
  405a62:	4628      	mov	r0, r5
  405a64:	9301      	str	r3, [sp, #4]
  405a66:	9200      	str	r2, [sp, #0]
  405a68:	f000 fd92 	bl	406590 <_sbrk_r>
  405a6c:	1c43      	adds	r3, r0, #1
  405a6e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405a72:	f000 8143 	beq.w	405cfc <_malloc_r+0x518>
  405a76:	1a80      	subs	r0, r0, r2
  405a78:	4448      	add	r0, r9
  405a7a:	f040 0001 	orr.w	r0, r0, #1
  405a7e:	6819      	ldr	r1, [r3, #0]
  405a80:	60ba      	str	r2, [r7, #8]
  405a82:	4449      	add	r1, r9
  405a84:	42bc      	cmp	r4, r7
  405a86:	6050      	str	r0, [r2, #4]
  405a88:	6019      	str	r1, [r3, #0]
  405a8a:	d017      	beq.n	405abc <_malloc_r+0x2d8>
  405a8c:	f1b8 0f0f 	cmp.w	r8, #15
  405a90:	f240 80fb 	bls.w	405c8a <_malloc_r+0x4a6>
  405a94:	6860      	ldr	r0, [r4, #4]
  405a96:	f1a8 020c 	sub.w	r2, r8, #12
  405a9a:	f022 0207 	bic.w	r2, r2, #7
  405a9e:	eb04 0e02 	add.w	lr, r4, r2
  405aa2:	f000 0001 	and.w	r0, r0, #1
  405aa6:	f04f 0c05 	mov.w	ip, #5
  405aaa:	4310      	orrs	r0, r2
  405aac:	2a0f      	cmp	r2, #15
  405aae:	6060      	str	r0, [r4, #4]
  405ab0:	f8ce c004 	str.w	ip, [lr, #4]
  405ab4:	f8ce c008 	str.w	ip, [lr, #8]
  405ab8:	f200 8117 	bhi.w	405cea <_malloc_r+0x506>
  405abc:	4b1d      	ldr	r3, [pc, #116]	; (405b34 <_malloc_r+0x350>)
  405abe:	68bc      	ldr	r4, [r7, #8]
  405ac0:	681a      	ldr	r2, [r3, #0]
  405ac2:	4291      	cmp	r1, r2
  405ac4:	bf88      	it	hi
  405ac6:	6019      	strhi	r1, [r3, #0]
  405ac8:	4b1b      	ldr	r3, [pc, #108]	; (405b38 <_malloc_r+0x354>)
  405aca:	681a      	ldr	r2, [r3, #0]
  405acc:	4291      	cmp	r1, r2
  405ace:	6862      	ldr	r2, [r4, #4]
  405ad0:	bf88      	it	hi
  405ad2:	6019      	strhi	r1, [r3, #0]
  405ad4:	f022 0203 	bic.w	r2, r2, #3
  405ad8:	4296      	cmp	r6, r2
  405ada:	eba2 0306 	sub.w	r3, r2, r6
  405ade:	d801      	bhi.n	405ae4 <_malloc_r+0x300>
  405ae0:	2b0f      	cmp	r3, #15
  405ae2:	dc04      	bgt.n	405aee <_malloc_r+0x30a>
  405ae4:	4628      	mov	r0, r5
  405ae6:	f000 fa53 	bl	405f90 <__malloc_unlock>
  405aea:	2400      	movs	r4, #0
  405aec:	e740      	b.n	405970 <_malloc_r+0x18c>
  405aee:	19a2      	adds	r2, r4, r6
  405af0:	f043 0301 	orr.w	r3, r3, #1
  405af4:	f046 0601 	orr.w	r6, r6, #1
  405af8:	6066      	str	r6, [r4, #4]
  405afa:	4628      	mov	r0, r5
  405afc:	60ba      	str	r2, [r7, #8]
  405afe:	6053      	str	r3, [r2, #4]
  405b00:	f000 fa46 	bl	405f90 <__malloc_unlock>
  405b04:	3408      	adds	r4, #8
  405b06:	4620      	mov	r0, r4
  405b08:	b003      	add	sp, #12
  405b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b0e:	2b14      	cmp	r3, #20
  405b10:	d971      	bls.n	405bf6 <_malloc_r+0x412>
  405b12:	2b54      	cmp	r3, #84	; 0x54
  405b14:	f200 80a3 	bhi.w	405c5e <_malloc_r+0x47a>
  405b18:	0b33      	lsrs	r3, r6, #12
  405b1a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405b1e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405b22:	00c3      	lsls	r3, r0, #3
  405b24:	e680      	b.n	405828 <_malloc_r+0x44>
  405b26:	bf00      	nop
  405b28:	200065ec 	.word	0x200065ec
  405b2c:	20006c5c 	.word	0x20006c5c
  405b30:	20006c2c 	.word	0x20006c2c
  405b34:	20006c54 	.word	0x20006c54
  405b38:	20006c58 	.word	0x20006c58
  405b3c:	200065f4 	.word	0x200065f4
  405b40:	200069f4 	.word	0x200069f4
  405b44:	0a5a      	lsrs	r2, r3, #9
  405b46:	2a04      	cmp	r2, #4
  405b48:	d95b      	bls.n	405c02 <_malloc_r+0x41e>
  405b4a:	2a14      	cmp	r2, #20
  405b4c:	f200 80ae 	bhi.w	405cac <_malloc_r+0x4c8>
  405b50:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405b54:	00c9      	lsls	r1, r1, #3
  405b56:	325b      	adds	r2, #91	; 0x5b
  405b58:	eb07 0c01 	add.w	ip, r7, r1
  405b5c:	5879      	ldr	r1, [r7, r1]
  405b5e:	f1ac 0c08 	sub.w	ip, ip, #8
  405b62:	458c      	cmp	ip, r1
  405b64:	f000 8088 	beq.w	405c78 <_malloc_r+0x494>
  405b68:	684a      	ldr	r2, [r1, #4]
  405b6a:	f022 0203 	bic.w	r2, r2, #3
  405b6e:	4293      	cmp	r3, r2
  405b70:	d273      	bcs.n	405c5a <_malloc_r+0x476>
  405b72:	6889      	ldr	r1, [r1, #8]
  405b74:	458c      	cmp	ip, r1
  405b76:	d1f7      	bne.n	405b68 <_malloc_r+0x384>
  405b78:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405b7c:	687b      	ldr	r3, [r7, #4]
  405b7e:	60e2      	str	r2, [r4, #12]
  405b80:	f8c4 c008 	str.w	ip, [r4, #8]
  405b84:	6094      	str	r4, [r2, #8]
  405b86:	f8cc 400c 	str.w	r4, [ip, #12]
  405b8a:	e68f      	b.n	4058ac <_malloc_r+0xc8>
  405b8c:	19a1      	adds	r1, r4, r6
  405b8e:	f046 0c01 	orr.w	ip, r6, #1
  405b92:	f042 0601 	orr.w	r6, r2, #1
  405b96:	f8c4 c004 	str.w	ip, [r4, #4]
  405b9a:	4628      	mov	r0, r5
  405b9c:	6179      	str	r1, [r7, #20]
  405b9e:	6139      	str	r1, [r7, #16]
  405ba0:	f8c1 e00c 	str.w	lr, [r1, #12]
  405ba4:	f8c1 e008 	str.w	lr, [r1, #8]
  405ba8:	604e      	str	r6, [r1, #4]
  405baa:	50e2      	str	r2, [r4, r3]
  405bac:	f000 f9f0 	bl	405f90 <__malloc_unlock>
  405bb0:	3408      	adds	r4, #8
  405bb2:	e6dd      	b.n	405970 <_malloc_r+0x18c>
  405bb4:	687b      	ldr	r3, [r7, #4]
  405bb6:	e679      	b.n	4058ac <_malloc_r+0xc8>
  405bb8:	f108 0801 	add.w	r8, r8, #1
  405bbc:	f018 0f03 	tst.w	r8, #3
  405bc0:	f10c 0c08 	add.w	ip, ip, #8
  405bc4:	f47f ae85 	bne.w	4058d2 <_malloc_r+0xee>
  405bc8:	e02d      	b.n	405c26 <_malloc_r+0x442>
  405bca:	68dc      	ldr	r4, [r3, #12]
  405bcc:	42a3      	cmp	r3, r4
  405bce:	bf08      	it	eq
  405bd0:	3002      	addeq	r0, #2
  405bd2:	f43f ae3e 	beq.w	405852 <_malloc_r+0x6e>
  405bd6:	e6bb      	b.n	405950 <_malloc_r+0x16c>
  405bd8:	4419      	add	r1, r3
  405bda:	461c      	mov	r4, r3
  405bdc:	684a      	ldr	r2, [r1, #4]
  405bde:	68db      	ldr	r3, [r3, #12]
  405be0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405be4:	f042 0201 	orr.w	r2, r2, #1
  405be8:	604a      	str	r2, [r1, #4]
  405bea:	4628      	mov	r0, r5
  405bec:	60f3      	str	r3, [r6, #12]
  405bee:	609e      	str	r6, [r3, #8]
  405bf0:	f000 f9ce 	bl	405f90 <__malloc_unlock>
  405bf4:	e6bc      	b.n	405970 <_malloc_r+0x18c>
  405bf6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405bfa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405bfe:	00c3      	lsls	r3, r0, #3
  405c00:	e612      	b.n	405828 <_malloc_r+0x44>
  405c02:	099a      	lsrs	r2, r3, #6
  405c04:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405c08:	00c9      	lsls	r1, r1, #3
  405c0a:	3238      	adds	r2, #56	; 0x38
  405c0c:	e7a4      	b.n	405b58 <_malloc_r+0x374>
  405c0e:	42bc      	cmp	r4, r7
  405c10:	d054      	beq.n	405cbc <_malloc_r+0x4d8>
  405c12:	68bc      	ldr	r4, [r7, #8]
  405c14:	6862      	ldr	r2, [r4, #4]
  405c16:	f022 0203 	bic.w	r2, r2, #3
  405c1a:	e75d      	b.n	405ad8 <_malloc_r+0x2f4>
  405c1c:	f859 3908 	ldr.w	r3, [r9], #-8
  405c20:	4599      	cmp	r9, r3
  405c22:	f040 8086 	bne.w	405d32 <_malloc_r+0x54e>
  405c26:	f010 0f03 	tst.w	r0, #3
  405c2a:	f100 30ff 	add.w	r0, r0, #4294967295
  405c2e:	d1f5      	bne.n	405c1c <_malloc_r+0x438>
  405c30:	687b      	ldr	r3, [r7, #4]
  405c32:	ea23 0304 	bic.w	r3, r3, r4
  405c36:	607b      	str	r3, [r7, #4]
  405c38:	0064      	lsls	r4, r4, #1
  405c3a:	429c      	cmp	r4, r3
  405c3c:	f63f aec7 	bhi.w	4059ce <_malloc_r+0x1ea>
  405c40:	2c00      	cmp	r4, #0
  405c42:	f43f aec4 	beq.w	4059ce <_malloc_r+0x1ea>
  405c46:	421c      	tst	r4, r3
  405c48:	4640      	mov	r0, r8
  405c4a:	f47f ae3e 	bne.w	4058ca <_malloc_r+0xe6>
  405c4e:	0064      	lsls	r4, r4, #1
  405c50:	421c      	tst	r4, r3
  405c52:	f100 0004 	add.w	r0, r0, #4
  405c56:	d0fa      	beq.n	405c4e <_malloc_r+0x46a>
  405c58:	e637      	b.n	4058ca <_malloc_r+0xe6>
  405c5a:	468c      	mov	ip, r1
  405c5c:	e78c      	b.n	405b78 <_malloc_r+0x394>
  405c5e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405c62:	d815      	bhi.n	405c90 <_malloc_r+0x4ac>
  405c64:	0bf3      	lsrs	r3, r6, #15
  405c66:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405c6a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405c6e:	00c3      	lsls	r3, r0, #3
  405c70:	e5da      	b.n	405828 <_malloc_r+0x44>
  405c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405c76:	e6ed      	b.n	405a54 <_malloc_r+0x270>
  405c78:	687b      	ldr	r3, [r7, #4]
  405c7a:	1092      	asrs	r2, r2, #2
  405c7c:	2101      	movs	r1, #1
  405c7e:	fa01 f202 	lsl.w	r2, r1, r2
  405c82:	4313      	orrs	r3, r2
  405c84:	607b      	str	r3, [r7, #4]
  405c86:	4662      	mov	r2, ip
  405c88:	e779      	b.n	405b7e <_malloc_r+0x39a>
  405c8a:	2301      	movs	r3, #1
  405c8c:	6053      	str	r3, [r2, #4]
  405c8e:	e729      	b.n	405ae4 <_malloc_r+0x300>
  405c90:	f240 5254 	movw	r2, #1364	; 0x554
  405c94:	4293      	cmp	r3, r2
  405c96:	d822      	bhi.n	405cde <_malloc_r+0x4fa>
  405c98:	0cb3      	lsrs	r3, r6, #18
  405c9a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405c9e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405ca2:	00c3      	lsls	r3, r0, #3
  405ca4:	e5c0      	b.n	405828 <_malloc_r+0x44>
  405ca6:	f103 0b10 	add.w	fp, r3, #16
  405caa:	e6ae      	b.n	405a0a <_malloc_r+0x226>
  405cac:	2a54      	cmp	r2, #84	; 0x54
  405cae:	d829      	bhi.n	405d04 <_malloc_r+0x520>
  405cb0:	0b1a      	lsrs	r2, r3, #12
  405cb2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405cb6:	00c9      	lsls	r1, r1, #3
  405cb8:	326e      	adds	r2, #110	; 0x6e
  405cba:	e74d      	b.n	405b58 <_malloc_r+0x374>
  405cbc:	4b20      	ldr	r3, [pc, #128]	; (405d40 <_malloc_r+0x55c>)
  405cbe:	6819      	ldr	r1, [r3, #0]
  405cc0:	4459      	add	r1, fp
  405cc2:	6019      	str	r1, [r3, #0]
  405cc4:	e6b2      	b.n	405a2c <_malloc_r+0x248>
  405cc6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405cca:	2800      	cmp	r0, #0
  405ccc:	f47f aeae 	bne.w	405a2c <_malloc_r+0x248>
  405cd0:	eb08 030b 	add.w	r3, r8, fp
  405cd4:	68ba      	ldr	r2, [r7, #8]
  405cd6:	f043 0301 	orr.w	r3, r3, #1
  405cda:	6053      	str	r3, [r2, #4]
  405cdc:	e6ee      	b.n	405abc <_malloc_r+0x2d8>
  405cde:	207f      	movs	r0, #127	; 0x7f
  405ce0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405ce4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405ce8:	e59e      	b.n	405828 <_malloc_r+0x44>
  405cea:	f104 0108 	add.w	r1, r4, #8
  405cee:	4628      	mov	r0, r5
  405cf0:	9300      	str	r3, [sp, #0]
  405cf2:	f000 feb3 	bl	406a5c <_free_r>
  405cf6:	9b00      	ldr	r3, [sp, #0]
  405cf8:	6819      	ldr	r1, [r3, #0]
  405cfa:	e6df      	b.n	405abc <_malloc_r+0x2d8>
  405cfc:	2001      	movs	r0, #1
  405cfe:	f04f 0900 	mov.w	r9, #0
  405d02:	e6bc      	b.n	405a7e <_malloc_r+0x29a>
  405d04:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405d08:	d805      	bhi.n	405d16 <_malloc_r+0x532>
  405d0a:	0bda      	lsrs	r2, r3, #15
  405d0c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405d10:	00c9      	lsls	r1, r1, #3
  405d12:	3277      	adds	r2, #119	; 0x77
  405d14:	e720      	b.n	405b58 <_malloc_r+0x374>
  405d16:	f240 5154 	movw	r1, #1364	; 0x554
  405d1a:	428a      	cmp	r2, r1
  405d1c:	d805      	bhi.n	405d2a <_malloc_r+0x546>
  405d1e:	0c9a      	lsrs	r2, r3, #18
  405d20:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405d24:	00c9      	lsls	r1, r1, #3
  405d26:	327c      	adds	r2, #124	; 0x7c
  405d28:	e716      	b.n	405b58 <_malloc_r+0x374>
  405d2a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405d2e:	227e      	movs	r2, #126	; 0x7e
  405d30:	e712      	b.n	405b58 <_malloc_r+0x374>
  405d32:	687b      	ldr	r3, [r7, #4]
  405d34:	e780      	b.n	405c38 <_malloc_r+0x454>
  405d36:	08f0      	lsrs	r0, r6, #3
  405d38:	f106 0308 	add.w	r3, r6, #8
  405d3c:	e600      	b.n	405940 <_malloc_r+0x15c>
  405d3e:	bf00      	nop
  405d40:	20006c2c 	.word	0x20006c2c
	...

00405d50 <memchr>:
  405d50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405d54:	2a10      	cmp	r2, #16
  405d56:	db2b      	blt.n	405db0 <memchr+0x60>
  405d58:	f010 0f07 	tst.w	r0, #7
  405d5c:	d008      	beq.n	405d70 <memchr+0x20>
  405d5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405d62:	3a01      	subs	r2, #1
  405d64:	428b      	cmp	r3, r1
  405d66:	d02d      	beq.n	405dc4 <memchr+0x74>
  405d68:	f010 0f07 	tst.w	r0, #7
  405d6c:	b342      	cbz	r2, 405dc0 <memchr+0x70>
  405d6e:	d1f6      	bne.n	405d5e <memchr+0xe>
  405d70:	b4f0      	push	{r4, r5, r6, r7}
  405d72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405d76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405d7a:	f022 0407 	bic.w	r4, r2, #7
  405d7e:	f07f 0700 	mvns.w	r7, #0
  405d82:	2300      	movs	r3, #0
  405d84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405d88:	3c08      	subs	r4, #8
  405d8a:	ea85 0501 	eor.w	r5, r5, r1
  405d8e:	ea86 0601 	eor.w	r6, r6, r1
  405d92:	fa85 f547 	uadd8	r5, r5, r7
  405d96:	faa3 f587 	sel	r5, r3, r7
  405d9a:	fa86 f647 	uadd8	r6, r6, r7
  405d9e:	faa5 f687 	sel	r6, r5, r7
  405da2:	b98e      	cbnz	r6, 405dc8 <memchr+0x78>
  405da4:	d1ee      	bne.n	405d84 <memchr+0x34>
  405da6:	bcf0      	pop	{r4, r5, r6, r7}
  405da8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405dac:	f002 0207 	and.w	r2, r2, #7
  405db0:	b132      	cbz	r2, 405dc0 <memchr+0x70>
  405db2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405db6:	3a01      	subs	r2, #1
  405db8:	ea83 0301 	eor.w	r3, r3, r1
  405dbc:	b113      	cbz	r3, 405dc4 <memchr+0x74>
  405dbe:	d1f8      	bne.n	405db2 <memchr+0x62>
  405dc0:	2000      	movs	r0, #0
  405dc2:	4770      	bx	lr
  405dc4:	3801      	subs	r0, #1
  405dc6:	4770      	bx	lr
  405dc8:	2d00      	cmp	r5, #0
  405dca:	bf06      	itte	eq
  405dcc:	4635      	moveq	r5, r6
  405dce:	3803      	subeq	r0, #3
  405dd0:	3807      	subne	r0, #7
  405dd2:	f015 0f01 	tst.w	r5, #1
  405dd6:	d107      	bne.n	405de8 <memchr+0x98>
  405dd8:	3001      	adds	r0, #1
  405dda:	f415 7f80 	tst.w	r5, #256	; 0x100
  405dde:	bf02      	ittt	eq
  405de0:	3001      	addeq	r0, #1
  405de2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405de6:	3001      	addeq	r0, #1
  405de8:	bcf0      	pop	{r4, r5, r6, r7}
  405dea:	3801      	subs	r0, #1
  405dec:	4770      	bx	lr
  405dee:	bf00      	nop

00405df0 <memcmp>:
  405df0:	2a03      	cmp	r2, #3
  405df2:	b470      	push	{r4, r5, r6}
  405df4:	d922      	bls.n	405e3c <memcmp+0x4c>
  405df6:	ea40 0301 	orr.w	r3, r0, r1
  405dfa:	079b      	lsls	r3, r3, #30
  405dfc:	d011      	beq.n	405e22 <memcmp+0x32>
  405dfe:	7803      	ldrb	r3, [r0, #0]
  405e00:	780c      	ldrb	r4, [r1, #0]
  405e02:	42a3      	cmp	r3, r4
  405e04:	d11d      	bne.n	405e42 <memcmp+0x52>
  405e06:	440a      	add	r2, r1
  405e08:	3101      	adds	r1, #1
  405e0a:	e005      	b.n	405e18 <memcmp+0x28>
  405e0c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  405e10:	f811 4b01 	ldrb.w	r4, [r1], #1
  405e14:	42a3      	cmp	r3, r4
  405e16:	d114      	bne.n	405e42 <memcmp+0x52>
  405e18:	4291      	cmp	r1, r2
  405e1a:	d1f7      	bne.n	405e0c <memcmp+0x1c>
  405e1c:	2000      	movs	r0, #0
  405e1e:	bc70      	pop	{r4, r5, r6}
  405e20:	4770      	bx	lr
  405e22:	680d      	ldr	r5, [r1, #0]
  405e24:	6806      	ldr	r6, [r0, #0]
  405e26:	42ae      	cmp	r6, r5
  405e28:	460c      	mov	r4, r1
  405e2a:	4603      	mov	r3, r0
  405e2c:	f101 0104 	add.w	r1, r1, #4
  405e30:	f100 0004 	add.w	r0, r0, #4
  405e34:	d108      	bne.n	405e48 <memcmp+0x58>
  405e36:	3a04      	subs	r2, #4
  405e38:	2a03      	cmp	r2, #3
  405e3a:	d8f2      	bhi.n	405e22 <memcmp+0x32>
  405e3c:	2a00      	cmp	r2, #0
  405e3e:	d1de      	bne.n	405dfe <memcmp+0xe>
  405e40:	e7ec      	b.n	405e1c <memcmp+0x2c>
  405e42:	1b18      	subs	r0, r3, r4
  405e44:	bc70      	pop	{r4, r5, r6}
  405e46:	4770      	bx	lr
  405e48:	4621      	mov	r1, r4
  405e4a:	4618      	mov	r0, r3
  405e4c:	e7d7      	b.n	405dfe <memcmp+0xe>
  405e4e:	bf00      	nop

00405e50 <memcpy>:
  405e50:	4684      	mov	ip, r0
  405e52:	ea41 0300 	orr.w	r3, r1, r0
  405e56:	f013 0303 	ands.w	r3, r3, #3
  405e5a:	d16d      	bne.n	405f38 <memcpy+0xe8>
  405e5c:	3a40      	subs	r2, #64	; 0x40
  405e5e:	d341      	bcc.n	405ee4 <memcpy+0x94>
  405e60:	f851 3b04 	ldr.w	r3, [r1], #4
  405e64:	f840 3b04 	str.w	r3, [r0], #4
  405e68:	f851 3b04 	ldr.w	r3, [r1], #4
  405e6c:	f840 3b04 	str.w	r3, [r0], #4
  405e70:	f851 3b04 	ldr.w	r3, [r1], #4
  405e74:	f840 3b04 	str.w	r3, [r0], #4
  405e78:	f851 3b04 	ldr.w	r3, [r1], #4
  405e7c:	f840 3b04 	str.w	r3, [r0], #4
  405e80:	f851 3b04 	ldr.w	r3, [r1], #4
  405e84:	f840 3b04 	str.w	r3, [r0], #4
  405e88:	f851 3b04 	ldr.w	r3, [r1], #4
  405e8c:	f840 3b04 	str.w	r3, [r0], #4
  405e90:	f851 3b04 	ldr.w	r3, [r1], #4
  405e94:	f840 3b04 	str.w	r3, [r0], #4
  405e98:	f851 3b04 	ldr.w	r3, [r1], #4
  405e9c:	f840 3b04 	str.w	r3, [r0], #4
  405ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ea4:	f840 3b04 	str.w	r3, [r0], #4
  405ea8:	f851 3b04 	ldr.w	r3, [r1], #4
  405eac:	f840 3b04 	str.w	r3, [r0], #4
  405eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405eb4:	f840 3b04 	str.w	r3, [r0], #4
  405eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ebc:	f840 3b04 	str.w	r3, [r0], #4
  405ec0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ec4:	f840 3b04 	str.w	r3, [r0], #4
  405ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ecc:	f840 3b04 	str.w	r3, [r0], #4
  405ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ed4:	f840 3b04 	str.w	r3, [r0], #4
  405ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  405edc:	f840 3b04 	str.w	r3, [r0], #4
  405ee0:	3a40      	subs	r2, #64	; 0x40
  405ee2:	d2bd      	bcs.n	405e60 <memcpy+0x10>
  405ee4:	3230      	adds	r2, #48	; 0x30
  405ee6:	d311      	bcc.n	405f0c <memcpy+0xbc>
  405ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  405eec:	f840 3b04 	str.w	r3, [r0], #4
  405ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ef4:	f840 3b04 	str.w	r3, [r0], #4
  405ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  405efc:	f840 3b04 	str.w	r3, [r0], #4
  405f00:	f851 3b04 	ldr.w	r3, [r1], #4
  405f04:	f840 3b04 	str.w	r3, [r0], #4
  405f08:	3a10      	subs	r2, #16
  405f0a:	d2ed      	bcs.n	405ee8 <memcpy+0x98>
  405f0c:	320c      	adds	r2, #12
  405f0e:	d305      	bcc.n	405f1c <memcpy+0xcc>
  405f10:	f851 3b04 	ldr.w	r3, [r1], #4
  405f14:	f840 3b04 	str.w	r3, [r0], #4
  405f18:	3a04      	subs	r2, #4
  405f1a:	d2f9      	bcs.n	405f10 <memcpy+0xc0>
  405f1c:	3204      	adds	r2, #4
  405f1e:	d008      	beq.n	405f32 <memcpy+0xe2>
  405f20:	07d2      	lsls	r2, r2, #31
  405f22:	bf1c      	itt	ne
  405f24:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405f28:	f800 3b01 	strbne.w	r3, [r0], #1
  405f2c:	d301      	bcc.n	405f32 <memcpy+0xe2>
  405f2e:	880b      	ldrh	r3, [r1, #0]
  405f30:	8003      	strh	r3, [r0, #0]
  405f32:	4660      	mov	r0, ip
  405f34:	4770      	bx	lr
  405f36:	bf00      	nop
  405f38:	2a08      	cmp	r2, #8
  405f3a:	d313      	bcc.n	405f64 <memcpy+0x114>
  405f3c:	078b      	lsls	r3, r1, #30
  405f3e:	d08d      	beq.n	405e5c <memcpy+0xc>
  405f40:	f010 0303 	ands.w	r3, r0, #3
  405f44:	d08a      	beq.n	405e5c <memcpy+0xc>
  405f46:	f1c3 0304 	rsb	r3, r3, #4
  405f4a:	1ad2      	subs	r2, r2, r3
  405f4c:	07db      	lsls	r3, r3, #31
  405f4e:	bf1c      	itt	ne
  405f50:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405f54:	f800 3b01 	strbne.w	r3, [r0], #1
  405f58:	d380      	bcc.n	405e5c <memcpy+0xc>
  405f5a:	f831 3b02 	ldrh.w	r3, [r1], #2
  405f5e:	f820 3b02 	strh.w	r3, [r0], #2
  405f62:	e77b      	b.n	405e5c <memcpy+0xc>
  405f64:	3a04      	subs	r2, #4
  405f66:	d3d9      	bcc.n	405f1c <memcpy+0xcc>
  405f68:	3a01      	subs	r2, #1
  405f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
  405f6e:	f800 3b01 	strb.w	r3, [r0], #1
  405f72:	d2f9      	bcs.n	405f68 <memcpy+0x118>
  405f74:	780b      	ldrb	r3, [r1, #0]
  405f76:	7003      	strb	r3, [r0, #0]
  405f78:	784b      	ldrb	r3, [r1, #1]
  405f7a:	7043      	strb	r3, [r0, #1]
  405f7c:	788b      	ldrb	r3, [r1, #2]
  405f7e:	7083      	strb	r3, [r0, #2]
  405f80:	4660      	mov	r0, ip
  405f82:	4770      	bx	lr

00405f84 <__malloc_lock>:
  405f84:	4801      	ldr	r0, [pc, #4]	; (405f8c <__malloc_lock+0x8>)
  405f86:	f7ff bc29 	b.w	4057dc <__retarget_lock_acquire_recursive>
  405f8a:	bf00      	nop
  405f8c:	20007100 	.word	0x20007100

00405f90 <__malloc_unlock>:
  405f90:	4801      	ldr	r0, [pc, #4]	; (405f98 <__malloc_unlock+0x8>)
  405f92:	f7ff bc25 	b.w	4057e0 <__retarget_lock_release_recursive>
  405f96:	bf00      	nop
  405f98:	20007100 	.word	0x20007100

00405f9c <_Balloc>:
  405f9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405f9e:	b570      	push	{r4, r5, r6, lr}
  405fa0:	4605      	mov	r5, r0
  405fa2:	460c      	mov	r4, r1
  405fa4:	b14b      	cbz	r3, 405fba <_Balloc+0x1e>
  405fa6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  405faa:	b180      	cbz	r0, 405fce <_Balloc+0x32>
  405fac:	6802      	ldr	r2, [r0, #0]
  405fae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405fb2:	2300      	movs	r3, #0
  405fb4:	6103      	str	r3, [r0, #16]
  405fb6:	60c3      	str	r3, [r0, #12]
  405fb8:	bd70      	pop	{r4, r5, r6, pc}
  405fba:	2221      	movs	r2, #33	; 0x21
  405fbc:	2104      	movs	r1, #4
  405fbe:	f000 fccd 	bl	40695c <_calloc_r>
  405fc2:	64e8      	str	r0, [r5, #76]	; 0x4c
  405fc4:	4603      	mov	r3, r0
  405fc6:	2800      	cmp	r0, #0
  405fc8:	d1ed      	bne.n	405fa6 <_Balloc+0xa>
  405fca:	2000      	movs	r0, #0
  405fcc:	bd70      	pop	{r4, r5, r6, pc}
  405fce:	2101      	movs	r1, #1
  405fd0:	fa01 f604 	lsl.w	r6, r1, r4
  405fd4:	1d72      	adds	r2, r6, #5
  405fd6:	4628      	mov	r0, r5
  405fd8:	0092      	lsls	r2, r2, #2
  405fda:	f000 fcbf 	bl	40695c <_calloc_r>
  405fde:	2800      	cmp	r0, #0
  405fe0:	d0f3      	beq.n	405fca <_Balloc+0x2e>
  405fe2:	6044      	str	r4, [r0, #4]
  405fe4:	6086      	str	r6, [r0, #8]
  405fe6:	e7e4      	b.n	405fb2 <_Balloc+0x16>

00405fe8 <_Bfree>:
  405fe8:	b131      	cbz	r1, 405ff8 <_Bfree+0x10>
  405fea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405fec:	684a      	ldr	r2, [r1, #4]
  405fee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405ff2:	6008      	str	r0, [r1, #0]
  405ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405ff8:	4770      	bx	lr
  405ffa:	bf00      	nop

00405ffc <__multadd>:
  405ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ffe:	690c      	ldr	r4, [r1, #16]
  406000:	b083      	sub	sp, #12
  406002:	460d      	mov	r5, r1
  406004:	4606      	mov	r6, r0
  406006:	f101 0e14 	add.w	lr, r1, #20
  40600a:	2700      	movs	r7, #0
  40600c:	f8de 0000 	ldr.w	r0, [lr]
  406010:	b281      	uxth	r1, r0
  406012:	fb02 3301 	mla	r3, r2, r1, r3
  406016:	0c01      	lsrs	r1, r0, #16
  406018:	0c18      	lsrs	r0, r3, #16
  40601a:	fb02 0101 	mla	r1, r2, r1, r0
  40601e:	b29b      	uxth	r3, r3
  406020:	3701      	adds	r7, #1
  406022:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406026:	42bc      	cmp	r4, r7
  406028:	f84e 3b04 	str.w	r3, [lr], #4
  40602c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406030:	dcec      	bgt.n	40600c <__multadd+0x10>
  406032:	b13b      	cbz	r3, 406044 <__multadd+0x48>
  406034:	68aa      	ldr	r2, [r5, #8]
  406036:	4294      	cmp	r4, r2
  406038:	da07      	bge.n	40604a <__multadd+0x4e>
  40603a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40603e:	3401      	adds	r4, #1
  406040:	6153      	str	r3, [r2, #20]
  406042:	612c      	str	r4, [r5, #16]
  406044:	4628      	mov	r0, r5
  406046:	b003      	add	sp, #12
  406048:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40604a:	6869      	ldr	r1, [r5, #4]
  40604c:	9301      	str	r3, [sp, #4]
  40604e:	3101      	adds	r1, #1
  406050:	4630      	mov	r0, r6
  406052:	f7ff ffa3 	bl	405f9c <_Balloc>
  406056:	692a      	ldr	r2, [r5, #16]
  406058:	3202      	adds	r2, #2
  40605a:	f105 010c 	add.w	r1, r5, #12
  40605e:	4607      	mov	r7, r0
  406060:	0092      	lsls	r2, r2, #2
  406062:	300c      	adds	r0, #12
  406064:	f7ff fef4 	bl	405e50 <memcpy>
  406068:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40606a:	6869      	ldr	r1, [r5, #4]
  40606c:	9b01      	ldr	r3, [sp, #4]
  40606e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406072:	6028      	str	r0, [r5, #0]
  406074:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406078:	463d      	mov	r5, r7
  40607a:	e7de      	b.n	40603a <__multadd+0x3e>

0040607c <__hi0bits>:
  40607c:	0c02      	lsrs	r2, r0, #16
  40607e:	0412      	lsls	r2, r2, #16
  406080:	4603      	mov	r3, r0
  406082:	b9b2      	cbnz	r2, 4060b2 <__hi0bits+0x36>
  406084:	0403      	lsls	r3, r0, #16
  406086:	2010      	movs	r0, #16
  406088:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40608c:	bf04      	itt	eq
  40608e:	021b      	lsleq	r3, r3, #8
  406090:	3008      	addeq	r0, #8
  406092:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406096:	bf04      	itt	eq
  406098:	011b      	lsleq	r3, r3, #4
  40609a:	3004      	addeq	r0, #4
  40609c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4060a0:	bf04      	itt	eq
  4060a2:	009b      	lsleq	r3, r3, #2
  4060a4:	3002      	addeq	r0, #2
  4060a6:	2b00      	cmp	r3, #0
  4060a8:	db02      	blt.n	4060b0 <__hi0bits+0x34>
  4060aa:	005b      	lsls	r3, r3, #1
  4060ac:	d403      	bmi.n	4060b6 <__hi0bits+0x3a>
  4060ae:	2020      	movs	r0, #32
  4060b0:	4770      	bx	lr
  4060b2:	2000      	movs	r0, #0
  4060b4:	e7e8      	b.n	406088 <__hi0bits+0xc>
  4060b6:	3001      	adds	r0, #1
  4060b8:	4770      	bx	lr
  4060ba:	bf00      	nop

004060bc <__lo0bits>:
  4060bc:	6803      	ldr	r3, [r0, #0]
  4060be:	f013 0207 	ands.w	r2, r3, #7
  4060c2:	4601      	mov	r1, r0
  4060c4:	d007      	beq.n	4060d6 <__lo0bits+0x1a>
  4060c6:	07da      	lsls	r2, r3, #31
  4060c8:	d421      	bmi.n	40610e <__lo0bits+0x52>
  4060ca:	0798      	lsls	r0, r3, #30
  4060cc:	d421      	bmi.n	406112 <__lo0bits+0x56>
  4060ce:	089b      	lsrs	r3, r3, #2
  4060d0:	600b      	str	r3, [r1, #0]
  4060d2:	2002      	movs	r0, #2
  4060d4:	4770      	bx	lr
  4060d6:	b298      	uxth	r0, r3
  4060d8:	b198      	cbz	r0, 406102 <__lo0bits+0x46>
  4060da:	4610      	mov	r0, r2
  4060dc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4060e0:	bf04      	itt	eq
  4060e2:	0a1b      	lsreq	r3, r3, #8
  4060e4:	3008      	addeq	r0, #8
  4060e6:	071a      	lsls	r2, r3, #28
  4060e8:	bf04      	itt	eq
  4060ea:	091b      	lsreq	r3, r3, #4
  4060ec:	3004      	addeq	r0, #4
  4060ee:	079a      	lsls	r2, r3, #30
  4060f0:	bf04      	itt	eq
  4060f2:	089b      	lsreq	r3, r3, #2
  4060f4:	3002      	addeq	r0, #2
  4060f6:	07da      	lsls	r2, r3, #31
  4060f8:	d407      	bmi.n	40610a <__lo0bits+0x4e>
  4060fa:	085b      	lsrs	r3, r3, #1
  4060fc:	d104      	bne.n	406108 <__lo0bits+0x4c>
  4060fe:	2020      	movs	r0, #32
  406100:	4770      	bx	lr
  406102:	0c1b      	lsrs	r3, r3, #16
  406104:	2010      	movs	r0, #16
  406106:	e7e9      	b.n	4060dc <__lo0bits+0x20>
  406108:	3001      	adds	r0, #1
  40610a:	600b      	str	r3, [r1, #0]
  40610c:	4770      	bx	lr
  40610e:	2000      	movs	r0, #0
  406110:	4770      	bx	lr
  406112:	085b      	lsrs	r3, r3, #1
  406114:	600b      	str	r3, [r1, #0]
  406116:	2001      	movs	r0, #1
  406118:	4770      	bx	lr
  40611a:	bf00      	nop

0040611c <__i2b>:
  40611c:	b510      	push	{r4, lr}
  40611e:	460c      	mov	r4, r1
  406120:	2101      	movs	r1, #1
  406122:	f7ff ff3b 	bl	405f9c <_Balloc>
  406126:	2201      	movs	r2, #1
  406128:	6144      	str	r4, [r0, #20]
  40612a:	6102      	str	r2, [r0, #16]
  40612c:	bd10      	pop	{r4, pc}
  40612e:	bf00      	nop

00406130 <__multiply>:
  406130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406134:	690c      	ldr	r4, [r1, #16]
  406136:	6915      	ldr	r5, [r2, #16]
  406138:	42ac      	cmp	r4, r5
  40613a:	b083      	sub	sp, #12
  40613c:	468b      	mov	fp, r1
  40613e:	4616      	mov	r6, r2
  406140:	da04      	bge.n	40614c <__multiply+0x1c>
  406142:	4622      	mov	r2, r4
  406144:	46b3      	mov	fp, r6
  406146:	462c      	mov	r4, r5
  406148:	460e      	mov	r6, r1
  40614a:	4615      	mov	r5, r2
  40614c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406150:	f8db 1004 	ldr.w	r1, [fp, #4]
  406154:	eb04 0805 	add.w	r8, r4, r5
  406158:	4598      	cmp	r8, r3
  40615a:	bfc8      	it	gt
  40615c:	3101      	addgt	r1, #1
  40615e:	f7ff ff1d 	bl	405f9c <_Balloc>
  406162:	f100 0914 	add.w	r9, r0, #20
  406166:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40616a:	45d1      	cmp	r9, sl
  40616c:	9000      	str	r0, [sp, #0]
  40616e:	d205      	bcs.n	40617c <__multiply+0x4c>
  406170:	464b      	mov	r3, r9
  406172:	2100      	movs	r1, #0
  406174:	f843 1b04 	str.w	r1, [r3], #4
  406178:	459a      	cmp	sl, r3
  40617a:	d8fb      	bhi.n	406174 <__multiply+0x44>
  40617c:	f106 0c14 	add.w	ip, r6, #20
  406180:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406184:	f10b 0b14 	add.w	fp, fp, #20
  406188:	459c      	cmp	ip, r3
  40618a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40618e:	d24c      	bcs.n	40622a <__multiply+0xfa>
  406190:	f8cd a004 	str.w	sl, [sp, #4]
  406194:	469a      	mov	sl, r3
  406196:	f8dc 5000 	ldr.w	r5, [ip]
  40619a:	b2af      	uxth	r7, r5
  40619c:	b1ef      	cbz	r7, 4061da <__multiply+0xaa>
  40619e:	2100      	movs	r1, #0
  4061a0:	464d      	mov	r5, r9
  4061a2:	465e      	mov	r6, fp
  4061a4:	460c      	mov	r4, r1
  4061a6:	f856 2b04 	ldr.w	r2, [r6], #4
  4061aa:	6828      	ldr	r0, [r5, #0]
  4061ac:	b293      	uxth	r3, r2
  4061ae:	b281      	uxth	r1, r0
  4061b0:	fb07 1303 	mla	r3, r7, r3, r1
  4061b4:	0c12      	lsrs	r2, r2, #16
  4061b6:	0c01      	lsrs	r1, r0, #16
  4061b8:	4423      	add	r3, r4
  4061ba:	fb07 1102 	mla	r1, r7, r2, r1
  4061be:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4061c2:	b29b      	uxth	r3, r3
  4061c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4061c8:	45b6      	cmp	lr, r6
  4061ca:	f845 3b04 	str.w	r3, [r5], #4
  4061ce:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4061d2:	d8e8      	bhi.n	4061a6 <__multiply+0x76>
  4061d4:	602c      	str	r4, [r5, #0]
  4061d6:	f8dc 5000 	ldr.w	r5, [ip]
  4061da:	0c2d      	lsrs	r5, r5, #16
  4061dc:	d01d      	beq.n	40621a <__multiply+0xea>
  4061de:	f8d9 3000 	ldr.w	r3, [r9]
  4061e2:	4648      	mov	r0, r9
  4061e4:	461c      	mov	r4, r3
  4061e6:	4659      	mov	r1, fp
  4061e8:	2200      	movs	r2, #0
  4061ea:	880e      	ldrh	r6, [r1, #0]
  4061ec:	0c24      	lsrs	r4, r4, #16
  4061ee:	fb05 4406 	mla	r4, r5, r6, r4
  4061f2:	4422      	add	r2, r4
  4061f4:	b29b      	uxth	r3, r3
  4061f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4061fa:	f840 3b04 	str.w	r3, [r0], #4
  4061fe:	f851 3b04 	ldr.w	r3, [r1], #4
  406202:	6804      	ldr	r4, [r0, #0]
  406204:	0c1b      	lsrs	r3, r3, #16
  406206:	b2a6      	uxth	r6, r4
  406208:	fb05 6303 	mla	r3, r5, r3, r6
  40620c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406210:	458e      	cmp	lr, r1
  406212:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406216:	d8e8      	bhi.n	4061ea <__multiply+0xba>
  406218:	6003      	str	r3, [r0, #0]
  40621a:	f10c 0c04 	add.w	ip, ip, #4
  40621e:	45e2      	cmp	sl, ip
  406220:	f109 0904 	add.w	r9, r9, #4
  406224:	d8b7      	bhi.n	406196 <__multiply+0x66>
  406226:	f8dd a004 	ldr.w	sl, [sp, #4]
  40622a:	f1b8 0f00 	cmp.w	r8, #0
  40622e:	dd0b      	ble.n	406248 <__multiply+0x118>
  406230:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406234:	f1aa 0a04 	sub.w	sl, sl, #4
  406238:	b11b      	cbz	r3, 406242 <__multiply+0x112>
  40623a:	e005      	b.n	406248 <__multiply+0x118>
  40623c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406240:	b913      	cbnz	r3, 406248 <__multiply+0x118>
  406242:	f1b8 0801 	subs.w	r8, r8, #1
  406246:	d1f9      	bne.n	40623c <__multiply+0x10c>
  406248:	9800      	ldr	r0, [sp, #0]
  40624a:	f8c0 8010 	str.w	r8, [r0, #16]
  40624e:	b003      	add	sp, #12
  406250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406254 <__pow5mult>:
  406254:	f012 0303 	ands.w	r3, r2, #3
  406258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40625c:	4614      	mov	r4, r2
  40625e:	4607      	mov	r7, r0
  406260:	d12e      	bne.n	4062c0 <__pow5mult+0x6c>
  406262:	460d      	mov	r5, r1
  406264:	10a4      	asrs	r4, r4, #2
  406266:	d01c      	beq.n	4062a2 <__pow5mult+0x4e>
  406268:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40626a:	b396      	cbz	r6, 4062d2 <__pow5mult+0x7e>
  40626c:	07e3      	lsls	r3, r4, #31
  40626e:	f04f 0800 	mov.w	r8, #0
  406272:	d406      	bmi.n	406282 <__pow5mult+0x2e>
  406274:	1064      	asrs	r4, r4, #1
  406276:	d014      	beq.n	4062a2 <__pow5mult+0x4e>
  406278:	6830      	ldr	r0, [r6, #0]
  40627a:	b1a8      	cbz	r0, 4062a8 <__pow5mult+0x54>
  40627c:	4606      	mov	r6, r0
  40627e:	07e3      	lsls	r3, r4, #31
  406280:	d5f8      	bpl.n	406274 <__pow5mult+0x20>
  406282:	4632      	mov	r2, r6
  406284:	4629      	mov	r1, r5
  406286:	4638      	mov	r0, r7
  406288:	f7ff ff52 	bl	406130 <__multiply>
  40628c:	b1b5      	cbz	r5, 4062bc <__pow5mult+0x68>
  40628e:	686a      	ldr	r2, [r5, #4]
  406290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406292:	1064      	asrs	r4, r4, #1
  406294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406298:	6029      	str	r1, [r5, #0]
  40629a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40629e:	4605      	mov	r5, r0
  4062a0:	d1ea      	bne.n	406278 <__pow5mult+0x24>
  4062a2:	4628      	mov	r0, r5
  4062a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4062a8:	4632      	mov	r2, r6
  4062aa:	4631      	mov	r1, r6
  4062ac:	4638      	mov	r0, r7
  4062ae:	f7ff ff3f 	bl	406130 <__multiply>
  4062b2:	6030      	str	r0, [r6, #0]
  4062b4:	f8c0 8000 	str.w	r8, [r0]
  4062b8:	4606      	mov	r6, r0
  4062ba:	e7e0      	b.n	40627e <__pow5mult+0x2a>
  4062bc:	4605      	mov	r5, r0
  4062be:	e7d9      	b.n	406274 <__pow5mult+0x20>
  4062c0:	1e5a      	subs	r2, r3, #1
  4062c2:	4d0b      	ldr	r5, [pc, #44]	; (4062f0 <__pow5mult+0x9c>)
  4062c4:	2300      	movs	r3, #0
  4062c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4062ca:	f7ff fe97 	bl	405ffc <__multadd>
  4062ce:	4605      	mov	r5, r0
  4062d0:	e7c8      	b.n	406264 <__pow5mult+0x10>
  4062d2:	2101      	movs	r1, #1
  4062d4:	4638      	mov	r0, r7
  4062d6:	f7ff fe61 	bl	405f9c <_Balloc>
  4062da:	f240 2171 	movw	r1, #625	; 0x271
  4062de:	2201      	movs	r2, #1
  4062e0:	2300      	movs	r3, #0
  4062e2:	6141      	str	r1, [r0, #20]
  4062e4:	6102      	str	r2, [r0, #16]
  4062e6:	4606      	mov	r6, r0
  4062e8:	64b8      	str	r0, [r7, #72]	; 0x48
  4062ea:	6003      	str	r3, [r0, #0]
  4062ec:	e7be      	b.n	40626c <__pow5mult+0x18>
  4062ee:	bf00      	nop
  4062f0:	00407cd0 	.word	0x00407cd0

004062f4 <__lshift>:
  4062f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4062f8:	4691      	mov	r9, r2
  4062fa:	690a      	ldr	r2, [r1, #16]
  4062fc:	688b      	ldr	r3, [r1, #8]
  4062fe:	ea4f 1469 	mov.w	r4, r9, asr #5
  406302:	eb04 0802 	add.w	r8, r4, r2
  406306:	f108 0501 	add.w	r5, r8, #1
  40630a:	429d      	cmp	r5, r3
  40630c:	460e      	mov	r6, r1
  40630e:	4607      	mov	r7, r0
  406310:	6849      	ldr	r1, [r1, #4]
  406312:	dd04      	ble.n	40631e <__lshift+0x2a>
  406314:	005b      	lsls	r3, r3, #1
  406316:	429d      	cmp	r5, r3
  406318:	f101 0101 	add.w	r1, r1, #1
  40631c:	dcfa      	bgt.n	406314 <__lshift+0x20>
  40631e:	4638      	mov	r0, r7
  406320:	f7ff fe3c 	bl	405f9c <_Balloc>
  406324:	2c00      	cmp	r4, #0
  406326:	f100 0314 	add.w	r3, r0, #20
  40632a:	dd06      	ble.n	40633a <__lshift+0x46>
  40632c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406330:	2100      	movs	r1, #0
  406332:	f843 1b04 	str.w	r1, [r3], #4
  406336:	429a      	cmp	r2, r3
  406338:	d1fb      	bne.n	406332 <__lshift+0x3e>
  40633a:	6934      	ldr	r4, [r6, #16]
  40633c:	f106 0114 	add.w	r1, r6, #20
  406340:	f019 091f 	ands.w	r9, r9, #31
  406344:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406348:	d01d      	beq.n	406386 <__lshift+0x92>
  40634a:	f1c9 0c20 	rsb	ip, r9, #32
  40634e:	2200      	movs	r2, #0
  406350:	680c      	ldr	r4, [r1, #0]
  406352:	fa04 f409 	lsl.w	r4, r4, r9
  406356:	4314      	orrs	r4, r2
  406358:	f843 4b04 	str.w	r4, [r3], #4
  40635c:	f851 2b04 	ldr.w	r2, [r1], #4
  406360:	458e      	cmp	lr, r1
  406362:	fa22 f20c 	lsr.w	r2, r2, ip
  406366:	d8f3      	bhi.n	406350 <__lshift+0x5c>
  406368:	601a      	str	r2, [r3, #0]
  40636a:	b10a      	cbz	r2, 406370 <__lshift+0x7c>
  40636c:	f108 0502 	add.w	r5, r8, #2
  406370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406372:	6872      	ldr	r2, [r6, #4]
  406374:	3d01      	subs	r5, #1
  406376:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40637a:	6105      	str	r5, [r0, #16]
  40637c:	6031      	str	r1, [r6, #0]
  40637e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406386:	3b04      	subs	r3, #4
  406388:	f851 2b04 	ldr.w	r2, [r1], #4
  40638c:	f843 2f04 	str.w	r2, [r3, #4]!
  406390:	458e      	cmp	lr, r1
  406392:	d8f9      	bhi.n	406388 <__lshift+0x94>
  406394:	e7ec      	b.n	406370 <__lshift+0x7c>
  406396:	bf00      	nop

00406398 <__mcmp>:
  406398:	b430      	push	{r4, r5}
  40639a:	690b      	ldr	r3, [r1, #16]
  40639c:	4605      	mov	r5, r0
  40639e:	6900      	ldr	r0, [r0, #16]
  4063a0:	1ac0      	subs	r0, r0, r3
  4063a2:	d10f      	bne.n	4063c4 <__mcmp+0x2c>
  4063a4:	009b      	lsls	r3, r3, #2
  4063a6:	3514      	adds	r5, #20
  4063a8:	3114      	adds	r1, #20
  4063aa:	4419      	add	r1, r3
  4063ac:	442b      	add	r3, r5
  4063ae:	e001      	b.n	4063b4 <__mcmp+0x1c>
  4063b0:	429d      	cmp	r5, r3
  4063b2:	d207      	bcs.n	4063c4 <__mcmp+0x2c>
  4063b4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4063b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4063bc:	4294      	cmp	r4, r2
  4063be:	d0f7      	beq.n	4063b0 <__mcmp+0x18>
  4063c0:	d302      	bcc.n	4063c8 <__mcmp+0x30>
  4063c2:	2001      	movs	r0, #1
  4063c4:	bc30      	pop	{r4, r5}
  4063c6:	4770      	bx	lr
  4063c8:	f04f 30ff 	mov.w	r0, #4294967295
  4063cc:	e7fa      	b.n	4063c4 <__mcmp+0x2c>
  4063ce:	bf00      	nop

004063d0 <__mdiff>:
  4063d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4063d4:	690f      	ldr	r7, [r1, #16]
  4063d6:	460e      	mov	r6, r1
  4063d8:	6911      	ldr	r1, [r2, #16]
  4063da:	1a7f      	subs	r7, r7, r1
  4063dc:	2f00      	cmp	r7, #0
  4063de:	4690      	mov	r8, r2
  4063e0:	d117      	bne.n	406412 <__mdiff+0x42>
  4063e2:	0089      	lsls	r1, r1, #2
  4063e4:	f106 0514 	add.w	r5, r6, #20
  4063e8:	f102 0e14 	add.w	lr, r2, #20
  4063ec:	186b      	adds	r3, r5, r1
  4063ee:	4471      	add	r1, lr
  4063f0:	e001      	b.n	4063f6 <__mdiff+0x26>
  4063f2:	429d      	cmp	r5, r3
  4063f4:	d25c      	bcs.n	4064b0 <__mdiff+0xe0>
  4063f6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4063fa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4063fe:	42a2      	cmp	r2, r4
  406400:	d0f7      	beq.n	4063f2 <__mdiff+0x22>
  406402:	d25e      	bcs.n	4064c2 <__mdiff+0xf2>
  406404:	4633      	mov	r3, r6
  406406:	462c      	mov	r4, r5
  406408:	4646      	mov	r6, r8
  40640a:	4675      	mov	r5, lr
  40640c:	4698      	mov	r8, r3
  40640e:	2701      	movs	r7, #1
  406410:	e005      	b.n	40641e <__mdiff+0x4e>
  406412:	db58      	blt.n	4064c6 <__mdiff+0xf6>
  406414:	f106 0514 	add.w	r5, r6, #20
  406418:	f108 0414 	add.w	r4, r8, #20
  40641c:	2700      	movs	r7, #0
  40641e:	6871      	ldr	r1, [r6, #4]
  406420:	f7ff fdbc 	bl	405f9c <_Balloc>
  406424:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406428:	6936      	ldr	r6, [r6, #16]
  40642a:	60c7      	str	r7, [r0, #12]
  40642c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406430:	46a6      	mov	lr, r4
  406432:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406436:	f100 0414 	add.w	r4, r0, #20
  40643a:	2300      	movs	r3, #0
  40643c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406440:	f855 8b04 	ldr.w	r8, [r5], #4
  406444:	b28a      	uxth	r2, r1
  406446:	fa13 f388 	uxtah	r3, r3, r8
  40644a:	0c09      	lsrs	r1, r1, #16
  40644c:	1a9a      	subs	r2, r3, r2
  40644e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406452:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406456:	b292      	uxth	r2, r2
  406458:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40645c:	45f4      	cmp	ip, lr
  40645e:	f844 2b04 	str.w	r2, [r4], #4
  406462:	ea4f 4323 	mov.w	r3, r3, asr #16
  406466:	d8e9      	bhi.n	40643c <__mdiff+0x6c>
  406468:	42af      	cmp	r7, r5
  40646a:	d917      	bls.n	40649c <__mdiff+0xcc>
  40646c:	46a4      	mov	ip, r4
  40646e:	46ae      	mov	lr, r5
  406470:	f85e 2b04 	ldr.w	r2, [lr], #4
  406474:	fa13 f382 	uxtah	r3, r3, r2
  406478:	1419      	asrs	r1, r3, #16
  40647a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40647e:	b29b      	uxth	r3, r3
  406480:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406484:	4577      	cmp	r7, lr
  406486:	f84c 2b04 	str.w	r2, [ip], #4
  40648a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40648e:	d8ef      	bhi.n	406470 <__mdiff+0xa0>
  406490:	43ed      	mvns	r5, r5
  406492:	442f      	add	r7, r5
  406494:	f027 0703 	bic.w	r7, r7, #3
  406498:	3704      	adds	r7, #4
  40649a:	443c      	add	r4, r7
  40649c:	3c04      	subs	r4, #4
  40649e:	b922      	cbnz	r2, 4064aa <__mdiff+0xda>
  4064a0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4064a4:	3e01      	subs	r6, #1
  4064a6:	2b00      	cmp	r3, #0
  4064a8:	d0fa      	beq.n	4064a0 <__mdiff+0xd0>
  4064aa:	6106      	str	r6, [r0, #16]
  4064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064b0:	2100      	movs	r1, #0
  4064b2:	f7ff fd73 	bl	405f9c <_Balloc>
  4064b6:	2201      	movs	r2, #1
  4064b8:	2300      	movs	r3, #0
  4064ba:	6102      	str	r2, [r0, #16]
  4064bc:	6143      	str	r3, [r0, #20]
  4064be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064c2:	4674      	mov	r4, lr
  4064c4:	e7ab      	b.n	40641e <__mdiff+0x4e>
  4064c6:	4633      	mov	r3, r6
  4064c8:	f106 0414 	add.w	r4, r6, #20
  4064cc:	f102 0514 	add.w	r5, r2, #20
  4064d0:	4616      	mov	r6, r2
  4064d2:	2701      	movs	r7, #1
  4064d4:	4698      	mov	r8, r3
  4064d6:	e7a2      	b.n	40641e <__mdiff+0x4e>

004064d8 <__d2b>:
  4064d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4064dc:	b082      	sub	sp, #8
  4064de:	2101      	movs	r1, #1
  4064e0:	461c      	mov	r4, r3
  4064e2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4064e6:	4615      	mov	r5, r2
  4064e8:	9e08      	ldr	r6, [sp, #32]
  4064ea:	f7ff fd57 	bl	405f9c <_Balloc>
  4064ee:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4064f2:	4680      	mov	r8, r0
  4064f4:	b10f      	cbz	r7, 4064fa <__d2b+0x22>
  4064f6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4064fa:	9401      	str	r4, [sp, #4]
  4064fc:	b31d      	cbz	r5, 406546 <__d2b+0x6e>
  4064fe:	a802      	add	r0, sp, #8
  406500:	f840 5d08 	str.w	r5, [r0, #-8]!
  406504:	f7ff fdda 	bl	4060bc <__lo0bits>
  406508:	2800      	cmp	r0, #0
  40650a:	d134      	bne.n	406576 <__d2b+0x9e>
  40650c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406510:	f8c8 2014 	str.w	r2, [r8, #20]
  406514:	2b00      	cmp	r3, #0
  406516:	bf0c      	ite	eq
  406518:	2101      	moveq	r1, #1
  40651a:	2102      	movne	r1, #2
  40651c:	f8c8 3018 	str.w	r3, [r8, #24]
  406520:	f8c8 1010 	str.w	r1, [r8, #16]
  406524:	b9df      	cbnz	r7, 40655e <__d2b+0x86>
  406526:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40652a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40652e:	6030      	str	r0, [r6, #0]
  406530:	6918      	ldr	r0, [r3, #16]
  406532:	f7ff fda3 	bl	40607c <__hi0bits>
  406536:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406538:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40653c:	6018      	str	r0, [r3, #0]
  40653e:	4640      	mov	r0, r8
  406540:	b002      	add	sp, #8
  406542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406546:	a801      	add	r0, sp, #4
  406548:	f7ff fdb8 	bl	4060bc <__lo0bits>
  40654c:	9b01      	ldr	r3, [sp, #4]
  40654e:	f8c8 3014 	str.w	r3, [r8, #20]
  406552:	2101      	movs	r1, #1
  406554:	3020      	adds	r0, #32
  406556:	f8c8 1010 	str.w	r1, [r8, #16]
  40655a:	2f00      	cmp	r7, #0
  40655c:	d0e3      	beq.n	406526 <__d2b+0x4e>
  40655e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406560:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406564:	4407      	add	r7, r0
  406566:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40656a:	6037      	str	r7, [r6, #0]
  40656c:	6018      	str	r0, [r3, #0]
  40656e:	4640      	mov	r0, r8
  406570:	b002      	add	sp, #8
  406572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406576:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40657a:	f1c0 0220 	rsb	r2, r0, #32
  40657e:	fa03 f202 	lsl.w	r2, r3, r2
  406582:	430a      	orrs	r2, r1
  406584:	40c3      	lsrs	r3, r0
  406586:	9301      	str	r3, [sp, #4]
  406588:	f8c8 2014 	str.w	r2, [r8, #20]
  40658c:	e7c2      	b.n	406514 <__d2b+0x3c>
  40658e:	bf00      	nop

00406590 <_sbrk_r>:
  406590:	b538      	push	{r3, r4, r5, lr}
  406592:	4c07      	ldr	r4, [pc, #28]	; (4065b0 <_sbrk_r+0x20>)
  406594:	2300      	movs	r3, #0
  406596:	4605      	mov	r5, r0
  406598:	4608      	mov	r0, r1
  40659a:	6023      	str	r3, [r4, #0]
  40659c:	f7fc f906 	bl	4027ac <_sbrk>
  4065a0:	1c43      	adds	r3, r0, #1
  4065a2:	d000      	beq.n	4065a6 <_sbrk_r+0x16>
  4065a4:	bd38      	pop	{r3, r4, r5, pc}
  4065a6:	6823      	ldr	r3, [r4, #0]
  4065a8:	2b00      	cmp	r3, #0
  4065aa:	d0fb      	beq.n	4065a4 <_sbrk_r+0x14>
  4065ac:	602b      	str	r3, [r5, #0]
  4065ae:	bd38      	pop	{r3, r4, r5, pc}
  4065b0:	20007114 	.word	0x20007114

004065b4 <strchr>:
  4065b4:	b2c9      	uxtb	r1, r1
  4065b6:	2900      	cmp	r1, #0
  4065b8:	d041      	beq.n	40663e <strchr+0x8a>
  4065ba:	0782      	lsls	r2, r0, #30
  4065bc:	b4f0      	push	{r4, r5, r6, r7}
  4065be:	d067      	beq.n	406690 <strchr+0xdc>
  4065c0:	7803      	ldrb	r3, [r0, #0]
  4065c2:	2b00      	cmp	r3, #0
  4065c4:	d068      	beq.n	406698 <strchr+0xe4>
  4065c6:	4299      	cmp	r1, r3
  4065c8:	d037      	beq.n	40663a <strchr+0x86>
  4065ca:	1c43      	adds	r3, r0, #1
  4065cc:	e004      	b.n	4065d8 <strchr+0x24>
  4065ce:	f813 0b01 	ldrb.w	r0, [r3], #1
  4065d2:	b390      	cbz	r0, 40663a <strchr+0x86>
  4065d4:	4281      	cmp	r1, r0
  4065d6:	d02f      	beq.n	406638 <strchr+0x84>
  4065d8:	079a      	lsls	r2, r3, #30
  4065da:	461c      	mov	r4, r3
  4065dc:	d1f7      	bne.n	4065ce <strchr+0x1a>
  4065de:	6825      	ldr	r5, [r4, #0]
  4065e0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  4065e4:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  4065e8:	ea83 0605 	eor.w	r6, r3, r5
  4065ec:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  4065f0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4065f4:	ea20 0006 	bic.w	r0, r0, r6
  4065f8:	ea22 0205 	bic.w	r2, r2, r5
  4065fc:	4302      	orrs	r2, r0
  4065fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406602:	d111      	bne.n	406628 <strchr+0x74>
  406604:	4620      	mov	r0, r4
  406606:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40660a:	ea83 0706 	eor.w	r7, r3, r6
  40660e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  406612:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  406616:	ea25 0507 	bic.w	r5, r5, r7
  40661a:	ea22 0206 	bic.w	r2, r2, r6
  40661e:	432a      	orrs	r2, r5
  406620:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406624:	d0ef      	beq.n	406606 <strchr+0x52>
  406626:	4604      	mov	r4, r0
  406628:	7820      	ldrb	r0, [r4, #0]
  40662a:	b918      	cbnz	r0, 406634 <strchr+0x80>
  40662c:	e005      	b.n	40663a <strchr+0x86>
  40662e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  406632:	b110      	cbz	r0, 40663a <strchr+0x86>
  406634:	4281      	cmp	r1, r0
  406636:	d1fa      	bne.n	40662e <strchr+0x7a>
  406638:	4620      	mov	r0, r4
  40663a:	bcf0      	pop	{r4, r5, r6, r7}
  40663c:	4770      	bx	lr
  40663e:	0783      	lsls	r3, r0, #30
  406640:	d024      	beq.n	40668c <strchr+0xd8>
  406642:	7803      	ldrb	r3, [r0, #0]
  406644:	2b00      	cmp	r3, #0
  406646:	d0f9      	beq.n	40663c <strchr+0x88>
  406648:	1c43      	adds	r3, r0, #1
  40664a:	e003      	b.n	406654 <strchr+0xa0>
  40664c:	7802      	ldrb	r2, [r0, #0]
  40664e:	3301      	adds	r3, #1
  406650:	2a00      	cmp	r2, #0
  406652:	d0f3      	beq.n	40663c <strchr+0x88>
  406654:	0799      	lsls	r1, r3, #30
  406656:	4618      	mov	r0, r3
  406658:	d1f8      	bne.n	40664c <strchr+0x98>
  40665a:	6819      	ldr	r1, [r3, #0]
  40665c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406660:	ea22 0201 	bic.w	r2, r2, r1
  406664:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406668:	d108      	bne.n	40667c <strchr+0xc8>
  40666a:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40666e:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406672:	ea22 0201 	bic.w	r2, r2, r1
  406676:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40667a:	d0f6      	beq.n	40666a <strchr+0xb6>
  40667c:	781a      	ldrb	r2, [r3, #0]
  40667e:	4618      	mov	r0, r3
  406680:	b142      	cbz	r2, 406694 <strchr+0xe0>
  406682:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406686:	2b00      	cmp	r3, #0
  406688:	d1fb      	bne.n	406682 <strchr+0xce>
  40668a:	4770      	bx	lr
  40668c:	4603      	mov	r3, r0
  40668e:	e7e4      	b.n	40665a <strchr+0xa6>
  406690:	4604      	mov	r4, r0
  406692:	e7a4      	b.n	4065de <strchr+0x2a>
  406694:	4618      	mov	r0, r3
  406696:	4770      	bx	lr
  406698:	4618      	mov	r0, r3
  40669a:	e7ce      	b.n	40663a <strchr+0x86>
	...

004066c0 <strlen>:
  4066c0:	f890 f000 	pld	[r0]
  4066c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4066c8:	f020 0107 	bic.w	r1, r0, #7
  4066cc:	f06f 0c00 	mvn.w	ip, #0
  4066d0:	f010 0407 	ands.w	r4, r0, #7
  4066d4:	f891 f020 	pld	[r1, #32]
  4066d8:	f040 8049 	bne.w	40676e <strlen+0xae>
  4066dc:	f04f 0400 	mov.w	r4, #0
  4066e0:	f06f 0007 	mvn.w	r0, #7
  4066e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4066e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4066ec:	f100 0008 	add.w	r0, r0, #8
  4066f0:	fa82 f24c 	uadd8	r2, r2, ip
  4066f4:	faa4 f28c 	sel	r2, r4, ip
  4066f8:	fa83 f34c 	uadd8	r3, r3, ip
  4066fc:	faa2 f38c 	sel	r3, r2, ip
  406700:	bb4b      	cbnz	r3, 406756 <strlen+0x96>
  406702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406706:	fa82 f24c 	uadd8	r2, r2, ip
  40670a:	f100 0008 	add.w	r0, r0, #8
  40670e:	faa4 f28c 	sel	r2, r4, ip
  406712:	fa83 f34c 	uadd8	r3, r3, ip
  406716:	faa2 f38c 	sel	r3, r2, ip
  40671a:	b9e3      	cbnz	r3, 406756 <strlen+0x96>
  40671c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406720:	fa82 f24c 	uadd8	r2, r2, ip
  406724:	f100 0008 	add.w	r0, r0, #8
  406728:	faa4 f28c 	sel	r2, r4, ip
  40672c:	fa83 f34c 	uadd8	r3, r3, ip
  406730:	faa2 f38c 	sel	r3, r2, ip
  406734:	b97b      	cbnz	r3, 406756 <strlen+0x96>
  406736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40673a:	f101 0120 	add.w	r1, r1, #32
  40673e:	fa82 f24c 	uadd8	r2, r2, ip
  406742:	f100 0008 	add.w	r0, r0, #8
  406746:	faa4 f28c 	sel	r2, r4, ip
  40674a:	fa83 f34c 	uadd8	r3, r3, ip
  40674e:	faa2 f38c 	sel	r3, r2, ip
  406752:	2b00      	cmp	r3, #0
  406754:	d0c6      	beq.n	4066e4 <strlen+0x24>
  406756:	2a00      	cmp	r2, #0
  406758:	bf04      	itt	eq
  40675a:	3004      	addeq	r0, #4
  40675c:	461a      	moveq	r2, r3
  40675e:	ba12      	rev	r2, r2
  406760:	fab2 f282 	clz	r2, r2
  406764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40676c:	4770      	bx	lr
  40676e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406772:	f004 0503 	and.w	r5, r4, #3
  406776:	f1c4 0000 	rsb	r0, r4, #0
  40677a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40677e:	f014 0f04 	tst.w	r4, #4
  406782:	f891 f040 	pld	[r1, #64]	; 0x40
  406786:	fa0c f505 	lsl.w	r5, ip, r5
  40678a:	ea62 0205 	orn	r2, r2, r5
  40678e:	bf1c      	itt	ne
  406790:	ea63 0305 	ornne	r3, r3, r5
  406794:	4662      	movne	r2, ip
  406796:	f04f 0400 	mov.w	r4, #0
  40679a:	e7a9      	b.n	4066f0 <strlen+0x30>

0040679c <__ssprint_r>:
  40679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4067a0:	6893      	ldr	r3, [r2, #8]
  4067a2:	b083      	sub	sp, #12
  4067a4:	4690      	mov	r8, r2
  4067a6:	2b00      	cmp	r3, #0
  4067a8:	d070      	beq.n	40688c <__ssprint_r+0xf0>
  4067aa:	4682      	mov	sl, r0
  4067ac:	460c      	mov	r4, r1
  4067ae:	6817      	ldr	r7, [r2, #0]
  4067b0:	688d      	ldr	r5, [r1, #8]
  4067b2:	6808      	ldr	r0, [r1, #0]
  4067b4:	e042      	b.n	40683c <__ssprint_r+0xa0>
  4067b6:	89a3      	ldrh	r3, [r4, #12]
  4067b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4067bc:	d02e      	beq.n	40681c <__ssprint_r+0x80>
  4067be:	6965      	ldr	r5, [r4, #20]
  4067c0:	6921      	ldr	r1, [r4, #16]
  4067c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4067c6:	eba0 0b01 	sub.w	fp, r0, r1
  4067ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4067ce:	f10b 0001 	add.w	r0, fp, #1
  4067d2:	106d      	asrs	r5, r5, #1
  4067d4:	4430      	add	r0, r6
  4067d6:	42a8      	cmp	r0, r5
  4067d8:	462a      	mov	r2, r5
  4067da:	bf84      	itt	hi
  4067dc:	4605      	movhi	r5, r0
  4067de:	462a      	movhi	r2, r5
  4067e0:	055b      	lsls	r3, r3, #21
  4067e2:	d538      	bpl.n	406856 <__ssprint_r+0xba>
  4067e4:	4611      	mov	r1, r2
  4067e6:	4650      	mov	r0, sl
  4067e8:	f7fe fffc 	bl	4057e4 <_malloc_r>
  4067ec:	2800      	cmp	r0, #0
  4067ee:	d03c      	beq.n	40686a <__ssprint_r+0xce>
  4067f0:	465a      	mov	r2, fp
  4067f2:	6921      	ldr	r1, [r4, #16]
  4067f4:	9001      	str	r0, [sp, #4]
  4067f6:	f7ff fb2b 	bl	405e50 <memcpy>
  4067fa:	89a2      	ldrh	r2, [r4, #12]
  4067fc:	9b01      	ldr	r3, [sp, #4]
  4067fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406806:	81a2      	strh	r2, [r4, #12]
  406808:	eba5 020b 	sub.w	r2, r5, fp
  40680c:	eb03 000b 	add.w	r0, r3, fp
  406810:	6165      	str	r5, [r4, #20]
  406812:	6123      	str	r3, [r4, #16]
  406814:	6020      	str	r0, [r4, #0]
  406816:	60a2      	str	r2, [r4, #8]
  406818:	4635      	mov	r5, r6
  40681a:	46b3      	mov	fp, r6
  40681c:	465a      	mov	r2, fp
  40681e:	4649      	mov	r1, r9
  406820:	f000 fa18 	bl	406c54 <memmove>
  406824:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406828:	68a2      	ldr	r2, [r4, #8]
  40682a:	6820      	ldr	r0, [r4, #0]
  40682c:	1b55      	subs	r5, r2, r5
  40682e:	4458      	add	r0, fp
  406830:	1b9e      	subs	r6, r3, r6
  406832:	60a5      	str	r5, [r4, #8]
  406834:	6020      	str	r0, [r4, #0]
  406836:	f8c8 6008 	str.w	r6, [r8, #8]
  40683a:	b33e      	cbz	r6, 40688c <__ssprint_r+0xf0>
  40683c:	687e      	ldr	r6, [r7, #4]
  40683e:	463b      	mov	r3, r7
  406840:	3708      	adds	r7, #8
  406842:	2e00      	cmp	r6, #0
  406844:	d0fa      	beq.n	40683c <__ssprint_r+0xa0>
  406846:	42ae      	cmp	r6, r5
  406848:	f8d3 9000 	ldr.w	r9, [r3]
  40684c:	46ab      	mov	fp, r5
  40684e:	d2b2      	bcs.n	4067b6 <__ssprint_r+0x1a>
  406850:	4635      	mov	r5, r6
  406852:	46b3      	mov	fp, r6
  406854:	e7e2      	b.n	40681c <__ssprint_r+0x80>
  406856:	4650      	mov	r0, sl
  406858:	f000 fa60 	bl	406d1c <_realloc_r>
  40685c:	4603      	mov	r3, r0
  40685e:	2800      	cmp	r0, #0
  406860:	d1d2      	bne.n	406808 <__ssprint_r+0x6c>
  406862:	6921      	ldr	r1, [r4, #16]
  406864:	4650      	mov	r0, sl
  406866:	f000 f8f9 	bl	406a5c <_free_r>
  40686a:	230c      	movs	r3, #12
  40686c:	f8ca 3000 	str.w	r3, [sl]
  406870:	89a3      	ldrh	r3, [r4, #12]
  406872:	2200      	movs	r2, #0
  406874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406878:	f04f 30ff 	mov.w	r0, #4294967295
  40687c:	81a3      	strh	r3, [r4, #12]
  40687e:	f8c8 2008 	str.w	r2, [r8, #8]
  406882:	f8c8 2004 	str.w	r2, [r8, #4]
  406886:	b003      	add	sp, #12
  406888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40688c:	2000      	movs	r0, #0
  40688e:	f8c8 0004 	str.w	r0, [r8, #4]
  406892:	b003      	add	sp, #12
  406894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406898 <__register_exitproc>:
  406898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40689c:	4d2c      	ldr	r5, [pc, #176]	; (406950 <__register_exitproc+0xb8>)
  40689e:	4606      	mov	r6, r0
  4068a0:	6828      	ldr	r0, [r5, #0]
  4068a2:	4698      	mov	r8, r3
  4068a4:	460f      	mov	r7, r1
  4068a6:	4691      	mov	r9, r2
  4068a8:	f7fe ff98 	bl	4057dc <__retarget_lock_acquire_recursive>
  4068ac:	4b29      	ldr	r3, [pc, #164]	; (406954 <__register_exitproc+0xbc>)
  4068ae:	681c      	ldr	r4, [r3, #0]
  4068b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4068b4:	2b00      	cmp	r3, #0
  4068b6:	d03e      	beq.n	406936 <__register_exitproc+0x9e>
  4068b8:	685a      	ldr	r2, [r3, #4]
  4068ba:	2a1f      	cmp	r2, #31
  4068bc:	dc1c      	bgt.n	4068f8 <__register_exitproc+0x60>
  4068be:	f102 0e01 	add.w	lr, r2, #1
  4068c2:	b176      	cbz	r6, 4068e2 <__register_exitproc+0x4a>
  4068c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4068c8:	2401      	movs	r4, #1
  4068ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4068ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4068d2:	4094      	lsls	r4, r2
  4068d4:	4320      	orrs	r0, r4
  4068d6:	2e02      	cmp	r6, #2
  4068d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4068dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4068e0:	d023      	beq.n	40692a <__register_exitproc+0x92>
  4068e2:	3202      	adds	r2, #2
  4068e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4068e8:	6828      	ldr	r0, [r5, #0]
  4068ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4068ee:	f7fe ff77 	bl	4057e0 <__retarget_lock_release_recursive>
  4068f2:	2000      	movs	r0, #0
  4068f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4068f8:	4b17      	ldr	r3, [pc, #92]	; (406958 <__register_exitproc+0xc0>)
  4068fa:	b30b      	cbz	r3, 406940 <__register_exitproc+0xa8>
  4068fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406900:	f3af 8000 	nop.w
  406904:	4603      	mov	r3, r0
  406906:	b1d8      	cbz	r0, 406940 <__register_exitproc+0xa8>
  406908:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40690c:	6002      	str	r2, [r0, #0]
  40690e:	2100      	movs	r1, #0
  406910:	6041      	str	r1, [r0, #4]
  406912:	460a      	mov	r2, r1
  406914:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406918:	f04f 0e01 	mov.w	lr, #1
  40691c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406920:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406924:	2e00      	cmp	r6, #0
  406926:	d0dc      	beq.n	4068e2 <__register_exitproc+0x4a>
  406928:	e7cc      	b.n	4068c4 <__register_exitproc+0x2c>
  40692a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40692e:	430c      	orrs	r4, r1
  406930:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406934:	e7d5      	b.n	4068e2 <__register_exitproc+0x4a>
  406936:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40693a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40693e:	e7bb      	b.n	4068b8 <__register_exitproc+0x20>
  406940:	6828      	ldr	r0, [r5, #0]
  406942:	f7fe ff4d 	bl	4057e0 <__retarget_lock_release_recursive>
  406946:	f04f 30ff 	mov.w	r0, #4294967295
  40694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40694e:	bf00      	nop
  406950:	200065e8 	.word	0x200065e8
  406954:	00407b68 	.word	0x00407b68
  406958:	00000000 	.word	0x00000000

0040695c <_calloc_r>:
  40695c:	b510      	push	{r4, lr}
  40695e:	fb02 f101 	mul.w	r1, r2, r1
  406962:	f7fe ff3f 	bl	4057e4 <_malloc_r>
  406966:	4604      	mov	r4, r0
  406968:	b1d8      	cbz	r0, 4069a2 <_calloc_r+0x46>
  40696a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40696e:	f022 0203 	bic.w	r2, r2, #3
  406972:	3a04      	subs	r2, #4
  406974:	2a24      	cmp	r2, #36	; 0x24
  406976:	d818      	bhi.n	4069aa <_calloc_r+0x4e>
  406978:	2a13      	cmp	r2, #19
  40697a:	d914      	bls.n	4069a6 <_calloc_r+0x4a>
  40697c:	2300      	movs	r3, #0
  40697e:	2a1b      	cmp	r2, #27
  406980:	6003      	str	r3, [r0, #0]
  406982:	6043      	str	r3, [r0, #4]
  406984:	d916      	bls.n	4069b4 <_calloc_r+0x58>
  406986:	2a24      	cmp	r2, #36	; 0x24
  406988:	6083      	str	r3, [r0, #8]
  40698a:	60c3      	str	r3, [r0, #12]
  40698c:	bf11      	iteee	ne
  40698e:	f100 0210 	addne.w	r2, r0, #16
  406992:	6103      	streq	r3, [r0, #16]
  406994:	6143      	streq	r3, [r0, #20]
  406996:	f100 0218 	addeq.w	r2, r0, #24
  40699a:	2300      	movs	r3, #0
  40699c:	6013      	str	r3, [r2, #0]
  40699e:	6053      	str	r3, [r2, #4]
  4069a0:	6093      	str	r3, [r2, #8]
  4069a2:	4620      	mov	r0, r4
  4069a4:	bd10      	pop	{r4, pc}
  4069a6:	4602      	mov	r2, r0
  4069a8:	e7f7      	b.n	40699a <_calloc_r+0x3e>
  4069aa:	2100      	movs	r1, #0
  4069ac:	f7fc f9ba 	bl	402d24 <memset>
  4069b0:	4620      	mov	r0, r4
  4069b2:	bd10      	pop	{r4, pc}
  4069b4:	f100 0208 	add.w	r2, r0, #8
  4069b8:	e7ef      	b.n	40699a <_calloc_r+0x3e>
  4069ba:	bf00      	nop

004069bc <_malloc_trim_r>:
  4069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4069be:	4f24      	ldr	r7, [pc, #144]	; (406a50 <_malloc_trim_r+0x94>)
  4069c0:	460c      	mov	r4, r1
  4069c2:	4606      	mov	r6, r0
  4069c4:	f7ff fade 	bl	405f84 <__malloc_lock>
  4069c8:	68bb      	ldr	r3, [r7, #8]
  4069ca:	685d      	ldr	r5, [r3, #4]
  4069cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4069d0:	310f      	adds	r1, #15
  4069d2:	f025 0503 	bic.w	r5, r5, #3
  4069d6:	4429      	add	r1, r5
  4069d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4069dc:	f021 010f 	bic.w	r1, r1, #15
  4069e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4069e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4069e8:	db07      	blt.n	4069fa <_malloc_trim_r+0x3e>
  4069ea:	2100      	movs	r1, #0
  4069ec:	4630      	mov	r0, r6
  4069ee:	f7ff fdcf 	bl	406590 <_sbrk_r>
  4069f2:	68bb      	ldr	r3, [r7, #8]
  4069f4:	442b      	add	r3, r5
  4069f6:	4298      	cmp	r0, r3
  4069f8:	d004      	beq.n	406a04 <_malloc_trim_r+0x48>
  4069fa:	4630      	mov	r0, r6
  4069fc:	f7ff fac8 	bl	405f90 <__malloc_unlock>
  406a00:	2000      	movs	r0, #0
  406a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a04:	4261      	negs	r1, r4
  406a06:	4630      	mov	r0, r6
  406a08:	f7ff fdc2 	bl	406590 <_sbrk_r>
  406a0c:	3001      	adds	r0, #1
  406a0e:	d00d      	beq.n	406a2c <_malloc_trim_r+0x70>
  406a10:	4b10      	ldr	r3, [pc, #64]	; (406a54 <_malloc_trim_r+0x98>)
  406a12:	68ba      	ldr	r2, [r7, #8]
  406a14:	6819      	ldr	r1, [r3, #0]
  406a16:	1b2d      	subs	r5, r5, r4
  406a18:	f045 0501 	orr.w	r5, r5, #1
  406a1c:	4630      	mov	r0, r6
  406a1e:	1b09      	subs	r1, r1, r4
  406a20:	6055      	str	r5, [r2, #4]
  406a22:	6019      	str	r1, [r3, #0]
  406a24:	f7ff fab4 	bl	405f90 <__malloc_unlock>
  406a28:	2001      	movs	r0, #1
  406a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a2c:	2100      	movs	r1, #0
  406a2e:	4630      	mov	r0, r6
  406a30:	f7ff fdae 	bl	406590 <_sbrk_r>
  406a34:	68ba      	ldr	r2, [r7, #8]
  406a36:	1a83      	subs	r3, r0, r2
  406a38:	2b0f      	cmp	r3, #15
  406a3a:	ddde      	ble.n	4069fa <_malloc_trim_r+0x3e>
  406a3c:	4c06      	ldr	r4, [pc, #24]	; (406a58 <_malloc_trim_r+0x9c>)
  406a3e:	4905      	ldr	r1, [pc, #20]	; (406a54 <_malloc_trim_r+0x98>)
  406a40:	6824      	ldr	r4, [r4, #0]
  406a42:	f043 0301 	orr.w	r3, r3, #1
  406a46:	1b00      	subs	r0, r0, r4
  406a48:	6053      	str	r3, [r2, #4]
  406a4a:	6008      	str	r0, [r1, #0]
  406a4c:	e7d5      	b.n	4069fa <_malloc_trim_r+0x3e>
  406a4e:	bf00      	nop
  406a50:	200065ec 	.word	0x200065ec
  406a54:	20006c2c 	.word	0x20006c2c
  406a58:	200069f4 	.word	0x200069f4

00406a5c <_free_r>:
  406a5c:	2900      	cmp	r1, #0
  406a5e:	d044      	beq.n	406aea <_free_r+0x8e>
  406a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a64:	460d      	mov	r5, r1
  406a66:	4680      	mov	r8, r0
  406a68:	f7ff fa8c 	bl	405f84 <__malloc_lock>
  406a6c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406a70:	4969      	ldr	r1, [pc, #420]	; (406c18 <_free_r+0x1bc>)
  406a72:	f027 0301 	bic.w	r3, r7, #1
  406a76:	f1a5 0408 	sub.w	r4, r5, #8
  406a7a:	18e2      	adds	r2, r4, r3
  406a7c:	688e      	ldr	r6, [r1, #8]
  406a7e:	6850      	ldr	r0, [r2, #4]
  406a80:	42b2      	cmp	r2, r6
  406a82:	f020 0003 	bic.w	r0, r0, #3
  406a86:	d05e      	beq.n	406b46 <_free_r+0xea>
  406a88:	07fe      	lsls	r6, r7, #31
  406a8a:	6050      	str	r0, [r2, #4]
  406a8c:	d40b      	bmi.n	406aa6 <_free_r+0x4a>
  406a8e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406a92:	1be4      	subs	r4, r4, r7
  406a94:	f101 0e08 	add.w	lr, r1, #8
  406a98:	68a5      	ldr	r5, [r4, #8]
  406a9a:	4575      	cmp	r5, lr
  406a9c:	443b      	add	r3, r7
  406a9e:	d06d      	beq.n	406b7c <_free_r+0x120>
  406aa0:	68e7      	ldr	r7, [r4, #12]
  406aa2:	60ef      	str	r7, [r5, #12]
  406aa4:	60bd      	str	r5, [r7, #8]
  406aa6:	1815      	adds	r5, r2, r0
  406aa8:	686d      	ldr	r5, [r5, #4]
  406aaa:	07ed      	lsls	r5, r5, #31
  406aac:	d53e      	bpl.n	406b2c <_free_r+0xd0>
  406aae:	f043 0201 	orr.w	r2, r3, #1
  406ab2:	6062      	str	r2, [r4, #4]
  406ab4:	50e3      	str	r3, [r4, r3]
  406ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406aba:	d217      	bcs.n	406aec <_free_r+0x90>
  406abc:	08db      	lsrs	r3, r3, #3
  406abe:	1c58      	adds	r0, r3, #1
  406ac0:	109a      	asrs	r2, r3, #2
  406ac2:	684d      	ldr	r5, [r1, #4]
  406ac4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406ac8:	60a7      	str	r7, [r4, #8]
  406aca:	2301      	movs	r3, #1
  406acc:	4093      	lsls	r3, r2
  406ace:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406ad2:	432b      	orrs	r3, r5
  406ad4:	3a08      	subs	r2, #8
  406ad6:	60e2      	str	r2, [r4, #12]
  406ad8:	604b      	str	r3, [r1, #4]
  406ada:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406ade:	60fc      	str	r4, [r7, #12]
  406ae0:	4640      	mov	r0, r8
  406ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406ae6:	f7ff ba53 	b.w	405f90 <__malloc_unlock>
  406aea:	4770      	bx	lr
  406aec:	0a5a      	lsrs	r2, r3, #9
  406aee:	2a04      	cmp	r2, #4
  406af0:	d852      	bhi.n	406b98 <_free_r+0x13c>
  406af2:	099a      	lsrs	r2, r3, #6
  406af4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406af8:	00ff      	lsls	r7, r7, #3
  406afa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406afe:	19c8      	adds	r0, r1, r7
  406b00:	59ca      	ldr	r2, [r1, r7]
  406b02:	3808      	subs	r0, #8
  406b04:	4290      	cmp	r0, r2
  406b06:	d04f      	beq.n	406ba8 <_free_r+0x14c>
  406b08:	6851      	ldr	r1, [r2, #4]
  406b0a:	f021 0103 	bic.w	r1, r1, #3
  406b0e:	428b      	cmp	r3, r1
  406b10:	d232      	bcs.n	406b78 <_free_r+0x11c>
  406b12:	6892      	ldr	r2, [r2, #8]
  406b14:	4290      	cmp	r0, r2
  406b16:	d1f7      	bne.n	406b08 <_free_r+0xac>
  406b18:	68c3      	ldr	r3, [r0, #12]
  406b1a:	60a0      	str	r0, [r4, #8]
  406b1c:	60e3      	str	r3, [r4, #12]
  406b1e:	609c      	str	r4, [r3, #8]
  406b20:	60c4      	str	r4, [r0, #12]
  406b22:	4640      	mov	r0, r8
  406b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b28:	f7ff ba32 	b.w	405f90 <__malloc_unlock>
  406b2c:	6895      	ldr	r5, [r2, #8]
  406b2e:	4f3b      	ldr	r7, [pc, #236]	; (406c1c <_free_r+0x1c0>)
  406b30:	42bd      	cmp	r5, r7
  406b32:	4403      	add	r3, r0
  406b34:	d040      	beq.n	406bb8 <_free_r+0x15c>
  406b36:	68d0      	ldr	r0, [r2, #12]
  406b38:	60e8      	str	r0, [r5, #12]
  406b3a:	f043 0201 	orr.w	r2, r3, #1
  406b3e:	6085      	str	r5, [r0, #8]
  406b40:	6062      	str	r2, [r4, #4]
  406b42:	50e3      	str	r3, [r4, r3]
  406b44:	e7b7      	b.n	406ab6 <_free_r+0x5a>
  406b46:	07ff      	lsls	r7, r7, #31
  406b48:	4403      	add	r3, r0
  406b4a:	d407      	bmi.n	406b5c <_free_r+0x100>
  406b4c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406b50:	1aa4      	subs	r4, r4, r2
  406b52:	4413      	add	r3, r2
  406b54:	68a0      	ldr	r0, [r4, #8]
  406b56:	68e2      	ldr	r2, [r4, #12]
  406b58:	60c2      	str	r2, [r0, #12]
  406b5a:	6090      	str	r0, [r2, #8]
  406b5c:	4a30      	ldr	r2, [pc, #192]	; (406c20 <_free_r+0x1c4>)
  406b5e:	6812      	ldr	r2, [r2, #0]
  406b60:	f043 0001 	orr.w	r0, r3, #1
  406b64:	4293      	cmp	r3, r2
  406b66:	6060      	str	r0, [r4, #4]
  406b68:	608c      	str	r4, [r1, #8]
  406b6a:	d3b9      	bcc.n	406ae0 <_free_r+0x84>
  406b6c:	4b2d      	ldr	r3, [pc, #180]	; (406c24 <_free_r+0x1c8>)
  406b6e:	4640      	mov	r0, r8
  406b70:	6819      	ldr	r1, [r3, #0]
  406b72:	f7ff ff23 	bl	4069bc <_malloc_trim_r>
  406b76:	e7b3      	b.n	406ae0 <_free_r+0x84>
  406b78:	4610      	mov	r0, r2
  406b7a:	e7cd      	b.n	406b18 <_free_r+0xbc>
  406b7c:	1811      	adds	r1, r2, r0
  406b7e:	6849      	ldr	r1, [r1, #4]
  406b80:	07c9      	lsls	r1, r1, #31
  406b82:	d444      	bmi.n	406c0e <_free_r+0x1b2>
  406b84:	6891      	ldr	r1, [r2, #8]
  406b86:	68d2      	ldr	r2, [r2, #12]
  406b88:	60ca      	str	r2, [r1, #12]
  406b8a:	4403      	add	r3, r0
  406b8c:	f043 0001 	orr.w	r0, r3, #1
  406b90:	6091      	str	r1, [r2, #8]
  406b92:	6060      	str	r0, [r4, #4]
  406b94:	50e3      	str	r3, [r4, r3]
  406b96:	e7a3      	b.n	406ae0 <_free_r+0x84>
  406b98:	2a14      	cmp	r2, #20
  406b9a:	d816      	bhi.n	406bca <_free_r+0x16e>
  406b9c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406ba0:	00ff      	lsls	r7, r7, #3
  406ba2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406ba6:	e7aa      	b.n	406afe <_free_r+0xa2>
  406ba8:	10aa      	asrs	r2, r5, #2
  406baa:	2301      	movs	r3, #1
  406bac:	684d      	ldr	r5, [r1, #4]
  406bae:	4093      	lsls	r3, r2
  406bb0:	432b      	orrs	r3, r5
  406bb2:	604b      	str	r3, [r1, #4]
  406bb4:	4603      	mov	r3, r0
  406bb6:	e7b0      	b.n	406b1a <_free_r+0xbe>
  406bb8:	f043 0201 	orr.w	r2, r3, #1
  406bbc:	614c      	str	r4, [r1, #20]
  406bbe:	610c      	str	r4, [r1, #16]
  406bc0:	60e5      	str	r5, [r4, #12]
  406bc2:	60a5      	str	r5, [r4, #8]
  406bc4:	6062      	str	r2, [r4, #4]
  406bc6:	50e3      	str	r3, [r4, r3]
  406bc8:	e78a      	b.n	406ae0 <_free_r+0x84>
  406bca:	2a54      	cmp	r2, #84	; 0x54
  406bcc:	d806      	bhi.n	406bdc <_free_r+0x180>
  406bce:	0b1a      	lsrs	r2, r3, #12
  406bd0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406bd4:	00ff      	lsls	r7, r7, #3
  406bd6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406bda:	e790      	b.n	406afe <_free_r+0xa2>
  406bdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406be0:	d806      	bhi.n	406bf0 <_free_r+0x194>
  406be2:	0bda      	lsrs	r2, r3, #15
  406be4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406be8:	00ff      	lsls	r7, r7, #3
  406bea:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406bee:	e786      	b.n	406afe <_free_r+0xa2>
  406bf0:	f240 5054 	movw	r0, #1364	; 0x554
  406bf4:	4282      	cmp	r2, r0
  406bf6:	d806      	bhi.n	406c06 <_free_r+0x1aa>
  406bf8:	0c9a      	lsrs	r2, r3, #18
  406bfa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406bfe:	00ff      	lsls	r7, r7, #3
  406c00:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406c04:	e77b      	b.n	406afe <_free_r+0xa2>
  406c06:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406c0a:	257e      	movs	r5, #126	; 0x7e
  406c0c:	e777      	b.n	406afe <_free_r+0xa2>
  406c0e:	f043 0101 	orr.w	r1, r3, #1
  406c12:	6061      	str	r1, [r4, #4]
  406c14:	6013      	str	r3, [r2, #0]
  406c16:	e763      	b.n	406ae0 <_free_r+0x84>
  406c18:	200065ec 	.word	0x200065ec
  406c1c:	200065f4 	.word	0x200065f4
  406c20:	200069f8 	.word	0x200069f8
  406c24:	20006c5c 	.word	0x20006c5c

00406c28 <__ascii_mbtowc>:
  406c28:	b082      	sub	sp, #8
  406c2a:	b149      	cbz	r1, 406c40 <__ascii_mbtowc+0x18>
  406c2c:	b15a      	cbz	r2, 406c46 <__ascii_mbtowc+0x1e>
  406c2e:	b16b      	cbz	r3, 406c4c <__ascii_mbtowc+0x24>
  406c30:	7813      	ldrb	r3, [r2, #0]
  406c32:	600b      	str	r3, [r1, #0]
  406c34:	7812      	ldrb	r2, [r2, #0]
  406c36:	1c10      	adds	r0, r2, #0
  406c38:	bf18      	it	ne
  406c3a:	2001      	movne	r0, #1
  406c3c:	b002      	add	sp, #8
  406c3e:	4770      	bx	lr
  406c40:	a901      	add	r1, sp, #4
  406c42:	2a00      	cmp	r2, #0
  406c44:	d1f3      	bne.n	406c2e <__ascii_mbtowc+0x6>
  406c46:	4610      	mov	r0, r2
  406c48:	b002      	add	sp, #8
  406c4a:	4770      	bx	lr
  406c4c:	f06f 0001 	mvn.w	r0, #1
  406c50:	e7f4      	b.n	406c3c <__ascii_mbtowc+0x14>
  406c52:	bf00      	nop

00406c54 <memmove>:
  406c54:	4288      	cmp	r0, r1
  406c56:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c58:	d90d      	bls.n	406c76 <memmove+0x22>
  406c5a:	188b      	adds	r3, r1, r2
  406c5c:	4298      	cmp	r0, r3
  406c5e:	d20a      	bcs.n	406c76 <memmove+0x22>
  406c60:	1884      	adds	r4, r0, r2
  406c62:	2a00      	cmp	r2, #0
  406c64:	d051      	beq.n	406d0a <memmove+0xb6>
  406c66:	4622      	mov	r2, r4
  406c68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406c6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406c70:	4299      	cmp	r1, r3
  406c72:	d1f9      	bne.n	406c68 <memmove+0x14>
  406c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c76:	2a0f      	cmp	r2, #15
  406c78:	d948      	bls.n	406d0c <memmove+0xb8>
  406c7a:	ea41 0300 	orr.w	r3, r1, r0
  406c7e:	079b      	lsls	r3, r3, #30
  406c80:	d146      	bne.n	406d10 <memmove+0xbc>
  406c82:	f100 0410 	add.w	r4, r0, #16
  406c86:	f101 0310 	add.w	r3, r1, #16
  406c8a:	4615      	mov	r5, r2
  406c8c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406c90:	f844 6c10 	str.w	r6, [r4, #-16]
  406c94:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406c98:	f844 6c0c 	str.w	r6, [r4, #-12]
  406c9c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406ca0:	f844 6c08 	str.w	r6, [r4, #-8]
  406ca4:	3d10      	subs	r5, #16
  406ca6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406caa:	f844 6c04 	str.w	r6, [r4, #-4]
  406cae:	2d0f      	cmp	r5, #15
  406cb0:	f103 0310 	add.w	r3, r3, #16
  406cb4:	f104 0410 	add.w	r4, r4, #16
  406cb8:	d8e8      	bhi.n	406c8c <memmove+0x38>
  406cba:	f1a2 0310 	sub.w	r3, r2, #16
  406cbe:	f023 030f 	bic.w	r3, r3, #15
  406cc2:	f002 0e0f 	and.w	lr, r2, #15
  406cc6:	3310      	adds	r3, #16
  406cc8:	f1be 0f03 	cmp.w	lr, #3
  406ccc:	4419      	add	r1, r3
  406cce:	4403      	add	r3, r0
  406cd0:	d921      	bls.n	406d16 <memmove+0xc2>
  406cd2:	1f1e      	subs	r6, r3, #4
  406cd4:	460d      	mov	r5, r1
  406cd6:	4674      	mov	r4, lr
  406cd8:	3c04      	subs	r4, #4
  406cda:	f855 7b04 	ldr.w	r7, [r5], #4
  406cde:	f846 7f04 	str.w	r7, [r6, #4]!
  406ce2:	2c03      	cmp	r4, #3
  406ce4:	d8f8      	bhi.n	406cd8 <memmove+0x84>
  406ce6:	f1ae 0404 	sub.w	r4, lr, #4
  406cea:	f024 0403 	bic.w	r4, r4, #3
  406cee:	3404      	adds	r4, #4
  406cf0:	4421      	add	r1, r4
  406cf2:	4423      	add	r3, r4
  406cf4:	f002 0203 	and.w	r2, r2, #3
  406cf8:	b162      	cbz	r2, 406d14 <memmove+0xc0>
  406cfa:	3b01      	subs	r3, #1
  406cfc:	440a      	add	r2, r1
  406cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
  406d02:	f803 4f01 	strb.w	r4, [r3, #1]!
  406d06:	428a      	cmp	r2, r1
  406d08:	d1f9      	bne.n	406cfe <memmove+0xaa>
  406d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d0c:	4603      	mov	r3, r0
  406d0e:	e7f3      	b.n	406cf8 <memmove+0xa4>
  406d10:	4603      	mov	r3, r0
  406d12:	e7f2      	b.n	406cfa <memmove+0xa6>
  406d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d16:	4672      	mov	r2, lr
  406d18:	e7ee      	b.n	406cf8 <memmove+0xa4>
  406d1a:	bf00      	nop

00406d1c <_realloc_r>:
  406d1c:	2900      	cmp	r1, #0
  406d1e:	f000 8095 	beq.w	406e4c <_realloc_r+0x130>
  406d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d26:	460d      	mov	r5, r1
  406d28:	4616      	mov	r6, r2
  406d2a:	b083      	sub	sp, #12
  406d2c:	4680      	mov	r8, r0
  406d2e:	f106 070b 	add.w	r7, r6, #11
  406d32:	f7ff f927 	bl	405f84 <__malloc_lock>
  406d36:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406d3a:	2f16      	cmp	r7, #22
  406d3c:	f02e 0403 	bic.w	r4, lr, #3
  406d40:	f1a5 0908 	sub.w	r9, r5, #8
  406d44:	d83c      	bhi.n	406dc0 <_realloc_r+0xa4>
  406d46:	2210      	movs	r2, #16
  406d48:	4617      	mov	r7, r2
  406d4a:	42be      	cmp	r6, r7
  406d4c:	d83d      	bhi.n	406dca <_realloc_r+0xae>
  406d4e:	4294      	cmp	r4, r2
  406d50:	da43      	bge.n	406dda <_realloc_r+0xbe>
  406d52:	4bc4      	ldr	r3, [pc, #784]	; (407064 <_realloc_r+0x348>)
  406d54:	6899      	ldr	r1, [r3, #8]
  406d56:	eb09 0004 	add.w	r0, r9, r4
  406d5a:	4288      	cmp	r0, r1
  406d5c:	f000 80b4 	beq.w	406ec8 <_realloc_r+0x1ac>
  406d60:	6843      	ldr	r3, [r0, #4]
  406d62:	f023 0101 	bic.w	r1, r3, #1
  406d66:	4401      	add	r1, r0
  406d68:	6849      	ldr	r1, [r1, #4]
  406d6a:	07c9      	lsls	r1, r1, #31
  406d6c:	d54c      	bpl.n	406e08 <_realloc_r+0xec>
  406d6e:	f01e 0f01 	tst.w	lr, #1
  406d72:	f000 809b 	beq.w	406eac <_realloc_r+0x190>
  406d76:	4631      	mov	r1, r6
  406d78:	4640      	mov	r0, r8
  406d7a:	f7fe fd33 	bl	4057e4 <_malloc_r>
  406d7e:	4606      	mov	r6, r0
  406d80:	2800      	cmp	r0, #0
  406d82:	d03a      	beq.n	406dfa <_realloc_r+0xde>
  406d84:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406d88:	f023 0301 	bic.w	r3, r3, #1
  406d8c:	444b      	add	r3, r9
  406d8e:	f1a0 0208 	sub.w	r2, r0, #8
  406d92:	429a      	cmp	r2, r3
  406d94:	f000 8121 	beq.w	406fda <_realloc_r+0x2be>
  406d98:	1f22      	subs	r2, r4, #4
  406d9a:	2a24      	cmp	r2, #36	; 0x24
  406d9c:	f200 8107 	bhi.w	406fae <_realloc_r+0x292>
  406da0:	2a13      	cmp	r2, #19
  406da2:	f200 80db 	bhi.w	406f5c <_realloc_r+0x240>
  406da6:	4603      	mov	r3, r0
  406da8:	462a      	mov	r2, r5
  406daa:	6811      	ldr	r1, [r2, #0]
  406dac:	6019      	str	r1, [r3, #0]
  406dae:	6851      	ldr	r1, [r2, #4]
  406db0:	6059      	str	r1, [r3, #4]
  406db2:	6892      	ldr	r2, [r2, #8]
  406db4:	609a      	str	r2, [r3, #8]
  406db6:	4629      	mov	r1, r5
  406db8:	4640      	mov	r0, r8
  406dba:	f7ff fe4f 	bl	406a5c <_free_r>
  406dbe:	e01c      	b.n	406dfa <_realloc_r+0xde>
  406dc0:	f027 0707 	bic.w	r7, r7, #7
  406dc4:	2f00      	cmp	r7, #0
  406dc6:	463a      	mov	r2, r7
  406dc8:	dabf      	bge.n	406d4a <_realloc_r+0x2e>
  406dca:	2600      	movs	r6, #0
  406dcc:	230c      	movs	r3, #12
  406dce:	4630      	mov	r0, r6
  406dd0:	f8c8 3000 	str.w	r3, [r8]
  406dd4:	b003      	add	sp, #12
  406dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dda:	462e      	mov	r6, r5
  406ddc:	1be3      	subs	r3, r4, r7
  406dde:	2b0f      	cmp	r3, #15
  406de0:	d81e      	bhi.n	406e20 <_realloc_r+0x104>
  406de2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406de6:	f003 0301 	and.w	r3, r3, #1
  406dea:	4323      	orrs	r3, r4
  406dec:	444c      	add	r4, r9
  406dee:	f8c9 3004 	str.w	r3, [r9, #4]
  406df2:	6863      	ldr	r3, [r4, #4]
  406df4:	f043 0301 	orr.w	r3, r3, #1
  406df8:	6063      	str	r3, [r4, #4]
  406dfa:	4640      	mov	r0, r8
  406dfc:	f7ff f8c8 	bl	405f90 <__malloc_unlock>
  406e00:	4630      	mov	r0, r6
  406e02:	b003      	add	sp, #12
  406e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e08:	f023 0303 	bic.w	r3, r3, #3
  406e0c:	18e1      	adds	r1, r4, r3
  406e0e:	4291      	cmp	r1, r2
  406e10:	db1f      	blt.n	406e52 <_realloc_r+0x136>
  406e12:	68c3      	ldr	r3, [r0, #12]
  406e14:	6882      	ldr	r2, [r0, #8]
  406e16:	462e      	mov	r6, r5
  406e18:	60d3      	str	r3, [r2, #12]
  406e1a:	460c      	mov	r4, r1
  406e1c:	609a      	str	r2, [r3, #8]
  406e1e:	e7dd      	b.n	406ddc <_realloc_r+0xc0>
  406e20:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406e24:	eb09 0107 	add.w	r1, r9, r7
  406e28:	f002 0201 	and.w	r2, r2, #1
  406e2c:	444c      	add	r4, r9
  406e2e:	f043 0301 	orr.w	r3, r3, #1
  406e32:	4317      	orrs	r7, r2
  406e34:	f8c9 7004 	str.w	r7, [r9, #4]
  406e38:	604b      	str	r3, [r1, #4]
  406e3a:	6863      	ldr	r3, [r4, #4]
  406e3c:	f043 0301 	orr.w	r3, r3, #1
  406e40:	3108      	adds	r1, #8
  406e42:	6063      	str	r3, [r4, #4]
  406e44:	4640      	mov	r0, r8
  406e46:	f7ff fe09 	bl	406a5c <_free_r>
  406e4a:	e7d6      	b.n	406dfa <_realloc_r+0xde>
  406e4c:	4611      	mov	r1, r2
  406e4e:	f7fe bcc9 	b.w	4057e4 <_malloc_r>
  406e52:	f01e 0f01 	tst.w	lr, #1
  406e56:	d18e      	bne.n	406d76 <_realloc_r+0x5a>
  406e58:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406e5c:	eba9 0a01 	sub.w	sl, r9, r1
  406e60:	f8da 1004 	ldr.w	r1, [sl, #4]
  406e64:	f021 0103 	bic.w	r1, r1, #3
  406e68:	440b      	add	r3, r1
  406e6a:	4423      	add	r3, r4
  406e6c:	4293      	cmp	r3, r2
  406e6e:	db25      	blt.n	406ebc <_realloc_r+0x1a0>
  406e70:	68c2      	ldr	r2, [r0, #12]
  406e72:	6881      	ldr	r1, [r0, #8]
  406e74:	4656      	mov	r6, sl
  406e76:	60ca      	str	r2, [r1, #12]
  406e78:	6091      	str	r1, [r2, #8]
  406e7a:	f8da 100c 	ldr.w	r1, [sl, #12]
  406e7e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406e82:	1f22      	subs	r2, r4, #4
  406e84:	2a24      	cmp	r2, #36	; 0x24
  406e86:	60c1      	str	r1, [r0, #12]
  406e88:	6088      	str	r0, [r1, #8]
  406e8a:	f200 8094 	bhi.w	406fb6 <_realloc_r+0x29a>
  406e8e:	2a13      	cmp	r2, #19
  406e90:	d96f      	bls.n	406f72 <_realloc_r+0x256>
  406e92:	6829      	ldr	r1, [r5, #0]
  406e94:	f8ca 1008 	str.w	r1, [sl, #8]
  406e98:	6869      	ldr	r1, [r5, #4]
  406e9a:	f8ca 100c 	str.w	r1, [sl, #12]
  406e9e:	2a1b      	cmp	r2, #27
  406ea0:	f200 80a2 	bhi.w	406fe8 <_realloc_r+0x2cc>
  406ea4:	3508      	adds	r5, #8
  406ea6:	f10a 0210 	add.w	r2, sl, #16
  406eaa:	e063      	b.n	406f74 <_realloc_r+0x258>
  406eac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406eb0:	eba9 0a03 	sub.w	sl, r9, r3
  406eb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  406eb8:	f021 0103 	bic.w	r1, r1, #3
  406ebc:	1863      	adds	r3, r4, r1
  406ebe:	4293      	cmp	r3, r2
  406ec0:	f6ff af59 	blt.w	406d76 <_realloc_r+0x5a>
  406ec4:	4656      	mov	r6, sl
  406ec6:	e7d8      	b.n	406e7a <_realloc_r+0x15e>
  406ec8:	6841      	ldr	r1, [r0, #4]
  406eca:	f021 0b03 	bic.w	fp, r1, #3
  406ece:	44a3      	add	fp, r4
  406ed0:	f107 0010 	add.w	r0, r7, #16
  406ed4:	4583      	cmp	fp, r0
  406ed6:	da56      	bge.n	406f86 <_realloc_r+0x26a>
  406ed8:	f01e 0f01 	tst.w	lr, #1
  406edc:	f47f af4b 	bne.w	406d76 <_realloc_r+0x5a>
  406ee0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406ee4:	eba9 0a01 	sub.w	sl, r9, r1
  406ee8:	f8da 1004 	ldr.w	r1, [sl, #4]
  406eec:	f021 0103 	bic.w	r1, r1, #3
  406ef0:	448b      	add	fp, r1
  406ef2:	4558      	cmp	r0, fp
  406ef4:	dce2      	bgt.n	406ebc <_realloc_r+0x1a0>
  406ef6:	4656      	mov	r6, sl
  406ef8:	f8da 100c 	ldr.w	r1, [sl, #12]
  406efc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406f00:	1f22      	subs	r2, r4, #4
  406f02:	2a24      	cmp	r2, #36	; 0x24
  406f04:	60c1      	str	r1, [r0, #12]
  406f06:	6088      	str	r0, [r1, #8]
  406f08:	f200 808f 	bhi.w	40702a <_realloc_r+0x30e>
  406f0c:	2a13      	cmp	r2, #19
  406f0e:	f240 808a 	bls.w	407026 <_realloc_r+0x30a>
  406f12:	6829      	ldr	r1, [r5, #0]
  406f14:	f8ca 1008 	str.w	r1, [sl, #8]
  406f18:	6869      	ldr	r1, [r5, #4]
  406f1a:	f8ca 100c 	str.w	r1, [sl, #12]
  406f1e:	2a1b      	cmp	r2, #27
  406f20:	f200 808a 	bhi.w	407038 <_realloc_r+0x31c>
  406f24:	3508      	adds	r5, #8
  406f26:	f10a 0210 	add.w	r2, sl, #16
  406f2a:	6829      	ldr	r1, [r5, #0]
  406f2c:	6011      	str	r1, [r2, #0]
  406f2e:	6869      	ldr	r1, [r5, #4]
  406f30:	6051      	str	r1, [r2, #4]
  406f32:	68a9      	ldr	r1, [r5, #8]
  406f34:	6091      	str	r1, [r2, #8]
  406f36:	eb0a 0107 	add.w	r1, sl, r7
  406f3a:	ebab 0207 	sub.w	r2, fp, r7
  406f3e:	f042 0201 	orr.w	r2, r2, #1
  406f42:	6099      	str	r1, [r3, #8]
  406f44:	604a      	str	r2, [r1, #4]
  406f46:	f8da 3004 	ldr.w	r3, [sl, #4]
  406f4a:	f003 0301 	and.w	r3, r3, #1
  406f4e:	431f      	orrs	r7, r3
  406f50:	4640      	mov	r0, r8
  406f52:	f8ca 7004 	str.w	r7, [sl, #4]
  406f56:	f7ff f81b 	bl	405f90 <__malloc_unlock>
  406f5a:	e751      	b.n	406e00 <_realloc_r+0xe4>
  406f5c:	682b      	ldr	r3, [r5, #0]
  406f5e:	6003      	str	r3, [r0, #0]
  406f60:	686b      	ldr	r3, [r5, #4]
  406f62:	6043      	str	r3, [r0, #4]
  406f64:	2a1b      	cmp	r2, #27
  406f66:	d82d      	bhi.n	406fc4 <_realloc_r+0x2a8>
  406f68:	f100 0308 	add.w	r3, r0, #8
  406f6c:	f105 0208 	add.w	r2, r5, #8
  406f70:	e71b      	b.n	406daa <_realloc_r+0x8e>
  406f72:	4632      	mov	r2, r6
  406f74:	6829      	ldr	r1, [r5, #0]
  406f76:	6011      	str	r1, [r2, #0]
  406f78:	6869      	ldr	r1, [r5, #4]
  406f7a:	6051      	str	r1, [r2, #4]
  406f7c:	68a9      	ldr	r1, [r5, #8]
  406f7e:	6091      	str	r1, [r2, #8]
  406f80:	461c      	mov	r4, r3
  406f82:	46d1      	mov	r9, sl
  406f84:	e72a      	b.n	406ddc <_realloc_r+0xc0>
  406f86:	eb09 0107 	add.w	r1, r9, r7
  406f8a:	ebab 0b07 	sub.w	fp, fp, r7
  406f8e:	f04b 0201 	orr.w	r2, fp, #1
  406f92:	6099      	str	r1, [r3, #8]
  406f94:	604a      	str	r2, [r1, #4]
  406f96:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406f9a:	f003 0301 	and.w	r3, r3, #1
  406f9e:	431f      	orrs	r7, r3
  406fa0:	4640      	mov	r0, r8
  406fa2:	f845 7c04 	str.w	r7, [r5, #-4]
  406fa6:	f7fe fff3 	bl	405f90 <__malloc_unlock>
  406faa:	462e      	mov	r6, r5
  406fac:	e728      	b.n	406e00 <_realloc_r+0xe4>
  406fae:	4629      	mov	r1, r5
  406fb0:	f7ff fe50 	bl	406c54 <memmove>
  406fb4:	e6ff      	b.n	406db6 <_realloc_r+0x9a>
  406fb6:	4629      	mov	r1, r5
  406fb8:	4630      	mov	r0, r6
  406fba:	461c      	mov	r4, r3
  406fbc:	46d1      	mov	r9, sl
  406fbe:	f7ff fe49 	bl	406c54 <memmove>
  406fc2:	e70b      	b.n	406ddc <_realloc_r+0xc0>
  406fc4:	68ab      	ldr	r3, [r5, #8]
  406fc6:	6083      	str	r3, [r0, #8]
  406fc8:	68eb      	ldr	r3, [r5, #12]
  406fca:	60c3      	str	r3, [r0, #12]
  406fcc:	2a24      	cmp	r2, #36	; 0x24
  406fce:	d017      	beq.n	407000 <_realloc_r+0x2e4>
  406fd0:	f100 0310 	add.w	r3, r0, #16
  406fd4:	f105 0210 	add.w	r2, r5, #16
  406fd8:	e6e7      	b.n	406daa <_realloc_r+0x8e>
  406fda:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406fde:	f023 0303 	bic.w	r3, r3, #3
  406fe2:	441c      	add	r4, r3
  406fe4:	462e      	mov	r6, r5
  406fe6:	e6f9      	b.n	406ddc <_realloc_r+0xc0>
  406fe8:	68a9      	ldr	r1, [r5, #8]
  406fea:	f8ca 1010 	str.w	r1, [sl, #16]
  406fee:	68e9      	ldr	r1, [r5, #12]
  406ff0:	f8ca 1014 	str.w	r1, [sl, #20]
  406ff4:	2a24      	cmp	r2, #36	; 0x24
  406ff6:	d00c      	beq.n	407012 <_realloc_r+0x2f6>
  406ff8:	3510      	adds	r5, #16
  406ffa:	f10a 0218 	add.w	r2, sl, #24
  406ffe:	e7b9      	b.n	406f74 <_realloc_r+0x258>
  407000:	692b      	ldr	r3, [r5, #16]
  407002:	6103      	str	r3, [r0, #16]
  407004:	696b      	ldr	r3, [r5, #20]
  407006:	6143      	str	r3, [r0, #20]
  407008:	f105 0218 	add.w	r2, r5, #24
  40700c:	f100 0318 	add.w	r3, r0, #24
  407010:	e6cb      	b.n	406daa <_realloc_r+0x8e>
  407012:	692a      	ldr	r2, [r5, #16]
  407014:	f8ca 2018 	str.w	r2, [sl, #24]
  407018:	696a      	ldr	r2, [r5, #20]
  40701a:	f8ca 201c 	str.w	r2, [sl, #28]
  40701e:	3518      	adds	r5, #24
  407020:	f10a 0220 	add.w	r2, sl, #32
  407024:	e7a6      	b.n	406f74 <_realloc_r+0x258>
  407026:	4632      	mov	r2, r6
  407028:	e77f      	b.n	406f2a <_realloc_r+0x20e>
  40702a:	4629      	mov	r1, r5
  40702c:	4630      	mov	r0, r6
  40702e:	9301      	str	r3, [sp, #4]
  407030:	f7ff fe10 	bl	406c54 <memmove>
  407034:	9b01      	ldr	r3, [sp, #4]
  407036:	e77e      	b.n	406f36 <_realloc_r+0x21a>
  407038:	68a9      	ldr	r1, [r5, #8]
  40703a:	f8ca 1010 	str.w	r1, [sl, #16]
  40703e:	68e9      	ldr	r1, [r5, #12]
  407040:	f8ca 1014 	str.w	r1, [sl, #20]
  407044:	2a24      	cmp	r2, #36	; 0x24
  407046:	d003      	beq.n	407050 <_realloc_r+0x334>
  407048:	3510      	adds	r5, #16
  40704a:	f10a 0218 	add.w	r2, sl, #24
  40704e:	e76c      	b.n	406f2a <_realloc_r+0x20e>
  407050:	692a      	ldr	r2, [r5, #16]
  407052:	f8ca 2018 	str.w	r2, [sl, #24]
  407056:	696a      	ldr	r2, [r5, #20]
  407058:	f8ca 201c 	str.w	r2, [sl, #28]
  40705c:	3518      	adds	r5, #24
  40705e:	f10a 0220 	add.w	r2, sl, #32
  407062:	e762      	b.n	406f2a <_realloc_r+0x20e>
  407064:	200065ec 	.word	0x200065ec

00407068 <__ascii_wctomb>:
  407068:	b121      	cbz	r1, 407074 <__ascii_wctomb+0xc>
  40706a:	2aff      	cmp	r2, #255	; 0xff
  40706c:	d804      	bhi.n	407078 <__ascii_wctomb+0x10>
  40706e:	700a      	strb	r2, [r1, #0]
  407070:	2001      	movs	r0, #1
  407072:	4770      	bx	lr
  407074:	4608      	mov	r0, r1
  407076:	4770      	bx	lr
  407078:	238a      	movs	r3, #138	; 0x8a
  40707a:	6003      	str	r3, [r0, #0]
  40707c:	f04f 30ff 	mov.w	r0, #4294967295
  407080:	4770      	bx	lr
  407082:	bf00      	nop

00407084 <__aeabi_drsub>:
  407084:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407088:	e002      	b.n	407090 <__adddf3>
  40708a:	bf00      	nop

0040708c <__aeabi_dsub>:
  40708c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407090 <__adddf3>:
  407090:	b530      	push	{r4, r5, lr}
  407092:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407096:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40709a:	ea94 0f05 	teq	r4, r5
  40709e:	bf08      	it	eq
  4070a0:	ea90 0f02 	teqeq	r0, r2
  4070a4:	bf1f      	itttt	ne
  4070a6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4070aa:	ea55 0c02 	orrsne.w	ip, r5, r2
  4070ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4070b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4070b6:	f000 80e2 	beq.w	40727e <__adddf3+0x1ee>
  4070ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4070be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4070c2:	bfb8      	it	lt
  4070c4:	426d      	neglt	r5, r5
  4070c6:	dd0c      	ble.n	4070e2 <__adddf3+0x52>
  4070c8:	442c      	add	r4, r5
  4070ca:	ea80 0202 	eor.w	r2, r0, r2
  4070ce:	ea81 0303 	eor.w	r3, r1, r3
  4070d2:	ea82 0000 	eor.w	r0, r2, r0
  4070d6:	ea83 0101 	eor.w	r1, r3, r1
  4070da:	ea80 0202 	eor.w	r2, r0, r2
  4070de:	ea81 0303 	eor.w	r3, r1, r3
  4070e2:	2d36      	cmp	r5, #54	; 0x36
  4070e4:	bf88      	it	hi
  4070e6:	bd30      	pophi	{r4, r5, pc}
  4070e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4070ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4070f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4070f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4070f8:	d002      	beq.n	407100 <__adddf3+0x70>
  4070fa:	4240      	negs	r0, r0
  4070fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407100:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407104:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407108:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40710c:	d002      	beq.n	407114 <__adddf3+0x84>
  40710e:	4252      	negs	r2, r2
  407110:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407114:	ea94 0f05 	teq	r4, r5
  407118:	f000 80a7 	beq.w	40726a <__adddf3+0x1da>
  40711c:	f1a4 0401 	sub.w	r4, r4, #1
  407120:	f1d5 0e20 	rsbs	lr, r5, #32
  407124:	db0d      	blt.n	407142 <__adddf3+0xb2>
  407126:	fa02 fc0e 	lsl.w	ip, r2, lr
  40712a:	fa22 f205 	lsr.w	r2, r2, r5
  40712e:	1880      	adds	r0, r0, r2
  407130:	f141 0100 	adc.w	r1, r1, #0
  407134:	fa03 f20e 	lsl.w	r2, r3, lr
  407138:	1880      	adds	r0, r0, r2
  40713a:	fa43 f305 	asr.w	r3, r3, r5
  40713e:	4159      	adcs	r1, r3
  407140:	e00e      	b.n	407160 <__adddf3+0xd0>
  407142:	f1a5 0520 	sub.w	r5, r5, #32
  407146:	f10e 0e20 	add.w	lr, lr, #32
  40714a:	2a01      	cmp	r2, #1
  40714c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407150:	bf28      	it	cs
  407152:	f04c 0c02 	orrcs.w	ip, ip, #2
  407156:	fa43 f305 	asr.w	r3, r3, r5
  40715a:	18c0      	adds	r0, r0, r3
  40715c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407160:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407164:	d507      	bpl.n	407176 <__adddf3+0xe6>
  407166:	f04f 0e00 	mov.w	lr, #0
  40716a:	f1dc 0c00 	rsbs	ip, ip, #0
  40716e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407172:	eb6e 0101 	sbc.w	r1, lr, r1
  407176:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40717a:	d31b      	bcc.n	4071b4 <__adddf3+0x124>
  40717c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407180:	d30c      	bcc.n	40719c <__adddf3+0x10c>
  407182:	0849      	lsrs	r1, r1, #1
  407184:	ea5f 0030 	movs.w	r0, r0, rrx
  407188:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40718c:	f104 0401 	add.w	r4, r4, #1
  407190:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407194:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407198:	f080 809a 	bcs.w	4072d0 <__adddf3+0x240>
  40719c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4071a0:	bf08      	it	eq
  4071a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4071a6:	f150 0000 	adcs.w	r0, r0, #0
  4071aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4071ae:	ea41 0105 	orr.w	r1, r1, r5
  4071b2:	bd30      	pop	{r4, r5, pc}
  4071b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4071b8:	4140      	adcs	r0, r0
  4071ba:	eb41 0101 	adc.w	r1, r1, r1
  4071be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4071c2:	f1a4 0401 	sub.w	r4, r4, #1
  4071c6:	d1e9      	bne.n	40719c <__adddf3+0x10c>
  4071c8:	f091 0f00 	teq	r1, #0
  4071cc:	bf04      	itt	eq
  4071ce:	4601      	moveq	r1, r0
  4071d0:	2000      	moveq	r0, #0
  4071d2:	fab1 f381 	clz	r3, r1
  4071d6:	bf08      	it	eq
  4071d8:	3320      	addeq	r3, #32
  4071da:	f1a3 030b 	sub.w	r3, r3, #11
  4071de:	f1b3 0220 	subs.w	r2, r3, #32
  4071e2:	da0c      	bge.n	4071fe <__adddf3+0x16e>
  4071e4:	320c      	adds	r2, #12
  4071e6:	dd08      	ble.n	4071fa <__adddf3+0x16a>
  4071e8:	f102 0c14 	add.w	ip, r2, #20
  4071ec:	f1c2 020c 	rsb	r2, r2, #12
  4071f0:	fa01 f00c 	lsl.w	r0, r1, ip
  4071f4:	fa21 f102 	lsr.w	r1, r1, r2
  4071f8:	e00c      	b.n	407214 <__adddf3+0x184>
  4071fa:	f102 0214 	add.w	r2, r2, #20
  4071fe:	bfd8      	it	le
  407200:	f1c2 0c20 	rsble	ip, r2, #32
  407204:	fa01 f102 	lsl.w	r1, r1, r2
  407208:	fa20 fc0c 	lsr.w	ip, r0, ip
  40720c:	bfdc      	itt	le
  40720e:	ea41 010c 	orrle.w	r1, r1, ip
  407212:	4090      	lslle	r0, r2
  407214:	1ae4      	subs	r4, r4, r3
  407216:	bfa2      	ittt	ge
  407218:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40721c:	4329      	orrge	r1, r5
  40721e:	bd30      	popge	{r4, r5, pc}
  407220:	ea6f 0404 	mvn.w	r4, r4
  407224:	3c1f      	subs	r4, #31
  407226:	da1c      	bge.n	407262 <__adddf3+0x1d2>
  407228:	340c      	adds	r4, #12
  40722a:	dc0e      	bgt.n	40724a <__adddf3+0x1ba>
  40722c:	f104 0414 	add.w	r4, r4, #20
  407230:	f1c4 0220 	rsb	r2, r4, #32
  407234:	fa20 f004 	lsr.w	r0, r0, r4
  407238:	fa01 f302 	lsl.w	r3, r1, r2
  40723c:	ea40 0003 	orr.w	r0, r0, r3
  407240:	fa21 f304 	lsr.w	r3, r1, r4
  407244:	ea45 0103 	orr.w	r1, r5, r3
  407248:	bd30      	pop	{r4, r5, pc}
  40724a:	f1c4 040c 	rsb	r4, r4, #12
  40724e:	f1c4 0220 	rsb	r2, r4, #32
  407252:	fa20 f002 	lsr.w	r0, r0, r2
  407256:	fa01 f304 	lsl.w	r3, r1, r4
  40725a:	ea40 0003 	orr.w	r0, r0, r3
  40725e:	4629      	mov	r1, r5
  407260:	bd30      	pop	{r4, r5, pc}
  407262:	fa21 f004 	lsr.w	r0, r1, r4
  407266:	4629      	mov	r1, r5
  407268:	bd30      	pop	{r4, r5, pc}
  40726a:	f094 0f00 	teq	r4, #0
  40726e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407272:	bf06      	itte	eq
  407274:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407278:	3401      	addeq	r4, #1
  40727a:	3d01      	subne	r5, #1
  40727c:	e74e      	b.n	40711c <__adddf3+0x8c>
  40727e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407282:	bf18      	it	ne
  407284:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407288:	d029      	beq.n	4072de <__adddf3+0x24e>
  40728a:	ea94 0f05 	teq	r4, r5
  40728e:	bf08      	it	eq
  407290:	ea90 0f02 	teqeq	r0, r2
  407294:	d005      	beq.n	4072a2 <__adddf3+0x212>
  407296:	ea54 0c00 	orrs.w	ip, r4, r0
  40729a:	bf04      	itt	eq
  40729c:	4619      	moveq	r1, r3
  40729e:	4610      	moveq	r0, r2
  4072a0:	bd30      	pop	{r4, r5, pc}
  4072a2:	ea91 0f03 	teq	r1, r3
  4072a6:	bf1e      	ittt	ne
  4072a8:	2100      	movne	r1, #0
  4072aa:	2000      	movne	r0, #0
  4072ac:	bd30      	popne	{r4, r5, pc}
  4072ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4072b2:	d105      	bne.n	4072c0 <__adddf3+0x230>
  4072b4:	0040      	lsls	r0, r0, #1
  4072b6:	4149      	adcs	r1, r1
  4072b8:	bf28      	it	cs
  4072ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4072be:	bd30      	pop	{r4, r5, pc}
  4072c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4072c4:	bf3c      	itt	cc
  4072c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4072ca:	bd30      	popcc	{r4, r5, pc}
  4072cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4072d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4072d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4072d8:	f04f 0000 	mov.w	r0, #0
  4072dc:	bd30      	pop	{r4, r5, pc}
  4072de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4072e2:	bf1a      	itte	ne
  4072e4:	4619      	movne	r1, r3
  4072e6:	4610      	movne	r0, r2
  4072e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4072ec:	bf1c      	itt	ne
  4072ee:	460b      	movne	r3, r1
  4072f0:	4602      	movne	r2, r0
  4072f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4072f6:	bf06      	itte	eq
  4072f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4072fc:	ea91 0f03 	teqeq	r1, r3
  407300:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407304:	bd30      	pop	{r4, r5, pc}
  407306:	bf00      	nop

00407308 <__aeabi_ui2d>:
  407308:	f090 0f00 	teq	r0, #0
  40730c:	bf04      	itt	eq
  40730e:	2100      	moveq	r1, #0
  407310:	4770      	bxeq	lr
  407312:	b530      	push	{r4, r5, lr}
  407314:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407318:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40731c:	f04f 0500 	mov.w	r5, #0
  407320:	f04f 0100 	mov.w	r1, #0
  407324:	e750      	b.n	4071c8 <__adddf3+0x138>
  407326:	bf00      	nop

00407328 <__aeabi_i2d>:
  407328:	f090 0f00 	teq	r0, #0
  40732c:	bf04      	itt	eq
  40732e:	2100      	moveq	r1, #0
  407330:	4770      	bxeq	lr
  407332:	b530      	push	{r4, r5, lr}
  407334:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407338:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40733c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407340:	bf48      	it	mi
  407342:	4240      	negmi	r0, r0
  407344:	f04f 0100 	mov.w	r1, #0
  407348:	e73e      	b.n	4071c8 <__adddf3+0x138>
  40734a:	bf00      	nop

0040734c <__aeabi_f2d>:
  40734c:	0042      	lsls	r2, r0, #1
  40734e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407352:	ea4f 0131 	mov.w	r1, r1, rrx
  407356:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40735a:	bf1f      	itttt	ne
  40735c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407360:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407364:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407368:	4770      	bxne	lr
  40736a:	f092 0f00 	teq	r2, #0
  40736e:	bf14      	ite	ne
  407370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407374:	4770      	bxeq	lr
  407376:	b530      	push	{r4, r5, lr}
  407378:	f44f 7460 	mov.w	r4, #896	; 0x380
  40737c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407384:	e720      	b.n	4071c8 <__adddf3+0x138>
  407386:	bf00      	nop

00407388 <__aeabi_ul2d>:
  407388:	ea50 0201 	orrs.w	r2, r0, r1
  40738c:	bf08      	it	eq
  40738e:	4770      	bxeq	lr
  407390:	b530      	push	{r4, r5, lr}
  407392:	f04f 0500 	mov.w	r5, #0
  407396:	e00a      	b.n	4073ae <__aeabi_l2d+0x16>

00407398 <__aeabi_l2d>:
  407398:	ea50 0201 	orrs.w	r2, r0, r1
  40739c:	bf08      	it	eq
  40739e:	4770      	bxeq	lr
  4073a0:	b530      	push	{r4, r5, lr}
  4073a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4073a6:	d502      	bpl.n	4073ae <__aeabi_l2d+0x16>
  4073a8:	4240      	negs	r0, r0
  4073aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4073ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4073ba:	f43f aedc 	beq.w	407176 <__adddf3+0xe6>
  4073be:	f04f 0203 	mov.w	r2, #3
  4073c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4073c6:	bf18      	it	ne
  4073c8:	3203      	addne	r2, #3
  4073ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4073ce:	bf18      	it	ne
  4073d0:	3203      	addne	r2, #3
  4073d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4073d6:	f1c2 0320 	rsb	r3, r2, #32
  4073da:	fa00 fc03 	lsl.w	ip, r0, r3
  4073de:	fa20 f002 	lsr.w	r0, r0, r2
  4073e2:	fa01 fe03 	lsl.w	lr, r1, r3
  4073e6:	ea40 000e 	orr.w	r0, r0, lr
  4073ea:	fa21 f102 	lsr.w	r1, r1, r2
  4073ee:	4414      	add	r4, r2
  4073f0:	e6c1      	b.n	407176 <__adddf3+0xe6>
  4073f2:	bf00      	nop

004073f4 <__aeabi_dmul>:
  4073f4:	b570      	push	{r4, r5, r6, lr}
  4073f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4073fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4073fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407402:	bf1d      	ittte	ne
  407404:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407408:	ea94 0f0c 	teqne	r4, ip
  40740c:	ea95 0f0c 	teqne	r5, ip
  407410:	f000 f8de 	bleq	4075d0 <__aeabi_dmul+0x1dc>
  407414:	442c      	add	r4, r5
  407416:	ea81 0603 	eor.w	r6, r1, r3
  40741a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40741e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407422:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407426:	bf18      	it	ne
  407428:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40742c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407434:	d038      	beq.n	4074a8 <__aeabi_dmul+0xb4>
  407436:	fba0 ce02 	umull	ip, lr, r0, r2
  40743a:	f04f 0500 	mov.w	r5, #0
  40743e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407442:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407446:	fbe0 e503 	umlal	lr, r5, r0, r3
  40744a:	f04f 0600 	mov.w	r6, #0
  40744e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407452:	f09c 0f00 	teq	ip, #0
  407456:	bf18      	it	ne
  407458:	f04e 0e01 	orrne.w	lr, lr, #1
  40745c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407460:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407464:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407468:	d204      	bcs.n	407474 <__aeabi_dmul+0x80>
  40746a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40746e:	416d      	adcs	r5, r5
  407470:	eb46 0606 	adc.w	r6, r6, r6
  407474:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407478:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40747c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407480:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407484:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407488:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40748c:	bf88      	it	hi
  40748e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407492:	d81e      	bhi.n	4074d2 <__aeabi_dmul+0xde>
  407494:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407498:	bf08      	it	eq
  40749a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40749e:	f150 0000 	adcs.w	r0, r0, #0
  4074a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4074a6:	bd70      	pop	{r4, r5, r6, pc}
  4074a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4074ac:	ea46 0101 	orr.w	r1, r6, r1
  4074b0:	ea40 0002 	orr.w	r0, r0, r2
  4074b4:	ea81 0103 	eor.w	r1, r1, r3
  4074b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4074bc:	bfc2      	ittt	gt
  4074be:	ebd4 050c 	rsbsgt	r5, r4, ip
  4074c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4074c6:	bd70      	popgt	{r4, r5, r6, pc}
  4074c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074cc:	f04f 0e00 	mov.w	lr, #0
  4074d0:	3c01      	subs	r4, #1
  4074d2:	f300 80ab 	bgt.w	40762c <__aeabi_dmul+0x238>
  4074d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4074da:	bfde      	ittt	le
  4074dc:	2000      	movle	r0, #0
  4074de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4074e2:	bd70      	pople	{r4, r5, r6, pc}
  4074e4:	f1c4 0400 	rsb	r4, r4, #0
  4074e8:	3c20      	subs	r4, #32
  4074ea:	da35      	bge.n	407558 <__aeabi_dmul+0x164>
  4074ec:	340c      	adds	r4, #12
  4074ee:	dc1b      	bgt.n	407528 <__aeabi_dmul+0x134>
  4074f0:	f104 0414 	add.w	r4, r4, #20
  4074f4:	f1c4 0520 	rsb	r5, r4, #32
  4074f8:	fa00 f305 	lsl.w	r3, r0, r5
  4074fc:	fa20 f004 	lsr.w	r0, r0, r4
  407500:	fa01 f205 	lsl.w	r2, r1, r5
  407504:	ea40 0002 	orr.w	r0, r0, r2
  407508:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40750c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407514:	fa21 f604 	lsr.w	r6, r1, r4
  407518:	eb42 0106 	adc.w	r1, r2, r6
  40751c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407520:	bf08      	it	eq
  407522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407526:	bd70      	pop	{r4, r5, r6, pc}
  407528:	f1c4 040c 	rsb	r4, r4, #12
  40752c:	f1c4 0520 	rsb	r5, r4, #32
  407530:	fa00 f304 	lsl.w	r3, r0, r4
  407534:	fa20 f005 	lsr.w	r0, r0, r5
  407538:	fa01 f204 	lsl.w	r2, r1, r4
  40753c:	ea40 0002 	orr.w	r0, r0, r2
  407540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407548:	f141 0100 	adc.w	r1, r1, #0
  40754c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407550:	bf08      	it	eq
  407552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407556:	bd70      	pop	{r4, r5, r6, pc}
  407558:	f1c4 0520 	rsb	r5, r4, #32
  40755c:	fa00 f205 	lsl.w	r2, r0, r5
  407560:	ea4e 0e02 	orr.w	lr, lr, r2
  407564:	fa20 f304 	lsr.w	r3, r0, r4
  407568:	fa01 f205 	lsl.w	r2, r1, r5
  40756c:	ea43 0302 	orr.w	r3, r3, r2
  407570:	fa21 f004 	lsr.w	r0, r1, r4
  407574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407578:	fa21 f204 	lsr.w	r2, r1, r4
  40757c:	ea20 0002 	bic.w	r0, r0, r2
  407580:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407588:	bf08      	it	eq
  40758a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40758e:	bd70      	pop	{r4, r5, r6, pc}
  407590:	f094 0f00 	teq	r4, #0
  407594:	d10f      	bne.n	4075b6 <__aeabi_dmul+0x1c2>
  407596:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40759a:	0040      	lsls	r0, r0, #1
  40759c:	eb41 0101 	adc.w	r1, r1, r1
  4075a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4075a4:	bf08      	it	eq
  4075a6:	3c01      	subeq	r4, #1
  4075a8:	d0f7      	beq.n	40759a <__aeabi_dmul+0x1a6>
  4075aa:	ea41 0106 	orr.w	r1, r1, r6
  4075ae:	f095 0f00 	teq	r5, #0
  4075b2:	bf18      	it	ne
  4075b4:	4770      	bxne	lr
  4075b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4075ba:	0052      	lsls	r2, r2, #1
  4075bc:	eb43 0303 	adc.w	r3, r3, r3
  4075c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4075c4:	bf08      	it	eq
  4075c6:	3d01      	subeq	r5, #1
  4075c8:	d0f7      	beq.n	4075ba <__aeabi_dmul+0x1c6>
  4075ca:	ea43 0306 	orr.w	r3, r3, r6
  4075ce:	4770      	bx	lr
  4075d0:	ea94 0f0c 	teq	r4, ip
  4075d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4075d8:	bf18      	it	ne
  4075da:	ea95 0f0c 	teqne	r5, ip
  4075de:	d00c      	beq.n	4075fa <__aeabi_dmul+0x206>
  4075e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4075e4:	bf18      	it	ne
  4075e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4075ea:	d1d1      	bne.n	407590 <__aeabi_dmul+0x19c>
  4075ec:	ea81 0103 	eor.w	r1, r1, r3
  4075f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4075f4:	f04f 0000 	mov.w	r0, #0
  4075f8:	bd70      	pop	{r4, r5, r6, pc}
  4075fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4075fe:	bf06      	itte	eq
  407600:	4610      	moveq	r0, r2
  407602:	4619      	moveq	r1, r3
  407604:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407608:	d019      	beq.n	40763e <__aeabi_dmul+0x24a>
  40760a:	ea94 0f0c 	teq	r4, ip
  40760e:	d102      	bne.n	407616 <__aeabi_dmul+0x222>
  407610:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407614:	d113      	bne.n	40763e <__aeabi_dmul+0x24a>
  407616:	ea95 0f0c 	teq	r5, ip
  40761a:	d105      	bne.n	407628 <__aeabi_dmul+0x234>
  40761c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407620:	bf1c      	itt	ne
  407622:	4610      	movne	r0, r2
  407624:	4619      	movne	r1, r3
  407626:	d10a      	bne.n	40763e <__aeabi_dmul+0x24a>
  407628:	ea81 0103 	eor.w	r1, r1, r3
  40762c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407630:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407638:	f04f 0000 	mov.w	r0, #0
  40763c:	bd70      	pop	{r4, r5, r6, pc}
  40763e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407642:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407646:	bd70      	pop	{r4, r5, r6, pc}

00407648 <__aeabi_ddiv>:
  407648:	b570      	push	{r4, r5, r6, lr}
  40764a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40764e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407656:	bf1d      	ittte	ne
  407658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40765c:	ea94 0f0c 	teqne	r4, ip
  407660:	ea95 0f0c 	teqne	r5, ip
  407664:	f000 f8a7 	bleq	4077b6 <__aeabi_ddiv+0x16e>
  407668:	eba4 0405 	sub.w	r4, r4, r5
  40766c:	ea81 0e03 	eor.w	lr, r1, r3
  407670:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407674:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407678:	f000 8088 	beq.w	40778c <__aeabi_ddiv+0x144>
  40767c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407680:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407684:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407688:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40768c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407690:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407694:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407698:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40769c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4076a0:	429d      	cmp	r5, r3
  4076a2:	bf08      	it	eq
  4076a4:	4296      	cmpeq	r6, r2
  4076a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4076aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4076ae:	d202      	bcs.n	4076b6 <__aeabi_ddiv+0x6e>
  4076b0:	085b      	lsrs	r3, r3, #1
  4076b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4076b6:	1ab6      	subs	r6, r6, r2
  4076b8:	eb65 0503 	sbc.w	r5, r5, r3
  4076bc:	085b      	lsrs	r3, r3, #1
  4076be:	ea4f 0232 	mov.w	r2, r2, rrx
  4076c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4076c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4076ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4076ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4076d2:	bf22      	ittt	cs
  4076d4:	1ab6      	subcs	r6, r6, r2
  4076d6:	4675      	movcs	r5, lr
  4076d8:	ea40 000c 	orrcs.w	r0, r0, ip
  4076dc:	085b      	lsrs	r3, r3, #1
  4076de:	ea4f 0232 	mov.w	r2, r2, rrx
  4076e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4076e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4076ea:	bf22      	ittt	cs
  4076ec:	1ab6      	subcs	r6, r6, r2
  4076ee:	4675      	movcs	r5, lr
  4076f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4076f4:	085b      	lsrs	r3, r3, #1
  4076f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4076fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4076fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407702:	bf22      	ittt	cs
  407704:	1ab6      	subcs	r6, r6, r2
  407706:	4675      	movcs	r5, lr
  407708:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40770c:	085b      	lsrs	r3, r3, #1
  40770e:	ea4f 0232 	mov.w	r2, r2, rrx
  407712:	ebb6 0e02 	subs.w	lr, r6, r2
  407716:	eb75 0e03 	sbcs.w	lr, r5, r3
  40771a:	bf22      	ittt	cs
  40771c:	1ab6      	subcs	r6, r6, r2
  40771e:	4675      	movcs	r5, lr
  407720:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407724:	ea55 0e06 	orrs.w	lr, r5, r6
  407728:	d018      	beq.n	40775c <__aeabi_ddiv+0x114>
  40772a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40772e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407732:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407736:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40773a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40773e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407742:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407746:	d1c0      	bne.n	4076ca <__aeabi_ddiv+0x82>
  407748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40774c:	d10b      	bne.n	407766 <__aeabi_ddiv+0x11e>
  40774e:	ea41 0100 	orr.w	r1, r1, r0
  407752:	f04f 0000 	mov.w	r0, #0
  407756:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40775a:	e7b6      	b.n	4076ca <__aeabi_ddiv+0x82>
  40775c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407760:	bf04      	itt	eq
  407762:	4301      	orreq	r1, r0
  407764:	2000      	moveq	r0, #0
  407766:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40776a:	bf88      	it	hi
  40776c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407770:	f63f aeaf 	bhi.w	4074d2 <__aeabi_dmul+0xde>
  407774:	ebb5 0c03 	subs.w	ip, r5, r3
  407778:	bf04      	itt	eq
  40777a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40777e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407782:	f150 0000 	adcs.w	r0, r0, #0
  407786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40778a:	bd70      	pop	{r4, r5, r6, pc}
  40778c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407790:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407794:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407798:	bfc2      	ittt	gt
  40779a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40779e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4077a2:	bd70      	popgt	{r4, r5, r6, pc}
  4077a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4077a8:	f04f 0e00 	mov.w	lr, #0
  4077ac:	3c01      	subs	r4, #1
  4077ae:	e690      	b.n	4074d2 <__aeabi_dmul+0xde>
  4077b0:	ea45 0e06 	orr.w	lr, r5, r6
  4077b4:	e68d      	b.n	4074d2 <__aeabi_dmul+0xde>
  4077b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4077ba:	ea94 0f0c 	teq	r4, ip
  4077be:	bf08      	it	eq
  4077c0:	ea95 0f0c 	teqeq	r5, ip
  4077c4:	f43f af3b 	beq.w	40763e <__aeabi_dmul+0x24a>
  4077c8:	ea94 0f0c 	teq	r4, ip
  4077cc:	d10a      	bne.n	4077e4 <__aeabi_ddiv+0x19c>
  4077ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4077d2:	f47f af34 	bne.w	40763e <__aeabi_dmul+0x24a>
  4077d6:	ea95 0f0c 	teq	r5, ip
  4077da:	f47f af25 	bne.w	407628 <__aeabi_dmul+0x234>
  4077de:	4610      	mov	r0, r2
  4077e0:	4619      	mov	r1, r3
  4077e2:	e72c      	b.n	40763e <__aeabi_dmul+0x24a>
  4077e4:	ea95 0f0c 	teq	r5, ip
  4077e8:	d106      	bne.n	4077f8 <__aeabi_ddiv+0x1b0>
  4077ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4077ee:	f43f aefd 	beq.w	4075ec <__aeabi_dmul+0x1f8>
  4077f2:	4610      	mov	r0, r2
  4077f4:	4619      	mov	r1, r3
  4077f6:	e722      	b.n	40763e <__aeabi_dmul+0x24a>
  4077f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4077fc:	bf18      	it	ne
  4077fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407802:	f47f aec5 	bne.w	407590 <__aeabi_dmul+0x19c>
  407806:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40780a:	f47f af0d 	bne.w	407628 <__aeabi_dmul+0x234>
  40780e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407812:	f47f aeeb 	bne.w	4075ec <__aeabi_dmul+0x1f8>
  407816:	e712      	b.n	40763e <__aeabi_dmul+0x24a>

00407818 <__gedf2>:
  407818:	f04f 3cff 	mov.w	ip, #4294967295
  40781c:	e006      	b.n	40782c <__cmpdf2+0x4>
  40781e:	bf00      	nop

00407820 <__ledf2>:
  407820:	f04f 0c01 	mov.w	ip, #1
  407824:	e002      	b.n	40782c <__cmpdf2+0x4>
  407826:	bf00      	nop

00407828 <__cmpdf2>:
  407828:	f04f 0c01 	mov.w	ip, #1
  40782c:	f84d cd04 	str.w	ip, [sp, #-4]!
  407830:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407838:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40783c:	bf18      	it	ne
  40783e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407842:	d01b      	beq.n	40787c <__cmpdf2+0x54>
  407844:	b001      	add	sp, #4
  407846:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40784a:	bf0c      	ite	eq
  40784c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407850:	ea91 0f03 	teqne	r1, r3
  407854:	bf02      	ittt	eq
  407856:	ea90 0f02 	teqeq	r0, r2
  40785a:	2000      	moveq	r0, #0
  40785c:	4770      	bxeq	lr
  40785e:	f110 0f00 	cmn.w	r0, #0
  407862:	ea91 0f03 	teq	r1, r3
  407866:	bf58      	it	pl
  407868:	4299      	cmppl	r1, r3
  40786a:	bf08      	it	eq
  40786c:	4290      	cmpeq	r0, r2
  40786e:	bf2c      	ite	cs
  407870:	17d8      	asrcs	r0, r3, #31
  407872:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407876:	f040 0001 	orr.w	r0, r0, #1
  40787a:	4770      	bx	lr
  40787c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407884:	d102      	bne.n	40788c <__cmpdf2+0x64>
  407886:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40788a:	d107      	bne.n	40789c <__cmpdf2+0x74>
  40788c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407894:	d1d6      	bne.n	407844 <__cmpdf2+0x1c>
  407896:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40789a:	d0d3      	beq.n	407844 <__cmpdf2+0x1c>
  40789c:	f85d 0b04 	ldr.w	r0, [sp], #4
  4078a0:	4770      	bx	lr
  4078a2:	bf00      	nop

004078a4 <__aeabi_cdrcmple>:
  4078a4:	4684      	mov	ip, r0
  4078a6:	4610      	mov	r0, r2
  4078a8:	4662      	mov	r2, ip
  4078aa:	468c      	mov	ip, r1
  4078ac:	4619      	mov	r1, r3
  4078ae:	4663      	mov	r3, ip
  4078b0:	e000      	b.n	4078b4 <__aeabi_cdcmpeq>
  4078b2:	bf00      	nop

004078b4 <__aeabi_cdcmpeq>:
  4078b4:	b501      	push	{r0, lr}
  4078b6:	f7ff ffb7 	bl	407828 <__cmpdf2>
  4078ba:	2800      	cmp	r0, #0
  4078bc:	bf48      	it	mi
  4078be:	f110 0f00 	cmnmi.w	r0, #0
  4078c2:	bd01      	pop	{r0, pc}

004078c4 <__aeabi_dcmpeq>:
  4078c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078c8:	f7ff fff4 	bl	4078b4 <__aeabi_cdcmpeq>
  4078cc:	bf0c      	ite	eq
  4078ce:	2001      	moveq	r0, #1
  4078d0:	2000      	movne	r0, #0
  4078d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4078d6:	bf00      	nop

004078d8 <__aeabi_dcmplt>:
  4078d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078dc:	f7ff ffea 	bl	4078b4 <__aeabi_cdcmpeq>
  4078e0:	bf34      	ite	cc
  4078e2:	2001      	movcc	r0, #1
  4078e4:	2000      	movcs	r0, #0
  4078e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4078ea:	bf00      	nop

004078ec <__aeabi_dcmple>:
  4078ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078f0:	f7ff ffe0 	bl	4078b4 <__aeabi_cdcmpeq>
  4078f4:	bf94      	ite	ls
  4078f6:	2001      	movls	r0, #1
  4078f8:	2000      	movhi	r0, #0
  4078fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4078fe:	bf00      	nop

00407900 <__aeabi_dcmpge>:
  407900:	f84d ed08 	str.w	lr, [sp, #-8]!
  407904:	f7ff ffce 	bl	4078a4 <__aeabi_cdrcmple>
  407908:	bf94      	ite	ls
  40790a:	2001      	movls	r0, #1
  40790c:	2000      	movhi	r0, #0
  40790e:	f85d fb08 	ldr.w	pc, [sp], #8
  407912:	bf00      	nop

00407914 <__aeabi_dcmpgt>:
  407914:	f84d ed08 	str.w	lr, [sp, #-8]!
  407918:	f7ff ffc4 	bl	4078a4 <__aeabi_cdrcmple>
  40791c:	bf34      	ite	cc
  40791e:	2001      	movcc	r0, #1
  407920:	2000      	movcs	r0, #0
  407922:	f85d fb08 	ldr.w	pc, [sp], #8
  407926:	bf00      	nop

00407928 <__aeabi_dcmpun>:
  407928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40792c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407930:	d102      	bne.n	407938 <__aeabi_dcmpun+0x10>
  407932:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407936:	d10a      	bne.n	40794e <__aeabi_dcmpun+0x26>
  407938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40793c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407940:	d102      	bne.n	407948 <__aeabi_dcmpun+0x20>
  407942:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407946:	d102      	bne.n	40794e <__aeabi_dcmpun+0x26>
  407948:	f04f 0000 	mov.w	r0, #0
  40794c:	4770      	bx	lr
  40794e:	f04f 0001 	mov.w	r0, #1
  407952:	4770      	bx	lr

00407954 <__aeabi_d2iz>:
  407954:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407958:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40795c:	d215      	bcs.n	40798a <__aeabi_d2iz+0x36>
  40795e:	d511      	bpl.n	407984 <__aeabi_d2iz+0x30>
  407960:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407964:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407968:	d912      	bls.n	407990 <__aeabi_d2iz+0x3c>
  40796a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40796e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407972:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407976:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40797a:	fa23 f002 	lsr.w	r0, r3, r2
  40797e:	bf18      	it	ne
  407980:	4240      	negne	r0, r0
  407982:	4770      	bx	lr
  407984:	f04f 0000 	mov.w	r0, #0
  407988:	4770      	bx	lr
  40798a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40798e:	d105      	bne.n	40799c <__aeabi_d2iz+0x48>
  407990:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407994:	bf08      	it	eq
  407996:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40799a:	4770      	bx	lr
  40799c:	f04f 0000 	mov.w	r0, #0
  4079a0:	4770      	bx	lr
  4079a2:	bf00      	nop
  4079a4:	2c78254f 	.word	0x2c78254f
  4079a8:	78323025 	.word	0x78323025
  4079ac:	00000023 	.word	0x00000023
  4079b0:	0001c200 	.word	0x0001c200
  4079b4:	000000c0 	.word	0x000000c0
  4079b8:	00000800 	.word	0x00000800
	...
  4079c8:	72617453 	.word	0x72617453
  4079cc:	72742074 	.word	0x72742074
  4079d0:	66736e61 	.word	0x66736e61
  4079d4:	00007265 	.word	0x00007265
  4079d8:	65696c43 	.word	0x65696c43
  4079dc:	6e20746e 	.word	0x6e20746e
  4079e0:	6320746f 	.word	0x6320746f
  4079e4:	656e6e6f 	.word	0x656e6e6f
  4079e8:	64657463 	.word	0x64657463
  4079ec:	00000000 	.word	0x00000000
  4079f0:	6d6d6f43 	.word	0x6d6d6f43
  4079f4:	20646e61 	.word	0x20646e61
  4079f8:	6c696166 	.word	0x6c696166
  4079fc:	00006465 	.word	0x00006465
  407a00:	656e6f4e 	.word	0x656e6f4e
  407a04:	00000000 	.word	0x00000000
  407a08:	0001c200 	.word	0x0001c200
  407a0c:	000000c0 	.word	0x000000c0
  407a10:	00000800 	.word	0x00000800
	...
  407a20:	20746573 	.word	0x20746573
  407a24:	74737973 	.word	0x74737973
  407a28:	632e6d65 	.word	0x632e6d65
  407a2c:	652e646d 	.word	0x652e646d
  407a30:	206f6863 	.word	0x206f6863
  407a34:	0d66666f 	.word	0x0d66666f
  407a38:	0000000a 	.word	0x0000000a
  407a3c:	20746573 	.word	0x20746573
  407a40:	74726175 	.word	0x74726175
  407a44:	6f6c662e 	.word	0x6f6c662e
  407a48:	20302077 	.word	0x20302077
  407a4c:	0a0d6e6f 	.word	0x0a0d6e6f
  407a50:	00000000 	.word	0x00000000
  407a54:	20746573 	.word	0x20746573
  407a58:	63207562 	.word	0x63207562
  407a5c:	31207220 	.word	0x31207220
  407a60:	30303030 	.word	0x30303030
  407a64:	00000a0d 	.word	0x00000a0d
  407a68:	20746573 	.word	0x20746573
  407a6c:	74737973 	.word	0x74737973
  407a70:	692e6d65 	.word	0x692e6d65
  407a74:	6369646e 	.word	0x6369646e
  407a78:	726f7461 	.word	0x726f7461
  407a7c:	6970672e 	.word	0x6970672e
  407a80:	6c77206f 	.word	0x6c77206f
  407a84:	32206e61 	.word	0x32206e61
  407a88:	000a0d30 	.word	0x000a0d30
  407a8c:	20746573 	.word	0x20746573
  407a90:	74737973 	.word	0x74737973
  407a94:	692e6d65 	.word	0x692e6d65
  407a98:	6369646e 	.word	0x6369646e
  407a9c:	726f7461 	.word	0x726f7461
  407aa0:	6970672e 	.word	0x6970672e
  407aa4:	656e206f 	.word	0x656e206f
  407aa8:	726f7774 	.word	0x726f7774
  407aac:	3831206b 	.word	0x3831206b
  407ab0:	00000a0d 	.word	0x00000a0d
  407ab4:	20746573 	.word	0x20746573
  407ab8:	74737973 	.word	0x74737973
  407abc:	692e6d65 	.word	0x692e6d65
  407ac0:	6369646e 	.word	0x6369646e
  407ac4:	726f7461 	.word	0x726f7461
  407ac8:	6970672e 	.word	0x6970672e
  407acc:	6f73206f 	.word	0x6f73206f
  407ad0:	70617466 	.word	0x70617466
  407ad4:	0d313220 	.word	0x0d313220
  407ad8:	0000000a 	.word	0x0000000a
  407adc:	20746573 	.word	0x20746573
  407ae0:	74737973 	.word	0x74737973
  407ae4:	632e6d65 	.word	0x632e6d65
  407ae8:	672e646d 	.word	0x672e646d
  407aec:	206f6970 	.word	0x206f6970
  407af0:	0a0d3631 	.word	0x0a0d3631
  407af4:	00000000 	.word	0x00000000
  407af8:	20746573 	.word	0x20746573
  407afc:	6e616c77 	.word	0x6e616c77
  407b00:	74656e2e 	.word	0x74656e2e
  407b04:	6b726f77 	.word	0x6b726f77
  407b08:	6174732e 	.word	0x6174732e
  407b0c:	5f737574 	.word	0x5f737574
  407b10:	6f697067 	.word	0x6f697067
  407b14:	0d343120 	.word	0x0d343120
  407b18:	0000000a 	.word	0x0000000a
  407b1c:	65766173 	.word	0x65766173
  407b20:	00000a0d 	.word	0x00000a0d
  407b24:	75746573 	.word	0x75746573
  407b28:	65772070 	.word	0x65772070
  407b2c:	000a0d62 	.word	0x000a0d62
  407b30:	706d7562 	.word	0x706d7562
  407b34:	00000a0d 	.word	0x00000a0d
  407b38:	20706f66 	.word	0x20706f66
  407b3c:	74736574 	.word	0x74736574
  407b40:	7478742e 	.word	0x7478742e
  407b44:	00000a0d 	.word	0x00000a0d
  407b48:	20747366 	.word	0x20747366
  407b4c:	74736574 	.word	0x74736574
  407b50:	7478742e 	.word	0x7478742e
  407b54:	00000a0d 	.word	0x00000a0d
  407b58:	64616572 	.word	0x64616572
  407b5c:	00000020 	.word	0x00000020
  407b60:	72746550 	.word	0x72746550
  407b64:	00007361 	.word	0x00007361

00407b68 <_global_impure_ptr>:
  407b68:	200061c0 00464e49 00666e69 004e414e     .a. INF.inf.NAN.
  407b78:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  407b88:	46454443 00000000 33323130 37363534     CDEF....01234567
  407b98:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407ba8:	0000296c 00000030                       l)..0...

00407bb0 <blanks.7223>:
  407bb0:	20202020 20202020 20202020 20202020                     

00407bc0 <zeroes.7224>:
  407bc0:	30303030 30303030 30303030 30303030     0000000000000000
  407bd0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00407be0 <__mprec_bigtens>:
  407be0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407bf0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407c00:	7f73bf3c 75154fdd                       <.s..O.u

00407c08 <__mprec_tens>:
  407c08:	00000000 3ff00000 00000000 40240000     .......?......$@
  407c18:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407c28:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407c38:	00000000 412e8480 00000000 416312d0     .......A......cA
  407c48:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407c58:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407c68:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407c78:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407c88:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407c98:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407ca8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407cb8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407cc8:	79d99db4 44ea7843                       ...yCx.D

00407cd0 <p05.6055>:
  407cd0:	00000005 00000019 0000007d 00000043     ........}...C...
  407ce0:	49534f50 00000058 0000002e              POSIX.......

00407cec <_ctype_>:
  407cec:	20202000 20202020 28282020 20282828     .         ((((( 
  407cfc:	20202020 20202020 20202020 20202020                     
  407d0c:	10108820 10101010 10101010 10101010      ...............
  407d1c:	04040410 04040404 10040404 10101010     ................
  407d2c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407d3c:	01010101 01010101 01010101 10101010     ................
  407d4c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407d5c:	02020202 02020202 02020202 10101010     ................
  407d6c:	00000020 00000000 00000000 00000000      ...............
	...

00407df0 <_init>:
  407df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407df2:	bf00      	nop
  407df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407df6:	bc08      	pop	{r3}
  407df8:	469e      	mov	lr, r3
  407dfa:	4770      	bx	lr

00407dfc <__init_array_start>:
  407dfc:	004047ed 	.word	0x004047ed

00407e00 <__frame_dummy_init_array_entry>:
  407e00:	004000f1                                ..@.

00407e04 <_fini>:
  407e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407e06:	bf00      	nop
  407e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407e0a:	bc08      	pop	{r3}
  407e0c:	469e      	mov	lr, r3
  407e0e:	4770      	bx	lr

00407e10 <__fini_array_start>:
  407e10:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <buffer_program>:
2000000c:	303a 3032 3030 3030 3034 3430 4230 0d41     :020000040040BA.
2000001c:	3a0a 3031 3030 3030 3030 3030 3533 3030     .:10000000003500
2000002c:	3032 3138 4330 3034 3030 3934 4430 3034     20810C4000490D40
2000003c:	3030 3934 4430 3034 3030 3241 0a0d 303a     00490D4000A2..:0
2000004c:	3030 3030 3030 4631 0d46 000a 0000 0000     0000001FF.......
	...

200061b4 <SystemCoreClock>:
200061b4:	0900 003d                                   ..=.

200061b8 <_impure_ptr>:
200061b8:	61c0 2000 0000 0000                         .a. ....

200061c0 <impure_data>:
200061c0:	0000 0000 64ac 2000 6514 2000 657c 2000     .....d. .e. |e. 
	...
20006268:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20006278:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200065e8 <__atexit_recursive_mutex>:
200065e8:	70f0 2000                                   .p. 

200065ec <__malloc_av_>:
	...
200065f4:	65ec 2000 65ec 2000 65f4 2000 65f4 2000     .e. .e. .e. .e. 
20006604:	65fc 2000 65fc 2000 6604 2000 6604 2000     .e. .e. .f. .f. 
20006614:	660c 2000 660c 2000 6614 2000 6614 2000     .f. .f. .f. .f. 
20006624:	661c 2000 661c 2000 6624 2000 6624 2000     .f. .f. $f. $f. 
20006634:	662c 2000 662c 2000 6634 2000 6634 2000     ,f. ,f. 4f. 4f. 
20006644:	663c 2000 663c 2000 6644 2000 6644 2000     <f. <f. Df. Df. 
20006654:	664c 2000 664c 2000 6654 2000 6654 2000     Lf. Lf. Tf. Tf. 
20006664:	665c 2000 665c 2000 6664 2000 6664 2000     \f. \f. df. df. 
20006674:	666c 2000 666c 2000 6674 2000 6674 2000     lf. lf. tf. tf. 
20006684:	667c 2000 667c 2000 6684 2000 6684 2000     |f. |f. .f. .f. 
20006694:	668c 2000 668c 2000 6694 2000 6694 2000     .f. .f. .f. .f. 
200066a4:	669c 2000 669c 2000 66a4 2000 66a4 2000     .f. .f. .f. .f. 
200066b4:	66ac 2000 66ac 2000 66b4 2000 66b4 2000     .f. .f. .f. .f. 
200066c4:	66bc 2000 66bc 2000 66c4 2000 66c4 2000     .f. .f. .f. .f. 
200066d4:	66cc 2000 66cc 2000 66d4 2000 66d4 2000     .f. .f. .f. .f. 
200066e4:	66dc 2000 66dc 2000 66e4 2000 66e4 2000     .f. .f. .f. .f. 
200066f4:	66ec 2000 66ec 2000 66f4 2000 66f4 2000     .f. .f. .f. .f. 
20006704:	66fc 2000 66fc 2000 6704 2000 6704 2000     .f. .f. .g. .g. 
20006714:	670c 2000 670c 2000 6714 2000 6714 2000     .g. .g. .g. .g. 
20006724:	671c 2000 671c 2000 6724 2000 6724 2000     .g. .g. $g. $g. 
20006734:	672c 2000 672c 2000 6734 2000 6734 2000     ,g. ,g. 4g. 4g. 
20006744:	673c 2000 673c 2000 6744 2000 6744 2000     <g. <g. Dg. Dg. 
20006754:	674c 2000 674c 2000 6754 2000 6754 2000     Lg. Lg. Tg. Tg. 
20006764:	675c 2000 675c 2000 6764 2000 6764 2000     \g. \g. dg. dg. 
20006774:	676c 2000 676c 2000 6774 2000 6774 2000     lg. lg. tg. tg. 
20006784:	677c 2000 677c 2000 6784 2000 6784 2000     |g. |g. .g. .g. 
20006794:	678c 2000 678c 2000 6794 2000 6794 2000     .g. .g. .g. .g. 
200067a4:	679c 2000 679c 2000 67a4 2000 67a4 2000     .g. .g. .g. .g. 
200067b4:	67ac 2000 67ac 2000 67b4 2000 67b4 2000     .g. .g. .g. .g. 
200067c4:	67bc 2000 67bc 2000 67c4 2000 67c4 2000     .g. .g. .g. .g. 
200067d4:	67cc 2000 67cc 2000 67d4 2000 67d4 2000     .g. .g. .g. .g. 
200067e4:	67dc 2000 67dc 2000 67e4 2000 67e4 2000     .g. .g. .g. .g. 
200067f4:	67ec 2000 67ec 2000 67f4 2000 67f4 2000     .g. .g. .g. .g. 
20006804:	67fc 2000 67fc 2000 6804 2000 6804 2000     .g. .g. .h. .h. 
20006814:	680c 2000 680c 2000 6814 2000 6814 2000     .h. .h. .h. .h. 
20006824:	681c 2000 681c 2000 6824 2000 6824 2000     .h. .h. $h. $h. 
20006834:	682c 2000 682c 2000 6834 2000 6834 2000     ,h. ,h. 4h. 4h. 
20006844:	683c 2000 683c 2000 6844 2000 6844 2000     <h. <h. Dh. Dh. 
20006854:	684c 2000 684c 2000 6854 2000 6854 2000     Lh. Lh. Th. Th. 
20006864:	685c 2000 685c 2000 6864 2000 6864 2000     \h. \h. dh. dh. 
20006874:	686c 2000 686c 2000 6874 2000 6874 2000     lh. lh. th. th. 
20006884:	687c 2000 687c 2000 6884 2000 6884 2000     |h. |h. .h. .h. 
20006894:	688c 2000 688c 2000 6894 2000 6894 2000     .h. .h. .h. .h. 
200068a4:	689c 2000 689c 2000 68a4 2000 68a4 2000     .h. .h. .h. .h. 
200068b4:	68ac 2000 68ac 2000 68b4 2000 68b4 2000     .h. .h. .h. .h. 
200068c4:	68bc 2000 68bc 2000 68c4 2000 68c4 2000     .h. .h. .h. .h. 
200068d4:	68cc 2000 68cc 2000 68d4 2000 68d4 2000     .h. .h. .h. .h. 
200068e4:	68dc 2000 68dc 2000 68e4 2000 68e4 2000     .h. .h. .h. .h. 
200068f4:	68ec 2000 68ec 2000 68f4 2000 68f4 2000     .h. .h. .h. .h. 
20006904:	68fc 2000 68fc 2000 6904 2000 6904 2000     .h. .h. .i. .i. 
20006914:	690c 2000 690c 2000 6914 2000 6914 2000     .i. .i. .i. .i. 
20006924:	691c 2000 691c 2000 6924 2000 6924 2000     .i. .i. $i. $i. 
20006934:	692c 2000 692c 2000 6934 2000 6934 2000     ,i. ,i. 4i. 4i. 
20006944:	693c 2000 693c 2000 6944 2000 6944 2000     <i. <i. Di. Di. 
20006954:	694c 2000 694c 2000 6954 2000 6954 2000     Li. Li. Ti. Ti. 
20006964:	695c 2000 695c 2000 6964 2000 6964 2000     \i. \i. di. di. 
20006974:	696c 2000 696c 2000 6974 2000 6974 2000     li. li. ti. ti. 
20006984:	697c 2000 697c 2000 6984 2000 6984 2000     |i. |i. .i. .i. 
20006994:	698c 2000 698c 2000 6994 2000 6994 2000     .i. .i. .i. .i. 
200069a4:	699c 2000 699c 2000 69a4 2000 69a4 2000     .i. .i. .i. .i. 
200069b4:	69ac 2000 69ac 2000 69b4 2000 69b4 2000     .i. .i. .i. .i. 
200069c4:	69bc 2000 69bc 2000 69c4 2000 69c4 2000     .i. .i. .i. .i. 
200069d4:	69cc 2000 69cc 2000 69d4 2000 69d4 2000     .i. .i. .i. .i. 
200069e4:	69dc 2000 69dc 2000 69e4 2000 69e4 2000     .i. .i. .i. .i. 

200069f4 <__malloc_sbrk_base>:
200069f4:	ffff ffff                                   ....

200069f8 <__malloc_trim_threshold>:
200069f8:	0000 0002                                   ....

200069fc <__global_locale>:
200069fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20006a1c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20006a3c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20006a5c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20006a7c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20006a9c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20006abc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20006adc:	7069 0040 6c29 0040 0000 0000 7cec 0040     ip@.)l@......|@.
20006aec:	7ce8 0040 7b8c 0040 7b8c 0040 7b8c 0040     .|@..{@..{@..{@.
20006afc:	7b8c 0040 7b8c 0040 7b8c 0040 7b8c 0040     .{@..{@..{@..{@.
20006b0c:	7b8c 0040 7b8c 0040 ffff ffff ffff ffff     .{@..{@.........
20006b1c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20006b44:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
