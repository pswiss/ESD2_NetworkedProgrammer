
NetworkedProgrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003284  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403284  00403284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  0040328c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000500  2000043c  004036c8  0002043c  2**2
                  ALLOC
  4 .stack        00003004  2000093c  00403bc8  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001089e  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000227d  00000000  00000000  00030d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b4a  00000000  00000000  00032fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009f8  00000000  00000000  00038b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000948  00000000  00000000  0003951c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005680  00000000  00000000  00039e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b716  00000000  00000000  0003f4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004c73f  00000000  00000000  0004abfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002dac  00000000  00000000  0009733c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 39 00 20 a9 1f 40 00 71 20 40 00 71 20 40 00     @9. ..@.q @.q @.
  400010:	71 20 40 00 71 20 40 00 71 20 40 00 00 00 00 00     q @.q @.q @.....
	...
  40002c:	71 20 40 00 71 20 40 00 00 00 00 00 71 20 40 00     q @.q @.....q @.
  40003c:	71 20 40 00 71 20 40 00 71 20 40 00 71 20 40 00     q @.q @.q @.q @.
  40004c:	71 20 40 00 71 20 40 00 71 20 40 00 71 20 40 00     q @.q @.q @.q @.
  40005c:	00 00 00 00 71 20 40 00 71 20 40 00 00 00 00 00     ....q @.q @.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 e1 09 40 00     ..@...@.......@.
  40007c:	71 20 40 00 00 00 00 00 00 00 00 00 71 20 40 00     q @.........q @.
  40008c:	71 20 40 00 71 20 40 00 71 20 40 00 71 20 40 00     q @.q @.q @.q @.
  40009c:	25 07 40 00 71 20 40 00 71 20 40 00 00 00 00 00     %.@.q @.q @.....
	...
  4000b4:	71 20 40 00 71 20 40 00 71 20 40 00 71 20 40 00     q @.q @.q @.q @.
  4000c4:	71 20 40 00 71 20 40 00                             q @.q @.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040328c 	.word	0x0040328c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040328c 	.word	0x0040328c
  40012c:	20000440 	.word	0x20000440
  400130:	0040328c 	.word	0x0040328c
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	0040180f 	.word	0x0040180f
  4001fc:	00401825 	.word	0x00401825
  400200:	20000458 	.word	0x20000458
  400204:	20000914 	.word	0x20000914
  400208:	200004cc 	.word	0x200004cc

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	200004c8 	.word	0x200004c8
  4002a4:	20000458 	.word	0x20000458
  4002a8:	00401771 	.word	0x00401771

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4002dc:	b480      	push	{r7}
  4002de:	b089      	sub	sp, #36	; 0x24
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	60f8      	str	r0, [r7, #12]
  4002e4:	60b9      	str	r1, [r7, #8]
  4002e6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4002e8:	68bb      	ldr	r3, [r7, #8]
  4002ea:	011a      	lsls	r2, r3, #4
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	429a      	cmp	r2, r3
  4002f0:	d802      	bhi.n	4002f8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4002f2:	2310      	movs	r3, #16
  4002f4:	61fb      	str	r3, [r7, #28]
  4002f6:	e001      	b.n	4002fc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4002f8:	2308      	movs	r3, #8
  4002fa:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4002fc:	687b      	ldr	r3, [r7, #4]
  4002fe:	00da      	lsls	r2, r3, #3
  400300:	69fb      	ldr	r3, [r7, #28]
  400302:	68b9      	ldr	r1, [r7, #8]
  400304:	fb01 f303 	mul.w	r3, r1, r3
  400308:	085b      	lsrs	r3, r3, #1
  40030a:	441a      	add	r2, r3
  40030c:	69fb      	ldr	r3, [r7, #28]
  40030e:	68b9      	ldr	r1, [r7, #8]
  400310:	fb01 f303 	mul.w	r3, r1, r3
  400314:	fbb2 f3f3 	udiv	r3, r2, r3
  400318:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40031a:	69bb      	ldr	r3, [r7, #24]
  40031c:	08db      	lsrs	r3, r3, #3
  40031e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400320:	69bb      	ldr	r3, [r7, #24]
  400322:	f003 0307 	and.w	r3, r3, #7
  400326:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400328:	697b      	ldr	r3, [r7, #20]
  40032a:	2b00      	cmp	r3, #0
  40032c:	d003      	beq.n	400336 <usart_set_async_baudrate+0x5a>
  40032e:	697b      	ldr	r3, [r7, #20]
  400330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400334:	d301      	bcc.n	40033a <usart_set_async_baudrate+0x5e>
		return 1;
  400336:	2301      	movs	r3, #1
  400338:	e00f      	b.n	40035a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40033a:	69fb      	ldr	r3, [r7, #28]
  40033c:	2b08      	cmp	r3, #8
  40033e:	d105      	bne.n	40034c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400340:	68fb      	ldr	r3, [r7, #12]
  400342:	685b      	ldr	r3, [r3, #4]
  400344:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400348:	68fb      	ldr	r3, [r7, #12]
  40034a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40034c:	693b      	ldr	r3, [r7, #16]
  40034e:	041a      	lsls	r2, r3, #16
  400350:	697b      	ldr	r3, [r7, #20]
  400352:	431a      	orrs	r2, r3
  400354:	68fb      	ldr	r3, [r7, #12]
  400356:	621a      	str	r2, [r3, #32]

	return 0;
  400358:	2300      	movs	r3, #0
}
  40035a:	4618      	mov	r0, r3
  40035c:	3724      	adds	r7, #36	; 0x24
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400364:	b580      	push	{r7, lr}
  400366:	b082      	sub	sp, #8
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40036c:	6878      	ldr	r0, [r7, #4]
  40036e:	4b0f      	ldr	r3, [pc, #60]	; (4003ac <usart_reset+0x48>)
  400370:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	2200      	movs	r2, #0
  400376:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	2200      	movs	r2, #0
  40037c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	2200      	movs	r2, #0
  400382:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400384:	6878      	ldr	r0, [r7, #4]
  400386:	4b0a      	ldr	r3, [pc, #40]	; (4003b0 <usart_reset+0x4c>)
  400388:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40038a:	6878      	ldr	r0, [r7, #4]
  40038c:	4b09      	ldr	r3, [pc, #36]	; (4003b4 <usart_reset+0x50>)
  40038e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400390:	6878      	ldr	r0, [r7, #4]
  400392:	4b09      	ldr	r3, [pc, #36]	; (4003b8 <usart_reset+0x54>)
  400394:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400396:	6878      	ldr	r0, [r7, #4]
  400398:	4b08      	ldr	r3, [pc, #32]	; (4003bc <usart_reset+0x58>)
  40039a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b08      	ldr	r3, [pc, #32]	; (4003c0 <usart_reset+0x5c>)
  4003a0:	4798      	blx	r3
#endif
}
  4003a2:	bf00      	nop
  4003a4:	3708      	adds	r7, #8
  4003a6:	46bd      	mov	sp, r7
  4003a8:	bd80      	pop	{r7, pc}
  4003aa:	bf00      	nop
  4003ac:	00400615 	.word	0x00400615
  4003b0:	004004a1 	.word	0x004004a1
  4003b4:	004004d1 	.word	0x004004d1
  4003b8:	00400533 	.word	0x00400533
  4003bc:	00400567 	.word	0x00400567
  4003c0:	0040054d 	.word	0x0040054d

004003c4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4003c4:	b580      	push	{r7, lr}
  4003c6:	b084      	sub	sp, #16
  4003c8:	af00      	add	r7, sp, #0
  4003ca:	60f8      	str	r0, [r7, #12]
  4003cc:	60b9      	str	r1, [r7, #8]
  4003ce:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4003d0:	68f8      	ldr	r0, [r7, #12]
  4003d2:	4b1a      	ldr	r3, [pc, #104]	; (40043c <usart_init_rs232+0x78>)
  4003d4:	4798      	blx	r3

	ul_reg_val = 0;
  4003d6:	4b1a      	ldr	r3, [pc, #104]	; (400440 <usart_init_rs232+0x7c>)
  4003d8:	2200      	movs	r2, #0
  4003da:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4003dc:	68bb      	ldr	r3, [r7, #8]
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d009      	beq.n	4003f6 <usart_init_rs232+0x32>
  4003e2:	68bb      	ldr	r3, [r7, #8]
  4003e4:	681b      	ldr	r3, [r3, #0]
  4003e6:	687a      	ldr	r2, [r7, #4]
  4003e8:	4619      	mov	r1, r3
  4003ea:	68f8      	ldr	r0, [r7, #12]
  4003ec:	4b15      	ldr	r3, [pc, #84]	; (400444 <usart_init_rs232+0x80>)
  4003ee:	4798      	blx	r3
  4003f0:	4603      	mov	r3, r0
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d001      	beq.n	4003fa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4003f6:	2301      	movs	r3, #1
  4003f8:	e01b      	b.n	400432 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4003fa:	68bb      	ldr	r3, [r7, #8]
  4003fc:	685a      	ldr	r2, [r3, #4]
  4003fe:	68bb      	ldr	r3, [r7, #8]
  400400:	689b      	ldr	r3, [r3, #8]
  400402:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400404:	68bb      	ldr	r3, [r7, #8]
  400406:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400408:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40040a:	68bb      	ldr	r3, [r7, #8]
  40040c:	68db      	ldr	r3, [r3, #12]
  40040e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400410:	4b0b      	ldr	r3, [pc, #44]	; (400440 <usart_init_rs232+0x7c>)
  400412:	681b      	ldr	r3, [r3, #0]
  400414:	4313      	orrs	r3, r2
  400416:	4a0a      	ldr	r2, [pc, #40]	; (400440 <usart_init_rs232+0x7c>)
  400418:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40041a:	4b09      	ldr	r3, [pc, #36]	; (400440 <usart_init_rs232+0x7c>)
  40041c:	681b      	ldr	r3, [r3, #0]
  40041e:	4a08      	ldr	r2, [pc, #32]	; (400440 <usart_init_rs232+0x7c>)
  400420:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400422:	68fb      	ldr	r3, [r7, #12]
  400424:	685a      	ldr	r2, [r3, #4]
  400426:	4b06      	ldr	r3, [pc, #24]	; (400440 <usart_init_rs232+0x7c>)
  400428:	681b      	ldr	r3, [r3, #0]
  40042a:	431a      	orrs	r2, r3
  40042c:	68fb      	ldr	r3, [r7, #12]
  40042e:	605a      	str	r2, [r3, #4]

	return 0;
  400430:	2300      	movs	r3, #0
}
  400432:	4618      	mov	r0, r3
  400434:	3710      	adds	r7, #16
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	00400365 	.word	0x00400365
  400440:	200004d0 	.word	0x200004d0
  400444:	004002dd 	.word	0x004002dd

00400448 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400448:	b580      	push	{r7, lr}
  40044a:	b084      	sub	sp, #16
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400454:	687a      	ldr	r2, [r7, #4]
  400456:	68b9      	ldr	r1, [r7, #8]
  400458:	68f8      	ldr	r0, [r7, #12]
  40045a:	4b0a      	ldr	r3, [pc, #40]	; (400484 <usart_init_hw_handshaking+0x3c>)
  40045c:	4798      	blx	r3
  40045e:	4603      	mov	r3, r0
  400460:	2b00      	cmp	r3, #0
  400462:	d001      	beq.n	400468 <usart_init_hw_handshaking+0x20>
		return 1;
  400464:	2301      	movs	r3, #1
  400466:	e008      	b.n	40047a <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400468:	68fb      	ldr	r3, [r7, #12]
  40046a:	685b      	ldr	r3, [r3, #4]
  40046c:	f023 030f 	bic.w	r3, r3, #15
  400470:	f043 0202 	orr.w	r2, r3, #2
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400478:	2300      	movs	r3, #0
}
  40047a:	4618      	mov	r0, r3
  40047c:	3710      	adds	r7, #16
  40047e:	46bd      	mov	sp, r7
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	004003c5 	.word	0x004003c5

00400488 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400488:	b480      	push	{r7}
  40048a:	b083      	sub	sp, #12
  40048c:	af00      	add	r7, sp, #0
  40048e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2240      	movs	r2, #64	; 0x40
  400494:	601a      	str	r2, [r3, #0]
}
  400496:	bf00      	nop
  400498:	370c      	adds	r7, #12
  40049a:	46bd      	mov	sp, r7
  40049c:	bc80      	pop	{r7}
  40049e:	4770      	bx	lr

004004a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b083      	sub	sp, #12
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4004a8:	687b      	ldr	r3, [r7, #4]
  4004aa:	2288      	movs	r2, #136	; 0x88
  4004ac:	601a      	str	r2, [r3, #0]
}
  4004ae:	bf00      	nop
  4004b0:	370c      	adds	r7, #12
  4004b2:	46bd      	mov	sp, r7
  4004b4:	bc80      	pop	{r7}
  4004b6:	4770      	bx	lr

004004b8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4004b8:	b480      	push	{r7}
  4004ba:	b083      	sub	sp, #12
  4004bc:	af00      	add	r7, sp, #0
  4004be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4004c0:	687b      	ldr	r3, [r7, #4]
  4004c2:	2210      	movs	r2, #16
  4004c4:	601a      	str	r2, [r3, #0]
}
  4004c6:	bf00      	nop
  4004c8:	370c      	adds	r7, #12
  4004ca:	46bd      	mov	sp, r7
  4004cc:	bc80      	pop	{r7}
  4004ce:	4770      	bx	lr

004004d0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4004d0:	b480      	push	{r7}
  4004d2:	b083      	sub	sp, #12
  4004d4:	af00      	add	r7, sp, #0
  4004d6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4004d8:	687b      	ldr	r3, [r7, #4]
  4004da:	2224      	movs	r2, #36	; 0x24
  4004dc:	601a      	str	r2, [r3, #0]
}
  4004de:	bf00      	nop
  4004e0:	370c      	adds	r7, #12
  4004e2:	46bd      	mov	sp, r7
  4004e4:	bc80      	pop	{r7}
  4004e6:	4770      	bx	lr

004004e8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4004e8:	b480      	push	{r7}
  4004ea:	b083      	sub	sp, #12
  4004ec:	af00      	add	r7, sp, #0
  4004ee:	6078      	str	r0, [r7, #4]
  4004f0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4004f2:	687b      	ldr	r3, [r7, #4]
  4004f4:	683a      	ldr	r2, [r7, #0]
  4004f6:	609a      	str	r2, [r3, #8]
}
  4004f8:	bf00      	nop
  4004fa:	370c      	adds	r7, #12
  4004fc:	46bd      	mov	sp, r7
  4004fe:	bc80      	pop	{r7}
  400500:	4770      	bx	lr

00400502 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400502:	b480      	push	{r7}
  400504:	b083      	sub	sp, #12
  400506:	af00      	add	r7, sp, #0
  400508:	6078      	str	r0, [r7, #4]
  40050a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40050c:	687b      	ldr	r3, [r7, #4]
  40050e:	683a      	ldr	r2, [r7, #0]
  400510:	60da      	str	r2, [r3, #12]
}
  400512:	bf00      	nop
  400514:	370c      	adds	r7, #12
  400516:	46bd      	mov	sp, r7
  400518:	bc80      	pop	{r7}
  40051a:	4770      	bx	lr

0040051c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40051c:	b480      	push	{r7}
  40051e:	b083      	sub	sp, #12
  400520:	af00      	add	r7, sp, #0
  400522:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	695b      	ldr	r3, [r3, #20]
}
  400528:	4618      	mov	r0, r3
  40052a:	370c      	adds	r7, #12
  40052c:	46bd      	mov	sp, r7
  40052e:	bc80      	pop	{r7}
  400530:	4770      	bx	lr

00400532 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400532:	b480      	push	{r7}
  400534:	b083      	sub	sp, #12
  400536:	af00      	add	r7, sp, #0
  400538:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40053a:	687b      	ldr	r3, [r7, #4]
  40053c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400540:	601a      	str	r2, [r3, #0]
}
  400542:	bf00      	nop
  400544:	370c      	adds	r7, #12
  400546:	46bd      	mov	sp, r7
  400548:	bc80      	pop	{r7}
  40054a:	4770      	bx	lr

0040054c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40054c:	b480      	push	{r7}
  40054e:	b083      	sub	sp, #12
  400550:	af00      	add	r7, sp, #0
  400552:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40055a:	601a      	str	r2, [r3, #0]
}
  40055c:	bf00      	nop
  40055e:	370c      	adds	r7, #12
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr

00400566 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400566:	b480      	push	{r7}
  400568:	b083      	sub	sp, #12
  40056a:	af00      	add	r7, sp, #0
  40056c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40056e:	687b      	ldr	r3, [r7, #4]
  400570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400574:	601a      	str	r2, [r3, #0]
}
  400576:	bf00      	nop
  400578:	370c      	adds	r7, #12
  40057a:	46bd      	mov	sp, r7
  40057c:	bc80      	pop	{r7}
  40057e:	4770      	bx	lr

00400580 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	6078      	str	r0, [r7, #4]
  400588:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40058a:	bf00      	nop
  40058c:	687b      	ldr	r3, [r7, #4]
  40058e:	695b      	ldr	r3, [r3, #20]
  400590:	f003 0302 	and.w	r3, r3, #2
  400594:	2b00      	cmp	r3, #0
  400596:	d0f9      	beq.n	40058c <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400598:	683b      	ldr	r3, [r7, #0]
  40059a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40059e:	687b      	ldr	r3, [r7, #4]
  4005a0:	61da      	str	r2, [r3, #28]

	return 0;
  4005a2:	2300      	movs	r3, #0
}
  4005a4:	4618      	mov	r0, r3
  4005a6:	370c      	adds	r7, #12
  4005a8:	46bd      	mov	sp, r7
  4005aa:	bc80      	pop	{r7}
  4005ac:	4770      	bx	lr
	...

004005b0 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  4005b0:	b580      	push	{r7, lr}
  4005b2:	b082      	sub	sp, #8
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	6078      	str	r0, [r7, #4]
  4005b8:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4005ba:	e007      	b.n	4005cc <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4005bc:	683b      	ldr	r3, [r7, #0]
  4005be:	1c5a      	adds	r2, r3, #1
  4005c0:	603a      	str	r2, [r7, #0]
  4005c2:	781b      	ldrb	r3, [r3, #0]
  4005c4:	4619      	mov	r1, r3
  4005c6:	6878      	ldr	r0, [r7, #4]
  4005c8:	4b04      	ldr	r3, [pc, #16]	; (4005dc <usart_write_line+0x2c>)
  4005ca:	4798      	blx	r3
	while (*string != '\0') {
  4005cc:	683b      	ldr	r3, [r7, #0]
  4005ce:	781b      	ldrb	r3, [r3, #0]
  4005d0:	2b00      	cmp	r3, #0
  4005d2:	d1f3      	bne.n	4005bc <usart_write_line+0xc>
	}
}
  4005d4:	bf00      	nop
  4005d6:	3708      	adds	r7, #8
  4005d8:	46bd      	mov	sp, r7
  4005da:	bd80      	pop	{r7, pc}
  4005dc:	00400581 	.word	0x00400581

004005e0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4005e0:	b480      	push	{r7}
  4005e2:	b083      	sub	sp, #12
  4005e4:	af00      	add	r7, sp, #0
  4005e6:	6078      	str	r0, [r7, #4]
  4005e8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4005ea:	687b      	ldr	r3, [r7, #4]
  4005ec:	695b      	ldr	r3, [r3, #20]
  4005ee:	f003 0301 	and.w	r3, r3, #1
  4005f2:	2b00      	cmp	r3, #0
  4005f4:	d101      	bne.n	4005fa <usart_read+0x1a>
		return 1;
  4005f6:	2301      	movs	r3, #1
  4005f8:	e006      	b.n	400608 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4005fa:	687b      	ldr	r3, [r7, #4]
  4005fc:	699b      	ldr	r3, [r3, #24]
  4005fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400602:	683b      	ldr	r3, [r7, #0]
  400604:	601a      	str	r2, [r3, #0]

	return 0;
  400606:	2300      	movs	r3, #0
}
  400608:	4618      	mov	r0, r3
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	bc80      	pop	{r7}
  400610:	4770      	bx	lr
	...

00400614 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400614:	b480      	push	{r7}
  400616:	b083      	sub	sp, #12
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	4a04      	ldr	r2, [pc, #16]	; (400630 <usart_disable_writeprotect+0x1c>)
  400620:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400624:	bf00      	nop
  400626:	370c      	adds	r7, #12
  400628:	46bd      	mov	sp, r7
  40062a:	bc80      	pop	{r7}
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	55534100 	.word	0x55534100

00400634 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400634:	b480      	push	{r7}
  400636:	b083      	sub	sp, #12
  400638:	af00      	add	r7, sp, #0
  40063a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400642:	605a      	str	r2, [r3, #4]

}
  400644:	bf00      	nop
  400646:	370c      	adds	r7, #12
  400648:	46bd      	mov	sp, r7
  40064a:	bc80      	pop	{r7}
  40064c:	4770      	bx	lr
	...

00400650 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400650:	b480      	push	{r7}
  400652:	b083      	sub	sp, #12
  400654:	af00      	add	r7, sp, #0
  400656:	4603      	mov	r3, r0
  400658:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40065a:	4908      	ldr	r1, [pc, #32]	; (40067c <NVIC_EnableIRQ+0x2c>)
  40065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400660:	095b      	lsrs	r3, r3, #5
  400662:	79fa      	ldrb	r2, [r7, #7]
  400664:	f002 021f 	and.w	r2, r2, #31
  400668:	2001      	movs	r0, #1
  40066a:	fa00 f202 	lsl.w	r2, r0, r2
  40066e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400672:	bf00      	nop
  400674:	370c      	adds	r7, #12
  400676:	46bd      	mov	sp, r7
  400678:	bc80      	pop	{r7}
  40067a:	4770      	bx	lr
  40067c:	e000e100 	.word	0xe000e100

00400680 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400680:	b480      	push	{r7}
  400682:	b083      	sub	sp, #12
  400684:	af00      	add	r7, sp, #0
  400686:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400688:	687b      	ldr	r3, [r7, #4]
  40068a:	2b07      	cmp	r3, #7
  40068c:	d825      	bhi.n	4006da <osc_get_rate+0x5a>
  40068e:	a201      	add	r2, pc, #4	; (adr r2, 400694 <osc_get_rate+0x14>)
  400690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400694:	004006b5 	.word	0x004006b5
  400698:	004006bb 	.word	0x004006bb
  40069c:	004006c1 	.word	0x004006c1
  4006a0:	004006c7 	.word	0x004006c7
  4006a4:	004006cb 	.word	0x004006cb
  4006a8:	004006cf 	.word	0x004006cf
  4006ac:	004006d3 	.word	0x004006d3
  4006b0:	004006d7 	.word	0x004006d7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4006b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4006b8:	e010      	b.n	4006dc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4006ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006be:	e00d      	b.n	4006dc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4006c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006c4:	e00a      	b.n	4006dc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4006c6:	4b08      	ldr	r3, [pc, #32]	; (4006e8 <osc_get_rate+0x68>)
  4006c8:	e008      	b.n	4006dc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4006ca:	4b08      	ldr	r3, [pc, #32]	; (4006ec <osc_get_rate+0x6c>)
  4006cc:	e006      	b.n	4006dc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4006ce:	4b08      	ldr	r3, [pc, #32]	; (4006f0 <osc_get_rate+0x70>)
  4006d0:	e004      	b.n	4006dc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006d2:	4b07      	ldr	r3, [pc, #28]	; (4006f0 <osc_get_rate+0x70>)
  4006d4:	e002      	b.n	4006dc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006d6:	4b06      	ldr	r3, [pc, #24]	; (4006f0 <osc_get_rate+0x70>)
  4006d8:	e000      	b.n	4006dc <osc_get_rate+0x5c>
	}

	return 0;
  4006da:	2300      	movs	r3, #0
}
  4006dc:	4618      	mov	r0, r3
  4006de:	370c      	adds	r7, #12
  4006e0:	46bd      	mov	sp, r7
  4006e2:	bc80      	pop	{r7}
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	003d0900 	.word	0x003d0900
  4006ec:	007a1200 	.word	0x007a1200
  4006f0:	00b71b00 	.word	0x00b71b00

004006f4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006f4:	b580      	push	{r7, lr}
  4006f6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006f8:	2006      	movs	r0, #6
  4006fa:	4b04      	ldr	r3, [pc, #16]	; (40070c <sysclk_get_main_hz+0x18>)
  4006fc:	4798      	blx	r3
  4006fe:	4602      	mov	r2, r0
  400700:	4613      	mov	r3, r2
  400702:	009b      	lsls	r3, r3, #2
  400704:	4413      	add	r3, r2
  400706:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400708:	4618      	mov	r0, r3
  40070a:	bd80      	pop	{r7, pc}
  40070c:	00400681 	.word	0x00400681

00400710 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400710:	b580      	push	{r7, lr}
  400712:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400714:	4b02      	ldr	r3, [pc, #8]	; (400720 <sysclk_get_cpu_hz+0x10>)
  400716:	4798      	blx	r3
  400718:	4603      	mov	r3, r0
  40071a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40071c:	4618      	mov	r0, r3
  40071e:	bd80      	pop	{r7, pc}
  400720:	004006f5 	.word	0x004006f5

00400724 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400724:	b580      	push	{r7, lr}
  400726:	b082      	sub	sp, #8
  400728:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  40072a:	2100      	movs	r1, #0
  40072c:	4809      	ldr	r0, [pc, #36]	; (400754 <TC0_Handler+0x30>)
  40072e:	4b0a      	ldr	r3, [pc, #40]	; (400758 <TC0_Handler+0x34>)
  400730:	4798      	blx	r3
  400732:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	f003 0310 	and.w	r3, r3, #16
  40073a:	2b00      	cmp	r3, #0
  40073c:	d006      	beq.n	40074c <TC0_Handler+0x28>
		counts++;
  40073e:	4b07      	ldr	r3, [pc, #28]	; (40075c <TC0_Handler+0x38>)
  400740:	781b      	ldrb	r3, [r3, #0]
  400742:	b2db      	uxtb	r3, r3
  400744:	3301      	adds	r3, #1
  400746:	b2da      	uxtb	r2, r3
  400748:	4b04      	ldr	r3, [pc, #16]	; (40075c <TC0_Handler+0x38>)
  40074a:	701a      	strb	r2, [r3, #0]
	}
}
  40074c:	bf00      	nop
  40074e:	3708      	adds	r7, #8
  400750:	46bd      	mov	sp, r7
  400752:	bd80      	pop	{r7, pc}
  400754:	40010000 	.word	0x40010000
  400758:	00401d7f 	.word	0x00401d7f
  40075c:	200004e0 	.word	0x200004e0

00400760 <configure_tc>:

void configure_tc(void)
{
  400760:	b590      	push	{r4, r7, lr}
  400762:	b087      	sub	sp, #28
  400764:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  400766:	4b18      	ldr	r3, [pc, #96]	; (4007c8 <configure_tc+0x68>)
  400768:	4798      	blx	r3
  40076a:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  40076c:	2017      	movs	r0, #23
  40076e:	4b17      	ldr	r3, [pc, #92]	; (4007cc <configure_tc+0x6c>)
  400770:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400772:	1d39      	adds	r1, r7, #4
  400774:	f107 0208 	add.w	r2, r7, #8
  400778:	68fb      	ldr	r3, [r7, #12]
  40077a:	9300      	str	r3, [sp, #0]
  40077c:	460b      	mov	r3, r1
  40077e:	68f9      	ldr	r1, [r7, #12]
  400780:	2001      	movs	r0, #1
  400782:	4c13      	ldr	r4, [pc, #76]	; (4007d0 <configure_tc+0x70>)
  400784:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400786:	687b      	ldr	r3, [r7, #4]
  400788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40078c:	461a      	mov	r2, r3
  40078e:	2100      	movs	r1, #0
  400790:	4810      	ldr	r0, [pc, #64]	; (4007d4 <configure_tc+0x74>)
  400792:	4b11      	ldr	r3, [pc, #68]	; (4007d8 <configure_tc+0x78>)
  400794:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400796:	68bb      	ldr	r3, [r7, #8]
  400798:	68fa      	ldr	r2, [r7, #12]
  40079a:	fbb2 f3f3 	udiv	r3, r2, r3
  40079e:	461a      	mov	r2, r3
  4007a0:	2100      	movs	r1, #0
  4007a2:	480c      	ldr	r0, [pc, #48]	; (4007d4 <configure_tc+0x74>)
  4007a4:	4b0d      	ldr	r3, [pc, #52]	; (4007dc <configure_tc+0x7c>)
  4007a6:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  4007a8:	2017      	movs	r0, #23
  4007aa:	4b0d      	ldr	r3, [pc, #52]	; (4007e0 <configure_tc+0x80>)
  4007ac:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4007ae:	2210      	movs	r2, #16
  4007b0:	2100      	movs	r1, #0
  4007b2:	4808      	ldr	r0, [pc, #32]	; (4007d4 <configure_tc+0x74>)
  4007b4:	4b0b      	ldr	r3, [pc, #44]	; (4007e4 <configure_tc+0x84>)
  4007b6:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  4007b8:	2100      	movs	r1, #0
  4007ba:	4806      	ldr	r0, [pc, #24]	; (4007d4 <configure_tc+0x74>)
  4007bc:	4b0a      	ldr	r3, [pc, #40]	; (4007e8 <configure_tc+0x88>)
  4007be:	4798      	blx	r3
  4007c0:	bf00      	nop
  4007c2:	3714      	adds	r7, #20
  4007c4:	46bd      	mov	sp, r7
  4007c6:	bd90      	pop	{r4, r7, pc}
  4007c8:	00400711 	.word	0x00400711
  4007cc:	00401c5d 	.word	0x00401c5d
  4007d0:	00401da1 	.word	0x00401da1
  4007d4:	40010000 	.word	0x40010000
  4007d8:	00401cdd 	.word	0x00401cdd
  4007dc:	00401d35 	.word	0x00401d35
  4007e0:	00400651 	.word	0x00400651
  4007e4:	00401d59 	.word	0x00401d59
  4007e8:	00401d15 	.word	0x00401d15

004007ec <NVIC_EnableIRQ>:
{
  4007ec:	b480      	push	{r7}
  4007ee:	b083      	sub	sp, #12
  4007f0:	af00      	add	r7, sp, #0
  4007f2:	4603      	mov	r3, r0
  4007f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4007f6:	4908      	ldr	r1, [pc, #32]	; (400818 <NVIC_EnableIRQ+0x2c>)
  4007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4007fc:	095b      	lsrs	r3, r3, #5
  4007fe:	79fa      	ldrb	r2, [r7, #7]
  400800:	f002 021f 	and.w	r2, r2, #31
  400804:	2001      	movs	r0, #1
  400806:	fa00 f202 	lsl.w	r2, r0, r2
  40080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40080e:	bf00      	nop
  400810:	370c      	adds	r7, #12
  400812:	46bd      	mov	sp, r7
  400814:	bc80      	pop	{r7}
  400816:	4770      	bx	lr
  400818:	e000e100 	.word	0xe000e100

0040081c <osc_get_rate>:
{
  40081c:	b480      	push	{r7}
  40081e:	b083      	sub	sp, #12
  400820:	af00      	add	r7, sp, #0
  400822:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400824:	687b      	ldr	r3, [r7, #4]
  400826:	2b07      	cmp	r3, #7
  400828:	d825      	bhi.n	400876 <osc_get_rate+0x5a>
  40082a:	a201      	add	r2, pc, #4	; (adr r2, 400830 <osc_get_rate+0x14>)
  40082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400830:	00400851 	.word	0x00400851
  400834:	00400857 	.word	0x00400857
  400838:	0040085d 	.word	0x0040085d
  40083c:	00400863 	.word	0x00400863
  400840:	00400867 	.word	0x00400867
  400844:	0040086b 	.word	0x0040086b
  400848:	0040086f 	.word	0x0040086f
  40084c:	00400873 	.word	0x00400873
		return OSC_SLCK_32K_RC_HZ;
  400850:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400854:	e010      	b.n	400878 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40085a:	e00d      	b.n	400878 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40085c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400860:	e00a      	b.n	400878 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400862:	4b08      	ldr	r3, [pc, #32]	; (400884 <osc_get_rate+0x68>)
  400864:	e008      	b.n	400878 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400866:	4b08      	ldr	r3, [pc, #32]	; (400888 <osc_get_rate+0x6c>)
  400868:	e006      	b.n	400878 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40086a:	4b08      	ldr	r3, [pc, #32]	; (40088c <osc_get_rate+0x70>)
  40086c:	e004      	b.n	400878 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40086e:	4b07      	ldr	r3, [pc, #28]	; (40088c <osc_get_rate+0x70>)
  400870:	e002      	b.n	400878 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400872:	4b06      	ldr	r3, [pc, #24]	; (40088c <osc_get_rate+0x70>)
  400874:	e000      	b.n	400878 <osc_get_rate+0x5c>
	return 0;
  400876:	2300      	movs	r3, #0
}
  400878:	4618      	mov	r0, r3
  40087a:	370c      	adds	r7, #12
  40087c:	46bd      	mov	sp, r7
  40087e:	bc80      	pop	{r7}
  400880:	4770      	bx	lr
  400882:	bf00      	nop
  400884:	003d0900 	.word	0x003d0900
  400888:	007a1200 	.word	0x007a1200
  40088c:	00b71b00 	.word	0x00b71b00

00400890 <sysclk_get_main_hz>:
{
  400890:	b580      	push	{r7, lr}
  400892:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400894:	2006      	movs	r0, #6
  400896:	4b04      	ldr	r3, [pc, #16]	; (4008a8 <sysclk_get_main_hz+0x18>)
  400898:	4798      	blx	r3
  40089a:	4602      	mov	r2, r0
  40089c:	4613      	mov	r3, r2
  40089e:	009b      	lsls	r3, r3, #2
  4008a0:	4413      	add	r3, r2
  4008a2:	009b      	lsls	r3, r3, #2
}
  4008a4:	4618      	mov	r0, r3
  4008a6:	bd80      	pop	{r7, pc}
  4008a8:	0040081d 	.word	0x0040081d

004008ac <sysclk_get_cpu_hz>:
{
  4008ac:	b580      	push	{r7, lr}
  4008ae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4008b0:	4b02      	ldr	r3, [pc, #8]	; (4008bc <sysclk_get_cpu_hz+0x10>)
  4008b2:	4798      	blx	r3
  4008b4:	4603      	mov	r3, r0
  4008b6:	085b      	lsrs	r3, r3, #1
}
  4008b8:	4618      	mov	r0, r3
  4008ba:	bd80      	pop	{r7, pc}
  4008bc:	00400891 	.word	0x00400891

004008c0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4008c0:	b580      	push	{r7, lr}
  4008c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4008c4:	4b02      	ldr	r3, [pc, #8]	; (4008d0 <sysclk_get_peripheral_hz+0x10>)
  4008c6:	4798      	blx	r3
  4008c8:	4603      	mov	r3, r0
  4008ca:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4008cc:	4618      	mov	r0, r3
  4008ce:	bd80      	pop	{r7, pc}
  4008d0:	00400891 	.word	0x00400891

004008d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4008d4:	b580      	push	{r7, lr}
  4008d6:	b082      	sub	sp, #8
  4008d8:	af00      	add	r7, sp, #0
  4008da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4008dc:	6878      	ldr	r0, [r7, #4]
  4008de:	4b03      	ldr	r3, [pc, #12]	; (4008ec <sysclk_enable_peripheral_clock+0x18>)
  4008e0:	4798      	blx	r3
}
  4008e2:	bf00      	nop
  4008e4:	3708      	adds	r7, #8
  4008e6:	46bd      	mov	sp, r7
  4008e8:	bd80      	pop	{r7, pc}
  4008ea:	bf00      	nop
  4008ec:	00401c5d 	.word	0x00401c5d

004008f0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008f0:	b480      	push	{r7}
  4008f2:	b08d      	sub	sp, #52	; 0x34
  4008f4:	af00      	add	r7, sp, #0
  4008f6:	6078      	str	r0, [r7, #4]
  4008f8:	460b      	mov	r3, r1
  4008fa:	70fb      	strb	r3, [r7, #3]
  4008fc:	687b      	ldr	r3, [r7, #4]
  4008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  400900:	78fb      	ldrb	r3, [r7, #3]
  400902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400908:	627b      	str	r3, [r7, #36]	; 0x24
  40090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40090c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40090e:	6a3b      	ldr	r3, [r7, #32]
  400910:	095b      	lsrs	r3, r3, #5
  400912:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400914:	69fb      	ldr	r3, [r7, #28]
  400916:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40091a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40091e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400920:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400926:	2b01      	cmp	r3, #1
  400928:	d109      	bne.n	40093e <ioport_set_pin_dir+0x4e>
  40092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40092c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40092e:	697b      	ldr	r3, [r7, #20]
  400930:	f003 031f 	and.w	r3, r3, #31
  400934:	2201      	movs	r2, #1
  400936:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400938:	69bb      	ldr	r3, [r7, #24]
  40093a:	611a      	str	r2, [r3, #16]
  40093c:	e00c      	b.n	400958 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40093e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400942:	2b00      	cmp	r3, #0
  400944:	d108      	bne.n	400958 <ioport_set_pin_dir+0x68>
  400946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400948:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40094a:	693b      	ldr	r3, [r7, #16]
  40094c:	f003 031f 	and.w	r3, r3, #31
  400950:	2201      	movs	r2, #1
  400952:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400954:	69bb      	ldr	r3, [r7, #24]
  400956:	615a      	str	r2, [r3, #20]
  400958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40095a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40095c:	68fb      	ldr	r3, [r7, #12]
  40095e:	f003 031f 	and.w	r3, r3, #31
  400962:	2201      	movs	r2, #1
  400964:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400966:	69bb      	ldr	r3, [r7, #24]
  400968:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40096c:	bf00      	nop
  40096e:	3734      	adds	r7, #52	; 0x34
  400970:	46bd      	mov	sp, r7
  400972:	bc80      	pop	{r7}
  400974:	4770      	bx	lr

00400976 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400976:	b480      	push	{r7}
  400978:	b08b      	sub	sp, #44	; 0x2c
  40097a:	af00      	add	r7, sp, #0
  40097c:	6078      	str	r0, [r7, #4]
  40097e:	460b      	mov	r3, r1
  400980:	70fb      	strb	r3, [r7, #3]
  400982:	687b      	ldr	r3, [r7, #4]
  400984:	627b      	str	r3, [r7, #36]	; 0x24
  400986:	78fb      	ldrb	r3, [r7, #3]
  400988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40098e:	61fb      	str	r3, [r7, #28]
  400990:	69fb      	ldr	r3, [r7, #28]
  400992:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400994:	69bb      	ldr	r3, [r7, #24]
  400996:	095b      	lsrs	r3, r3, #5
  400998:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40099a:	697b      	ldr	r3, [r7, #20]
  40099c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4009a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4009a4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4009a6:	613b      	str	r3, [r7, #16]

	if (level) {
  4009a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4009ac:	2b00      	cmp	r3, #0
  4009ae:	d009      	beq.n	4009c4 <ioport_set_pin_level+0x4e>
  4009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009b2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4009b4:	68fb      	ldr	r3, [r7, #12]
  4009b6:	f003 031f 	and.w	r3, r3, #31
  4009ba:	2201      	movs	r2, #1
  4009bc:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009be:	693b      	ldr	r3, [r7, #16]
  4009c0:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4009c2:	e008      	b.n	4009d6 <ioport_set_pin_level+0x60>
  4009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009c6:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4009c8:	68bb      	ldr	r3, [r7, #8]
  4009ca:	f003 031f 	and.w	r3, r3, #31
  4009ce:	2201      	movs	r2, #1
  4009d0:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4009d2:	693b      	ldr	r3, [r7, #16]
  4009d4:	635a      	str	r2, [r3, #52]	; 0x34
  4009d6:	bf00      	nop
  4009d8:	372c      	adds	r7, #44	; 0x2c
  4009da:	46bd      	mov	sp, r7
  4009dc:	bc80      	pop	{r7}
  4009de:	4770      	bx	lr

004009e0 <USART0_Handler>:
/*
Handler for incoming data from the WiFi. Should call
process incoming byte wifi when a new byte arrives
*/
void WIFI_USART_HANDLER(void) 
{
  4009e0:	b580      	push	{r7, lr}
  4009e2:	b082      	sub	sp, #8
  4009e4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  4009e6:	480d      	ldr	r0, [pc, #52]	; (400a1c <USART0_Handler+0x3c>)
  4009e8:	4b0d      	ldr	r3, [pc, #52]	; (400a20 <USART0_Handler+0x40>)
  4009ea:	4798      	blx	r3
  4009ec:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  4009ee:	687b      	ldr	r3, [r7, #4]
  4009f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4009f4:	2b00      	cmp	r3, #0
  4009f6:	d00c      	beq.n	400a12 <USART0_Handler+0x32>
		usart_read(BOARD_USART, &received_byte_wifi);
  4009f8:	490a      	ldr	r1, [pc, #40]	; (400a24 <USART0_Handler+0x44>)
  4009fa:	4808      	ldr	r0, [pc, #32]	; (400a1c <USART0_Handler+0x3c>)
  4009fc:	4b0a      	ldr	r3, [pc, #40]	; (400a28 <USART0_Handler+0x48>)
  4009fe:	4798      	blx	r3
		new_rx_wifi = true;
  400a00:	4b0a      	ldr	r3, [pc, #40]	; (400a2c <USART0_Handler+0x4c>)
  400a02:	2201      	movs	r2, #1
  400a04:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  400a06:	4b07      	ldr	r3, [pc, #28]	; (400a24 <USART0_Handler+0x44>)
  400a08:	681b      	ldr	r3, [r3, #0]
  400a0a:	b2db      	uxtb	r3, r3
  400a0c:	4618      	mov	r0, r3
  400a0e:	4b08      	ldr	r3, [pc, #32]	; (400a30 <USART0_Handler+0x50>)
  400a10:	4798      	blx	r3
	}
}
  400a12:	bf00      	nop
  400a14:	3708      	adds	r7, #8
  400a16:	46bd      	mov	sp, r7
  400a18:	bd80      	pop	{r7, pc}
  400a1a:	bf00      	nop
  400a1c:	40024000 	.word	0x40024000
  400a20:	0040051d 	.word	0x0040051d
  400a24:	200004d4 	.word	0x200004d4
  400a28:	004005e1 	.word	0x004005e1
  400a2c:	200004d8 	.word	0x200004d8
  400a30:	00400a35 	.word	0x00400a35

00400a34 <process_incoming_byte_wifi>:

/*
Stores every incoming byte (in byte) from the AMW136 in a buffer.
*/
void process_incoming_byte_wifi(uint8_t in_byte) 
{
  400a34:	b480      	push	{r7}
  400a36:	b083      	sub	sp, #12
  400a38:	af00      	add	r7, sp, #0
  400a3a:	4603      	mov	r3, r0
  400a3c:	71fb      	strb	r3, [r7, #7]
	buffer_wifi[input_pos_wifi] = in_byte;
  400a3e:	4b07      	ldr	r3, [pc, #28]	; (400a5c <process_incoming_byte_wifi+0x28>)
  400a40:	681b      	ldr	r3, [r3, #0]
  400a42:	4907      	ldr	r1, [pc, #28]	; (400a60 <process_incoming_byte_wifi+0x2c>)
  400a44:	79fa      	ldrb	r2, [r7, #7]
  400a46:	54ca      	strb	r2, [r1, r3]
	input_pos_wifi++;
  400a48:	4b04      	ldr	r3, [pc, #16]	; (400a5c <process_incoming_byte_wifi+0x28>)
  400a4a:	681b      	ldr	r3, [r3, #0]
  400a4c:	3301      	adds	r3, #1
  400a4e:	4a03      	ldr	r2, [pc, #12]	; (400a5c <process_incoming_byte_wifi+0x28>)
  400a50:	6013      	str	r3, [r2, #0]
}
  400a52:	bf00      	nop
  400a54:	370c      	adds	r7, #12
  400a56:	46bd      	mov	sp, r7
  400a58:	bc80      	pop	{r7}
  400a5a:	4770      	bx	lr
  400a5c:	200004dc 	.word	0x200004dc
  400a60:	20000528 	.word	0x20000528

00400a64 <wifi_command_response_handler>:
/*
Handler for command complete rising-edge interrupt from AMW136.
When this is triggered, it is time to process the response of the AMW136.
*/
void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  400a64:	b580      	push	{r7, lr}
  400a66:	b084      	sub	sp, #16
  400a68:	af00      	add	r7, sp, #0
  400a6a:	6078      	str	r0, [r7, #4]
  400a6c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	process_data_wifi();
  400a6e:	4b0c      	ldr	r3, [pc, #48]	; (400aa0 <wifi_command_response_handler+0x3c>)
  400a70:	4798      	blx	r3
	
	// reset the buffer
	input_pos_wifi = 0;
  400a72:	4b0c      	ldr	r3, [pc, #48]	; (400aa4 <wifi_command_response_handler+0x40>)
  400a74:	2200      	movs	r2, #0
  400a76:	601a      	str	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  400a78:	2300      	movs	r3, #0
  400a7a:	60fb      	str	r3, [r7, #12]
  400a7c:	e007      	b.n	400a8e <wifi_command_response_handler+0x2a>
		buffer_wifi[ii] = 0;
  400a7e:	4a0a      	ldr	r2, [pc, #40]	; (400aa8 <wifi_command_response_handler+0x44>)
  400a80:	68fb      	ldr	r3, [r7, #12]
  400a82:	4413      	add	r3, r2
  400a84:	2200      	movs	r2, #0
  400a86:	701a      	strb	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  400a88:	68fb      	ldr	r3, [r7, #12]
  400a8a:	3301      	adds	r3, #1
  400a8c:	60fb      	str	r3, [r7, #12]
  400a8e:	68fb      	ldr	r3, [r7, #12]
  400a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400a94:	d3f3      	bcc.n	400a7e <wifi_command_response_handler+0x1a>
	}
	
}
  400a96:	bf00      	nop
  400a98:	3710      	adds	r7, #16
  400a9a:	46bd      	mov	sp, r7
  400a9c:	bd80      	pop	{r7, pc}
  400a9e:	bf00      	nop
  400aa0:	00400aad 	.word	0x00400aad
  400aa4:	200004dc 	.word	0x200004dc
  400aa8:	20000528 	.word	0x20000528

00400aac <process_data_wifi>:
filled by process incoming byte wifi. This processing should be looking for certain
responses that the AMW136 should give, such as start transfer when it is ready to
receive the image.
*/
void process_data_wifi (void) 
{
  400aac:	b580      	push	{r7, lr}
  400aae:	af00      	add	r7, sp, #0
	strcpy(rawRecievedMessage,buffer_wifi);
  400ab0:	491a      	ldr	r1, [pc, #104]	; (400b1c <process_data_wifi+0x70>)
  400ab2:	481b      	ldr	r0, [pc, #108]	; (400b20 <process_data_wifi+0x74>)
  400ab4:	4b1b      	ldr	r3, [pc, #108]	; (400b24 <process_data_wifi+0x78>)
  400ab6:	4798      	blx	r3
	// Compare the received string with some other string
	/*if(strstr(buffer_wifi, "StringToCompare")){
		// set receivedMessage variable as appropriate
	}*/
	if(strstr(buffer_wifi,msg_START_TRANSFER)){
  400ab8:	491b      	ldr	r1, [pc, #108]	; (400b28 <process_data_wifi+0x7c>)
  400aba:	4818      	ldr	r0, [pc, #96]	; (400b1c <process_data_wifi+0x70>)
  400abc:	4b1b      	ldr	r3, [pc, #108]	; (400b2c <process_data_wifi+0x80>)
  400abe:	4798      	blx	r3
  400ac0:	4603      	mov	r3, r0
  400ac2:	2b00      	cmp	r3, #0
  400ac4:	d003      	beq.n	400ace <process_data_wifi+0x22>
		receivedMessage = START_TRANSFER;
  400ac6:	4b1a      	ldr	r3, [pc, #104]	; (400b30 <process_data_wifi+0x84>)
  400ac8:	2202      	movs	r2, #2
  400aca:	601a      	str	r2, [r3, #0]
					receivedMessage = DEFAULT;
				}
			}
		}
	}
}
  400acc:	e024      	b.n	400b18 <process_data_wifi+0x6c>
    	if(strstr(buffer_wifi,msg_CLIENT_NOT_CONNECTED)){
  400ace:	4919      	ldr	r1, [pc, #100]	; (400b34 <process_data_wifi+0x88>)
  400ad0:	4812      	ldr	r0, [pc, #72]	; (400b1c <process_data_wifi+0x70>)
  400ad2:	4b16      	ldr	r3, [pc, #88]	; (400b2c <process_data_wifi+0x80>)
  400ad4:	4798      	blx	r3
  400ad6:	4603      	mov	r3, r0
  400ad8:	2b00      	cmp	r3, #0
  400ada:	d003      	beq.n	400ae4 <process_data_wifi+0x38>
			receivedMessage = CLIENT_NOT_CONNECTED	;
  400adc:	4b14      	ldr	r3, [pc, #80]	; (400b30 <process_data_wifi+0x84>)
  400ade:	2204      	movs	r2, #4
  400ae0:	601a      	str	r2, [r3, #0]
}
  400ae2:	e019      	b.n	400b18 <process_data_wifi+0x6c>
			if(strstr(buffer_wifi,msg_COMMAND_FAILED)){
  400ae4:	4914      	ldr	r1, [pc, #80]	; (400b38 <process_data_wifi+0x8c>)
  400ae6:	480d      	ldr	r0, [pc, #52]	; (400b1c <process_data_wifi+0x70>)
  400ae8:	4b10      	ldr	r3, [pc, #64]	; (400b2c <process_data_wifi+0x80>)
  400aea:	4798      	blx	r3
  400aec:	4603      	mov	r3, r0
  400aee:	2b00      	cmp	r3, #0
  400af0:	d003      	beq.n	400afa <process_data_wifi+0x4e>
				receivedMessage = COMMAND_FAILED;
  400af2:	4b0f      	ldr	r3, [pc, #60]	; (400b30 <process_data_wifi+0x84>)
  400af4:	2205      	movs	r2, #5
  400af6:	601a      	str	r2, [r3, #0]
}
  400af8:	e00e      	b.n	400b18 <process_data_wifi+0x6c>
				if(strstr(buffer_wifi,msg_RECIEVE_NONE)){
  400afa:	4910      	ldr	r1, [pc, #64]	; (400b3c <process_data_wifi+0x90>)
  400afc:	4807      	ldr	r0, [pc, #28]	; (400b1c <process_data_wifi+0x70>)
  400afe:	4b0b      	ldr	r3, [pc, #44]	; (400b2c <process_data_wifi+0x80>)
  400b00:	4798      	blx	r3
  400b02:	4603      	mov	r3, r0
  400b04:	2b00      	cmp	r3, #0
  400b06:	d003      	beq.n	400b10 <process_data_wifi+0x64>
					receivedMessage = RECIEVE_NONE;
  400b08:	4b09      	ldr	r3, [pc, #36]	; (400b30 <process_data_wifi+0x84>)
  400b0a:	2206      	movs	r2, #6
  400b0c:	601a      	str	r2, [r3, #0]
}
  400b0e:	e003      	b.n	400b18 <process_data_wifi+0x6c>
					receivedMessage = DEFAULT;
  400b10:	4b07      	ldr	r3, [pc, #28]	; (400b30 <process_data_wifi+0x84>)
  400b12:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  400b16:	601a      	str	r2, [r3, #0]
}
  400b18:	bf00      	nop
  400b1a:	bd80      	pop	{r7, pc}
  400b1c:	20000528 	.word	0x20000528
  400b20:	200004ec 	.word	0x200004ec
  400b24:	00402831 	.word	0x00402831
  400b28:	004030bc 	.word	0x004030bc
  400b2c:	00402b9d 	.word	0x00402b9d
  400b30:	200004e4 	.word	0x200004e4
  400b34:	004030cc 	.word	0x004030cc
  400b38:	004030e4 	.word	0x004030e4
  400b3c:	004030f4 	.word	0x004030f4

00400b40 <wifi_web_setup_handler>:
/*
Handler for button to initiate web setup of AMW136. Should set a flag indicating a
request to initiate web setup
*/
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask) 
{
  400b40:	b480      	push	{r7}
  400b42:	b083      	sub	sp, #12
  400b44:	af00      	add	r7, sp, #0
  400b46:	6078      	str	r0, [r7, #4]
  400b48:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  400b4a:	4b04      	ldr	r3, [pc, #16]	; (400b5c <wifi_web_setup_handler+0x1c>)
  400b4c:	2201      	movs	r2, #1
  400b4e:	701a      	strb	r2, [r3, #0]
}
  400b50:	bf00      	nop
  400b52:	370c      	adds	r7, #12
  400b54:	46bd      	mov	sp, r7
  400b56:	bc80      	pop	{r7}
  400b58:	4770      	bx	lr
  400b5a:	bf00      	nop
  400b5c:	200004e1 	.word	0x200004e1

00400b60 <configure_usart_wifi>:

/*
Configuration of USART port used to communicate with the AMW136.
*/
void configure_usart_wifi(void) 
{
  400b60:	b5b0      	push	{r4, r5, r7, lr}
  400b62:	b086      	sub	sp, #24
  400b64:	af00      	add	r7, sp, #0
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  400b66:	4b22      	ldr	r3, [pc, #136]	; (400bf0 <configure_usart_wifi+0x90>)
  400b68:	463c      	mov	r4, r7
  400b6a:	461d      	mov	r5, r3
  400b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400b70:	e895 0003 	ldmia.w	r5, {r0, r1}
  400b74:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  400b78:	4b1e      	ldr	r3, [pc, #120]	; (400bf4 <configure_usart_wifi+0x94>)
  400b7a:	4798      	blx	r3
  400b7c:	4602      	mov	r2, r0
  400b7e:	4b1e      	ldr	r3, [pc, #120]	; (400bf8 <configure_usart_wifi+0x98>)
  400b80:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  400b82:	200e      	movs	r0, #14
  400b84:	4b1d      	ldr	r3, [pc, #116]	; (400bfc <configure_usart_wifi+0x9c>)
  400b86:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  400b88:	4b1b      	ldr	r3, [pc, #108]	; (400bf8 <configure_usart_wifi+0x98>)
  400b8a:	681a      	ldr	r2, [r3, #0]
  400b8c:	463b      	mov	r3, r7
  400b8e:	4619      	mov	r1, r3
  400b90:	481b      	ldr	r0, [pc, #108]	; (400c00 <configure_usart_wifi+0xa0>)
  400b92:	4b1c      	ldr	r3, [pc, #112]	; (400c04 <configure_usart_wifi+0xa4>)
  400b94:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  400b96:	f04f 31ff 	mov.w	r1, #4294967295
  400b9a:	4819      	ldr	r0, [pc, #100]	; (400c00 <configure_usart_wifi+0xa0>)
  400b9c:	4b1a      	ldr	r3, [pc, #104]	; (400c08 <configure_usart_wifi+0xa8>)
  400b9e:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  400ba0:	4817      	ldr	r0, [pc, #92]	; (400c00 <configure_usart_wifi+0xa0>)
  400ba2:	4b1a      	ldr	r3, [pc, #104]	; (400c0c <configure_usart_wifi+0xac>)
  400ba4:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  400ba6:	4816      	ldr	r0, [pc, #88]	; (400c00 <configure_usart_wifi+0xa0>)
  400ba8:	4b19      	ldr	r3, [pc, #100]	; (400c10 <configure_usart_wifi+0xb0>)
  400baa:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  400bac:	2101      	movs	r1, #1
  400bae:	4814      	ldr	r0, [pc, #80]	; (400c00 <configure_usart_wifi+0xa0>)
  400bb0:	4b18      	ldr	r3, [pc, #96]	; (400c14 <configure_usart_wifi+0xb4>)
  400bb2:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  400bb4:	200e      	movs	r0, #14
  400bb6:	4b18      	ldr	r3, [pc, #96]	; (400c18 <configure_usart_wifi+0xb8>)
  400bb8:	4798      	blx	r3

	// Configure the RX / TX pins
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  400bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bbe:	2005      	movs	r0, #5
  400bc0:	4b16      	ldr	r3, [pc, #88]	; (400c1c <configure_usart_wifi+0xbc>)
  400bc2:	4798      	blx	r3
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  400bc4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bc8:	2006      	movs	r0, #6
  400bca:	4b14      	ldr	r3, [pc, #80]	; (400c1c <configure_usart_wifi+0xbc>)
  400bcc:	4798      	blx	r3
	/* Configure USART CTS pin */
	//gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
	ioport_set_pin_dir(PIN_USART0_CTS_IDX,IOPORT_DIR_OUTPUT);
  400bce:	2101      	movs	r1, #1
  400bd0:	2008      	movs	r0, #8
  400bd2:	4b13      	ldr	r3, [pc, #76]	; (400c20 <configure_usart_wifi+0xc0>)
  400bd4:	4798      	blx	r3
	ioport_set_pin_level(PIN_USART0_CTS_IDX,false);
  400bd6:	2100      	movs	r1, #0
  400bd8:	2008      	movs	r0, #8
  400bda:	4b12      	ldr	r3, [pc, #72]	; (400c24 <configure_usart_wifi+0xc4>)
  400bdc:	4798      	blx	r3
	/* Configure USART RTS pin */
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400bde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400be2:	2007      	movs	r0, #7
  400be4:	4b0d      	ldr	r3, [pc, #52]	; (400c1c <configure_usart_wifi+0xbc>)
  400be6:	4798      	blx	r3
}
  400be8:	bf00      	nop
  400bea:	3718      	adds	r7, #24
  400bec:	46bd      	mov	sp, r7
  400bee:	bdb0      	pop	{r4, r5, r7, pc}
  400bf0:	004030fc 	.word	0x004030fc
  400bf4:	004008c1 	.word	0x004008c1
  400bf8:	200004e8 	.word	0x200004e8
  400bfc:	004008d5 	.word	0x004008d5
  400c00:	40024000 	.word	0x40024000
  400c04:	00400449 	.word	0x00400449
  400c08:	00400503 	.word	0x00400503
  400c0c:	00400489 	.word	0x00400489
  400c10:	004004b9 	.word	0x004004b9
  400c14:	004004e9 	.word	0x004004e9
  400c18:	004007ed 	.word	0x004007ed
  400c1c:	0040183d 	.word	0x0040183d
  400c20:	004008f1 	.word	0x004008f1
  400c24:	00400977 	.word	0x00400977

00400c28 <configure_wifi_comm_pin>:

/*
Configuration of command complete rising-edge interrupt.
*/
void configure_wifi_comm_pin(void) 
{
  400c28:	b590      	push	{r4, r7, lr}
  400c2a:	b083      	sub	sp, #12
  400c2c:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	
	pmc_enable_periph_clk(WIFI_COM_COMPLETE_ID);
  400c2e:	200b      	movs	r0, #11
  400c30:	4b0e      	ldr	r3, [pc, #56]	; (400c6c <configure_wifi_comm_pin+0x44>)
  400c32:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK, 10);
  400c34:	220a      	movs	r2, #10
  400c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400c3a:	480d      	ldr	r0, [pc, #52]	; (400c70 <configure_wifi_comm_pin+0x48>)
  400c3c:	4b0d      	ldr	r3, [pc, #52]	; (400c74 <configure_wifi_comm_pin+0x4c>)
  400c3e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h	**/
	pio_handler_set(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_ID, WIFI_COM_COMPLETE_MSK,
  400c40:	4b0d      	ldr	r3, [pc, #52]	; (400c78 <configure_wifi_comm_pin+0x50>)
  400c42:	9300      	str	r3, [sp, #0]
  400c44:	2371      	movs	r3, #113	; 0x71
  400c46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400c4a:	210b      	movs	r1, #11
  400c4c:	4808      	ldr	r0, [pc, #32]	; (400c70 <configure_wifi_comm_pin+0x48>)
  400c4e:	4c0b      	ldr	r4, [pc, #44]	; (400c7c <configure_wifi_comm_pin+0x54>)
  400c50:	47a0      	blx	r4
			WIFI_COM_COMPLETE_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COM_COMPLETE_ID);
  400c52:	200b      	movs	r0, #11
  400c54:	4b0a      	ldr	r3, [pc, #40]	; (400c80 <configure_wifi_comm_pin+0x58>)
  400c56:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK);
  400c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400c5c:	4804      	ldr	r0, [pc, #16]	; (400c70 <configure_wifi_comm_pin+0x48>)
  400c5e:	4b09      	ldr	r3, [pc, #36]	; (400c84 <configure_wifi_comm_pin+0x5c>)
  400c60:	4798      	blx	r3
}
  400c62:	bf00      	nop
  400c64:	3704      	adds	r7, #4
  400c66:	46bd      	mov	sp, r7
  400c68:	bd90      	pop	{r4, r7, pc}
  400c6a:	bf00      	nop
  400c6c:	00401c5d 	.word	0x00401c5d
  400c70:	400e0e00 	.word	0x400e0e00
  400c74:	00401547 	.word	0x00401547
  400c78:	00400a65 	.word	0x00400a65
  400c7c:	0040020d 	.word	0x0040020d
  400c80:	004007ed 	.word	0x004007ed
  400c84:	004017db 	.word	0x004017db

00400c88 <configure_wifi_web_setup_pin>:

/*
Configuration of button interrupt to initiate web setup.
*/
void configure_wifi_web_setup_pin(void) 
{
  400c88:	b590      	push	{r4, r7, lr}
  400c8a:	b083      	sub	sp, #12
  400c8c:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  400c8e:	200b      	movs	r0, #11
  400c90:	4b0c      	ldr	r3, [pc, #48]	; (400cc4 <configure_wifi_web_setup_pin+0x3c>)
  400c92:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  400c94:	220a      	movs	r2, #10
  400c96:	2101      	movs	r1, #1
  400c98:	480b      	ldr	r0, [pc, #44]	; (400cc8 <configure_wifi_web_setup_pin+0x40>)
  400c9a:	4b0c      	ldr	r3, [pc, #48]	; (400ccc <configure_wifi_web_setup_pin+0x44>)
  400c9c:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  400c9e:	4b0c      	ldr	r3, [pc, #48]	; (400cd0 <configure_wifi_web_setup_pin+0x48>)
  400ca0:	9300      	str	r3, [sp, #0]
  400ca2:	2349      	movs	r3, #73	; 0x49
  400ca4:	2201      	movs	r2, #1
  400ca6:	210b      	movs	r1, #11
  400ca8:	4807      	ldr	r0, [pc, #28]	; (400cc8 <configure_wifi_web_setup_pin+0x40>)
  400caa:	4c0a      	ldr	r4, [pc, #40]	; (400cd4 <configure_wifi_web_setup_pin+0x4c>)
  400cac:	47a0      	blx	r4
			PUSH_BUTTON_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);
  400cae:	200b      	movs	r0, #11
  400cb0:	4b09      	ldr	r3, [pc, #36]	; (400cd8 <configure_wifi_web_setup_pin+0x50>)
  400cb2:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  400cb4:	2101      	movs	r1, #1
  400cb6:	4804      	ldr	r0, [pc, #16]	; (400cc8 <configure_wifi_web_setup_pin+0x40>)
  400cb8:	4b08      	ldr	r3, [pc, #32]	; (400cdc <configure_wifi_web_setup_pin+0x54>)
  400cba:	4798      	blx	r3
}
  400cbc:	bf00      	nop
  400cbe:	3704      	adds	r7, #4
  400cc0:	46bd      	mov	sp, r7
  400cc2:	bd90      	pop	{r4, r7, pc}
  400cc4:	00401c5d 	.word	0x00401c5d
  400cc8:	400e0e00 	.word	0x400e0e00
  400ccc:	00401547 	.word	0x00401547
  400cd0:	00400b41 	.word	0x00400b41
  400cd4:	0040020d 	.word	0x0040020d
  400cd8:	004007ed 	.word	0x004007ed
  400cdc:	004017db 	.word	0x004017db

00400ce0 <write_wifi_command>:
Writes a command (comm) to the AMW136, and waits either for an acknowledgment
or a timeout. The timeout can be created by setting the global variable counts
to zero, which will automatically increment every second, and waiting while counts < cnt.
*/
void write_wifi_command(char* comm, uint8_t cnt) 
{
  400ce0:	b580      	push	{r7, lr}
  400ce2:	b084      	sub	sp, #16
  400ce4:	af00      	add	r7, sp, #0
  400ce6:	6078      	str	r0, [r7, #4]
  400ce8:	460b      	mov	r3, r1
  400cea:	70fb      	strb	r3, [r7, #3]
	counts = 0;
  400cec:	4b0e      	ldr	r3, [pc, #56]	; (400d28 <write_wifi_command+0x48>)
  400cee:	2200      	movs	r2, #0
  400cf0:	701a      	strb	r2, [r3, #0]
	// send a message via USART:
	//usart_write_line(BOARD_USART, "string to write\r\n");
	usart_write_line(BOARD_USART, comm);
  400cf2:	6879      	ldr	r1, [r7, #4]
  400cf4:	480d      	ldr	r0, [pc, #52]	; (400d2c <write_wifi_command+0x4c>)
  400cf6:	4b0e      	ldr	r3, [pc, #56]	; (400d30 <write_wifi_command+0x50>)
  400cf8:	4798      	blx	r3
	receivedMessage = NO_MESSAGE;
  400cfa:	4b0e      	ldr	r3, [pc, #56]	; (400d34 <write_wifi_command+0x54>)
  400cfc:	2200      	movs	r2, #0
  400cfe:	601a      	str	r2, [r3, #0]
	// Wait for timeout or received message
	while((counts<cnt)&&(receivedMessage==NO_MESSAGE)){
  400d00:	e004      	b.n	400d0c <write_wifi_command+0x2c>
		// Do nothing
		int dv = 0;
  400d02:	2300      	movs	r3, #0
  400d04:	60fb      	str	r3, [r7, #12]
		dv++;
  400d06:	68fb      	ldr	r3, [r7, #12]
  400d08:	3301      	adds	r3, #1
  400d0a:	60fb      	str	r3, [r7, #12]
	while((counts<cnt)&&(receivedMessage==NO_MESSAGE)){
  400d0c:	4b06      	ldr	r3, [pc, #24]	; (400d28 <write_wifi_command+0x48>)
  400d0e:	781b      	ldrb	r3, [r3, #0]
  400d10:	b2db      	uxtb	r3, r3
  400d12:	78fa      	ldrb	r2, [r7, #3]
  400d14:	429a      	cmp	r2, r3
  400d16:	d903      	bls.n	400d20 <write_wifi_command+0x40>
  400d18:	4b06      	ldr	r3, [pc, #24]	; (400d34 <write_wifi_command+0x54>)
  400d1a:	681b      	ldr	r3, [r3, #0]
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d0f0      	beq.n	400d02 <write_wifi_command+0x22>
	}
}
  400d20:	bf00      	nop
  400d22:	3710      	adds	r7, #16
  400d24:	46bd      	mov	sp, r7
  400d26:	bd80      	pop	{r7, pc}
  400d28:	200004e0 	.word	0x200004e0
  400d2c:	40024000 	.word	0x40024000
  400d30:	004005b1 	.word	0x004005b1
  400d34:	200004e4 	.word	0x200004e4

00400d38 <resetWifi>:


// Simple function to reset the wifi
void resetWifi(void){
  400d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d3c:	b087      	sub	sp, #28
  400d3e:	af00      	add	r7, sp, #0
	// Reset the wifi by pulling the wifi reset pin low, then bringing it back high.
	ioport_set_pin_level(PIN_WIFI_RESET,LOW); //reset WIFI
  400d40:	2100      	movs	r1, #0
  400d42:	2021      	movs	r0, #33	; 0x21
  400d44:	4b43      	ldr	r3, [pc, #268]	; (400e54 <resetWifi+0x11c>)
  400d46:	4798      	blx	r3
	delay_ms(1000);
  400d48:	4b43      	ldr	r3, [pc, #268]	; (400e58 <resetWifi+0x120>)
  400d4a:	4798      	blx	r3
  400d4c:	4603      	mov	r3, r0
  400d4e:	4619      	mov	r1, r3
  400d50:	f04f 0200 	mov.w	r2, #0
  400d54:	460b      	mov	r3, r1
  400d56:	4614      	mov	r4, r2
  400d58:	0166      	lsls	r6, r4, #5
  400d5a:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  400d5e:	015d      	lsls	r5, r3, #5
  400d60:	462b      	mov	r3, r5
  400d62:	4634      	mov	r4, r6
  400d64:	1a5b      	subs	r3, r3, r1
  400d66:	eb64 0402 	sbc.w	r4, r4, r2
  400d6a:	00a0      	lsls	r0, r4, #2
  400d6c:	6178      	str	r0, [r7, #20]
  400d6e:	6978      	ldr	r0, [r7, #20]
  400d70:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  400d74:	6178      	str	r0, [r7, #20]
  400d76:	009b      	lsls	r3, r3, #2
  400d78:	613b      	str	r3, [r7, #16]
  400d7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  400d7e:	185b      	adds	r3, r3, r1
  400d80:	eb44 0402 	adc.w	r4, r4, r2
  400d84:	00e2      	lsls	r2, r4, #3
  400d86:	60fa      	str	r2, [r7, #12]
  400d88:	68fa      	ldr	r2, [r7, #12]
  400d8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  400d8e:	60fa      	str	r2, [r7, #12]
  400d90:	00db      	lsls	r3, r3, #3
  400d92:	60bb      	str	r3, [r7, #8]
  400d94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  400d98:	4619      	mov	r1, r3
  400d9a:	4622      	mov	r2, r4
  400d9c:	f243 63af 	movw	r3, #13999	; 0x36af
  400da0:	f04f 0400 	mov.w	r4, #0
  400da4:	18cd      	adds	r5, r1, r3
  400da6:	eb42 0604 	adc.w	r6, r2, r4
  400daa:	4628      	mov	r0, r5
  400dac:	4631      	mov	r1, r6
  400dae:	4c2b      	ldr	r4, [pc, #172]	; (400e5c <resetWifi+0x124>)
  400db0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400db4:	f04f 0300 	mov.w	r3, #0
  400db8:	47a0      	blx	r4
  400dba:	4603      	mov	r3, r0
  400dbc:	460c      	mov	r4, r1
  400dbe:	4618      	mov	r0, r3
  400dc0:	4b27      	ldr	r3, [pc, #156]	; (400e60 <resetWifi+0x128>)
  400dc2:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,HIGH); //turn Wifi Back on
  400dc4:	2101      	movs	r1, #1
  400dc6:	2021      	movs	r0, #33	; 0x21
  400dc8:	4b22      	ldr	r3, [pc, #136]	; (400e54 <resetWifi+0x11c>)
  400dca:	4798      	blx	r3
	delay_ms(2000); // Account for ~0.7s high during reset
  400dcc:	4b22      	ldr	r3, [pc, #136]	; (400e58 <resetWifi+0x120>)
  400dce:	4798      	blx	r3
  400dd0:	4603      	mov	r3, r0
  400dd2:	4619      	mov	r1, r3
  400dd4:	f04f 0200 	mov.w	r2, #0
  400dd8:	460b      	mov	r3, r1
  400dda:	4614      	mov	r4, r2
  400ddc:	0160      	lsls	r0, r4, #5
  400dde:	6078      	str	r0, [r7, #4]
  400de0:	6878      	ldr	r0, [r7, #4]
  400de2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  400de6:	6078      	str	r0, [r7, #4]
  400de8:	015b      	lsls	r3, r3, #5
  400dea:	603b      	str	r3, [r7, #0]
  400dec:	e9d7 3400 	ldrd	r3, r4, [r7]
  400df0:	1a5b      	subs	r3, r3, r1
  400df2:	eb64 0402 	sbc.w	r4, r4, r2
  400df6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  400dfa:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  400dfe:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  400e02:	4653      	mov	r3, sl
  400e04:	465c      	mov	r4, fp
  400e06:	185b      	adds	r3, r3, r1
  400e08:	eb44 0402 	adc.w	r4, r4, r2
  400e0c:	ea4f 1904 	mov.w	r9, r4, lsl #4
  400e10:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  400e14:	ea4f 1803 	mov.w	r8, r3, lsl #4
  400e18:	4643      	mov	r3, r8
  400e1a:	464c      	mov	r4, r9
  400e1c:	4619      	mov	r1, r3
  400e1e:	4622      	mov	r2, r4
  400e20:	f243 63af 	movw	r3, #13999	; 0x36af
  400e24:	f04f 0400 	mov.w	r4, #0
  400e28:	18cd      	adds	r5, r1, r3
  400e2a:	eb42 0604 	adc.w	r6, r2, r4
  400e2e:	4628      	mov	r0, r5
  400e30:	4631      	mov	r1, r6
  400e32:	4c0a      	ldr	r4, [pc, #40]	; (400e5c <resetWifi+0x124>)
  400e34:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e38:	f04f 0300 	mov.w	r3, #0
  400e3c:	47a0      	blx	r4
  400e3e:	4603      	mov	r3, r0
  400e40:	460c      	mov	r4, r1
  400e42:	4618      	mov	r0, r3
  400e44:	4b06      	ldr	r3, [pc, #24]	; (400e60 <resetWifi+0x128>)
  400e46:	4798      	blx	r3
}
  400e48:	bf00      	nop
  400e4a:	371c      	adds	r7, #28
  400e4c:	46bd      	mov	sp, r7
  400e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e52:	bf00      	nop
  400e54:	00400977 	.word	0x00400977
  400e58:	004008ad 	.word	0x004008ad
  400e5c:	004024d1 	.word	0x004024d1
  400e60:	20000001 	.word	0x20000001

00400e64 <checkGoFile>:
		}
	}
}

// Check whether the go file exists, and its contents
uint32_t checkGoFile(void){
  400e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400e68:	b0bf      	sub	sp, #252	; 0xfc
  400e6a:	af00      	add	r7, sp, #0

	write_wifi_command("bump\r\n",3);
  400e6c:	2103      	movs	r1, #3
  400e6e:	48cb      	ldr	r0, [pc, #812]	; (40119c <checkGoFile+0x338>)
  400e70:	4bcb      	ldr	r3, [pc, #812]	; (4011a0 <checkGoFile+0x33c>)
  400e72:	4798      	blx	r3
	// reset the wifi buffer
	input_pos_wifi = 0;
  400e74:	4bcb      	ldr	r3, [pc, #812]	; (4011a4 <checkGoFile+0x340>)
  400e76:	2200      	movs	r2, #0
  400e78:	601a      	str	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  400e7a:	2300      	movs	r3, #0
  400e7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  400e80:	e00a      	b.n	400e98 <checkGoFile+0x34>
		buffer_wifi[ii] = 0;
  400e82:	4ac9      	ldr	r2, [pc, #804]	; (4011a8 <checkGoFile+0x344>)
  400e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
  400e88:	4413      	add	r3, r2
  400e8a:	2200      	movs	r2, #0
  400e8c:	701a      	strb	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  400e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
  400e92:	3301      	adds	r3, #1
  400e94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  400e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
  400e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400ea0:	d3ef      	bcc.n	400e82 <checkGoFile+0x1e>
	}

	////////////////////////////////////////////////////////////////////////////////
	uint8_t fileStream[maxWifiMessage];
	for(int ii = 0; ii< maxWifiMessage; ii++){
  400ea2:	2300      	movs	r3, #0
  400ea4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  400ea8:	e00b      	b.n	400ec2 <checkGoFile+0x5e>
		fileStream[ii] = 0x20;
  400eaa:	f107 0298 	add.w	r2, r7, #152	; 0x98
  400eae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
  400eb2:	4413      	add	r3, r2
  400eb4:	2220      	movs	r2, #32
  400eb6:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii< maxWifiMessage; ii++){
  400eb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
  400ebc:	3301      	adds	r3, #1
  400ebe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  400ec2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
  400ec6:	2b31      	cmp	r3, #49	; 0x31
  400ec8:	ddef      	ble.n	400eaa <checkGoFile+0x46>
	}
	// Send command to the wifi chip telling it to open the file
	write_wifi_command("fop test.txt\r\n",3);
  400eca:	2103      	movs	r1, #3
  400ecc:	48b7      	ldr	r0, [pc, #732]	; (4011ac <checkGoFile+0x348>)
  400ece:	4bb4      	ldr	r3, [pc, #720]	; (4011a0 <checkGoFile+0x33c>)
  400ed0:	4798      	blx	r3

	// save the output
	int ii = 9;
  400ed2:	2309      	movs	r3, #9
  400ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	while((rawRecievedMessage[ii]!=93)&&(ii<100)){
  400ed8:	e012      	b.n	400f00 <checkGoFile+0x9c>
		fileStream[ii-9] = rawRecievedMessage[ii];
  400eda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400ede:	3b09      	subs	r3, #9
  400ee0:	49b3      	ldr	r1, [pc, #716]	; (4011b0 <checkGoFile+0x34c>)
  400ee2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
  400ee6:	440a      	add	r2, r1
  400ee8:	7812      	ldrb	r2, [r2, #0]
  400eea:	b2d2      	uxtb	r2, r2
  400eec:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
  400ef0:	440b      	add	r3, r1
  400ef2:	f803 2c60 	strb.w	r2, [r3, #-96]
		ii++;
  400ef6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400efa:	3301      	adds	r3, #1
  400efc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	while((rawRecievedMessage[ii]!=93)&&(ii<100)){
  400f00:	4aab      	ldr	r2, [pc, #684]	; (4011b0 <checkGoFile+0x34c>)
  400f02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400f06:	4413      	add	r3, r2
  400f08:	781b      	ldrb	r3, [r3, #0]
  400f0a:	b2db      	uxtb	r3, r3
  400f0c:	2b5d      	cmp	r3, #93	; 0x5d
  400f0e:	d003      	beq.n	400f18 <checkGoFile+0xb4>
  400f10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400f14:	2b63      	cmp	r3, #99	; 0x63
  400f16:	dde0      	ble.n	400eda <checkGoFile+0x76>
	}
	/////////////////////////////////////////////////////////////////////////////

	// reset the wifi buffer
	input_pos_wifi = 0;
  400f18:	4ba2      	ldr	r3, [pc, #648]	; (4011a4 <checkGoFile+0x340>)
  400f1a:	2200      	movs	r2, #0
  400f1c:	601a      	str	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  400f1e:	2300      	movs	r3, #0
  400f20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  400f24:	e00a      	b.n	400f3c <checkGoFile+0xd8>
		buffer_wifi[ii] = 0;
  400f26:	4aa0      	ldr	r2, [pc, #640]	; (4011a8 <checkGoFile+0x344>)
  400f28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
  400f2c:	4413      	add	r3, r2
  400f2e:	2200      	movs	r2, #0
  400f30:	701a      	strb	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  400f32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
  400f36:	3301      	adds	r3, #1
  400f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  400f3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
  400f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400f44:	d3ef      	bcc.n	400f26 <checkGoFile+0xc2>
	}
	// save the output, remove unneeded portions of the file
	uint8_t fileSize[maxWifiMessage];
	for(int ii = 0; ii< maxWifiMessage; ii++){
  400f46:	2300      	movs	r3, #0
  400f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  400f4c:	e00b      	b.n	400f66 <checkGoFile+0x102>
		fileSize[ii] = 0x20;
  400f4e:	f107 0264 	add.w	r2, r7, #100	; 0x64
  400f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
  400f56:	4413      	add	r3, r2
  400f58:	2220      	movs	r2, #32
  400f5a:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii< maxWifiMessage; ii++){
  400f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
  400f60:	3301      	adds	r3, #1
  400f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  400f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
  400f6a:	2b31      	cmp	r3, #49	; 0x31
  400f6c:	ddef      	ble.n	400f4e <checkGoFile+0xea>
	}
	// get the size of the file
	write_wifi_command("fst test.txt\r\n",3);
  400f6e:	2103      	movs	r1, #3
  400f70:	4890      	ldr	r0, [pc, #576]	; (4011b4 <checkGoFile+0x350>)
  400f72:	4b8b      	ldr	r3, [pc, #556]	; (4011a0 <checkGoFile+0x33c>)
  400f74:	4798      	blx	r3
	
	// save the output
	ii = 0;
  400f76:	2300      	movs	r3, #0
  400f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	while(rawRecievedMessage[ii]!=44){
  400f7c:	e011      	b.n	400fa2 <checkGoFile+0x13e>
		fileSize[ii] = rawRecievedMessage[ii];
  400f7e:	4a8c      	ldr	r2, [pc, #560]	; (4011b0 <checkGoFile+0x34c>)
  400f80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400f84:	4413      	add	r3, r2
  400f86:	781b      	ldrb	r3, [r3, #0]
  400f88:	b2d9      	uxtb	r1, r3
  400f8a:	f107 0264 	add.w	r2, r7, #100	; 0x64
  400f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400f92:	4413      	add	r3, r2
  400f94:	460a      	mov	r2, r1
  400f96:	701a      	strb	r2, [r3, #0]
		ii++;
  400f98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400f9c:	3301      	adds	r3, #1
  400f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	while(rawRecievedMessage[ii]!=44){
  400fa2:	4a83      	ldr	r2, [pc, #524]	; (4011b0 <checkGoFile+0x34c>)
  400fa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400fa8:	4413      	add	r3, r2
  400faa:	781b      	ldrb	r3, [r3, #0]
  400fac:	b2db      	uxtb	r3, r3
  400fae:	2b2c      	cmp	r3, #44	; 0x2c
  400fb0:	d1e5      	bne.n	400f7e <checkGoFile+0x11a>

	/////////////////////////////////////////////////////////////////////
	// Read the file
	// Create the command string
	uint8_t readFileCommand[100];
	strcpy(readFileCommand,"read ");
  400fb2:	463b      	mov	r3, r7
  400fb4:	4a80      	ldr	r2, [pc, #512]	; (4011b8 <checkGoFile+0x354>)
  400fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
  400fba:	6018      	str	r0, [r3, #0]
  400fbc:	3304      	adds	r3, #4
  400fbe:	8019      	strh	r1, [r3, #0]
	for(int ii = 4; ii < sizeof(readFileCommand); ii++){
  400fc0:	2304      	movs	r3, #4
  400fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  400fc6:	e00a      	b.n	400fde <checkGoFile+0x17a>
		readFileCommand[ii] = 32;
  400fc8:	463a      	mov	r2, r7
  400fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
  400fce:	4413      	add	r3, r2
  400fd0:	2220      	movs	r2, #32
  400fd2:	701a      	strb	r2, [r3, #0]
	for(int ii = 4; ii < sizeof(readFileCommand); ii++){
  400fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
  400fd8:	3301      	adds	r3, #1
  400fda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  400fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
  400fe2:	2b63      	cmp	r3, #99	; 0x63
  400fe4:	d9f0      	bls.n	400fc8 <checkGoFile+0x164>
	}

	// Check for space, add file stream to string
	ii = 0;
  400fe6:	2300      	movs	r3, #0
  400fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	while(fileStream[ii] != 32){
  400fec:	e012      	b.n	401014 <checkGoFile+0x1b0>
		readFileCommand[ii+5] = fileStream[ii];
  400fee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  400ff2:	3305      	adds	r3, #5
  400ff4:	f107 0198 	add.w	r1, r7, #152	; 0x98
  400ff8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
  400ffc:	440a      	add	r2, r1
  400ffe:	7812      	ldrb	r2, [r2, #0]
  401000:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
  401004:	440b      	add	r3, r1
  401006:	f803 2cf8 	strb.w	r2, [r3, #-248]
		ii++;
  40100a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  40100e:	3301      	adds	r3, #1
  401010:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	while(fileStream[ii] != 32){
  401014:	f107 0298 	add.w	r2, r7, #152	; 0x98
  401018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  40101c:	4413      	add	r3, r2
  40101e:	781b      	ldrb	r3, [r3, #0]
  401020:	2b20      	cmp	r3, #32
  401022:	d1e4      	bne.n	400fee <checkGoFile+0x18a>
	}

	readFileCommand[5+ii] = 32;
  401024:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  401028:	3305      	adds	r3, #5
  40102a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
  40102e:	4413      	add	r3, r2
  401030:	2220      	movs	r2, #32
  401032:	f803 2cf8 	strb.w	r2, [r3, #-248]
	int sizetrack = 5+ii+1;
  401036:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  40103a:	3306      	adds	r3, #6
  40103c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	
	ii = 0;
  401040:	2300      	movs	r3, #0
  401042:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// Check for space, add file size to string
	while((fileSize[ii]!=32)||(ii==0)){
  401046:	e014      	b.n	401072 <checkGoFile+0x20e>
		readFileCommand[ii+sizetrack] = fileSize[ii];
  401048:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
  40104c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  401050:	4413      	add	r3, r2
  401052:	f107 0164 	add.w	r1, r7, #100	; 0x64
  401056:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
  40105a:	440a      	add	r2, r1
  40105c:	7812      	ldrb	r2, [r2, #0]
  40105e:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
  401062:	440b      	add	r3, r1
  401064:	f803 2cf8 	strb.w	r2, [r3, #-248]
		ii++;
  401068:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  40106c:	3301      	adds	r3, #1
  40106e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	while((fileSize[ii]!=32)||(ii==0)){
  401072:	f107 0264 	add.w	r2, r7, #100	; 0x64
  401076:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  40107a:	4413      	add	r3, r2
  40107c:	781b      	ldrb	r3, [r3, #0]
  40107e:	2b20      	cmp	r3, #32
  401080:	d1e2      	bne.n	401048 <checkGoFile+0x1e4>
  401082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  401086:	2b00      	cmp	r3, #0
  401088:	d0de      	beq.n	401048 <checkGoFile+0x1e4>
	}

	sizetrack = sizetrack+ii;
  40108a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
  40108e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
  401092:	4413      	add	r3, r2
  401094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	readFileCommand[sizetrack+1]=13;
  401098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40109c:	3301      	adds	r3, #1
  40109e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
  4010a2:	4413      	add	r3, r2
  4010a4:	220d      	movs	r2, #13
  4010a6:	f803 2cf8 	strb.w	r2, [r3, #-248]
	readFileCommand[sizetrack+2]=10;
  4010aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  4010ae:	3302      	adds	r3, #2
  4010b0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
  4010b4:	4413      	add	r3, r2
  4010b6:	220a      	movs	r2, #10
  4010b8:	f803 2cf8 	strb.w	r2, [r3, #-248]

	sizetrack = sizetrack+3;
  4010bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  4010c0:	3303      	adds	r3, #3
  4010c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	uint8_t realReadFileCommand[sizetrack];
  4010c6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
  4010ca:	466b      	mov	r3, sp
  4010cc:	461e      	mov	r6, r3
  4010ce:	1e4b      	subs	r3, r1, #1
  4010d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  4010d4:	460b      	mov	r3, r1
  4010d6:	461a      	mov	r2, r3
  4010d8:	f04f 0300 	mov.w	r3, #0
  4010dc:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4010e0:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
  4010e4:	ea4f 08c2 	mov.w	r8, r2, lsl #3
  4010e8:	460b      	mov	r3, r1
  4010ea:	461a      	mov	r2, r3
  4010ec:	f04f 0300 	mov.w	r3, #0
  4010f0:	00dd      	lsls	r5, r3, #3
  4010f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
  4010f6:	00d4      	lsls	r4, r2, #3
  4010f8:	460b      	mov	r3, r1
  4010fa:	3307      	adds	r3, #7
  4010fc:	08db      	lsrs	r3, r3, #3
  4010fe:	00db      	lsls	r3, r3, #3
  401100:	ebad 0d03 	sub.w	sp, sp, r3
  401104:	466b      	mov	r3, sp
  401106:	3300      	adds	r3, #0
  401108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	for(int jj = 0; jj < sizetrack; jj++){
  40110c:	2300      	movs	r3, #0
  40110e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  401112:	e010      	b.n	401136 <checkGoFile+0x2d2>
		realReadFileCommand[jj] = readFileCommand[jj];
  401114:	463a      	mov	r2, r7
  401116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
  40111a:	4413      	add	r3, r2
  40111c:	7819      	ldrb	r1, [r3, #0]
  40111e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
  401122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
  401126:	4413      	add	r3, r2
  401128:	460a      	mov	r2, r1
  40112a:	701a      	strb	r2, [r3, #0]
	for(int jj = 0; jj < sizetrack; jj++){
  40112c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
  401130:	3301      	adds	r3, #1
  401132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  401136:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
  40113a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40113e:	429a      	cmp	r2, r3
  401140:	dbe8      	blt.n	401114 <checkGoFile+0x2b0>
	}

	// reset the wifi buffer
	input_pos_wifi = 0;
  401142:	4b18      	ldr	r3, [pc, #96]	; (4011a4 <checkGoFile+0x340>)
  401144:	2200      	movs	r2, #0
  401146:	601a      	str	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  401148:	2300      	movs	r3, #0
  40114a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  40114e:	e00a      	b.n	401166 <checkGoFile+0x302>
		buffer_wifi[ii] = 0;
  401150:	4a15      	ldr	r2, [pc, #84]	; (4011a8 <checkGoFile+0x344>)
  401152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
  401156:	4413      	add	r3, r2
  401158:	2200      	movs	r2, #0
  40115a:	701a      	strb	r2, [r3, #0]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  40115c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
  401160:	3301      	adds	r3, #1
  401162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  401166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
  40116a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40116e:	d3ef      	bcc.n	401150 <checkGoFile+0x2ec>
	}
	// Get the file
	write_wifi_command(realReadFileCommand,3);
  401170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
  401174:	2103      	movs	r1, #3
  401176:	4618      	mov	r0, r3
  401178:	4b09      	ldr	r3, [pc, #36]	; (4011a0 <checkGoFile+0x33c>)
  40117a:	4798      	blx	r3
	
	if(strstr(rawRecievedMessage,"Petras")){
  40117c:	490f      	ldr	r1, [pc, #60]	; (4011bc <checkGoFile+0x358>)
  40117e:	480c      	ldr	r0, [pc, #48]	; (4011b0 <checkGoFile+0x34c>)
  401180:	4b0f      	ldr	r3, [pc, #60]	; (4011c0 <checkGoFile+0x35c>)
  401182:	4798      	blx	r3
  401184:	4603      	mov	r3, r0
  401186:	2b00      	cmp	r3, #0
  401188:	d001      	beq.n	40118e <checkGoFile+0x32a>
		return 1;
  40118a:	2301      	movs	r3, #1
  40118c:	e000      	b.n	401190 <checkGoFile+0x32c>
		
	}
	else{
		return 0;
  40118e:	2300      	movs	r3, #0
  401190:	46b5      	mov	sp, r6
	




  401192:	4618      	mov	r0, r3
  401194:	37fc      	adds	r7, #252	; 0xfc
  401196:	46bd      	mov	sp, r7
  401198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40119c:	00403224 	.word	0x00403224
  4011a0:	00400ce1 	.word	0x00400ce1
  4011a4:	200004dc 	.word	0x200004dc
  4011a8:	20000528 	.word	0x20000528
  4011ac:	0040322c 	.word	0x0040322c
  4011b0:	200004ec 	.word	0x200004ec
  4011b4:	0040323c 	.word	0x0040323c
  4011b8:	0040324c 	.word	0x0040324c
  4011bc:	00403254 	.word	0x00403254
  4011c0:	00402b9d 	.word	0x00402b9d

004011c4 <osc_enable>:
{
  4011c4:	b580      	push	{r7, lr}
  4011c6:	b082      	sub	sp, #8
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4011cc:	687b      	ldr	r3, [r7, #4]
  4011ce:	2b07      	cmp	r3, #7
  4011d0:	d831      	bhi.n	401236 <osc_enable+0x72>
  4011d2:	a201      	add	r2, pc, #4	; (adr r2, 4011d8 <osc_enable+0x14>)
  4011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4011d8:	00401235 	.word	0x00401235
  4011dc:	004011f9 	.word	0x004011f9
  4011e0:	00401201 	.word	0x00401201
  4011e4:	00401209 	.word	0x00401209
  4011e8:	00401211 	.word	0x00401211
  4011ec:	00401219 	.word	0x00401219
  4011f0:	00401221 	.word	0x00401221
  4011f4:	0040122b 	.word	0x0040122b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4011f8:	2000      	movs	r0, #0
  4011fa:	4b11      	ldr	r3, [pc, #68]	; (401240 <osc_enable+0x7c>)
  4011fc:	4798      	blx	r3
		break;
  4011fe:	e01a      	b.n	401236 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401200:	2001      	movs	r0, #1
  401202:	4b0f      	ldr	r3, [pc, #60]	; (401240 <osc_enable+0x7c>)
  401204:	4798      	blx	r3
		break;
  401206:	e016      	b.n	401236 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401208:	2000      	movs	r0, #0
  40120a:	4b0e      	ldr	r3, [pc, #56]	; (401244 <osc_enable+0x80>)
  40120c:	4798      	blx	r3
		break;
  40120e:	e012      	b.n	401236 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401210:	2010      	movs	r0, #16
  401212:	4b0c      	ldr	r3, [pc, #48]	; (401244 <osc_enable+0x80>)
  401214:	4798      	blx	r3
		break;
  401216:	e00e      	b.n	401236 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401218:	2020      	movs	r0, #32
  40121a:	4b0a      	ldr	r3, [pc, #40]	; (401244 <osc_enable+0x80>)
  40121c:	4798      	blx	r3
		break;
  40121e:	e00a      	b.n	401236 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401220:	213e      	movs	r1, #62	; 0x3e
  401222:	2000      	movs	r0, #0
  401224:	4b08      	ldr	r3, [pc, #32]	; (401248 <osc_enable+0x84>)
  401226:	4798      	blx	r3
		break;
  401228:	e005      	b.n	401236 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40122a:	213e      	movs	r1, #62	; 0x3e
  40122c:	2001      	movs	r0, #1
  40122e:	4b06      	ldr	r3, [pc, #24]	; (401248 <osc_enable+0x84>)
  401230:	4798      	blx	r3
		break;
  401232:	e000      	b.n	401236 <osc_enable+0x72>
		break;
  401234:	bf00      	nop
}
  401236:	bf00      	nop
  401238:	3708      	adds	r7, #8
  40123a:	46bd      	mov	sp, r7
  40123c:	bd80      	pop	{r7, pc}
  40123e:	bf00      	nop
  401240:	00401a91 	.word	0x00401a91
  401244:	00401afd 	.word	0x00401afd
  401248:	00401b6d 	.word	0x00401b6d

0040124c <osc_is_ready>:
{
  40124c:	b580      	push	{r7, lr}
  40124e:	b082      	sub	sp, #8
  401250:	af00      	add	r7, sp, #0
  401252:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401254:	687b      	ldr	r3, [r7, #4]
  401256:	2b07      	cmp	r3, #7
  401258:	d826      	bhi.n	4012a8 <osc_is_ready+0x5c>
  40125a:	a201      	add	r2, pc, #4	; (adr r2, 401260 <osc_is_ready+0x14>)
  40125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401260:	00401281 	.word	0x00401281
  401264:	00401285 	.word	0x00401285
  401268:	00401285 	.word	0x00401285
  40126c:	00401297 	.word	0x00401297
  401270:	00401297 	.word	0x00401297
  401274:	00401297 	.word	0x00401297
  401278:	00401297 	.word	0x00401297
  40127c:	00401297 	.word	0x00401297
		return 1;
  401280:	2301      	movs	r3, #1
  401282:	e012      	b.n	4012aa <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401284:	4b0b      	ldr	r3, [pc, #44]	; (4012b4 <osc_is_ready+0x68>)
  401286:	4798      	blx	r3
  401288:	4603      	mov	r3, r0
  40128a:	2b00      	cmp	r3, #0
  40128c:	bf14      	ite	ne
  40128e:	2301      	movne	r3, #1
  401290:	2300      	moveq	r3, #0
  401292:	b2db      	uxtb	r3, r3
  401294:	e009      	b.n	4012aa <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  401296:	4b08      	ldr	r3, [pc, #32]	; (4012b8 <osc_is_ready+0x6c>)
  401298:	4798      	blx	r3
  40129a:	4603      	mov	r3, r0
  40129c:	2b00      	cmp	r3, #0
  40129e:	bf14      	ite	ne
  4012a0:	2301      	movne	r3, #1
  4012a2:	2300      	moveq	r3, #0
  4012a4:	b2db      	uxtb	r3, r3
  4012a6:	e000      	b.n	4012aa <osc_is_ready+0x5e>
	return 0;
  4012a8:	2300      	movs	r3, #0
}
  4012aa:	4618      	mov	r0, r3
  4012ac:	3708      	adds	r7, #8
  4012ae:	46bd      	mov	sp, r7
  4012b0:	bd80      	pop	{r7, pc}
  4012b2:	bf00      	nop
  4012b4:	00401ac9 	.word	0x00401ac9
  4012b8:	00401be5 	.word	0x00401be5

004012bc <osc_get_rate>:
{
  4012bc:	b480      	push	{r7}
  4012be:	b083      	sub	sp, #12
  4012c0:	af00      	add	r7, sp, #0
  4012c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4012c4:	687b      	ldr	r3, [r7, #4]
  4012c6:	2b07      	cmp	r3, #7
  4012c8:	d825      	bhi.n	401316 <osc_get_rate+0x5a>
  4012ca:	a201      	add	r2, pc, #4	; (adr r2, 4012d0 <osc_get_rate+0x14>)
  4012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4012d0:	004012f1 	.word	0x004012f1
  4012d4:	004012f7 	.word	0x004012f7
  4012d8:	004012fd 	.word	0x004012fd
  4012dc:	00401303 	.word	0x00401303
  4012e0:	00401307 	.word	0x00401307
  4012e4:	0040130b 	.word	0x0040130b
  4012e8:	0040130f 	.word	0x0040130f
  4012ec:	00401313 	.word	0x00401313
		return OSC_SLCK_32K_RC_HZ;
  4012f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4012f4:	e010      	b.n	401318 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4012f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4012fa:	e00d      	b.n	401318 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4012fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401300:	e00a      	b.n	401318 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401302:	4b08      	ldr	r3, [pc, #32]	; (401324 <osc_get_rate+0x68>)
  401304:	e008      	b.n	401318 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401306:	4b08      	ldr	r3, [pc, #32]	; (401328 <osc_get_rate+0x6c>)
  401308:	e006      	b.n	401318 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40130a:	4b08      	ldr	r3, [pc, #32]	; (40132c <osc_get_rate+0x70>)
  40130c:	e004      	b.n	401318 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40130e:	4b07      	ldr	r3, [pc, #28]	; (40132c <osc_get_rate+0x70>)
  401310:	e002      	b.n	401318 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401312:	4b06      	ldr	r3, [pc, #24]	; (40132c <osc_get_rate+0x70>)
  401314:	e000      	b.n	401318 <osc_get_rate+0x5c>
	return 0;
  401316:	2300      	movs	r3, #0
}
  401318:	4618      	mov	r0, r3
  40131a:	370c      	adds	r7, #12
  40131c:	46bd      	mov	sp, r7
  40131e:	bc80      	pop	{r7}
  401320:	4770      	bx	lr
  401322:	bf00      	nop
  401324:	003d0900 	.word	0x003d0900
  401328:	007a1200 	.word	0x007a1200
  40132c:	00b71b00 	.word	0x00b71b00

00401330 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401330:	b580      	push	{r7, lr}
  401332:	b082      	sub	sp, #8
  401334:	af00      	add	r7, sp, #0
  401336:	4603      	mov	r3, r0
  401338:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40133a:	bf00      	nop
  40133c:	79fb      	ldrb	r3, [r7, #7]
  40133e:	4618      	mov	r0, r3
  401340:	4b05      	ldr	r3, [pc, #20]	; (401358 <osc_wait_ready+0x28>)
  401342:	4798      	blx	r3
  401344:	4603      	mov	r3, r0
  401346:	f083 0301 	eor.w	r3, r3, #1
  40134a:	b2db      	uxtb	r3, r3
  40134c:	2b00      	cmp	r3, #0
  40134e:	d1f5      	bne.n	40133c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401350:	bf00      	nop
  401352:	3708      	adds	r7, #8
  401354:	46bd      	mov	sp, r7
  401356:	bd80      	pop	{r7, pc}
  401358:	0040124d 	.word	0x0040124d

0040135c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40135c:	b580      	push	{r7, lr}
  40135e:	b086      	sub	sp, #24
  401360:	af00      	add	r7, sp, #0
  401362:	60f8      	str	r0, [r7, #12]
  401364:	607a      	str	r2, [r7, #4]
  401366:	603b      	str	r3, [r7, #0]
  401368:	460b      	mov	r3, r1
  40136a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40136c:	7afb      	ldrb	r3, [r7, #11]
  40136e:	4618      	mov	r0, r3
  401370:	4b0d      	ldr	r3, [pc, #52]	; (4013a8 <pll_config_init+0x4c>)
  401372:	4798      	blx	r3
  401374:	4602      	mov	r2, r0
  401376:	687b      	ldr	r3, [r7, #4]
  401378:	fbb2 f3f3 	udiv	r3, r2, r3
  40137c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40137e:	697b      	ldr	r3, [r7, #20]
  401380:	683a      	ldr	r2, [r7, #0]
  401382:	fb02 f303 	mul.w	r3, r2, r3
  401386:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401388:	683b      	ldr	r3, [r7, #0]
  40138a:	3b01      	subs	r3, #1
  40138c:	041a      	lsls	r2, r3, #16
  40138e:	4b07      	ldr	r3, [pc, #28]	; (4013ac <pll_config_init+0x50>)
  401390:	4013      	ands	r3, r2
  401392:	687a      	ldr	r2, [r7, #4]
  401394:	b2d2      	uxtb	r2, r2
  401396:	4313      	orrs	r3, r2
  401398:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40139c:	68fb      	ldr	r3, [r7, #12]
  40139e:	601a      	str	r2, [r3, #0]
}
  4013a0:	bf00      	nop
  4013a2:	3718      	adds	r7, #24
  4013a4:	46bd      	mov	sp, r7
  4013a6:	bd80      	pop	{r7, pc}
  4013a8:	004012bd 	.word	0x004012bd
  4013ac:	07ff0000 	.word	0x07ff0000

004013b0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4013b0:	b580      	push	{r7, lr}
  4013b2:	b082      	sub	sp, #8
  4013b4:	af00      	add	r7, sp, #0
  4013b6:	6078      	str	r0, [r7, #4]
  4013b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4013ba:	683b      	ldr	r3, [r7, #0]
  4013bc:	2b00      	cmp	r3, #0
  4013be:	d108      	bne.n	4013d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4013c0:	4b09      	ldr	r3, [pc, #36]	; (4013e8 <pll_enable+0x38>)
  4013c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4013c4:	4a09      	ldr	r2, [pc, #36]	; (4013ec <pll_enable+0x3c>)
  4013c6:	687b      	ldr	r3, [r7, #4]
  4013c8:	681b      	ldr	r3, [r3, #0]
  4013ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4013ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4013d0:	e005      	b.n	4013de <pll_enable+0x2e>
		pmc_disable_pllbck();
  4013d2:	4b07      	ldr	r3, [pc, #28]	; (4013f0 <pll_enable+0x40>)
  4013d4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4013d6:	4a05      	ldr	r2, [pc, #20]	; (4013ec <pll_enable+0x3c>)
  4013d8:	687b      	ldr	r3, [r7, #4]
  4013da:	681b      	ldr	r3, [r3, #0]
  4013dc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4013de:	bf00      	nop
  4013e0:	3708      	adds	r7, #8
  4013e2:	46bd      	mov	sp, r7
  4013e4:	bd80      	pop	{r7, pc}
  4013e6:	bf00      	nop
  4013e8:	00401bfd 	.word	0x00401bfd
  4013ec:	400e0400 	.word	0x400e0400
  4013f0:	00401c2d 	.word	0x00401c2d

004013f4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4013f4:	b580      	push	{r7, lr}
  4013f6:	b082      	sub	sp, #8
  4013f8:	af00      	add	r7, sp, #0
  4013fa:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4013fc:	687b      	ldr	r3, [r7, #4]
  4013fe:	2b00      	cmp	r3, #0
  401400:	d103      	bne.n	40140a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401402:	4b05      	ldr	r3, [pc, #20]	; (401418 <pll_is_locked+0x24>)
  401404:	4798      	blx	r3
  401406:	4603      	mov	r3, r0
  401408:	e002      	b.n	401410 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40140a:	4b04      	ldr	r3, [pc, #16]	; (40141c <pll_is_locked+0x28>)
  40140c:	4798      	blx	r3
  40140e:	4603      	mov	r3, r0
	}
}
  401410:	4618      	mov	r0, r3
  401412:	3708      	adds	r7, #8
  401414:	46bd      	mov	sp, r7
  401416:	bd80      	pop	{r7, pc}
  401418:	00401c15 	.word	0x00401c15
  40141c:	00401c45 	.word	0x00401c45

00401420 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401420:	b580      	push	{r7, lr}
  401422:	b082      	sub	sp, #8
  401424:	af00      	add	r7, sp, #0
  401426:	4603      	mov	r3, r0
  401428:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40142a:	79fb      	ldrb	r3, [r7, #7]
  40142c:	3b03      	subs	r3, #3
  40142e:	2b04      	cmp	r3, #4
  401430:	d808      	bhi.n	401444 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401432:	79fb      	ldrb	r3, [r7, #7]
  401434:	4618      	mov	r0, r3
  401436:	4b06      	ldr	r3, [pc, #24]	; (401450 <pll_enable_source+0x30>)
  401438:	4798      	blx	r3
		osc_wait_ready(e_src);
  40143a:	79fb      	ldrb	r3, [r7, #7]
  40143c:	4618      	mov	r0, r3
  40143e:	4b05      	ldr	r3, [pc, #20]	; (401454 <pll_enable_source+0x34>)
  401440:	4798      	blx	r3
		break;
  401442:	e000      	b.n	401446 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401444:	bf00      	nop
	}
}
  401446:	bf00      	nop
  401448:	3708      	adds	r7, #8
  40144a:	46bd      	mov	sp, r7
  40144c:	bd80      	pop	{r7, pc}
  40144e:	bf00      	nop
  401450:	004011c5 	.word	0x004011c5
  401454:	00401331 	.word	0x00401331

00401458 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401458:	b580      	push	{r7, lr}
  40145a:	b082      	sub	sp, #8
  40145c:	af00      	add	r7, sp, #0
  40145e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401460:	bf00      	nop
  401462:	6878      	ldr	r0, [r7, #4]
  401464:	4b04      	ldr	r3, [pc, #16]	; (401478 <pll_wait_for_lock+0x20>)
  401466:	4798      	blx	r3
  401468:	4603      	mov	r3, r0
  40146a:	2b00      	cmp	r3, #0
  40146c:	d0f9      	beq.n	401462 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40146e:	2300      	movs	r3, #0
}
  401470:	4618      	mov	r0, r3
  401472:	3708      	adds	r7, #8
  401474:	46bd      	mov	sp, r7
  401476:	bd80      	pop	{r7, pc}
  401478:	004013f5 	.word	0x004013f5

0040147c <sysclk_get_main_hz>:
{
  40147c:	b580      	push	{r7, lr}
  40147e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401480:	2006      	movs	r0, #6
  401482:	4b04      	ldr	r3, [pc, #16]	; (401494 <sysclk_get_main_hz+0x18>)
  401484:	4798      	blx	r3
  401486:	4602      	mov	r2, r0
  401488:	4613      	mov	r3, r2
  40148a:	009b      	lsls	r3, r3, #2
  40148c:	4413      	add	r3, r2
  40148e:	009b      	lsls	r3, r3, #2
}
  401490:	4618      	mov	r0, r3
  401492:	bd80      	pop	{r7, pc}
  401494:	004012bd 	.word	0x004012bd

00401498 <sysclk_get_cpu_hz>:
{
  401498:	b580      	push	{r7, lr}
  40149a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40149c:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <sysclk_get_cpu_hz+0x10>)
  40149e:	4798      	blx	r3
  4014a0:	4603      	mov	r3, r0
  4014a2:	085b      	lsrs	r3, r3, #1
}
  4014a4:	4618      	mov	r0, r3
  4014a6:	bd80      	pop	{r7, pc}
  4014a8:	0040147d 	.word	0x0040147d

004014ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4014ac:	b590      	push	{r4, r7, lr}
  4014ae:	b083      	sub	sp, #12
  4014b0:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4014b2:	4811      	ldr	r0, [pc, #68]	; (4014f8 <sysclk_init+0x4c>)
  4014b4:	4b11      	ldr	r3, [pc, #68]	; (4014fc <sysclk_init+0x50>)
  4014b6:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4014b8:	2006      	movs	r0, #6
  4014ba:	4b11      	ldr	r3, [pc, #68]	; (401500 <sysclk_init+0x54>)
  4014bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4014be:	1d38      	adds	r0, r7, #4
  4014c0:	2314      	movs	r3, #20
  4014c2:	2201      	movs	r2, #1
  4014c4:	2106      	movs	r1, #6
  4014c6:	4c0f      	ldr	r4, [pc, #60]	; (401504 <sysclk_init+0x58>)
  4014c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4014ca:	1d3b      	adds	r3, r7, #4
  4014cc:	2100      	movs	r1, #0
  4014ce:	4618      	mov	r0, r3
  4014d0:	4b0d      	ldr	r3, [pc, #52]	; (401508 <sysclk_init+0x5c>)
  4014d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4014d4:	2000      	movs	r0, #0
  4014d6:	4b0d      	ldr	r3, [pc, #52]	; (40150c <sysclk_init+0x60>)
  4014d8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4014da:	2010      	movs	r0, #16
  4014dc:	4b0c      	ldr	r3, [pc, #48]	; (401510 <sysclk_init+0x64>)
  4014de:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4014e0:	4b0c      	ldr	r3, [pc, #48]	; (401514 <sysclk_init+0x68>)
  4014e2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4014e4:	4b0c      	ldr	r3, [pc, #48]	; (401518 <sysclk_init+0x6c>)
  4014e6:	4798      	blx	r3
  4014e8:	4603      	mov	r3, r0
  4014ea:	4618      	mov	r0, r3
  4014ec:	4b03      	ldr	r3, [pc, #12]	; (4014fc <sysclk_init+0x50>)
  4014ee:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4014f0:	bf00      	nop
  4014f2:	370c      	adds	r7, #12
  4014f4:	46bd      	mov	sp, r7
  4014f6:	bd90      	pop	{r4, r7, pc}
  4014f8:	07270e00 	.word	0x07270e00
  4014fc:	00402211 	.word	0x00402211
  401500:	00401421 	.word	0x00401421
  401504:	0040135d 	.word	0x0040135d
  401508:	004013b1 	.word	0x004013b1
  40150c:	00401459 	.word	0x00401459
  401510:	00401a11 	.word	0x00401a11
  401514:	00402079 	.word	0x00402079
  401518:	00401499 	.word	0x00401499

0040151c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40151c:	b480      	push	{r7}
  40151e:	b085      	sub	sp, #20
  401520:	af00      	add	r7, sp, #0
  401522:	60f8      	str	r0, [r7, #12]
  401524:	60b9      	str	r1, [r7, #8]
  401526:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401528:	687b      	ldr	r3, [r7, #4]
  40152a:	2b00      	cmp	r3, #0
  40152c:	d003      	beq.n	401536 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40152e:	68fb      	ldr	r3, [r7, #12]
  401530:	68ba      	ldr	r2, [r7, #8]
  401532:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401534:	e002      	b.n	40153c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401536:	68fb      	ldr	r3, [r7, #12]
  401538:	68ba      	ldr	r2, [r7, #8]
  40153a:	661a      	str	r2, [r3, #96]	; 0x60
}
  40153c:	bf00      	nop
  40153e:	3714      	adds	r7, #20
  401540:	46bd      	mov	sp, r7
  401542:	bc80      	pop	{r7}
  401544:	4770      	bx	lr

00401546 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401546:	b480      	push	{r7}
  401548:	b085      	sub	sp, #20
  40154a:	af00      	add	r7, sp, #0
  40154c:	60f8      	str	r0, [r7, #12]
  40154e:	60b9      	str	r1, [r7, #8]
  401550:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401552:	68fb      	ldr	r3, [r7, #12]
  401554:	68ba      	ldr	r2, [r7, #8]
  401556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40155a:	687b      	ldr	r3, [r7, #4]
  40155c:	005b      	lsls	r3, r3, #1
  40155e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401562:	fbb2 f3f3 	udiv	r3, r2, r3
  401566:	3b01      	subs	r3, #1
  401568:	f3c3 020d 	ubfx	r2, r3, #0, #14
  40156c:	68fb      	ldr	r3, [r7, #12]
  40156e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401572:	bf00      	nop
  401574:	3714      	adds	r7, #20
  401576:	46bd      	mov	sp, r7
  401578:	bc80      	pop	{r7}
  40157a:	4770      	bx	lr

0040157c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40157c:	b480      	push	{r7}
  40157e:	b087      	sub	sp, #28
  401580:	af00      	add	r7, sp, #0
  401582:	60f8      	str	r0, [r7, #12]
  401584:	60b9      	str	r1, [r7, #8]
  401586:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401588:	68fb      	ldr	r3, [r7, #12]
  40158a:	687a      	ldr	r2, [r7, #4]
  40158c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40158e:	68bb      	ldr	r3, [r7, #8]
  401590:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401594:	d04a      	beq.n	40162c <pio_set_peripheral+0xb0>
  401596:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40159a:	d808      	bhi.n	4015ae <pio_set_peripheral+0x32>
  40159c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4015a0:	d016      	beq.n	4015d0 <pio_set_peripheral+0x54>
  4015a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4015a6:	d02c      	beq.n	401602 <pio_set_peripheral+0x86>
  4015a8:	2b00      	cmp	r3, #0
  4015aa:	d069      	beq.n	401680 <pio_set_peripheral+0x104>
  4015ac:	e064      	b.n	401678 <pio_set_peripheral+0xfc>
  4015ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015b2:	d065      	beq.n	401680 <pio_set_peripheral+0x104>
  4015b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015b8:	d803      	bhi.n	4015c2 <pio_set_peripheral+0x46>
  4015ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015be:	d04a      	beq.n	401656 <pio_set_peripheral+0xda>
  4015c0:	e05a      	b.n	401678 <pio_set_peripheral+0xfc>
  4015c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4015c6:	d05b      	beq.n	401680 <pio_set_peripheral+0x104>
  4015c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4015cc:	d058      	beq.n	401680 <pio_set_peripheral+0x104>
  4015ce:	e053      	b.n	401678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4015d0:	68fb      	ldr	r3, [r7, #12]
  4015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4015d4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4015d6:	68fb      	ldr	r3, [r7, #12]
  4015d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4015da:	687b      	ldr	r3, [r7, #4]
  4015dc:	43d9      	mvns	r1, r3
  4015de:	697b      	ldr	r3, [r7, #20]
  4015e0:	400b      	ands	r3, r1
  4015e2:	401a      	ands	r2, r3
  4015e4:	68fb      	ldr	r3, [r7, #12]
  4015e6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4015e8:	68fb      	ldr	r3, [r7, #12]
  4015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4015ec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4015ee:	68fb      	ldr	r3, [r7, #12]
  4015f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4015f2:	687b      	ldr	r3, [r7, #4]
  4015f4:	43d9      	mvns	r1, r3
  4015f6:	697b      	ldr	r3, [r7, #20]
  4015f8:	400b      	ands	r3, r1
  4015fa:	401a      	ands	r2, r3
  4015fc:	68fb      	ldr	r3, [r7, #12]
  4015fe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401600:	e03a      	b.n	401678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401602:	68fb      	ldr	r3, [r7, #12]
  401604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401606:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401608:	687a      	ldr	r2, [r7, #4]
  40160a:	697b      	ldr	r3, [r7, #20]
  40160c:	431a      	orrs	r2, r3
  40160e:	68fb      	ldr	r3, [r7, #12]
  401610:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401612:	68fb      	ldr	r3, [r7, #12]
  401614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401616:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401618:	68fb      	ldr	r3, [r7, #12]
  40161a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40161c:	687b      	ldr	r3, [r7, #4]
  40161e:	43d9      	mvns	r1, r3
  401620:	697b      	ldr	r3, [r7, #20]
  401622:	400b      	ands	r3, r1
  401624:	401a      	ands	r2, r3
  401626:	68fb      	ldr	r3, [r7, #12]
  401628:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40162a:	e025      	b.n	401678 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40162c:	68fb      	ldr	r3, [r7, #12]
  40162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401630:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401632:	68fb      	ldr	r3, [r7, #12]
  401634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401636:	687b      	ldr	r3, [r7, #4]
  401638:	43d9      	mvns	r1, r3
  40163a:	697b      	ldr	r3, [r7, #20]
  40163c:	400b      	ands	r3, r1
  40163e:	401a      	ands	r2, r3
  401640:	68fb      	ldr	r3, [r7, #12]
  401642:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401644:	68fb      	ldr	r3, [r7, #12]
  401646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401648:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40164a:	687a      	ldr	r2, [r7, #4]
  40164c:	697b      	ldr	r3, [r7, #20]
  40164e:	431a      	orrs	r2, r3
  401650:	68fb      	ldr	r3, [r7, #12]
  401652:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401654:	e010      	b.n	401678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401656:	68fb      	ldr	r3, [r7, #12]
  401658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40165a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40165c:	687a      	ldr	r2, [r7, #4]
  40165e:	697b      	ldr	r3, [r7, #20]
  401660:	431a      	orrs	r2, r3
  401662:	68fb      	ldr	r3, [r7, #12]
  401664:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401666:	68fb      	ldr	r3, [r7, #12]
  401668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40166a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40166c:	687a      	ldr	r2, [r7, #4]
  40166e:	697b      	ldr	r3, [r7, #20]
  401670:	431a      	orrs	r2, r3
  401672:	68fb      	ldr	r3, [r7, #12]
  401674:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401676:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401678:	68fb      	ldr	r3, [r7, #12]
  40167a:	687a      	ldr	r2, [r7, #4]
  40167c:	605a      	str	r2, [r3, #4]
  40167e:	e000      	b.n	401682 <pio_set_peripheral+0x106>
		return;
  401680:	bf00      	nop
}
  401682:	371c      	adds	r7, #28
  401684:	46bd      	mov	sp, r7
  401686:	bc80      	pop	{r7}
  401688:	4770      	bx	lr
	...

0040168c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40168c:	b580      	push	{r7, lr}
  40168e:	b084      	sub	sp, #16
  401690:	af00      	add	r7, sp, #0
  401692:	60f8      	str	r0, [r7, #12]
  401694:	60b9      	str	r1, [r7, #8]
  401696:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401698:	68b9      	ldr	r1, [r7, #8]
  40169a:	68f8      	ldr	r0, [r7, #12]
  40169c:	4b19      	ldr	r3, [pc, #100]	; (401704 <pio_set_input+0x78>)
  40169e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4016a0:	687b      	ldr	r3, [r7, #4]
  4016a2:	f003 0301 	and.w	r3, r3, #1
  4016a6:	461a      	mov	r2, r3
  4016a8:	68b9      	ldr	r1, [r7, #8]
  4016aa:	68f8      	ldr	r0, [r7, #12]
  4016ac:	4b16      	ldr	r3, [pc, #88]	; (401708 <pio_set_input+0x7c>)
  4016ae:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4016b0:	687b      	ldr	r3, [r7, #4]
  4016b2:	f003 030a 	and.w	r3, r3, #10
  4016b6:	2b00      	cmp	r3, #0
  4016b8:	d003      	beq.n	4016c2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4016ba:	68fb      	ldr	r3, [r7, #12]
  4016bc:	68ba      	ldr	r2, [r7, #8]
  4016be:	621a      	str	r2, [r3, #32]
  4016c0:	e002      	b.n	4016c8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4016c2:	68fb      	ldr	r3, [r7, #12]
  4016c4:	68ba      	ldr	r2, [r7, #8]
  4016c6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4016c8:	687b      	ldr	r3, [r7, #4]
  4016ca:	f003 0302 	and.w	r3, r3, #2
  4016ce:	2b00      	cmp	r3, #0
  4016d0:	d004      	beq.n	4016dc <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4016d2:	68fb      	ldr	r3, [r7, #12]
  4016d4:	68ba      	ldr	r2, [r7, #8]
  4016d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4016da:	e008      	b.n	4016ee <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4016dc:	687b      	ldr	r3, [r7, #4]
  4016de:	f003 0308 	and.w	r3, r3, #8
  4016e2:	2b00      	cmp	r3, #0
  4016e4:	d003      	beq.n	4016ee <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4016e6:	68fb      	ldr	r3, [r7, #12]
  4016e8:	68ba      	ldr	r2, [r7, #8]
  4016ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4016ee:	68fb      	ldr	r3, [r7, #12]
  4016f0:	68ba      	ldr	r2, [r7, #8]
  4016f2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4016f4:	68fb      	ldr	r3, [r7, #12]
  4016f6:	68ba      	ldr	r2, [r7, #8]
  4016f8:	601a      	str	r2, [r3, #0]
}
  4016fa:	bf00      	nop
  4016fc:	3710      	adds	r7, #16
  4016fe:	46bd      	mov	sp, r7
  401700:	bd80      	pop	{r7, pc}
  401702:	bf00      	nop
  401704:	004017f5 	.word	0x004017f5
  401708:	0040151d 	.word	0x0040151d

0040170c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40170c:	b580      	push	{r7, lr}
  40170e:	b084      	sub	sp, #16
  401710:	af00      	add	r7, sp, #0
  401712:	60f8      	str	r0, [r7, #12]
  401714:	60b9      	str	r1, [r7, #8]
  401716:	607a      	str	r2, [r7, #4]
  401718:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40171a:	68b9      	ldr	r1, [r7, #8]
  40171c:	68f8      	ldr	r0, [r7, #12]
  40171e:	4b12      	ldr	r3, [pc, #72]	; (401768 <pio_set_output+0x5c>)
  401720:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401722:	69ba      	ldr	r2, [r7, #24]
  401724:	68b9      	ldr	r1, [r7, #8]
  401726:	68f8      	ldr	r0, [r7, #12]
  401728:	4b10      	ldr	r3, [pc, #64]	; (40176c <pio_set_output+0x60>)
  40172a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40172c:	683b      	ldr	r3, [r7, #0]
  40172e:	2b00      	cmp	r3, #0
  401730:	d003      	beq.n	40173a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401732:	68fb      	ldr	r3, [r7, #12]
  401734:	68ba      	ldr	r2, [r7, #8]
  401736:	651a      	str	r2, [r3, #80]	; 0x50
  401738:	e002      	b.n	401740 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40173a:	68fb      	ldr	r3, [r7, #12]
  40173c:	68ba      	ldr	r2, [r7, #8]
  40173e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	2b00      	cmp	r3, #0
  401744:	d003      	beq.n	40174e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401746:	68fb      	ldr	r3, [r7, #12]
  401748:	68ba      	ldr	r2, [r7, #8]
  40174a:	631a      	str	r2, [r3, #48]	; 0x30
  40174c:	e002      	b.n	401754 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40174e:	68fb      	ldr	r3, [r7, #12]
  401750:	68ba      	ldr	r2, [r7, #8]
  401752:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401754:	68fb      	ldr	r3, [r7, #12]
  401756:	68ba      	ldr	r2, [r7, #8]
  401758:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40175a:	68fb      	ldr	r3, [r7, #12]
  40175c:	68ba      	ldr	r2, [r7, #8]
  40175e:	601a      	str	r2, [r3, #0]
}
  401760:	bf00      	nop
  401762:	3710      	adds	r7, #16
  401764:	46bd      	mov	sp, r7
  401766:	bd80      	pop	{r7, pc}
  401768:	004017f5 	.word	0x004017f5
  40176c:	0040151d 	.word	0x0040151d

00401770 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401770:	b480      	push	{r7}
  401772:	b085      	sub	sp, #20
  401774:	af00      	add	r7, sp, #0
  401776:	60f8      	str	r0, [r7, #12]
  401778:	60b9      	str	r1, [r7, #8]
  40177a:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	f003 0310 	and.w	r3, r3, #16
  401782:	2b00      	cmp	r3, #0
  401784:	d020      	beq.n	4017c8 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401786:	68fb      	ldr	r3, [r7, #12]
  401788:	68ba      	ldr	r2, [r7, #8]
  40178a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	f003 0320 	and.w	r3, r3, #32
  401794:	2b00      	cmp	r3, #0
  401796:	d004      	beq.n	4017a2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401798:	68fb      	ldr	r3, [r7, #12]
  40179a:	68ba      	ldr	r2, [r7, #8]
  40179c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4017a0:	e003      	b.n	4017aa <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4017a2:	68fb      	ldr	r3, [r7, #12]
  4017a4:	68ba      	ldr	r2, [r7, #8]
  4017a6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4017aa:	687b      	ldr	r3, [r7, #4]
  4017ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4017b0:	2b00      	cmp	r3, #0
  4017b2:	d004      	beq.n	4017be <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4017b4:	68fb      	ldr	r3, [r7, #12]
  4017b6:	68ba      	ldr	r2, [r7, #8]
  4017b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4017bc:	e008      	b.n	4017d0 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4017be:	68fb      	ldr	r3, [r7, #12]
  4017c0:	68ba      	ldr	r2, [r7, #8]
  4017c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4017c6:	e003      	b.n	4017d0 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4017c8:	68fb      	ldr	r3, [r7, #12]
  4017ca:	68ba      	ldr	r2, [r7, #8]
  4017cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4017d0:	bf00      	nop
  4017d2:	3714      	adds	r7, #20
  4017d4:	46bd      	mov	sp, r7
  4017d6:	bc80      	pop	{r7}
  4017d8:	4770      	bx	lr

004017da <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4017da:	b480      	push	{r7}
  4017dc:	b083      	sub	sp, #12
  4017de:	af00      	add	r7, sp, #0
  4017e0:	6078      	str	r0, [r7, #4]
  4017e2:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4017e4:	687b      	ldr	r3, [r7, #4]
  4017e6:	683a      	ldr	r2, [r7, #0]
  4017e8:	641a      	str	r2, [r3, #64]	; 0x40
}
  4017ea:	bf00      	nop
  4017ec:	370c      	adds	r7, #12
  4017ee:	46bd      	mov	sp, r7
  4017f0:	bc80      	pop	{r7}
  4017f2:	4770      	bx	lr

004017f4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4017f4:	b480      	push	{r7}
  4017f6:	b083      	sub	sp, #12
  4017f8:	af00      	add	r7, sp, #0
  4017fa:	6078      	str	r0, [r7, #4]
  4017fc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4017fe:	687b      	ldr	r3, [r7, #4]
  401800:	683a      	ldr	r2, [r7, #0]
  401802:	645a      	str	r2, [r3, #68]	; 0x44
}
  401804:	bf00      	nop
  401806:	370c      	adds	r7, #12
  401808:	46bd      	mov	sp, r7
  40180a:	bc80      	pop	{r7}
  40180c:	4770      	bx	lr

0040180e <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40180e:	b480      	push	{r7}
  401810:	b083      	sub	sp, #12
  401812:	af00      	add	r7, sp, #0
  401814:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401816:	687b      	ldr	r3, [r7, #4]
  401818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40181a:	4618      	mov	r0, r3
  40181c:	370c      	adds	r7, #12
  40181e:	46bd      	mov	sp, r7
  401820:	bc80      	pop	{r7}
  401822:	4770      	bx	lr

00401824 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401824:	b480      	push	{r7}
  401826:	b083      	sub	sp, #12
  401828:	af00      	add	r7, sp, #0
  40182a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40182c:	687b      	ldr	r3, [r7, #4]
  40182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401830:	4618      	mov	r0, r3
  401832:	370c      	adds	r7, #12
  401834:	46bd      	mov	sp, r7
  401836:	bc80      	pop	{r7}
  401838:	4770      	bx	lr
	...

0040183c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40183c:	b590      	push	{r4, r7, lr}
  40183e:	b087      	sub	sp, #28
  401840:	af02      	add	r7, sp, #8
  401842:	6078      	str	r0, [r7, #4]
  401844:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401846:	6878      	ldr	r0, [r7, #4]
  401848:	4b63      	ldr	r3, [pc, #396]	; (4019d8 <pio_configure_pin+0x19c>)
  40184a:	4798      	blx	r3
  40184c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40184e:	683b      	ldr	r3, [r7, #0]
  401850:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401858:	d067      	beq.n	40192a <pio_configure_pin+0xee>
  40185a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40185e:	d809      	bhi.n	401874 <pio_configure_pin+0x38>
  401860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401864:	d02b      	beq.n	4018be <pio_configure_pin+0x82>
  401866:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40186a:	d043      	beq.n	4018f4 <pio_configure_pin+0xb8>
  40186c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401870:	d00a      	beq.n	401888 <pio_configure_pin+0x4c>
  401872:	e0a9      	b.n	4019c8 <pio_configure_pin+0x18c>
  401874:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401878:	d07e      	beq.n	401978 <pio_configure_pin+0x13c>
  40187a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40187e:	d07b      	beq.n	401978 <pio_configure_pin+0x13c>
  401880:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401884:	d06c      	beq.n	401960 <pio_configure_pin+0x124>
  401886:	e09f      	b.n	4019c8 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401888:	687b      	ldr	r3, [r7, #4]
  40188a:	f003 031f 	and.w	r3, r3, #31
  40188e:	2201      	movs	r2, #1
  401890:	fa02 f303 	lsl.w	r3, r2, r3
  401894:	461a      	mov	r2, r3
  401896:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40189a:	68f8      	ldr	r0, [r7, #12]
  40189c:	4b4f      	ldr	r3, [pc, #316]	; (4019dc <pio_configure_pin+0x1a0>)
  40189e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4018a0:	687b      	ldr	r3, [r7, #4]
  4018a2:	f003 031f 	and.w	r3, r3, #31
  4018a6:	2201      	movs	r2, #1
  4018a8:	fa02 f303 	lsl.w	r3, r2, r3
  4018ac:	4619      	mov	r1, r3
  4018ae:	683b      	ldr	r3, [r7, #0]
  4018b0:	f003 0301 	and.w	r3, r3, #1
  4018b4:	461a      	mov	r2, r3
  4018b6:	68f8      	ldr	r0, [r7, #12]
  4018b8:	4b49      	ldr	r3, [pc, #292]	; (4019e0 <pio_configure_pin+0x1a4>)
  4018ba:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4018bc:	e086      	b.n	4019cc <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4018be:	687b      	ldr	r3, [r7, #4]
  4018c0:	f003 031f 	and.w	r3, r3, #31
  4018c4:	2201      	movs	r2, #1
  4018c6:	fa02 f303 	lsl.w	r3, r2, r3
  4018ca:	461a      	mov	r2, r3
  4018cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4018d0:	68f8      	ldr	r0, [r7, #12]
  4018d2:	4b42      	ldr	r3, [pc, #264]	; (4019dc <pio_configure_pin+0x1a0>)
  4018d4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4018d6:	687b      	ldr	r3, [r7, #4]
  4018d8:	f003 031f 	and.w	r3, r3, #31
  4018dc:	2201      	movs	r2, #1
  4018de:	fa02 f303 	lsl.w	r3, r2, r3
  4018e2:	4619      	mov	r1, r3
  4018e4:	683b      	ldr	r3, [r7, #0]
  4018e6:	f003 0301 	and.w	r3, r3, #1
  4018ea:	461a      	mov	r2, r3
  4018ec:	68f8      	ldr	r0, [r7, #12]
  4018ee:	4b3c      	ldr	r3, [pc, #240]	; (4019e0 <pio_configure_pin+0x1a4>)
  4018f0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4018f2:	e06b      	b.n	4019cc <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4018f4:	687b      	ldr	r3, [r7, #4]
  4018f6:	f003 031f 	and.w	r3, r3, #31
  4018fa:	2201      	movs	r2, #1
  4018fc:	fa02 f303 	lsl.w	r3, r2, r3
  401900:	461a      	mov	r2, r3
  401902:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401906:	68f8      	ldr	r0, [r7, #12]
  401908:	4b34      	ldr	r3, [pc, #208]	; (4019dc <pio_configure_pin+0x1a0>)
  40190a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40190c:	687b      	ldr	r3, [r7, #4]
  40190e:	f003 031f 	and.w	r3, r3, #31
  401912:	2201      	movs	r2, #1
  401914:	fa02 f303 	lsl.w	r3, r2, r3
  401918:	4619      	mov	r1, r3
  40191a:	683b      	ldr	r3, [r7, #0]
  40191c:	f003 0301 	and.w	r3, r3, #1
  401920:	461a      	mov	r2, r3
  401922:	68f8      	ldr	r0, [r7, #12]
  401924:	4b2e      	ldr	r3, [pc, #184]	; (4019e0 <pio_configure_pin+0x1a4>)
  401926:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401928:	e050      	b.n	4019cc <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40192a:	687b      	ldr	r3, [r7, #4]
  40192c:	f003 031f 	and.w	r3, r3, #31
  401930:	2201      	movs	r2, #1
  401932:	fa02 f303 	lsl.w	r3, r2, r3
  401936:	461a      	mov	r2, r3
  401938:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40193c:	68f8      	ldr	r0, [r7, #12]
  40193e:	4b27      	ldr	r3, [pc, #156]	; (4019dc <pio_configure_pin+0x1a0>)
  401940:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401942:	687b      	ldr	r3, [r7, #4]
  401944:	f003 031f 	and.w	r3, r3, #31
  401948:	2201      	movs	r2, #1
  40194a:	fa02 f303 	lsl.w	r3, r2, r3
  40194e:	4619      	mov	r1, r3
  401950:	683b      	ldr	r3, [r7, #0]
  401952:	f003 0301 	and.w	r3, r3, #1
  401956:	461a      	mov	r2, r3
  401958:	68f8      	ldr	r0, [r7, #12]
  40195a:	4b21      	ldr	r3, [pc, #132]	; (4019e0 <pio_configure_pin+0x1a4>)
  40195c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40195e:	e035      	b.n	4019cc <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401960:	687b      	ldr	r3, [r7, #4]
  401962:	f003 031f 	and.w	r3, r3, #31
  401966:	2201      	movs	r2, #1
  401968:	fa02 f303 	lsl.w	r3, r2, r3
  40196c:	683a      	ldr	r2, [r7, #0]
  40196e:	4619      	mov	r1, r3
  401970:	68f8      	ldr	r0, [r7, #12]
  401972:	4b1c      	ldr	r3, [pc, #112]	; (4019e4 <pio_configure_pin+0x1a8>)
  401974:	4798      	blx	r3
		break;
  401976:	e029      	b.n	4019cc <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401978:	687b      	ldr	r3, [r7, #4]
  40197a:	f003 031f 	and.w	r3, r3, #31
  40197e:	2201      	movs	r2, #1
  401980:	fa02 f303 	lsl.w	r3, r2, r3
  401984:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401986:	683b      	ldr	r3, [r7, #0]
  401988:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40198c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401990:	bf0c      	ite	eq
  401992:	2301      	moveq	r3, #1
  401994:	2300      	movne	r3, #0
  401996:	b2db      	uxtb	r3, r3
  401998:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40199a:	683b      	ldr	r3, [r7, #0]
  40199c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	bf14      	ite	ne
  4019a4:	2301      	movne	r3, #1
  4019a6:	2300      	moveq	r3, #0
  4019a8:	b2db      	uxtb	r3, r3
  4019aa:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4019ac:	683b      	ldr	r3, [r7, #0]
  4019ae:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4019b2:	2b00      	cmp	r3, #0
  4019b4:	bf14      	ite	ne
  4019b6:	2301      	movne	r3, #1
  4019b8:	2300      	moveq	r3, #0
  4019ba:	b2db      	uxtb	r3, r3
  4019bc:	9300      	str	r3, [sp, #0]
  4019be:	4603      	mov	r3, r0
  4019c0:	68f8      	ldr	r0, [r7, #12]
  4019c2:	4c09      	ldr	r4, [pc, #36]	; (4019e8 <pio_configure_pin+0x1ac>)
  4019c4:	47a0      	blx	r4
		break;
  4019c6:	e001      	b.n	4019cc <pio_configure_pin+0x190>

	default:
		return 0;
  4019c8:	2300      	movs	r3, #0
  4019ca:	e000      	b.n	4019ce <pio_configure_pin+0x192>
	}

	return 1;
  4019cc:	2301      	movs	r3, #1
}
  4019ce:	4618      	mov	r0, r3
  4019d0:	3714      	adds	r7, #20
  4019d2:	46bd      	mov	sp, r7
  4019d4:	bd90      	pop	{r4, r7, pc}
  4019d6:	bf00      	nop
  4019d8:	004019ed 	.word	0x004019ed
  4019dc:	0040157d 	.word	0x0040157d
  4019e0:	0040151d 	.word	0x0040151d
  4019e4:	0040168d 	.word	0x0040168d
  4019e8:	0040170d 	.word	0x0040170d

004019ec <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4019ec:	b480      	push	{r7}
  4019ee:	b085      	sub	sp, #20
  4019f0:	af00      	add	r7, sp, #0
  4019f2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4019f4:	687b      	ldr	r3, [r7, #4]
  4019f6:	095b      	lsrs	r3, r3, #5
  4019f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4019fc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401a00:	025b      	lsls	r3, r3, #9
  401a02:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401a04:	68fb      	ldr	r3, [r7, #12]
}
  401a06:	4618      	mov	r0, r3
  401a08:	3714      	adds	r7, #20
  401a0a:	46bd      	mov	sp, r7
  401a0c:	bc80      	pop	{r7}
  401a0e:	4770      	bx	lr

00401a10 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401a10:	b480      	push	{r7}
  401a12:	b085      	sub	sp, #20
  401a14:	af00      	add	r7, sp, #0
  401a16:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401a18:	491c      	ldr	r1, [pc, #112]	; (401a8c <pmc_switch_mck_to_pllack+0x7c>)
  401a1a:	4b1c      	ldr	r3, [pc, #112]	; (401a8c <pmc_switch_mck_to_pllack+0x7c>)
  401a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	4313      	orrs	r3, r2
  401a26:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401a2c:	60fb      	str	r3, [r7, #12]
  401a2e:	e007      	b.n	401a40 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401a30:	68fb      	ldr	r3, [r7, #12]
  401a32:	2b00      	cmp	r3, #0
  401a34:	d101      	bne.n	401a3a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401a36:	2301      	movs	r3, #1
  401a38:	e023      	b.n	401a82 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401a3a:	68fb      	ldr	r3, [r7, #12]
  401a3c:	3b01      	subs	r3, #1
  401a3e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a40:	4b12      	ldr	r3, [pc, #72]	; (401a8c <pmc_switch_mck_to_pllack+0x7c>)
  401a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a44:	f003 0308 	and.w	r3, r3, #8
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d0f1      	beq.n	401a30 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401a4c:	4a0f      	ldr	r2, [pc, #60]	; (401a8c <pmc_switch_mck_to_pllack+0x7c>)
  401a4e:	4b0f      	ldr	r3, [pc, #60]	; (401a8c <pmc_switch_mck_to_pllack+0x7c>)
  401a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a52:	f023 0303 	bic.w	r3, r3, #3
  401a56:	f043 0302 	orr.w	r3, r3, #2
  401a5a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401a60:	60fb      	str	r3, [r7, #12]
  401a62:	e007      	b.n	401a74 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401a64:	68fb      	ldr	r3, [r7, #12]
  401a66:	2b00      	cmp	r3, #0
  401a68:	d101      	bne.n	401a6e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401a6a:	2301      	movs	r3, #1
  401a6c:	e009      	b.n	401a82 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401a6e:	68fb      	ldr	r3, [r7, #12]
  401a70:	3b01      	subs	r3, #1
  401a72:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a74:	4b05      	ldr	r3, [pc, #20]	; (401a8c <pmc_switch_mck_to_pllack+0x7c>)
  401a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a78:	f003 0308 	and.w	r3, r3, #8
  401a7c:	2b00      	cmp	r3, #0
  401a7e:	d0f1      	beq.n	401a64 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401a80:	2300      	movs	r3, #0
}
  401a82:	4618      	mov	r0, r3
  401a84:	3714      	adds	r7, #20
  401a86:	46bd      	mov	sp, r7
  401a88:	bc80      	pop	{r7}
  401a8a:	4770      	bx	lr
  401a8c:	400e0400 	.word	0x400e0400

00401a90 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401a90:	b480      	push	{r7}
  401a92:	b083      	sub	sp, #12
  401a94:	af00      	add	r7, sp, #0
  401a96:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401a98:	687b      	ldr	r3, [r7, #4]
  401a9a:	2b01      	cmp	r3, #1
  401a9c:	d107      	bne.n	401aae <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401a9e:	4a08      	ldr	r2, [pc, #32]	; (401ac0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401aa0:	4b07      	ldr	r3, [pc, #28]	; (401ac0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401aa2:	689b      	ldr	r3, [r3, #8]
  401aa4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401aac:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401aae:	4b04      	ldr	r3, [pc, #16]	; (401ac0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401ab0:	4a04      	ldr	r2, [pc, #16]	; (401ac4 <pmc_switch_sclk_to_32kxtal+0x34>)
  401ab2:	601a      	str	r2, [r3, #0]
}
  401ab4:	bf00      	nop
  401ab6:	370c      	adds	r7, #12
  401ab8:	46bd      	mov	sp, r7
  401aba:	bc80      	pop	{r7}
  401abc:	4770      	bx	lr
  401abe:	bf00      	nop
  401ac0:	400e1410 	.word	0x400e1410
  401ac4:	a5000008 	.word	0xa5000008

00401ac8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401ac8:	b480      	push	{r7}
  401aca:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401acc:	4b09      	ldr	r3, [pc, #36]	; (401af4 <pmc_osc_is_ready_32kxtal+0x2c>)
  401ace:	695b      	ldr	r3, [r3, #20]
  401ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401ad4:	2b00      	cmp	r3, #0
  401ad6:	d007      	beq.n	401ae8 <pmc_osc_is_ready_32kxtal+0x20>
  401ad8:	4b07      	ldr	r3, [pc, #28]	; (401af8 <pmc_osc_is_ready_32kxtal+0x30>)
  401ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401ae0:	2b00      	cmp	r3, #0
  401ae2:	d001      	beq.n	401ae8 <pmc_osc_is_ready_32kxtal+0x20>
  401ae4:	2301      	movs	r3, #1
  401ae6:	e000      	b.n	401aea <pmc_osc_is_ready_32kxtal+0x22>
  401ae8:	2300      	movs	r3, #0
}
  401aea:	4618      	mov	r0, r3
  401aec:	46bd      	mov	sp, r7
  401aee:	bc80      	pop	{r7}
  401af0:	4770      	bx	lr
  401af2:	bf00      	nop
  401af4:	400e1410 	.word	0x400e1410
  401af8:	400e0400 	.word	0x400e0400

00401afc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401afc:	b480      	push	{r7}
  401afe:	b083      	sub	sp, #12
  401b00:	af00      	add	r7, sp, #0
  401b02:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401b04:	4a18      	ldr	r2, [pc, #96]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b06:	4b18      	ldr	r3, [pc, #96]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b08:	6a1b      	ldr	r3, [r3, #32]
  401b0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401b0e:	f043 0308 	orr.w	r3, r3, #8
  401b12:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401b14:	bf00      	nop
  401b16:	4b14      	ldr	r3, [pc, #80]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401b1e:	2b00      	cmp	r3, #0
  401b20:	d0f9      	beq.n	401b16 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401b22:	4911      	ldr	r1, [pc, #68]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b24:	4b10      	ldr	r3, [pc, #64]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b26:	6a1b      	ldr	r3, [r3, #32]
  401b28:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401b30:	687a      	ldr	r2, [r7, #4]
  401b32:	4313      	orrs	r3, r2
  401b34:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401b38:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401b3a:	bf00      	nop
  401b3c:	4b0a      	ldr	r3, [pc, #40]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401b44:	2b00      	cmp	r3, #0
  401b46:	d0f9      	beq.n	401b3c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401b48:	4a07      	ldr	r2, [pc, #28]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b4a:	4b07      	ldr	r3, [pc, #28]	; (401b68 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b4c:	6a1b      	ldr	r3, [r3, #32]
  401b4e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401b56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401b5a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401b5c:	bf00      	nop
  401b5e:	370c      	adds	r7, #12
  401b60:	46bd      	mov	sp, r7
  401b62:	bc80      	pop	{r7}
  401b64:	4770      	bx	lr
  401b66:	bf00      	nop
  401b68:	400e0400 	.word	0x400e0400

00401b6c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401b6c:	b480      	push	{r7}
  401b6e:	b083      	sub	sp, #12
  401b70:	af00      	add	r7, sp, #0
  401b72:	6078      	str	r0, [r7, #4]
  401b74:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401b76:	687b      	ldr	r3, [r7, #4]
  401b78:	2b00      	cmp	r3, #0
  401b7a:	d008      	beq.n	401b8e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401b7c:	4916      	ldr	r1, [pc, #88]	; (401bd8 <pmc_switch_mainck_to_xtal+0x6c>)
  401b7e:	4b16      	ldr	r3, [pc, #88]	; (401bd8 <pmc_switch_mainck_to_xtal+0x6c>)
  401b80:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401b82:	4a16      	ldr	r2, [pc, #88]	; (401bdc <pmc_switch_mainck_to_xtal+0x70>)
  401b84:	401a      	ands	r2, r3
  401b86:	4b16      	ldr	r3, [pc, #88]	; (401be0 <pmc_switch_mainck_to_xtal+0x74>)
  401b88:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401b8a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401b8c:	e01e      	b.n	401bcc <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401b8e:	4912      	ldr	r1, [pc, #72]	; (401bd8 <pmc_switch_mainck_to_xtal+0x6c>)
  401b90:	4b11      	ldr	r3, [pc, #68]	; (401bd8 <pmc_switch_mainck_to_xtal+0x6c>)
  401b92:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401b94:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401b98:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401b9c:	683a      	ldr	r2, [r7, #0]
  401b9e:	0212      	lsls	r2, r2, #8
  401ba0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ba2:	4313      	orrs	r3, r2
  401ba4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401ba8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401bac:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401bae:	bf00      	nop
  401bb0:	4b09      	ldr	r3, [pc, #36]	; (401bd8 <pmc_switch_mainck_to_xtal+0x6c>)
  401bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401bb4:	f003 0301 	and.w	r3, r3, #1
  401bb8:	2b00      	cmp	r3, #0
  401bba:	d0f9      	beq.n	401bb0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401bbc:	4a06      	ldr	r2, [pc, #24]	; (401bd8 <pmc_switch_mainck_to_xtal+0x6c>)
  401bbe:	4b06      	ldr	r3, [pc, #24]	; (401bd8 <pmc_switch_mainck_to_xtal+0x6c>)
  401bc0:	6a1b      	ldr	r3, [r3, #32]
  401bc2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401bca:	6213      	str	r3, [r2, #32]
}
  401bcc:	bf00      	nop
  401bce:	370c      	adds	r7, #12
  401bd0:	46bd      	mov	sp, r7
  401bd2:	bc80      	pop	{r7}
  401bd4:	4770      	bx	lr
  401bd6:	bf00      	nop
  401bd8:	400e0400 	.word	0x400e0400
  401bdc:	fec8fffc 	.word	0xfec8fffc
  401be0:	01370002 	.word	0x01370002

00401be4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401be4:	b480      	push	{r7}
  401be6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401be8:	4b03      	ldr	r3, [pc, #12]	; (401bf8 <pmc_osc_is_ready_mainck+0x14>)
  401bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401bf0:	4618      	mov	r0, r3
  401bf2:	46bd      	mov	sp, r7
  401bf4:	bc80      	pop	{r7}
  401bf6:	4770      	bx	lr
  401bf8:	400e0400 	.word	0x400e0400

00401bfc <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401bfc:	b480      	push	{r7}
  401bfe:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401c00:	4b03      	ldr	r3, [pc, #12]	; (401c10 <pmc_disable_pllack+0x14>)
  401c02:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401c06:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401c08:	bf00      	nop
  401c0a:	46bd      	mov	sp, r7
  401c0c:	bc80      	pop	{r7}
  401c0e:	4770      	bx	lr
  401c10:	400e0400 	.word	0x400e0400

00401c14 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401c14:	b480      	push	{r7}
  401c16:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401c18:	4b03      	ldr	r3, [pc, #12]	; (401c28 <pmc_is_locked_pllack+0x14>)
  401c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401c1c:	f003 0302 	and.w	r3, r3, #2
}
  401c20:	4618      	mov	r0, r3
  401c22:	46bd      	mov	sp, r7
  401c24:	bc80      	pop	{r7}
  401c26:	4770      	bx	lr
  401c28:	400e0400 	.word	0x400e0400

00401c2c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401c2c:	b480      	push	{r7}
  401c2e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401c30:	4b03      	ldr	r3, [pc, #12]	; (401c40 <pmc_disable_pllbck+0x14>)
  401c32:	2200      	movs	r2, #0
  401c34:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401c36:	bf00      	nop
  401c38:	46bd      	mov	sp, r7
  401c3a:	bc80      	pop	{r7}
  401c3c:	4770      	bx	lr
  401c3e:	bf00      	nop
  401c40:	400e0400 	.word	0x400e0400

00401c44 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401c44:	b480      	push	{r7}
  401c46:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401c48:	4b03      	ldr	r3, [pc, #12]	; (401c58 <pmc_is_locked_pllbck+0x14>)
  401c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401c4c:	f003 0304 	and.w	r3, r3, #4
}
  401c50:	4618      	mov	r0, r3
  401c52:	46bd      	mov	sp, r7
  401c54:	bc80      	pop	{r7}
  401c56:	4770      	bx	lr
  401c58:	400e0400 	.word	0x400e0400

00401c5c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401c5c:	b480      	push	{r7}
  401c5e:	b083      	sub	sp, #12
  401c60:	af00      	add	r7, sp, #0
  401c62:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401c64:	687b      	ldr	r3, [r7, #4]
  401c66:	2b22      	cmp	r3, #34	; 0x22
  401c68:	d901      	bls.n	401c6e <pmc_enable_periph_clk+0x12>
		return 1;
  401c6a:	2301      	movs	r3, #1
  401c6c:	e02f      	b.n	401cce <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401c6e:	687b      	ldr	r3, [r7, #4]
  401c70:	2b1f      	cmp	r3, #31
  401c72:	d813      	bhi.n	401c9c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401c74:	4b18      	ldr	r3, [pc, #96]	; (401cd8 <pmc_enable_periph_clk+0x7c>)
  401c76:	699a      	ldr	r2, [r3, #24]
  401c78:	2101      	movs	r1, #1
  401c7a:	687b      	ldr	r3, [r7, #4]
  401c7c:	fa01 f303 	lsl.w	r3, r1, r3
  401c80:	401a      	ands	r2, r3
  401c82:	2101      	movs	r1, #1
  401c84:	687b      	ldr	r3, [r7, #4]
  401c86:	fa01 f303 	lsl.w	r3, r1, r3
  401c8a:	429a      	cmp	r2, r3
  401c8c:	d01e      	beq.n	401ccc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401c8e:	4a12      	ldr	r2, [pc, #72]	; (401cd8 <pmc_enable_periph_clk+0x7c>)
  401c90:	2101      	movs	r1, #1
  401c92:	687b      	ldr	r3, [r7, #4]
  401c94:	fa01 f303 	lsl.w	r3, r1, r3
  401c98:	6113      	str	r3, [r2, #16]
  401c9a:	e017      	b.n	401ccc <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401c9c:	687b      	ldr	r3, [r7, #4]
  401c9e:	3b20      	subs	r3, #32
  401ca0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401ca2:	4b0d      	ldr	r3, [pc, #52]	; (401cd8 <pmc_enable_periph_clk+0x7c>)
  401ca4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401ca8:	2101      	movs	r1, #1
  401caa:	687b      	ldr	r3, [r7, #4]
  401cac:	fa01 f303 	lsl.w	r3, r1, r3
  401cb0:	401a      	ands	r2, r3
  401cb2:	2101      	movs	r1, #1
  401cb4:	687b      	ldr	r3, [r7, #4]
  401cb6:	fa01 f303 	lsl.w	r3, r1, r3
  401cba:	429a      	cmp	r2, r3
  401cbc:	d006      	beq.n	401ccc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401cbe:	4a06      	ldr	r2, [pc, #24]	; (401cd8 <pmc_enable_periph_clk+0x7c>)
  401cc0:	2101      	movs	r1, #1
  401cc2:	687b      	ldr	r3, [r7, #4]
  401cc4:	fa01 f303 	lsl.w	r3, r1, r3
  401cc8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401ccc:	2300      	movs	r3, #0
}
  401cce:	4618      	mov	r0, r3
  401cd0:	370c      	adds	r7, #12
  401cd2:	46bd      	mov	sp, r7
  401cd4:	bc80      	pop	{r7}
  401cd6:	4770      	bx	lr
  401cd8:	400e0400 	.word	0x400e0400

00401cdc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401cdc:	b480      	push	{r7}
  401cde:	b087      	sub	sp, #28
  401ce0:	af00      	add	r7, sp, #0
  401ce2:	60f8      	str	r0, [r7, #12]
  401ce4:	60b9      	str	r1, [r7, #8]
  401ce6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401ce8:	68fa      	ldr	r2, [r7, #12]
  401cea:	68bb      	ldr	r3, [r7, #8]
  401cec:	019b      	lsls	r3, r3, #6
  401cee:	4413      	add	r3, r2
  401cf0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401cf2:	697b      	ldr	r3, [r7, #20]
  401cf4:	2202      	movs	r2, #2
  401cf6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401cf8:	697b      	ldr	r3, [r7, #20]
  401cfa:	f04f 32ff 	mov.w	r2, #4294967295
  401cfe:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401d00:	697b      	ldr	r3, [r7, #20]
  401d02:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401d04:	697b      	ldr	r3, [r7, #20]
  401d06:	687a      	ldr	r2, [r7, #4]
  401d08:	605a      	str	r2, [r3, #4]
}
  401d0a:	bf00      	nop
  401d0c:	371c      	adds	r7, #28
  401d0e:	46bd      	mov	sp, r7
  401d10:	bc80      	pop	{r7}
  401d12:	4770      	bx	lr

00401d14 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401d14:	b480      	push	{r7}
  401d16:	b083      	sub	sp, #12
  401d18:	af00      	add	r7, sp, #0
  401d1a:	6078      	str	r0, [r7, #4]
  401d1c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401d1e:	687a      	ldr	r2, [r7, #4]
  401d20:	683b      	ldr	r3, [r7, #0]
  401d22:	019b      	lsls	r3, r3, #6
  401d24:	4413      	add	r3, r2
  401d26:	2205      	movs	r2, #5
  401d28:	601a      	str	r2, [r3, #0]
}
  401d2a:	bf00      	nop
  401d2c:	370c      	adds	r7, #12
  401d2e:	46bd      	mov	sp, r7
  401d30:	bc80      	pop	{r7}
  401d32:	4770      	bx	lr

00401d34 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  401d34:	b480      	push	{r7}
  401d36:	b085      	sub	sp, #20
  401d38:	af00      	add	r7, sp, #0
  401d3a:	60f8      	str	r0, [r7, #12]
  401d3c:	60b9      	str	r1, [r7, #8]
  401d3e:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401d40:	68fa      	ldr	r2, [r7, #12]
  401d42:	68bb      	ldr	r3, [r7, #8]
  401d44:	019b      	lsls	r3, r3, #6
  401d46:	4413      	add	r3, r2
  401d48:	331c      	adds	r3, #28
  401d4a:	687a      	ldr	r2, [r7, #4]
  401d4c:	601a      	str	r2, [r3, #0]
}
  401d4e:	bf00      	nop
  401d50:	3714      	adds	r7, #20
  401d52:	46bd      	mov	sp, r7
  401d54:	bc80      	pop	{r7}
  401d56:	4770      	bx	lr

00401d58 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  401d58:	b480      	push	{r7}
  401d5a:	b087      	sub	sp, #28
  401d5c:	af00      	add	r7, sp, #0
  401d5e:	60f8      	str	r0, [r7, #12]
  401d60:	60b9      	str	r1, [r7, #8]
  401d62:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401d64:	68fa      	ldr	r2, [r7, #12]
  401d66:	68bb      	ldr	r3, [r7, #8]
  401d68:	019b      	lsls	r3, r3, #6
  401d6a:	4413      	add	r3, r2
  401d6c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401d6e:	697b      	ldr	r3, [r7, #20]
  401d70:	687a      	ldr	r2, [r7, #4]
  401d72:	625a      	str	r2, [r3, #36]	; 0x24
}
  401d74:	bf00      	nop
  401d76:	371c      	adds	r7, #28
  401d78:	46bd      	mov	sp, r7
  401d7a:	bc80      	pop	{r7}
  401d7c:	4770      	bx	lr

00401d7e <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401d7e:	b480      	push	{r7}
  401d80:	b085      	sub	sp, #20
  401d82:	af00      	add	r7, sp, #0
  401d84:	6078      	str	r0, [r7, #4]
  401d86:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401d88:	687a      	ldr	r2, [r7, #4]
  401d8a:	683b      	ldr	r3, [r7, #0]
  401d8c:	019b      	lsls	r3, r3, #6
  401d8e:	4413      	add	r3, r2
  401d90:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  401d92:	68fb      	ldr	r3, [r7, #12]
  401d94:	6a1b      	ldr	r3, [r3, #32]
}
  401d96:	4618      	mov	r0, r3
  401d98:	3714      	adds	r7, #20
  401d9a:	46bd      	mov	sp, r7
  401d9c:	bc80      	pop	{r7}
  401d9e:	4770      	bx	lr

00401da0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401da0:	b480      	push	{r7}
  401da2:	b08d      	sub	sp, #52	; 0x34
  401da4:	af00      	add	r7, sp, #0
  401da6:	60f8      	str	r0, [r7, #12]
  401da8:	60b9      	str	r1, [r7, #8]
  401daa:	607a      	str	r2, [r7, #4]
  401dac:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401dae:	2302      	movs	r3, #2
  401db0:	613b      	str	r3, [r7, #16]
  401db2:	2308      	movs	r3, #8
  401db4:	617b      	str	r3, [r7, #20]
  401db6:	2320      	movs	r3, #32
  401db8:	61bb      	str	r3, [r7, #24]
  401dba:	2380      	movs	r3, #128	; 0x80
  401dbc:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401dc0:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401dc2:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401dc4:	2300      	movs	r3, #0
  401dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  401dc8:	e01a      	b.n	401e00 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  401dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401dcc:	009b      	lsls	r3, r3, #2
  401dce:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401dd2:	4413      	add	r3, r2
  401dd4:	f853 3c20 	ldr.w	r3, [r3, #-32]
  401dd8:	68ba      	ldr	r2, [r7, #8]
  401dda:	fbb2 f3f3 	udiv	r3, r2, r3
  401dde:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  401de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401de2:	0c1b      	lsrs	r3, r3, #16
  401de4:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  401de6:	68fa      	ldr	r2, [r7, #12]
  401de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401dea:	429a      	cmp	r2, r3
  401dec:	d901      	bls.n	401df2 <tc_find_mck_divisor+0x52>
			return 0;
  401dee:	2300      	movs	r3, #0
  401df0:	e023      	b.n	401e3a <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  401df2:	68fa      	ldr	r2, [r7, #12]
  401df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401df6:	429a      	cmp	r2, r3
  401df8:	d206      	bcs.n	401e08 <tc_find_mck_divisor+0x68>
			ul_index++) {
  401dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401dfc:	3301      	adds	r3, #1
  401dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  401e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e02:	2b04      	cmp	r3, #4
  401e04:	d9e1      	bls.n	401dca <tc_find_mck_divisor+0x2a>
  401e06:	e000      	b.n	401e0a <tc_find_mck_divisor+0x6a>
			break;
  401e08:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  401e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e0c:	2b04      	cmp	r3, #4
  401e0e:	d901      	bls.n	401e14 <tc_find_mck_divisor+0x74>
		return 0;
  401e10:	2300      	movs	r3, #0
  401e12:	e012      	b.n	401e3a <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  401e14:	687b      	ldr	r3, [r7, #4]
  401e16:	2b00      	cmp	r3, #0
  401e18:	d008      	beq.n	401e2c <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e1c:	009b      	lsls	r3, r3, #2
  401e1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401e22:	4413      	add	r3, r2
  401e24:	f853 2c20 	ldr.w	r2, [r3, #-32]
  401e28:	687b      	ldr	r3, [r7, #4]
  401e2a:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401e2c:	683b      	ldr	r3, [r7, #0]
  401e2e:	2b00      	cmp	r3, #0
  401e30:	d002      	beq.n	401e38 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  401e32:	683b      	ldr	r3, [r7, #0]
  401e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401e36:	601a      	str	r2, [r3, #0]
	}

	return 1;
  401e38:	2301      	movs	r3, #1
}
  401e3a:	4618      	mov	r0, r3
  401e3c:	3734      	adds	r7, #52	; 0x34
  401e3e:	46bd      	mov	sp, r7
  401e40:	bc80      	pop	{r7}
  401e42:	4770      	bx	lr

00401e44 <sysclk_enable_peripheral_clock>:
{
  401e44:	b580      	push	{r7, lr}
  401e46:	b082      	sub	sp, #8
  401e48:	af00      	add	r7, sp, #0
  401e4a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401e4c:	6878      	ldr	r0, [r7, #4]
  401e4e:	4b03      	ldr	r3, [pc, #12]	; (401e5c <sysclk_enable_peripheral_clock+0x18>)
  401e50:	4798      	blx	r3
}
  401e52:	bf00      	nop
  401e54:	3708      	adds	r7, #8
  401e56:	46bd      	mov	sp, r7
  401e58:	bd80      	pop	{r7, pc}
  401e5a:	bf00      	nop
  401e5c:	00401c5d 	.word	0x00401c5d

00401e60 <ioport_init>:
{
  401e60:	b580      	push	{r7, lr}
  401e62:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401e64:	200b      	movs	r0, #11
  401e66:	4b03      	ldr	r3, [pc, #12]	; (401e74 <ioport_init+0x14>)
  401e68:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401e6a:	200c      	movs	r0, #12
  401e6c:	4b01      	ldr	r3, [pc, #4]	; (401e74 <ioport_init+0x14>)
  401e6e:	4798      	blx	r3
}
  401e70:	bf00      	nop
  401e72:	bd80      	pop	{r7, pc}
  401e74:	00401e45 	.word	0x00401e45

00401e78 <ioport_set_pin_dir>:
{
  401e78:	b480      	push	{r7}
  401e7a:	b08d      	sub	sp, #52	; 0x34
  401e7c:	af00      	add	r7, sp, #0
  401e7e:	6078      	str	r0, [r7, #4]
  401e80:	460b      	mov	r3, r1
  401e82:	70fb      	strb	r3, [r7, #3]
  401e84:	687b      	ldr	r3, [r7, #4]
  401e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  401e88:	78fb      	ldrb	r3, [r7, #3]
  401e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e90:	627b      	str	r3, [r7, #36]	; 0x24
  401e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e94:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401e96:	6a3b      	ldr	r3, [r7, #32]
  401e98:	095b      	lsrs	r3, r3, #5
  401e9a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401e9c:	69fb      	ldr	r3, [r7, #28]
  401e9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401ea2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401ea6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401ea8:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401eae:	2b01      	cmp	r3, #1
  401eb0:	d109      	bne.n	401ec6 <ioport_set_pin_dir+0x4e>
  401eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401eb4:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401eb6:	697b      	ldr	r3, [r7, #20]
  401eb8:	f003 031f 	and.w	r3, r3, #31
  401ebc:	2201      	movs	r2, #1
  401ebe:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ec0:	69bb      	ldr	r3, [r7, #24]
  401ec2:	611a      	str	r2, [r3, #16]
  401ec4:	e00c      	b.n	401ee0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401eca:	2b00      	cmp	r3, #0
  401ecc:	d108      	bne.n	401ee0 <ioport_set_pin_dir+0x68>
  401ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ed0:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401ed2:	693b      	ldr	r3, [r7, #16]
  401ed4:	f003 031f 	and.w	r3, r3, #31
  401ed8:	2201      	movs	r2, #1
  401eda:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401edc:	69bb      	ldr	r3, [r7, #24]
  401ede:	615a      	str	r2, [r3, #20]
  401ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ee2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401ee4:	68fb      	ldr	r3, [r7, #12]
  401ee6:	f003 031f 	and.w	r3, r3, #31
  401eea:	2201      	movs	r2, #1
  401eec:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401eee:	69bb      	ldr	r3, [r7, #24]
  401ef0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401ef4:	bf00      	nop
  401ef6:	3734      	adds	r7, #52	; 0x34
  401ef8:	46bd      	mov	sp, r7
  401efa:	bc80      	pop	{r7}
  401efc:	4770      	bx	lr

00401efe <ioport_set_pin_level>:
{
  401efe:	b480      	push	{r7}
  401f00:	b08b      	sub	sp, #44	; 0x2c
  401f02:	af00      	add	r7, sp, #0
  401f04:	6078      	str	r0, [r7, #4]
  401f06:	460b      	mov	r3, r1
  401f08:	70fb      	strb	r3, [r7, #3]
  401f0a:	687b      	ldr	r3, [r7, #4]
  401f0c:	627b      	str	r3, [r7, #36]	; 0x24
  401f0e:	78fb      	ldrb	r3, [r7, #3]
  401f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f16:	61fb      	str	r3, [r7, #28]
  401f18:	69fb      	ldr	r3, [r7, #28]
  401f1a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401f1c:	69bb      	ldr	r3, [r7, #24]
  401f1e:	095b      	lsrs	r3, r3, #5
  401f20:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401f22:	697b      	ldr	r3, [r7, #20]
  401f24:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401f28:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401f2c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401f2e:	613b      	str	r3, [r7, #16]
	if (level) {
  401f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401f34:	2b00      	cmp	r3, #0
  401f36:	d009      	beq.n	401f4c <ioport_set_pin_level+0x4e>
  401f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f3a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401f3c:	68fb      	ldr	r3, [r7, #12]
  401f3e:	f003 031f 	and.w	r3, r3, #31
  401f42:	2201      	movs	r2, #1
  401f44:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f46:	693b      	ldr	r3, [r7, #16]
  401f48:	631a      	str	r2, [r3, #48]	; 0x30
}
  401f4a:	e008      	b.n	401f5e <ioport_set_pin_level+0x60>
  401f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f4e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401f50:	68bb      	ldr	r3, [r7, #8]
  401f52:	f003 031f 	and.w	r3, r3, #31
  401f56:	2201      	movs	r2, #1
  401f58:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401f5a:	693b      	ldr	r3, [r7, #16]
  401f5c:	635a      	str	r2, [r3, #52]	; 0x34
  401f5e:	bf00      	nop
  401f60:	372c      	adds	r7, #44	; 0x2c
  401f62:	46bd      	mov	sp, r7
  401f64:	bc80      	pop	{r7}
  401f66:	4770      	bx	lr

00401f68 <board_init>:
#include <board.h>
#include <conf_board.h>


void board_init(void)
{
  401f68:	b580      	push	{r7, lr}
  401f6a:	af00      	add	r7, sp, #0
	ioport_init();
  401f6c:	4b0b      	ldr	r3, [pc, #44]	; (401f9c <board_init+0x34>)
  401f6e:	4798      	blx	r3
	ioport_set_pin_dir(PIN_WIFI_RESET,IOPORT_DIR_OUTPUT);
  401f70:	2101      	movs	r1, #1
  401f72:	2021      	movs	r0, #33	; 0x21
  401f74:	4b0a      	ldr	r3, [pc, #40]	; (401fa0 <board_init+0x38>)
  401f76:	4798      	blx	r3
	ioport_set_pin_level(PIN_WIFI_RESET,LOW);
  401f78:	2100      	movs	r1, #0
  401f7a:	2021      	movs	r0, #33	; 0x21
  401f7c:	4b09      	ldr	r3, [pc, #36]	; (401fa4 <board_init+0x3c>)
  401f7e:	4798      	blx	r3
	
	ioport_set_pin_dir(PIN_WIFI_NETWORK_STATUS,IOPORT_DIR_INPUT);
  401f80:	2100      	movs	r1, #0
  401f82:	200b      	movs	r0, #11
  401f84:	4b06      	ldr	r3, [pc, #24]	; (401fa0 <board_init+0x38>)
  401f86:	4798      	blx	r3
	//ioport_set_pin_level(PIN_WIFI_NETWORK_STATUS,LOW);
	
	ioport_set_pin_dir(PUSH_BUTTON,IOPORT_DIR_INPUT);
  401f88:	2100      	movs	r1, #0
  401f8a:	2000      	movs	r0, #0
  401f8c:	4b04      	ldr	r3, [pc, #16]	; (401fa0 <board_init+0x38>)
  401f8e:	4798      	blx	r3
	//ioport_set_pin_level(PUSH_BUTTON,HIGH);
	
	ioport_set_pin_dir(WIFI_COM_COMPLETE,IOPORT_DIR_INPUT);
  401f90:	2100      	movs	r1, #0
  401f92:	200c      	movs	r0, #12
  401f94:	4b02      	ldr	r3, [pc, #8]	; (401fa0 <board_init+0x38>)
  401f96:	4798      	blx	r3
	//ioport_set_pin_level(WIFI_COM_COMPLETE,LOW);



}
  401f98:	bf00      	nop
  401f9a:	bd80      	pop	{r7, pc}
  401f9c:	00401e61 	.word	0x00401e61
  401fa0:	00401e79 	.word	0x00401e79
  401fa4:	00401eff 	.word	0x00401eff

00401fa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401fa8:	b580      	push	{r7, lr}
  401faa:	b084      	sub	sp, #16
  401fac:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401fae:	4b27      	ldr	r3, [pc, #156]	; (40204c <Reset_Handler+0xa4>)
  401fb0:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401fb2:	4b27      	ldr	r3, [pc, #156]	; (402050 <Reset_Handler+0xa8>)
  401fb4:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401fb6:	68fa      	ldr	r2, [r7, #12]
  401fb8:	68bb      	ldr	r3, [r7, #8]
  401fba:	429a      	cmp	r2, r3
  401fbc:	d90d      	bls.n	401fda <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401fbe:	e007      	b.n	401fd0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401fc0:	68bb      	ldr	r3, [r7, #8]
  401fc2:	1d1a      	adds	r2, r3, #4
  401fc4:	60ba      	str	r2, [r7, #8]
  401fc6:	68fa      	ldr	r2, [r7, #12]
  401fc8:	1d11      	adds	r1, r2, #4
  401fca:	60f9      	str	r1, [r7, #12]
  401fcc:	6812      	ldr	r2, [r2, #0]
  401fce:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401fd0:	68bb      	ldr	r3, [r7, #8]
  401fd2:	4a20      	ldr	r2, [pc, #128]	; (402054 <Reset_Handler+0xac>)
  401fd4:	4293      	cmp	r3, r2
  401fd6:	d3f3      	bcc.n	401fc0 <Reset_Handler+0x18>
  401fd8:	e020      	b.n	40201c <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401fda:	68fa      	ldr	r2, [r7, #12]
  401fdc:	68bb      	ldr	r3, [r7, #8]
  401fde:	429a      	cmp	r2, r3
  401fe0:	d21c      	bcs.n	40201c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401fe2:	4a1c      	ldr	r2, [pc, #112]	; (402054 <Reset_Handler+0xac>)
  401fe4:	4b1a      	ldr	r3, [pc, #104]	; (402050 <Reset_Handler+0xa8>)
  401fe6:	1ad3      	subs	r3, r2, r3
  401fe8:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401fea:	68fa      	ldr	r2, [r7, #12]
  401fec:	687b      	ldr	r3, [r7, #4]
  401fee:	4413      	add	r3, r2
  401ff0:	3b04      	subs	r3, #4
  401ff2:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401ff4:	68ba      	ldr	r2, [r7, #8]
  401ff6:	687b      	ldr	r3, [r7, #4]
  401ff8:	4413      	add	r3, r2
  401ffa:	3b04      	subs	r3, #4
  401ffc:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401ffe:	e00a      	b.n	402016 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402000:	68bb      	ldr	r3, [r7, #8]
  402002:	1f1a      	subs	r2, r3, #4
  402004:	60ba      	str	r2, [r7, #8]
  402006:	68fa      	ldr	r2, [r7, #12]
  402008:	1f11      	subs	r1, r2, #4
  40200a:	60f9      	str	r1, [r7, #12]
  40200c:	6812      	ldr	r2, [r2, #0]
  40200e:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402010:	687b      	ldr	r3, [r7, #4]
  402012:	3b04      	subs	r3, #4
  402014:	607b      	str	r3, [r7, #4]
  402016:	687b      	ldr	r3, [r7, #4]
  402018:	2b00      	cmp	r3, #0
  40201a:	d1f1      	bne.n	402000 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40201c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40201e:	4b0e      	ldr	r3, [pc, #56]	; (402058 <Reset_Handler+0xb0>)
  402020:	60bb      	str	r3, [r7, #8]
  402022:	e004      	b.n	40202e <Reset_Handler+0x86>
		*pDest++ = 0;
  402024:	68bb      	ldr	r3, [r7, #8]
  402026:	1d1a      	adds	r2, r3, #4
  402028:	60ba      	str	r2, [r7, #8]
  40202a:	2200      	movs	r2, #0
  40202c:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40202e:	68bb      	ldr	r3, [r7, #8]
  402030:	4a0a      	ldr	r2, [pc, #40]	; (40205c <Reset_Handler+0xb4>)
  402032:	4293      	cmp	r3, r2
  402034:	d3f6      	bcc.n	402024 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402036:	4b0a      	ldr	r3, [pc, #40]	; (402060 <Reset_Handler+0xb8>)
  402038:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40203a:	4a0a      	ldr	r2, [pc, #40]	; (402064 <Reset_Handler+0xbc>)
  40203c:	68fb      	ldr	r3, [r7, #12]
  40203e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402040:	4b09      	ldr	r3, [pc, #36]	; (402068 <Reset_Handler+0xc0>)
  402042:	4798      	blx	r3

	/* Branch to main function */
	main();
  402044:	4b09      	ldr	r3, [pc, #36]	; (40206c <Reset_Handler+0xc4>)
  402046:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402048:	e7fe      	b.n	402048 <Reset_Handler+0xa0>
  40204a:	bf00      	nop
  40204c:	0040328c 	.word	0x0040328c
  402050:	20000000 	.word	0x20000000
  402054:	2000043c 	.word	0x2000043c
  402058:	2000043c 	.word	0x2000043c
  40205c:	2000093c 	.word	0x2000093c
  402060:	00400000 	.word	0x00400000
  402064:	e000ed00 	.word	0xe000ed00
  402068:	004027e1 	.word	0x004027e1
  40206c:	00402349 	.word	0x00402349

00402070 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402070:	b480      	push	{r7}
  402072:	af00      	add	r7, sp, #0
	while (1) {
  402074:	e7fe      	b.n	402074 <Dummy_Handler+0x4>
	...

00402078 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402078:	b480      	push	{r7}
  40207a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40207c:	4b5d      	ldr	r3, [pc, #372]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  40207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402080:	f003 0303 	and.w	r3, r3, #3
  402084:	2b03      	cmp	r3, #3
  402086:	f200 8096 	bhi.w	4021b6 <SystemCoreClockUpdate+0x13e>
  40208a:	a201      	add	r2, pc, #4	; (adr r2, 402090 <SystemCoreClockUpdate+0x18>)
  40208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402090:	004020a1 	.word	0x004020a1
  402094:	004020c1 	.word	0x004020c1
  402098:	0040210b 	.word	0x0040210b
  40209c:	0040210b 	.word	0x0040210b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4020a0:	4b55      	ldr	r3, [pc, #340]	; (4021f8 <SystemCoreClockUpdate+0x180>)
  4020a2:	695b      	ldr	r3, [r3, #20]
  4020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4020a8:	2b00      	cmp	r3, #0
  4020aa:	d004      	beq.n	4020b6 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4020ac:	4b53      	ldr	r3, [pc, #332]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4020ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4020b2:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4020b4:	e080      	b.n	4021b8 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4020b6:	4b51      	ldr	r3, [pc, #324]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4020b8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4020bc:	601a      	str	r2, [r3, #0]
		break;
  4020be:	e07b      	b.n	4021b8 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4020c0:	4b4c      	ldr	r3, [pc, #304]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  4020c2:	6a1b      	ldr	r3, [r3, #32]
  4020c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4020c8:	2b00      	cmp	r3, #0
  4020ca:	d003      	beq.n	4020d4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4020cc:	4b4b      	ldr	r3, [pc, #300]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4020ce:	4a4c      	ldr	r2, [pc, #304]	; (402200 <SystemCoreClockUpdate+0x188>)
  4020d0:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4020d2:	e071      	b.n	4021b8 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020d4:	4b49      	ldr	r3, [pc, #292]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4020d6:	4a4b      	ldr	r2, [pc, #300]	; (402204 <SystemCoreClockUpdate+0x18c>)
  4020d8:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4020da:	4b46      	ldr	r3, [pc, #280]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  4020dc:	6a1b      	ldr	r3, [r3, #32]
  4020de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020e2:	2b10      	cmp	r3, #16
  4020e4:	d008      	beq.n	4020f8 <SystemCoreClockUpdate+0x80>
  4020e6:	2b20      	cmp	r3, #32
  4020e8:	d00a      	beq.n	402100 <SystemCoreClockUpdate+0x88>
  4020ea:	2b00      	cmp	r3, #0
  4020ec:	d000      	beq.n	4020f0 <SystemCoreClockUpdate+0x78>
			break;
  4020ee:	e00b      	b.n	402108 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020f0:	4b42      	ldr	r3, [pc, #264]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4020f2:	4a44      	ldr	r2, [pc, #272]	; (402204 <SystemCoreClockUpdate+0x18c>)
  4020f4:	601a      	str	r2, [r3, #0]
			break;
  4020f6:	e007      	b.n	402108 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4020f8:	4b40      	ldr	r3, [pc, #256]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4020fa:	4a43      	ldr	r2, [pc, #268]	; (402208 <SystemCoreClockUpdate+0x190>)
  4020fc:	601a      	str	r2, [r3, #0]
			break;
  4020fe:	e003      	b.n	402108 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402100:	4b3e      	ldr	r3, [pc, #248]	; (4021fc <SystemCoreClockUpdate+0x184>)
  402102:	4a3f      	ldr	r2, [pc, #252]	; (402200 <SystemCoreClockUpdate+0x188>)
  402104:	601a      	str	r2, [r3, #0]
			break;
  402106:	bf00      	nop
		break;
  402108:	e056      	b.n	4021b8 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40210a:	4b3a      	ldr	r3, [pc, #232]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  40210c:	6a1b      	ldr	r3, [r3, #32]
  40210e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402112:	2b00      	cmp	r3, #0
  402114:	d003      	beq.n	40211e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402116:	4b39      	ldr	r3, [pc, #228]	; (4021fc <SystemCoreClockUpdate+0x184>)
  402118:	4a39      	ldr	r2, [pc, #228]	; (402200 <SystemCoreClockUpdate+0x188>)
  40211a:	601a      	str	r2, [r3, #0]
  40211c:	e019      	b.n	402152 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40211e:	4b37      	ldr	r3, [pc, #220]	; (4021fc <SystemCoreClockUpdate+0x184>)
  402120:	4a38      	ldr	r2, [pc, #224]	; (402204 <SystemCoreClockUpdate+0x18c>)
  402122:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402124:	4b33      	ldr	r3, [pc, #204]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  402126:	6a1b      	ldr	r3, [r3, #32]
  402128:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40212c:	2b10      	cmp	r3, #16
  40212e:	d008      	beq.n	402142 <SystemCoreClockUpdate+0xca>
  402130:	2b20      	cmp	r3, #32
  402132:	d00a      	beq.n	40214a <SystemCoreClockUpdate+0xd2>
  402134:	2b00      	cmp	r3, #0
  402136:	d000      	beq.n	40213a <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402138:	e00b      	b.n	402152 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40213a:	4b30      	ldr	r3, [pc, #192]	; (4021fc <SystemCoreClockUpdate+0x184>)
  40213c:	4a31      	ldr	r2, [pc, #196]	; (402204 <SystemCoreClockUpdate+0x18c>)
  40213e:	601a      	str	r2, [r3, #0]
					break;
  402140:	e007      	b.n	402152 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402142:	4b2e      	ldr	r3, [pc, #184]	; (4021fc <SystemCoreClockUpdate+0x184>)
  402144:	4a30      	ldr	r2, [pc, #192]	; (402208 <SystemCoreClockUpdate+0x190>)
  402146:	601a      	str	r2, [r3, #0]
					break;
  402148:	e003      	b.n	402152 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40214a:	4b2c      	ldr	r3, [pc, #176]	; (4021fc <SystemCoreClockUpdate+0x184>)
  40214c:	4a2c      	ldr	r2, [pc, #176]	; (402200 <SystemCoreClockUpdate+0x188>)
  40214e:	601a      	str	r2, [r3, #0]
					break;
  402150:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402152:	4b28      	ldr	r3, [pc, #160]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  402154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402156:	f003 0303 	and.w	r3, r3, #3
  40215a:	2b02      	cmp	r3, #2
  40215c:	d115      	bne.n	40218a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40215e:	4b25      	ldr	r3, [pc, #148]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  402160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402162:	0c1b      	lsrs	r3, r3, #16
  402164:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402168:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40216a:	4a24      	ldr	r2, [pc, #144]	; (4021fc <SystemCoreClockUpdate+0x184>)
  40216c:	6812      	ldr	r2, [r2, #0]
  40216e:	fb02 f303 	mul.w	r3, r2, r3
  402172:	4a22      	ldr	r2, [pc, #136]	; (4021fc <SystemCoreClockUpdate+0x184>)
  402174:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402176:	4b1f      	ldr	r3, [pc, #124]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  402178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40217a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40217c:	4a1f      	ldr	r2, [pc, #124]	; (4021fc <SystemCoreClockUpdate+0x184>)
  40217e:	6812      	ldr	r2, [r2, #0]
  402180:	fbb2 f3f3 	udiv	r3, r2, r3
  402184:	4a1d      	ldr	r2, [pc, #116]	; (4021fc <SystemCoreClockUpdate+0x184>)
  402186:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402188:	e016      	b.n	4021b8 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40218a:	4b1a      	ldr	r3, [pc, #104]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  40218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40218e:	0c1b      	lsrs	r3, r3, #16
  402190:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402194:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402196:	4a19      	ldr	r2, [pc, #100]	; (4021fc <SystemCoreClockUpdate+0x184>)
  402198:	6812      	ldr	r2, [r2, #0]
  40219a:	fb02 f303 	mul.w	r3, r2, r3
  40219e:	4a17      	ldr	r2, [pc, #92]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4021a0:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4021a2:	4b14      	ldr	r3, [pc, #80]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  4021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4021a6:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4021a8:	4a14      	ldr	r2, [pc, #80]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4021aa:	6812      	ldr	r2, [r2, #0]
  4021ac:	fbb2 f3f3 	udiv	r3, r2, r3
  4021b0:	4a12      	ldr	r2, [pc, #72]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4021b2:	6013      	str	r3, [r2, #0]
		break;
  4021b4:	e000      	b.n	4021b8 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4021b6:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4021b8:	4b0e      	ldr	r3, [pc, #56]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  4021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021c0:	2b70      	cmp	r3, #112	; 0x70
  4021c2:	d108      	bne.n	4021d6 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4021c4:	4b0d      	ldr	r3, [pc, #52]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4021c6:	681b      	ldr	r3, [r3, #0]
  4021c8:	4a10      	ldr	r2, [pc, #64]	; (40220c <SystemCoreClockUpdate+0x194>)
  4021ca:	fba2 2303 	umull	r2, r3, r2, r3
  4021ce:	085b      	lsrs	r3, r3, #1
  4021d0:	4a0a      	ldr	r2, [pc, #40]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4021d2:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4021d4:	e00a      	b.n	4021ec <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4021d6:	4b07      	ldr	r3, [pc, #28]	; (4021f4 <SystemCoreClockUpdate+0x17c>)
  4021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021da:	091b      	lsrs	r3, r3, #4
  4021dc:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4021e0:	4a06      	ldr	r2, [pc, #24]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4021e2:	6812      	ldr	r2, [r2, #0]
  4021e4:	fa22 f303 	lsr.w	r3, r2, r3
  4021e8:	4a04      	ldr	r2, [pc, #16]	; (4021fc <SystemCoreClockUpdate+0x184>)
  4021ea:	6013      	str	r3, [r2, #0]
}
  4021ec:	bf00      	nop
  4021ee:	46bd      	mov	sp, r7
  4021f0:	bc80      	pop	{r7}
  4021f2:	4770      	bx	lr
  4021f4:	400e0400 	.word	0x400e0400
  4021f8:	400e1410 	.word	0x400e1410
  4021fc:	2000000c 	.word	0x2000000c
  402200:	00b71b00 	.word	0x00b71b00
  402204:	003d0900 	.word	0x003d0900
  402208:	007a1200 	.word	0x007a1200
  40220c:	aaaaaaab 	.word	0xaaaaaaab

00402210 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402210:	b480      	push	{r7}
  402212:	b083      	sub	sp, #12
  402214:	af00      	add	r7, sp, #0
  402216:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402218:	687b      	ldr	r3, [r7, #4]
  40221a:	4a18      	ldr	r2, [pc, #96]	; (40227c <system_init_flash+0x6c>)
  40221c:	4293      	cmp	r3, r2
  40221e:	d804      	bhi.n	40222a <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402220:	4b17      	ldr	r3, [pc, #92]	; (402280 <system_init_flash+0x70>)
  402222:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402226:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402228:	e023      	b.n	402272 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40222a:	687b      	ldr	r3, [r7, #4]
  40222c:	4a15      	ldr	r2, [pc, #84]	; (402284 <system_init_flash+0x74>)
  40222e:	4293      	cmp	r3, r2
  402230:	d803      	bhi.n	40223a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402232:	4b13      	ldr	r3, [pc, #76]	; (402280 <system_init_flash+0x70>)
  402234:	4a14      	ldr	r2, [pc, #80]	; (402288 <system_init_flash+0x78>)
  402236:	601a      	str	r2, [r3, #0]
}
  402238:	e01b      	b.n	402272 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40223a:	687b      	ldr	r3, [r7, #4]
  40223c:	4a13      	ldr	r2, [pc, #76]	; (40228c <system_init_flash+0x7c>)
  40223e:	4293      	cmp	r3, r2
  402240:	d803      	bhi.n	40224a <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402242:	4b0f      	ldr	r3, [pc, #60]	; (402280 <system_init_flash+0x70>)
  402244:	4a12      	ldr	r2, [pc, #72]	; (402290 <system_init_flash+0x80>)
  402246:	601a      	str	r2, [r3, #0]
}
  402248:	e013      	b.n	402272 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40224a:	687b      	ldr	r3, [r7, #4]
  40224c:	4a11      	ldr	r2, [pc, #68]	; (402294 <system_init_flash+0x84>)
  40224e:	4293      	cmp	r3, r2
  402250:	d803      	bhi.n	40225a <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402252:	4b0b      	ldr	r3, [pc, #44]	; (402280 <system_init_flash+0x70>)
  402254:	4a10      	ldr	r2, [pc, #64]	; (402298 <system_init_flash+0x88>)
  402256:	601a      	str	r2, [r3, #0]
}
  402258:	e00b      	b.n	402272 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40225a:	687b      	ldr	r3, [r7, #4]
  40225c:	4a0f      	ldr	r2, [pc, #60]	; (40229c <system_init_flash+0x8c>)
  40225e:	4293      	cmp	r3, r2
  402260:	d804      	bhi.n	40226c <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402262:	4b07      	ldr	r3, [pc, #28]	; (402280 <system_init_flash+0x70>)
  402264:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402268:	601a      	str	r2, [r3, #0]
}
  40226a:	e002      	b.n	402272 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40226c:	4b04      	ldr	r3, [pc, #16]	; (402280 <system_init_flash+0x70>)
  40226e:	4a0c      	ldr	r2, [pc, #48]	; (4022a0 <system_init_flash+0x90>)
  402270:	601a      	str	r2, [r3, #0]
}
  402272:	bf00      	nop
  402274:	370c      	adds	r7, #12
  402276:	46bd      	mov	sp, r7
  402278:	bc80      	pop	{r7}
  40227a:	4770      	bx	lr
  40227c:	01312cff 	.word	0x01312cff
  402280:	400e0a00 	.word	0x400e0a00
  402284:	026259ff 	.word	0x026259ff
  402288:	04000100 	.word	0x04000100
  40228c:	039386ff 	.word	0x039386ff
  402290:	04000200 	.word	0x04000200
  402294:	04c4b3ff 	.word	0x04c4b3ff
  402298:	04000300 	.word	0x04000300
  40229c:	05f5e0ff 	.word	0x05f5e0ff
  4022a0:	04000500 	.word	0x04000500

004022a4 <osc_get_rate>:
{
  4022a4:	b480      	push	{r7}
  4022a6:	b083      	sub	sp, #12
  4022a8:	af00      	add	r7, sp, #0
  4022aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4022ac:	687b      	ldr	r3, [r7, #4]
  4022ae:	2b07      	cmp	r3, #7
  4022b0:	d825      	bhi.n	4022fe <osc_get_rate+0x5a>
  4022b2:	a201      	add	r2, pc, #4	; (adr r2, 4022b8 <osc_get_rate+0x14>)
  4022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022b8:	004022d9 	.word	0x004022d9
  4022bc:	004022df 	.word	0x004022df
  4022c0:	004022e5 	.word	0x004022e5
  4022c4:	004022eb 	.word	0x004022eb
  4022c8:	004022ef 	.word	0x004022ef
  4022cc:	004022f3 	.word	0x004022f3
  4022d0:	004022f7 	.word	0x004022f7
  4022d4:	004022fb 	.word	0x004022fb
		return OSC_SLCK_32K_RC_HZ;
  4022d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4022dc:	e010      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4022de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022e2:	e00d      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4022e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022e8:	e00a      	b.n	402300 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4022ea:	4b08      	ldr	r3, [pc, #32]	; (40230c <osc_get_rate+0x68>)
  4022ec:	e008      	b.n	402300 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4022ee:	4b08      	ldr	r3, [pc, #32]	; (402310 <osc_get_rate+0x6c>)
  4022f0:	e006      	b.n	402300 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4022f2:	4b08      	ldr	r3, [pc, #32]	; (402314 <osc_get_rate+0x70>)
  4022f4:	e004      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4022f6:	4b07      	ldr	r3, [pc, #28]	; (402314 <osc_get_rate+0x70>)
  4022f8:	e002      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4022fa:	4b06      	ldr	r3, [pc, #24]	; (402314 <osc_get_rate+0x70>)
  4022fc:	e000      	b.n	402300 <osc_get_rate+0x5c>
	return 0;
  4022fe:	2300      	movs	r3, #0
}
  402300:	4618      	mov	r0, r3
  402302:	370c      	adds	r7, #12
  402304:	46bd      	mov	sp, r7
  402306:	bc80      	pop	{r7}
  402308:	4770      	bx	lr
  40230a:	bf00      	nop
  40230c:	003d0900 	.word	0x003d0900
  402310:	007a1200 	.word	0x007a1200
  402314:	00b71b00 	.word	0x00b71b00

00402318 <sysclk_get_main_hz>:
{
  402318:	b580      	push	{r7, lr}
  40231a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40231c:	2006      	movs	r0, #6
  40231e:	4b04      	ldr	r3, [pc, #16]	; (402330 <sysclk_get_main_hz+0x18>)
  402320:	4798      	blx	r3
  402322:	4602      	mov	r2, r0
  402324:	4613      	mov	r3, r2
  402326:	009b      	lsls	r3, r3, #2
  402328:	4413      	add	r3, r2
  40232a:	009b      	lsls	r3, r3, #2
}
  40232c:	4618      	mov	r0, r3
  40232e:	bd80      	pop	{r7, pc}
  402330:	004022a5 	.word	0x004022a5

00402334 <sysclk_get_cpu_hz>:
{
  402334:	b580      	push	{r7, lr}
  402336:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402338:	4b02      	ldr	r3, [pc, #8]	; (402344 <sysclk_get_cpu_hz+0x10>)
  40233a:	4798      	blx	r3
  40233c:	4603      	mov	r3, r0
  40233e:	085b      	lsrs	r3, r3, #1
}
  402340:	4618      	mov	r0, r3
  402342:	bd80      	pop	{r7, pc}
  402344:	00402319 	.word	0x00402319

00402348 <main>:
// Global variables because 2/3 of us are mechanical engineers and that's just how we roll
volatile uint32_t receivedMessage;


int main (void)
{
  402348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40234c:	b089      	sub	sp, #36	; 0x24
  40234e:	af00      	add	r7, sp, #0
	// boilerplate
	sysclk_init();
  402350:	4b50      	ldr	r3, [pc, #320]	; (402494 <main+0x14c>)
  402352:	4798      	blx	r3
	wdt_disable(WDT);
  402354:	4850      	ldr	r0, [pc, #320]	; (402498 <main+0x150>)
  402356:	4b51      	ldr	r3, [pc, #324]	; (40249c <main+0x154>)
  402358:	4798      	blx	r3
	board_init();
  40235a:	4b51      	ldr	r3, [pc, #324]	; (4024a0 <main+0x158>)
  40235c:	4798      	blx	r3
	
	// start the clock that counts the seconds
	configure_tc();
  40235e:	4b51      	ldr	r3, [pc, #324]	; (4024a4 <main+0x15c>)
  402360:	4798      	blx	r3
	tc_start(TC0, 0);
  402362:	2100      	movs	r1, #0
  402364:	4850      	ldr	r0, [pc, #320]	; (4024a8 <main+0x160>)
  402366:	4b51      	ldr	r3, [pc, #324]	; (4024ac <main+0x164>)
  402368:	4798      	blx	r3

	// Configure the Wifi UART communication stuff
	configure_usart_wifi();
  40236a:	4b51      	ldr	r3, [pc, #324]	; (4024b0 <main+0x168>)
  40236c:	4798      	blx	r3
	configure_wifi_comm_pin();
  40236e:	4b51      	ldr	r3, [pc, #324]	; (4024b4 <main+0x16c>)
  402370:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  402372:	4b51      	ldr	r3, [pc, #324]	; (4024b8 <main+0x170>)
  402374:	4798      	blx	r3
	
	// Reset the wifi
	resetWifi();
  402376:	4b51      	ldr	r3, [pc, #324]	; (4024bc <main+0x174>)
  402378:	4798      	blx	r3
	delay_ms(8000);
  40237a:	4b51      	ldr	r3, [pc, #324]	; (4024c0 <main+0x178>)
  40237c:	4798      	blx	r3
  40237e:	4603      	mov	r3, r0
  402380:	4619      	mov	r1, r3
  402382:	f04f 0200 	mov.w	r2, #0
  402386:	460b      	mov	r3, r1
  402388:	4614      	mov	r4, r2
  40238a:	0166      	lsls	r6, r4, #5
  40238c:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402390:	015d      	lsls	r5, r3, #5
  402392:	462b      	mov	r3, r5
  402394:	4634      	mov	r4, r6
  402396:	1a5b      	subs	r3, r3, r1
  402398:	eb64 0402 	sbc.w	r4, r4, r2
  40239c:	ea4f 0984 	mov.w	r9, r4, lsl #2
  4023a0:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  4023a4:	ea4f 0883 	mov.w	r8, r3, lsl #2
  4023a8:	4643      	mov	r3, r8
  4023aa:	464c      	mov	r4, r9
  4023ac:	185b      	adds	r3, r3, r1
  4023ae:	eb44 0402 	adc.w	r4, r4, r2
  4023b2:	ea4f 1b84 	mov.w	fp, r4, lsl #6
  4023b6:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
  4023ba:	ea4f 1a83 	mov.w	sl, r3, lsl #6
  4023be:	4653      	mov	r3, sl
  4023c0:	465c      	mov	r4, fp
  4023c2:	4619      	mov	r1, r3
  4023c4:	4622      	mov	r2, r4
  4023c6:	f243 63af 	movw	r3, #13999	; 0x36af
  4023ca:	f04f 0400 	mov.w	r4, #0
  4023ce:	18cd      	adds	r5, r1, r3
  4023d0:	eb42 0604 	adc.w	r6, r2, r4
  4023d4:	4628      	mov	r0, r5
  4023d6:	4631      	mov	r1, r6
  4023d8:	4c3a      	ldr	r4, [pc, #232]	; (4024c4 <main+0x17c>)
  4023da:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4023de:	f04f 0300 	mov.w	r3, #0
  4023e2:	47a0      	blx	r4
  4023e4:	4603      	mov	r3, r0
  4023e6:	460c      	mov	r4, r1
  4023e8:	4618      	mov	r0, r3
  4023ea:	4b37      	ldr	r3, [pc, #220]	; (4024c8 <main+0x180>)
  4023ec:	4798      	blx	r3
		// If user has not requested web setup, try to capture and display an image
		else{

			checkGoFile();
		}*/
		checkGoFile();
  4023ee:	4b37      	ldr	r3, [pc, #220]	; (4024cc <main+0x184>)
  4023f0:	4798      	blx	r3
		delay_ms(5000);
  4023f2:	4b33      	ldr	r3, [pc, #204]	; (4024c0 <main+0x178>)
  4023f4:	4798      	blx	r3
  4023f6:	4603      	mov	r3, r0
  4023f8:	4619      	mov	r1, r3
  4023fa:	f04f 0200 	mov.w	r2, #0
  4023fe:	460b      	mov	r3, r1
  402400:	4614      	mov	r4, r2
  402402:	00a0      	lsls	r0, r4, #2
  402404:	61f8      	str	r0, [r7, #28]
  402406:	69f8      	ldr	r0, [r7, #28]
  402408:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  40240c:	61f8      	str	r0, [r7, #28]
  40240e:	009b      	lsls	r3, r3, #2
  402410:	61bb      	str	r3, [r7, #24]
  402412:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  402416:	185b      	adds	r3, r3, r1
  402418:	eb44 0402 	adc.w	r4, r4, r2
  40241c:	00e0      	lsls	r0, r4, #3
  40241e:	6178      	str	r0, [r7, #20]
  402420:	6978      	ldr	r0, [r7, #20]
  402422:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  402426:	6178      	str	r0, [r7, #20]
  402428:	00db      	lsls	r3, r3, #3
  40242a:	613b      	str	r3, [r7, #16]
  40242c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  402430:	1a5b      	subs	r3, r3, r1
  402432:	eb64 0402 	sbc.w	r4, r4, r2
  402436:	0120      	lsls	r0, r4, #4
  402438:	60f8      	str	r0, [r7, #12]
  40243a:	68f8      	ldr	r0, [r7, #12]
  40243c:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  402440:	60f8      	str	r0, [r7, #12]
  402442:	011b      	lsls	r3, r3, #4
  402444:	60bb      	str	r3, [r7, #8]
  402446:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  40244a:	185b      	adds	r3, r3, r1
  40244c:	eb44 0402 	adc.w	r4, r4, r2
  402450:	00e2      	lsls	r2, r4, #3
  402452:	607a      	str	r2, [r7, #4]
  402454:	687a      	ldr	r2, [r7, #4]
  402456:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  40245a:	607a      	str	r2, [r7, #4]
  40245c:	00db      	lsls	r3, r3, #3
  40245e:	603b      	str	r3, [r7, #0]
  402460:	e9d7 3400 	ldrd	r3, r4, [r7]
  402464:	4619      	mov	r1, r3
  402466:	4622      	mov	r2, r4
  402468:	f243 63af 	movw	r3, #13999	; 0x36af
  40246c:	f04f 0400 	mov.w	r4, #0
  402470:	18cd      	adds	r5, r1, r3
  402472:	eb42 0604 	adc.w	r6, r2, r4
  402476:	4628      	mov	r0, r5
  402478:	4631      	mov	r1, r6
  40247a:	4c12      	ldr	r4, [pc, #72]	; (4024c4 <main+0x17c>)
  40247c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402480:	f04f 0300 	mov.w	r3, #0
  402484:	47a0      	blx	r4
  402486:	4603      	mov	r3, r0
  402488:	460c      	mov	r4, r1
  40248a:	4618      	mov	r0, r3
  40248c:	4b0e      	ldr	r3, [pc, #56]	; (4024c8 <main+0x180>)
  40248e:	4798      	blx	r3
		checkGoFile();
  402490:	e7ad      	b.n	4023ee <main+0xa6>
  402492:	bf00      	nop
  402494:	004014ad 	.word	0x004014ad
  402498:	400e1450 	.word	0x400e1450
  40249c:	00400635 	.word	0x00400635
  4024a0:	00401f69 	.word	0x00401f69
  4024a4:	00400761 	.word	0x00400761
  4024a8:	40010000 	.word	0x40010000
  4024ac:	00401d15 	.word	0x00401d15
  4024b0:	00400b61 	.word	0x00400b61
  4024b4:	00400c29 	.word	0x00400c29
  4024b8:	00400c89 	.word	0x00400c89
  4024bc:	00400d39 	.word	0x00400d39
  4024c0:	00402335 	.word	0x00402335
  4024c4:	004024d1 	.word	0x004024d1
  4024c8:	20000001 	.word	0x20000001
  4024cc:	00400e65 	.word	0x00400e65

004024d0 <__aeabi_uldivmod>:
  4024d0:	b953      	cbnz	r3, 4024e8 <__aeabi_uldivmod+0x18>
  4024d2:	b94a      	cbnz	r2, 4024e8 <__aeabi_uldivmod+0x18>
  4024d4:	2900      	cmp	r1, #0
  4024d6:	bf08      	it	eq
  4024d8:	2800      	cmpeq	r0, #0
  4024da:	bf1c      	itt	ne
  4024dc:	f04f 31ff 	movne.w	r1, #4294967295
  4024e0:	f04f 30ff 	movne.w	r0, #4294967295
  4024e4:	f000 b97a 	b.w	4027dc <__aeabi_idiv0>
  4024e8:	f1ad 0c08 	sub.w	ip, sp, #8
  4024ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4024f0:	f000 f806 	bl	402500 <__udivmoddi4>
  4024f4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4024f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4024fc:	b004      	add	sp, #16
  4024fe:	4770      	bx	lr

00402500 <__udivmoddi4>:
  402500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402504:	468c      	mov	ip, r1
  402506:	460d      	mov	r5, r1
  402508:	4604      	mov	r4, r0
  40250a:	9e08      	ldr	r6, [sp, #32]
  40250c:	2b00      	cmp	r3, #0
  40250e:	d151      	bne.n	4025b4 <__udivmoddi4+0xb4>
  402510:	428a      	cmp	r2, r1
  402512:	4617      	mov	r7, r2
  402514:	d96d      	bls.n	4025f2 <__udivmoddi4+0xf2>
  402516:	fab2 fe82 	clz	lr, r2
  40251a:	f1be 0f00 	cmp.w	lr, #0
  40251e:	d00b      	beq.n	402538 <__udivmoddi4+0x38>
  402520:	f1ce 0c20 	rsb	ip, lr, #32
  402524:	fa01 f50e 	lsl.w	r5, r1, lr
  402528:	fa20 fc0c 	lsr.w	ip, r0, ip
  40252c:	fa02 f70e 	lsl.w	r7, r2, lr
  402530:	ea4c 0c05 	orr.w	ip, ip, r5
  402534:	fa00 f40e 	lsl.w	r4, r0, lr
  402538:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40253c:	0c25      	lsrs	r5, r4, #16
  40253e:	fbbc f8fa 	udiv	r8, ip, sl
  402542:	fa1f f987 	uxth.w	r9, r7
  402546:	fb0a cc18 	mls	ip, sl, r8, ip
  40254a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40254e:	fb08 f309 	mul.w	r3, r8, r9
  402552:	42ab      	cmp	r3, r5
  402554:	d90a      	bls.n	40256c <__udivmoddi4+0x6c>
  402556:	19ed      	adds	r5, r5, r7
  402558:	f108 32ff 	add.w	r2, r8, #4294967295
  40255c:	f080 8123 	bcs.w	4027a6 <__udivmoddi4+0x2a6>
  402560:	42ab      	cmp	r3, r5
  402562:	f240 8120 	bls.w	4027a6 <__udivmoddi4+0x2a6>
  402566:	f1a8 0802 	sub.w	r8, r8, #2
  40256a:	443d      	add	r5, r7
  40256c:	1aed      	subs	r5, r5, r3
  40256e:	b2a4      	uxth	r4, r4
  402570:	fbb5 f0fa 	udiv	r0, r5, sl
  402574:	fb0a 5510 	mls	r5, sl, r0, r5
  402578:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40257c:	fb00 f909 	mul.w	r9, r0, r9
  402580:	45a1      	cmp	r9, r4
  402582:	d909      	bls.n	402598 <__udivmoddi4+0x98>
  402584:	19e4      	adds	r4, r4, r7
  402586:	f100 33ff 	add.w	r3, r0, #4294967295
  40258a:	f080 810a 	bcs.w	4027a2 <__udivmoddi4+0x2a2>
  40258e:	45a1      	cmp	r9, r4
  402590:	f240 8107 	bls.w	4027a2 <__udivmoddi4+0x2a2>
  402594:	3802      	subs	r0, #2
  402596:	443c      	add	r4, r7
  402598:	eba4 0409 	sub.w	r4, r4, r9
  40259c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4025a0:	2100      	movs	r1, #0
  4025a2:	2e00      	cmp	r6, #0
  4025a4:	d061      	beq.n	40266a <__udivmoddi4+0x16a>
  4025a6:	fa24 f40e 	lsr.w	r4, r4, lr
  4025aa:	2300      	movs	r3, #0
  4025ac:	6034      	str	r4, [r6, #0]
  4025ae:	6073      	str	r3, [r6, #4]
  4025b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025b4:	428b      	cmp	r3, r1
  4025b6:	d907      	bls.n	4025c8 <__udivmoddi4+0xc8>
  4025b8:	2e00      	cmp	r6, #0
  4025ba:	d054      	beq.n	402666 <__udivmoddi4+0x166>
  4025bc:	2100      	movs	r1, #0
  4025be:	e886 0021 	stmia.w	r6, {r0, r5}
  4025c2:	4608      	mov	r0, r1
  4025c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025c8:	fab3 f183 	clz	r1, r3
  4025cc:	2900      	cmp	r1, #0
  4025ce:	f040 808e 	bne.w	4026ee <__udivmoddi4+0x1ee>
  4025d2:	42ab      	cmp	r3, r5
  4025d4:	d302      	bcc.n	4025dc <__udivmoddi4+0xdc>
  4025d6:	4282      	cmp	r2, r0
  4025d8:	f200 80fa 	bhi.w	4027d0 <__udivmoddi4+0x2d0>
  4025dc:	1a84      	subs	r4, r0, r2
  4025de:	eb65 0503 	sbc.w	r5, r5, r3
  4025e2:	2001      	movs	r0, #1
  4025e4:	46ac      	mov	ip, r5
  4025e6:	2e00      	cmp	r6, #0
  4025e8:	d03f      	beq.n	40266a <__udivmoddi4+0x16a>
  4025ea:	e886 1010 	stmia.w	r6, {r4, ip}
  4025ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025f2:	b912      	cbnz	r2, 4025fa <__udivmoddi4+0xfa>
  4025f4:	2701      	movs	r7, #1
  4025f6:	fbb7 f7f2 	udiv	r7, r7, r2
  4025fa:	fab7 fe87 	clz	lr, r7
  4025fe:	f1be 0f00 	cmp.w	lr, #0
  402602:	d134      	bne.n	40266e <__udivmoddi4+0x16e>
  402604:	1beb      	subs	r3, r5, r7
  402606:	0c3a      	lsrs	r2, r7, #16
  402608:	fa1f fc87 	uxth.w	ip, r7
  40260c:	2101      	movs	r1, #1
  40260e:	fbb3 f8f2 	udiv	r8, r3, r2
  402612:	0c25      	lsrs	r5, r4, #16
  402614:	fb02 3318 	mls	r3, r2, r8, r3
  402618:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40261c:	fb0c f308 	mul.w	r3, ip, r8
  402620:	42ab      	cmp	r3, r5
  402622:	d907      	bls.n	402634 <__udivmoddi4+0x134>
  402624:	19ed      	adds	r5, r5, r7
  402626:	f108 30ff 	add.w	r0, r8, #4294967295
  40262a:	d202      	bcs.n	402632 <__udivmoddi4+0x132>
  40262c:	42ab      	cmp	r3, r5
  40262e:	f200 80d1 	bhi.w	4027d4 <__udivmoddi4+0x2d4>
  402632:	4680      	mov	r8, r0
  402634:	1aed      	subs	r5, r5, r3
  402636:	b2a3      	uxth	r3, r4
  402638:	fbb5 f0f2 	udiv	r0, r5, r2
  40263c:	fb02 5510 	mls	r5, r2, r0, r5
  402640:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402644:	fb0c fc00 	mul.w	ip, ip, r0
  402648:	45a4      	cmp	ip, r4
  40264a:	d907      	bls.n	40265c <__udivmoddi4+0x15c>
  40264c:	19e4      	adds	r4, r4, r7
  40264e:	f100 33ff 	add.w	r3, r0, #4294967295
  402652:	d202      	bcs.n	40265a <__udivmoddi4+0x15a>
  402654:	45a4      	cmp	ip, r4
  402656:	f200 80b8 	bhi.w	4027ca <__udivmoddi4+0x2ca>
  40265a:	4618      	mov	r0, r3
  40265c:	eba4 040c 	sub.w	r4, r4, ip
  402660:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402664:	e79d      	b.n	4025a2 <__udivmoddi4+0xa2>
  402666:	4631      	mov	r1, r6
  402668:	4630      	mov	r0, r6
  40266a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40266e:	f1ce 0420 	rsb	r4, lr, #32
  402672:	fa05 f30e 	lsl.w	r3, r5, lr
  402676:	fa07 f70e 	lsl.w	r7, r7, lr
  40267a:	fa20 f804 	lsr.w	r8, r0, r4
  40267e:	0c3a      	lsrs	r2, r7, #16
  402680:	fa25 f404 	lsr.w	r4, r5, r4
  402684:	ea48 0803 	orr.w	r8, r8, r3
  402688:	fbb4 f1f2 	udiv	r1, r4, r2
  40268c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402690:	fb02 4411 	mls	r4, r2, r1, r4
  402694:	fa1f fc87 	uxth.w	ip, r7
  402698:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40269c:	fb01 f30c 	mul.w	r3, r1, ip
  4026a0:	42ab      	cmp	r3, r5
  4026a2:	fa00 f40e 	lsl.w	r4, r0, lr
  4026a6:	d909      	bls.n	4026bc <__udivmoddi4+0x1bc>
  4026a8:	19ed      	adds	r5, r5, r7
  4026aa:	f101 30ff 	add.w	r0, r1, #4294967295
  4026ae:	f080 808a 	bcs.w	4027c6 <__udivmoddi4+0x2c6>
  4026b2:	42ab      	cmp	r3, r5
  4026b4:	f240 8087 	bls.w	4027c6 <__udivmoddi4+0x2c6>
  4026b8:	3902      	subs	r1, #2
  4026ba:	443d      	add	r5, r7
  4026bc:	1aeb      	subs	r3, r5, r3
  4026be:	fa1f f588 	uxth.w	r5, r8
  4026c2:	fbb3 f0f2 	udiv	r0, r3, r2
  4026c6:	fb02 3310 	mls	r3, r2, r0, r3
  4026ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4026ce:	fb00 f30c 	mul.w	r3, r0, ip
  4026d2:	42ab      	cmp	r3, r5
  4026d4:	d907      	bls.n	4026e6 <__udivmoddi4+0x1e6>
  4026d6:	19ed      	adds	r5, r5, r7
  4026d8:	f100 38ff 	add.w	r8, r0, #4294967295
  4026dc:	d26f      	bcs.n	4027be <__udivmoddi4+0x2be>
  4026de:	42ab      	cmp	r3, r5
  4026e0:	d96d      	bls.n	4027be <__udivmoddi4+0x2be>
  4026e2:	3802      	subs	r0, #2
  4026e4:	443d      	add	r5, r7
  4026e6:	1aeb      	subs	r3, r5, r3
  4026e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4026ec:	e78f      	b.n	40260e <__udivmoddi4+0x10e>
  4026ee:	f1c1 0720 	rsb	r7, r1, #32
  4026f2:	fa22 f807 	lsr.w	r8, r2, r7
  4026f6:	408b      	lsls	r3, r1
  4026f8:	fa05 f401 	lsl.w	r4, r5, r1
  4026fc:	ea48 0303 	orr.w	r3, r8, r3
  402700:	fa20 fe07 	lsr.w	lr, r0, r7
  402704:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402708:	40fd      	lsrs	r5, r7
  40270a:	ea4e 0e04 	orr.w	lr, lr, r4
  40270e:	fbb5 f9fc 	udiv	r9, r5, ip
  402712:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402716:	fb0c 5519 	mls	r5, ip, r9, r5
  40271a:	fa1f f883 	uxth.w	r8, r3
  40271e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402722:	fb09 f408 	mul.w	r4, r9, r8
  402726:	42ac      	cmp	r4, r5
  402728:	fa02 f201 	lsl.w	r2, r2, r1
  40272c:	fa00 fa01 	lsl.w	sl, r0, r1
  402730:	d908      	bls.n	402744 <__udivmoddi4+0x244>
  402732:	18ed      	adds	r5, r5, r3
  402734:	f109 30ff 	add.w	r0, r9, #4294967295
  402738:	d243      	bcs.n	4027c2 <__udivmoddi4+0x2c2>
  40273a:	42ac      	cmp	r4, r5
  40273c:	d941      	bls.n	4027c2 <__udivmoddi4+0x2c2>
  40273e:	f1a9 0902 	sub.w	r9, r9, #2
  402742:	441d      	add	r5, r3
  402744:	1b2d      	subs	r5, r5, r4
  402746:	fa1f fe8e 	uxth.w	lr, lr
  40274a:	fbb5 f0fc 	udiv	r0, r5, ip
  40274e:	fb0c 5510 	mls	r5, ip, r0, r5
  402752:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402756:	fb00 f808 	mul.w	r8, r0, r8
  40275a:	45a0      	cmp	r8, r4
  40275c:	d907      	bls.n	40276e <__udivmoddi4+0x26e>
  40275e:	18e4      	adds	r4, r4, r3
  402760:	f100 35ff 	add.w	r5, r0, #4294967295
  402764:	d229      	bcs.n	4027ba <__udivmoddi4+0x2ba>
  402766:	45a0      	cmp	r8, r4
  402768:	d927      	bls.n	4027ba <__udivmoddi4+0x2ba>
  40276a:	3802      	subs	r0, #2
  40276c:	441c      	add	r4, r3
  40276e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402772:	eba4 0408 	sub.w	r4, r4, r8
  402776:	fba0 8902 	umull	r8, r9, r0, r2
  40277a:	454c      	cmp	r4, r9
  40277c:	46c6      	mov	lr, r8
  40277e:	464d      	mov	r5, r9
  402780:	d315      	bcc.n	4027ae <__udivmoddi4+0x2ae>
  402782:	d012      	beq.n	4027aa <__udivmoddi4+0x2aa>
  402784:	b156      	cbz	r6, 40279c <__udivmoddi4+0x29c>
  402786:	ebba 030e 	subs.w	r3, sl, lr
  40278a:	eb64 0405 	sbc.w	r4, r4, r5
  40278e:	fa04 f707 	lsl.w	r7, r4, r7
  402792:	40cb      	lsrs	r3, r1
  402794:	431f      	orrs	r7, r3
  402796:	40cc      	lsrs	r4, r1
  402798:	6037      	str	r7, [r6, #0]
  40279a:	6074      	str	r4, [r6, #4]
  40279c:	2100      	movs	r1, #0
  40279e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027a2:	4618      	mov	r0, r3
  4027a4:	e6f8      	b.n	402598 <__udivmoddi4+0x98>
  4027a6:	4690      	mov	r8, r2
  4027a8:	e6e0      	b.n	40256c <__udivmoddi4+0x6c>
  4027aa:	45c2      	cmp	sl, r8
  4027ac:	d2ea      	bcs.n	402784 <__udivmoddi4+0x284>
  4027ae:	ebb8 0e02 	subs.w	lr, r8, r2
  4027b2:	eb69 0503 	sbc.w	r5, r9, r3
  4027b6:	3801      	subs	r0, #1
  4027b8:	e7e4      	b.n	402784 <__udivmoddi4+0x284>
  4027ba:	4628      	mov	r0, r5
  4027bc:	e7d7      	b.n	40276e <__udivmoddi4+0x26e>
  4027be:	4640      	mov	r0, r8
  4027c0:	e791      	b.n	4026e6 <__udivmoddi4+0x1e6>
  4027c2:	4681      	mov	r9, r0
  4027c4:	e7be      	b.n	402744 <__udivmoddi4+0x244>
  4027c6:	4601      	mov	r1, r0
  4027c8:	e778      	b.n	4026bc <__udivmoddi4+0x1bc>
  4027ca:	3802      	subs	r0, #2
  4027cc:	443c      	add	r4, r7
  4027ce:	e745      	b.n	40265c <__udivmoddi4+0x15c>
  4027d0:	4608      	mov	r0, r1
  4027d2:	e708      	b.n	4025e6 <__udivmoddi4+0xe6>
  4027d4:	f1a8 0802 	sub.w	r8, r8, #2
  4027d8:	443d      	add	r5, r7
  4027da:	e72b      	b.n	402634 <__udivmoddi4+0x134>

004027dc <__aeabi_idiv0>:
  4027dc:	4770      	bx	lr
  4027de:	bf00      	nop

004027e0 <__libc_init_array>:
  4027e0:	b570      	push	{r4, r5, r6, lr}
  4027e2:	4e0f      	ldr	r6, [pc, #60]	; (402820 <__libc_init_array+0x40>)
  4027e4:	4d0f      	ldr	r5, [pc, #60]	; (402824 <__libc_init_array+0x44>)
  4027e6:	1b76      	subs	r6, r6, r5
  4027e8:	10b6      	asrs	r6, r6, #2
  4027ea:	bf18      	it	ne
  4027ec:	2400      	movne	r4, #0
  4027ee:	d005      	beq.n	4027fc <__libc_init_array+0x1c>
  4027f0:	3401      	adds	r4, #1
  4027f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4027f6:	4798      	blx	r3
  4027f8:	42a6      	cmp	r6, r4
  4027fa:	d1f9      	bne.n	4027f0 <__libc_init_array+0x10>
  4027fc:	4e0a      	ldr	r6, [pc, #40]	; (402828 <__libc_init_array+0x48>)
  4027fe:	4d0b      	ldr	r5, [pc, #44]	; (40282c <__libc_init_array+0x4c>)
  402800:	1b76      	subs	r6, r6, r5
  402802:	f000 fd2d 	bl	403260 <_init>
  402806:	10b6      	asrs	r6, r6, #2
  402808:	bf18      	it	ne
  40280a:	2400      	movne	r4, #0
  40280c:	d006      	beq.n	40281c <__libc_init_array+0x3c>
  40280e:	3401      	adds	r4, #1
  402810:	f855 3b04 	ldr.w	r3, [r5], #4
  402814:	4798      	blx	r3
  402816:	42a6      	cmp	r6, r4
  402818:	d1f9      	bne.n	40280e <__libc_init_array+0x2e>
  40281a:	bd70      	pop	{r4, r5, r6, pc}
  40281c:	bd70      	pop	{r4, r5, r6, pc}
  40281e:	bf00      	nop
  402820:	0040326c 	.word	0x0040326c
  402824:	0040326c 	.word	0x0040326c
  402828:	00403274 	.word	0x00403274
  40282c:	0040326c 	.word	0x0040326c

00402830 <strcpy>:
  402830:	ea80 0201 	eor.w	r2, r0, r1
  402834:	4684      	mov	ip, r0
  402836:	f012 0f03 	tst.w	r2, #3
  40283a:	d14f      	bne.n	4028dc <strcpy+0xac>
  40283c:	f011 0f03 	tst.w	r1, #3
  402840:	d132      	bne.n	4028a8 <strcpy+0x78>
  402842:	f84d 4d04 	str.w	r4, [sp, #-4]!
  402846:	f011 0f04 	tst.w	r1, #4
  40284a:	f851 3b04 	ldr.w	r3, [r1], #4
  40284e:	d00b      	beq.n	402868 <strcpy+0x38>
  402850:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402854:	439a      	bics	r2, r3
  402856:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40285a:	bf04      	itt	eq
  40285c:	f84c 3b04 	streq.w	r3, [ip], #4
  402860:	f851 3b04 	ldreq.w	r3, [r1], #4
  402864:	d116      	bne.n	402894 <strcpy+0x64>
  402866:	bf00      	nop
  402868:	f851 4b04 	ldr.w	r4, [r1], #4
  40286c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  402870:	439a      	bics	r2, r3
  402872:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402876:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40287a:	d10b      	bne.n	402894 <strcpy+0x64>
  40287c:	f84c 3b04 	str.w	r3, [ip], #4
  402880:	43a2      	bics	r2, r4
  402882:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402886:	bf04      	itt	eq
  402888:	f851 3b04 	ldreq.w	r3, [r1], #4
  40288c:	f84c 4b04 	streq.w	r4, [ip], #4
  402890:	d0ea      	beq.n	402868 <strcpy+0x38>
  402892:	4623      	mov	r3, r4
  402894:	f80c 3b01 	strb.w	r3, [ip], #1
  402898:	f013 0fff 	tst.w	r3, #255	; 0xff
  40289c:	ea4f 2333 	mov.w	r3, r3, ror #8
  4028a0:	d1f8      	bne.n	402894 <strcpy+0x64>
  4028a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028a6:	4770      	bx	lr
  4028a8:	f011 0f01 	tst.w	r1, #1
  4028ac:	d006      	beq.n	4028bc <strcpy+0x8c>
  4028ae:	f811 2b01 	ldrb.w	r2, [r1], #1
  4028b2:	f80c 2b01 	strb.w	r2, [ip], #1
  4028b6:	2a00      	cmp	r2, #0
  4028b8:	bf08      	it	eq
  4028ba:	4770      	bxeq	lr
  4028bc:	f011 0f02 	tst.w	r1, #2
  4028c0:	d0bf      	beq.n	402842 <strcpy+0x12>
  4028c2:	f831 2b02 	ldrh.w	r2, [r1], #2
  4028c6:	f012 0fff 	tst.w	r2, #255	; 0xff
  4028ca:	bf16      	itet	ne
  4028cc:	f82c 2b02 	strhne.w	r2, [ip], #2
  4028d0:	f88c 2000 	strbeq.w	r2, [ip]
  4028d4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4028d8:	d1b3      	bne.n	402842 <strcpy+0x12>
  4028da:	4770      	bx	lr
  4028dc:	f811 2b01 	ldrb.w	r2, [r1], #1
  4028e0:	f80c 2b01 	strb.w	r2, [ip], #1
  4028e4:	2a00      	cmp	r2, #0
  4028e6:	d1f9      	bne.n	4028dc <strcpy+0xac>
  4028e8:	4770      	bx	lr
  4028ea:	bf00      	nop

004028ec <critical_factorization>:
  4028ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4028f0:	f04f 0e01 	mov.w	lr, #1
  4028f4:	4674      	mov	r4, lr
  4028f6:	2500      	movs	r5, #0
  4028f8:	f04f 36ff 	mov.w	r6, #4294967295
  4028fc:	192b      	adds	r3, r5, r4
  4028fe:	428b      	cmp	r3, r1
  402900:	eb00 0706 	add.w	r7, r0, r6
  402904:	d20d      	bcs.n	402922 <critical_factorization+0x36>
  402906:	5d3f      	ldrb	r7, [r7, r4]
  402908:	f810 c003 	ldrb.w	ip, [r0, r3]
  40290c:	45bc      	cmp	ip, r7
  40290e:	d22d      	bcs.n	40296c <critical_factorization+0x80>
  402910:	461d      	mov	r5, r3
  402912:	2401      	movs	r4, #1
  402914:	eba3 0e06 	sub.w	lr, r3, r6
  402918:	192b      	adds	r3, r5, r4
  40291a:	428b      	cmp	r3, r1
  40291c:	eb00 0706 	add.w	r7, r0, r6
  402920:	d3f1      	bcc.n	402906 <critical_factorization+0x1a>
  402922:	f04f 0801 	mov.w	r8, #1
  402926:	f8c2 e000 	str.w	lr, [r2]
  40292a:	4644      	mov	r4, r8
  40292c:	2500      	movs	r5, #0
  40292e:	f04f 37ff 	mov.w	r7, #4294967295
  402932:	192b      	adds	r3, r5, r4
  402934:	4299      	cmp	r1, r3
  402936:	eb00 0e07 	add.w	lr, r0, r7
  40293a:	d90e      	bls.n	40295a <critical_factorization+0x6e>
  40293c:	f81e e004 	ldrb.w	lr, [lr, r4]
  402940:	f810 c003 	ldrb.w	ip, [r0, r3]
  402944:	45f4      	cmp	ip, lr
  402946:	d918      	bls.n	40297a <critical_factorization+0x8e>
  402948:	461d      	mov	r5, r3
  40294a:	2401      	movs	r4, #1
  40294c:	eba3 0807 	sub.w	r8, r3, r7
  402950:	192b      	adds	r3, r5, r4
  402952:	4299      	cmp	r1, r3
  402954:	eb00 0e07 	add.w	lr, r0, r7
  402958:	d8f0      	bhi.n	40293c <critical_factorization+0x50>
  40295a:	3701      	adds	r7, #1
  40295c:	1c70      	adds	r0, r6, #1
  40295e:	4287      	cmp	r7, r0
  402960:	bf24      	itt	cs
  402962:	f8c2 8000 	strcs.w	r8, [r2]
  402966:	4638      	movcs	r0, r7
  402968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40296c:	d00c      	beq.n	402988 <critical_factorization+0x9c>
  40296e:	f04f 0e01 	mov.w	lr, #1
  402972:	462e      	mov	r6, r5
  402974:	4674      	mov	r4, lr
  402976:	4475      	add	r5, lr
  402978:	e7c0      	b.n	4028fc <critical_factorization+0x10>
  40297a:	d00b      	beq.n	402994 <critical_factorization+0xa8>
  40297c:	f04f 0801 	mov.w	r8, #1
  402980:	462f      	mov	r7, r5
  402982:	4644      	mov	r4, r8
  402984:	4445      	add	r5, r8
  402986:	e7d4      	b.n	402932 <critical_factorization+0x46>
  402988:	4574      	cmp	r4, lr
  40298a:	bf12      	itee	ne
  40298c:	3401      	addne	r4, #1
  40298e:	461d      	moveq	r5, r3
  402990:	2401      	moveq	r4, #1
  402992:	e7b3      	b.n	4028fc <critical_factorization+0x10>
  402994:	4544      	cmp	r4, r8
  402996:	bf12      	itee	ne
  402998:	3401      	addne	r4, #1
  40299a:	461d      	moveq	r5, r3
  40299c:	2401      	moveq	r4, #1
  40299e:	e7c8      	b.n	402932 <critical_factorization+0x46>

004029a0 <two_way_long_needle>:
  4029a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029a4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4029a8:	4616      	mov	r6, r2
  4029aa:	4605      	mov	r5, r0
  4029ac:	468b      	mov	fp, r1
  4029ae:	4610      	mov	r0, r2
  4029b0:	4619      	mov	r1, r3
  4029b2:	aa03      	add	r2, sp, #12
  4029b4:	461c      	mov	r4, r3
  4029b6:	f7ff ff99 	bl	4028ec <critical_factorization>
  4029ba:	ab03      	add	r3, sp, #12
  4029bc:	4681      	mov	r9, r0
  4029be:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4029c2:	f843 4f04 	str.w	r4, [r3, #4]!
  4029c6:	4293      	cmp	r3, r2
  4029c8:	d1fb      	bne.n	4029c2 <two_way_long_needle+0x22>
  4029ca:	b14c      	cbz	r4, 4029e0 <two_way_long_needle+0x40>
  4029cc:	1e63      	subs	r3, r4, #1
  4029ce:	1e72      	subs	r2, r6, #1
  4029d0:	a804      	add	r0, sp, #16
  4029d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4029d6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4029da:	f113 33ff 	adds.w	r3, r3, #4294967295
  4029de:	d2f8      	bcs.n	4029d2 <two_way_long_needle+0x32>
  4029e0:	9903      	ldr	r1, [sp, #12]
  4029e2:	464a      	mov	r2, r9
  4029e4:	4431      	add	r1, r6
  4029e6:	4630      	mov	r0, r6
  4029e8:	f000 fa62 	bl	402eb0 <memcmp>
  4029ec:	2800      	cmp	r0, #0
  4029ee:	d16f      	bne.n	402ad0 <two_way_long_needle+0x130>
  4029f0:	f109 33ff 	add.w	r3, r9, #4294967295
  4029f4:	9300      	str	r3, [sp, #0]
  4029f6:	18f3      	adds	r3, r6, r3
  4029f8:	4682      	mov	sl, r0
  4029fa:	9301      	str	r3, [sp, #4]
  4029fc:	4623      	mov	r3, r4
  4029fe:	4680      	mov	r8, r0
  402a00:	4654      	mov	r4, sl
  402a02:	4658      	mov	r0, fp
  402a04:	469a      	mov	sl, r3
  402a06:	eb08 070a 	add.w	r7, r8, sl
  402a0a:	1a3a      	subs	r2, r7, r0
  402a0c:	2100      	movs	r1, #0
  402a0e:	4428      	add	r0, r5
  402a10:	f000 f9fe 	bl	402e10 <memchr>
  402a14:	2800      	cmp	r0, #0
  402a16:	d156      	bne.n	402ac6 <two_way_long_needle+0x126>
  402a18:	2f00      	cmp	r7, #0
  402a1a:	d054      	beq.n	402ac6 <two_way_long_needle+0x126>
  402a1c:	19eb      	adds	r3, r5, r7
  402a1e:	aa04      	add	r2, sp, #16
  402a20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402a28:	b14b      	cbz	r3, 402a3e <two_way_long_needle+0x9e>
  402a2a:	b124      	cbz	r4, 402a36 <two_way_long_needle+0x96>
  402a2c:	9a03      	ldr	r2, [sp, #12]
  402a2e:	4293      	cmp	r3, r2
  402a30:	d201      	bcs.n	402a36 <two_way_long_needle+0x96>
  402a32:	ebaa 0302 	sub.w	r3, sl, r2
  402a36:	4498      	add	r8, r3
  402a38:	2400      	movs	r4, #0
  402a3a:	4638      	mov	r0, r7
  402a3c:	e7e3      	b.n	402a06 <two_way_long_needle+0x66>
  402a3e:	454c      	cmp	r4, r9
  402a40:	4623      	mov	r3, r4
  402a42:	f10a 3eff 	add.w	lr, sl, #4294967295
  402a46:	bf38      	it	cc
  402a48:	464b      	movcc	r3, r9
  402a4a:	4573      	cmp	r3, lr
  402a4c:	d213      	bcs.n	402a76 <two_way_long_needle+0xd6>
  402a4e:	eb08 0203 	add.w	r2, r8, r3
  402a52:	f816 c003 	ldrb.w	ip, [r6, r3]
  402a56:	5ca8      	ldrb	r0, [r5, r2]
  402a58:	4584      	cmp	ip, r0
  402a5a:	442a      	add	r2, r5
  402a5c:	eb06 0103 	add.w	r1, r6, r3
  402a60:	d006      	beq.n	402a70 <two_way_long_needle+0xd0>
  402a62:	e02c      	b.n	402abe <two_way_long_needle+0x11e>
  402a64:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  402a68:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402a6c:	4584      	cmp	ip, r0
  402a6e:	d126      	bne.n	402abe <two_way_long_needle+0x11e>
  402a70:	3301      	adds	r3, #1
  402a72:	4573      	cmp	r3, lr
  402a74:	d3f6      	bcc.n	402a64 <two_way_long_needle+0xc4>
  402a76:	454c      	cmp	r4, r9
  402a78:	9900      	ldr	r1, [sp, #0]
  402a7a:	f080 8089 	bcs.w	402b90 <two_way_long_needle+0x1f0>
  402a7e:	9b00      	ldr	r3, [sp, #0]
  402a80:	eb08 0203 	add.w	r2, r8, r3
  402a84:	9b01      	ldr	r3, [sp, #4]
  402a86:	5ca8      	ldrb	r0, [r5, r2]
  402a88:	781b      	ldrb	r3, [r3, #0]
  402a8a:	4298      	cmp	r0, r3
  402a8c:	442a      	add	r2, r5
  402a8e:	d17f      	bne.n	402b90 <two_way_long_needle+0x1f0>
  402a90:	9801      	ldr	r0, [sp, #4]
  402a92:	f104 3bff 	add.w	fp, r4, #4294967295
  402a96:	e006      	b.n	402aa6 <two_way_long_needle+0x106>
  402a98:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  402a9c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  402aa0:	45f4      	cmp	ip, lr
  402aa2:	d103      	bne.n	402aac <two_way_long_needle+0x10c>
  402aa4:	4619      	mov	r1, r3
  402aa6:	1e4b      	subs	r3, r1, #1
  402aa8:	459b      	cmp	fp, r3
  402aaa:	d1f5      	bne.n	402a98 <two_way_long_needle+0xf8>
  402aac:	3401      	adds	r4, #1
  402aae:	428c      	cmp	r4, r1
  402ab0:	d870      	bhi.n	402b94 <two_way_long_needle+0x1f4>
  402ab2:	9c03      	ldr	r4, [sp, #12]
  402ab4:	4638      	mov	r0, r7
  402ab6:	44a0      	add	r8, r4
  402ab8:	ebaa 0404 	sub.w	r4, sl, r4
  402abc:	e7a3      	b.n	402a06 <two_way_long_needle+0x66>
  402abe:	f1c9 0201 	rsb	r2, r9, #1
  402ac2:	4490      	add	r8, r2
  402ac4:	e7b7      	b.n	402a36 <two_way_long_needle+0x96>
  402ac6:	2000      	movs	r0, #0
  402ac8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ad0:	eba4 0309 	sub.w	r3, r4, r9
  402ad4:	454b      	cmp	r3, r9
  402ad6:	bf38      	it	cc
  402ad8:	464b      	movcc	r3, r9
  402ada:	3301      	adds	r3, #1
  402adc:	f109 38ff 	add.w	r8, r9, #4294967295
  402ae0:	9303      	str	r3, [sp, #12]
  402ae2:	eb06 0308 	add.w	r3, r6, r8
  402ae6:	4658      	mov	r0, fp
  402ae8:	f04f 0a00 	mov.w	sl, #0
  402aec:	46cb      	mov	fp, r9
  402aee:	4699      	mov	r9, r3
  402af0:	eb0a 0704 	add.w	r7, sl, r4
  402af4:	1a3a      	subs	r2, r7, r0
  402af6:	2100      	movs	r1, #0
  402af8:	4428      	add	r0, r5
  402afa:	f000 f989 	bl	402e10 <memchr>
  402afe:	2800      	cmp	r0, #0
  402b00:	d1e1      	bne.n	402ac6 <two_way_long_needle+0x126>
  402b02:	2f00      	cmp	r7, #0
  402b04:	d0df      	beq.n	402ac6 <two_way_long_needle+0x126>
  402b06:	19eb      	adds	r3, r5, r7
  402b08:	aa04      	add	r2, sp, #16
  402b0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402b12:	bba3      	cbnz	r3, 402b7e <two_way_long_needle+0x1de>
  402b14:	1e61      	subs	r1, r4, #1
  402b16:	458b      	cmp	fp, r1
  402b18:	d215      	bcs.n	402b46 <two_way_long_needle+0x1a6>
  402b1a:	eb0a 020b 	add.w	r2, sl, fp
  402b1e:	f816 300b 	ldrb.w	r3, [r6, fp]
  402b22:	f815 e002 	ldrb.w	lr, [r5, r2]
  402b26:	459e      	cmp	lr, r3
  402b28:	442a      	add	r2, r5
  402b2a:	eb06 000b 	add.w	r0, r6, fp
  402b2e:	465b      	mov	r3, fp
  402b30:	d006      	beq.n	402b40 <two_way_long_needle+0x1a0>
  402b32:	e027      	b.n	402b84 <two_way_long_needle+0x1e4>
  402b34:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  402b38:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  402b3c:	45f4      	cmp	ip, lr
  402b3e:	d121      	bne.n	402b84 <two_way_long_needle+0x1e4>
  402b40:	3301      	adds	r3, #1
  402b42:	428b      	cmp	r3, r1
  402b44:	d3f6      	bcc.n	402b34 <two_way_long_needle+0x194>
  402b46:	f1b8 3fff 	cmp.w	r8, #4294967295
  402b4a:	d011      	beq.n	402b70 <two_way_long_needle+0x1d0>
  402b4c:	eb0a 0208 	add.w	r2, sl, r8
  402b50:	f899 1000 	ldrb.w	r1, [r9]
  402b54:	5cab      	ldrb	r3, [r5, r2]
  402b56:	4299      	cmp	r1, r3
  402b58:	442a      	add	r2, r5
  402b5a:	d10f      	bne.n	402b7c <two_way_long_needle+0x1dc>
  402b5c:	464b      	mov	r3, r9
  402b5e:	e005      	b.n	402b6c <two_way_long_needle+0x1cc>
  402b60:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402b64:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402b68:	4288      	cmp	r0, r1
  402b6a:	d107      	bne.n	402b7c <two_way_long_needle+0x1dc>
  402b6c:	42b3      	cmp	r3, r6
  402b6e:	d1f7      	bne.n	402b60 <two_way_long_needle+0x1c0>
  402b70:	eb05 000a 	add.w	r0, r5, sl
  402b74:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b7c:	9b03      	ldr	r3, [sp, #12]
  402b7e:	449a      	add	sl, r3
  402b80:	4638      	mov	r0, r7
  402b82:	e7b5      	b.n	402af0 <two_way_long_needle+0x150>
  402b84:	f1cb 0201 	rsb	r2, fp, #1
  402b88:	4492      	add	sl, r2
  402b8a:	449a      	add	sl, r3
  402b8c:	4638      	mov	r0, r7
  402b8e:	e7af      	b.n	402af0 <two_way_long_needle+0x150>
  402b90:	4649      	mov	r1, r9
  402b92:	e78b      	b.n	402aac <two_way_long_needle+0x10c>
  402b94:	eb05 0008 	add.w	r0, r5, r8
  402b98:	e796      	b.n	402ac8 <two_way_long_needle+0x128>
  402b9a:	bf00      	nop

00402b9c <strstr>:
  402b9c:	7802      	ldrb	r2, [r0, #0]
  402b9e:	2a00      	cmp	r2, #0
  402ba0:	f000 8101 	beq.w	402da6 <strstr+0x20a>
  402ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ba8:	f891 8000 	ldrb.w	r8, [r1]
  402bac:	b085      	sub	sp, #20
  402bae:	4644      	mov	r4, r8
  402bb0:	f1b8 0f00 	cmp.w	r8, #0
  402bb4:	d016      	beq.n	402be4 <strstr+0x48>
  402bb6:	4686      	mov	lr, r0
  402bb8:	f101 0c01 	add.w	ip, r1, #1
  402bbc:	2701      	movs	r7, #1
  402bbe:	e003      	b.n	402bc8 <strstr+0x2c>
  402bc0:	f813 4b01 	ldrb.w	r4, [r3], #1
  402bc4:	b16c      	cbz	r4, 402be2 <strstr+0x46>
  402bc6:	469c      	mov	ip, r3
  402bc8:	42a2      	cmp	r2, r4
  402bca:	bf14      	ite	ne
  402bcc:	2700      	movne	r7, #0
  402bce:	f007 0701 	andeq.w	r7, r7, #1
  402bd2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  402bd6:	4663      	mov	r3, ip
  402bd8:	2a00      	cmp	r2, #0
  402bda:	d1f1      	bne.n	402bc0 <strstr+0x24>
  402bdc:	f89c 3000 	ldrb.w	r3, [ip]
  402be0:	b9fb      	cbnz	r3, 402c22 <strstr+0x86>
  402be2:	b117      	cbz	r7, 402bea <strstr+0x4e>
  402be4:	b005      	add	sp, #20
  402be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bea:	460e      	mov	r6, r1
  402bec:	4605      	mov	r5, r0
  402bee:	4641      	mov	r1, r8
  402bf0:	3001      	adds	r0, #1
  402bf2:	ebac 0406 	sub.w	r4, ip, r6
  402bf6:	f000 f98b 	bl	402f10 <strchr>
  402bfa:	4607      	mov	r7, r0
  402bfc:	b188      	cbz	r0, 402c22 <strstr+0x86>
  402bfe:	2c01      	cmp	r4, #1
  402c00:	d0f0      	beq.n	402be4 <strstr+0x48>
  402c02:	1928      	adds	r0, r5, r4
  402c04:	4287      	cmp	r7, r0
  402c06:	bf94      	ite	ls
  402c08:	1bc1      	subls	r1, r0, r7
  402c0a:	2101      	movhi	r1, #1
  402c0c:	2c1f      	cmp	r4, #31
  402c0e:	468b      	mov	fp, r1
  402c10:	d90b      	bls.n	402c2a <strstr+0x8e>
  402c12:	4623      	mov	r3, r4
  402c14:	4632      	mov	r2, r6
  402c16:	4638      	mov	r0, r7
  402c18:	f7ff fec2 	bl	4029a0 <two_way_long_needle>
  402c1c:	b005      	add	sp, #20
  402c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c22:	2000      	movs	r0, #0
  402c24:	b005      	add	sp, #20
  402c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c2a:	aa03      	add	r2, sp, #12
  402c2c:	4621      	mov	r1, r4
  402c2e:	4630      	mov	r0, r6
  402c30:	f7ff fe5c 	bl	4028ec <critical_factorization>
  402c34:	9903      	ldr	r1, [sp, #12]
  402c36:	4680      	mov	r8, r0
  402c38:	4602      	mov	r2, r0
  402c3a:	4431      	add	r1, r6
  402c3c:	4630      	mov	r0, r6
  402c3e:	f000 f937 	bl	402eb0 <memcmp>
  402c42:	2800      	cmp	r0, #0
  402c44:	d157      	bne.n	402cf6 <strstr+0x15a>
  402c46:	f108 33ff 	add.w	r3, r8, #4294967295
  402c4a:	9300      	str	r3, [sp, #0]
  402c4c:	18f3      	adds	r3, r6, r3
  402c4e:	4681      	mov	r9, r0
  402c50:	4605      	mov	r5, r0
  402c52:	9301      	str	r3, [sp, #4]
  402c54:	4658      	mov	r0, fp
  402c56:	46b2      	mov	sl, r6
  402c58:	1966      	adds	r6, r4, r5
  402c5a:	1a32      	subs	r2, r6, r0
  402c5c:	2100      	movs	r1, #0
  402c5e:	4438      	add	r0, r7
  402c60:	f000 f8d6 	bl	402e10 <memchr>
  402c64:	2800      	cmp	r0, #0
  402c66:	d1dc      	bne.n	402c22 <strstr+0x86>
  402c68:	2e00      	cmp	r6, #0
  402c6a:	d0da      	beq.n	402c22 <strstr+0x86>
  402c6c:	45c8      	cmp	r8, r9
  402c6e:	4643      	mov	r3, r8
  402c70:	bf38      	it	cc
  402c72:	464b      	movcc	r3, r9
  402c74:	429c      	cmp	r4, r3
  402c76:	d912      	bls.n	402c9e <strstr+0x102>
  402c78:	195a      	adds	r2, r3, r5
  402c7a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  402c7e:	5cb8      	ldrb	r0, [r7, r2]
  402c80:	4281      	cmp	r1, r0
  402c82:	443a      	add	r2, r7
  402c84:	eb0a 0e03 	add.w	lr, sl, r3
  402c88:	d006      	beq.n	402c98 <strstr+0xfc>
  402c8a:	e02c      	b.n	402ce6 <strstr+0x14a>
  402c8c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  402c90:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402c94:	4288      	cmp	r0, r1
  402c96:	d126      	bne.n	402ce6 <strstr+0x14a>
  402c98:	3301      	adds	r3, #1
  402c9a:	429c      	cmp	r4, r3
  402c9c:	d1f6      	bne.n	402c8c <strstr+0xf0>
  402c9e:	45c8      	cmp	r8, r9
  402ca0:	9900      	ldr	r1, [sp, #0]
  402ca2:	f240 8083 	bls.w	402dac <strstr+0x210>
  402ca6:	9b00      	ldr	r3, [sp, #0]
  402ca8:	18ea      	adds	r2, r5, r3
  402caa:	9b01      	ldr	r3, [sp, #4]
  402cac:	5cb8      	ldrb	r0, [r7, r2]
  402cae:	781b      	ldrb	r3, [r3, #0]
  402cb0:	4298      	cmp	r0, r3
  402cb2:	443a      	add	r2, r7
  402cb4:	d17a      	bne.n	402dac <strstr+0x210>
  402cb6:	9801      	ldr	r0, [sp, #4]
  402cb8:	f109 3bff 	add.w	fp, r9, #4294967295
  402cbc:	e006      	b.n	402ccc <strstr+0x130>
  402cbe:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  402cc2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  402cc6:	45f4      	cmp	ip, lr
  402cc8:	d103      	bne.n	402cd2 <strstr+0x136>
  402cca:	4619      	mov	r1, r3
  402ccc:	1e4b      	subs	r3, r1, #1
  402cce:	455b      	cmp	r3, fp
  402cd0:	d1f5      	bne.n	402cbe <strstr+0x122>
  402cd2:	f109 0901 	add.w	r9, r9, #1
  402cd6:	4589      	cmp	r9, r1
  402cd8:	d857      	bhi.n	402d8a <strstr+0x1ee>
  402cda:	9b03      	ldr	r3, [sp, #12]
  402cdc:	4630      	mov	r0, r6
  402cde:	441d      	add	r5, r3
  402ce0:	eba4 0903 	sub.w	r9, r4, r3
  402ce4:	e7b8      	b.n	402c58 <strstr+0xbc>
  402ce6:	f1c8 0201 	rsb	r2, r8, #1
  402cea:	4415      	add	r5, r2
  402cec:	441d      	add	r5, r3
  402cee:	f04f 0900 	mov.w	r9, #0
  402cf2:	4630      	mov	r0, r6
  402cf4:	e7b0      	b.n	402c58 <strstr+0xbc>
  402cf6:	eba4 0308 	sub.w	r3, r4, r8
  402cfa:	4543      	cmp	r3, r8
  402cfc:	bf38      	it	cc
  402cfe:	4643      	movcc	r3, r8
  402d00:	3301      	adds	r3, #1
  402d02:	f108 39ff 	add.w	r9, r8, #4294967295
  402d06:	9303      	str	r3, [sp, #12]
  402d08:	eb06 0309 	add.w	r3, r6, r9
  402d0c:	4658      	mov	r0, fp
  402d0e:	2500      	movs	r5, #0
  402d10:	46bb      	mov	fp, r7
  402d12:	469a      	mov	sl, r3
  402d14:	1967      	adds	r7, r4, r5
  402d16:	1a3a      	subs	r2, r7, r0
  402d18:	2100      	movs	r1, #0
  402d1a:	4458      	add	r0, fp
  402d1c:	f000 f878 	bl	402e10 <memchr>
  402d20:	2800      	cmp	r0, #0
  402d22:	f47f af7e 	bne.w	402c22 <strstr+0x86>
  402d26:	2f00      	cmp	r7, #0
  402d28:	f43f af7b 	beq.w	402c22 <strstr+0x86>
  402d2c:	4544      	cmp	r4, r8
  402d2e:	d915      	bls.n	402d5c <strstr+0x1c0>
  402d30:	eb08 0205 	add.w	r2, r8, r5
  402d34:	f816 3008 	ldrb.w	r3, [r6, r8]
  402d38:	f81b 0002 	ldrb.w	r0, [fp, r2]
  402d3c:	4298      	cmp	r0, r3
  402d3e:	445a      	add	r2, fp
  402d40:	eb06 0108 	add.w	r1, r6, r8
  402d44:	4643      	mov	r3, r8
  402d46:	d006      	beq.n	402d56 <strstr+0x1ba>
  402d48:	e023      	b.n	402d92 <strstr+0x1f6>
  402d4a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  402d4e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402d52:	4586      	cmp	lr, r0
  402d54:	d11d      	bne.n	402d92 <strstr+0x1f6>
  402d56:	3301      	adds	r3, #1
  402d58:	429c      	cmp	r4, r3
  402d5a:	d1f6      	bne.n	402d4a <strstr+0x1ae>
  402d5c:	f1b9 3fff 	cmp.w	r9, #4294967295
  402d60:	d012      	beq.n	402d88 <strstr+0x1ec>
  402d62:	eb05 0209 	add.w	r2, r5, r9
  402d66:	f89a 3000 	ldrb.w	r3, [sl]
  402d6a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  402d6e:	4299      	cmp	r1, r3
  402d70:	445a      	add	r2, fp
  402d72:	d114      	bne.n	402d9e <strstr+0x202>
  402d74:	4653      	mov	r3, sl
  402d76:	e005      	b.n	402d84 <strstr+0x1e8>
  402d78:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402d7c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402d80:	4288      	cmp	r0, r1
  402d82:	d10c      	bne.n	402d9e <strstr+0x202>
  402d84:	42b3      	cmp	r3, r6
  402d86:	d1f7      	bne.n	402d78 <strstr+0x1dc>
  402d88:	465f      	mov	r7, fp
  402d8a:	1978      	adds	r0, r7, r5
  402d8c:	b005      	add	sp, #20
  402d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d92:	f1c8 0201 	rsb	r2, r8, #1
  402d96:	4415      	add	r5, r2
  402d98:	441d      	add	r5, r3
  402d9a:	4638      	mov	r0, r7
  402d9c:	e7ba      	b.n	402d14 <strstr+0x178>
  402d9e:	9b03      	ldr	r3, [sp, #12]
  402da0:	4638      	mov	r0, r7
  402da2:	441d      	add	r5, r3
  402da4:	e7b6      	b.n	402d14 <strstr+0x178>
  402da6:	780b      	ldrb	r3, [r1, #0]
  402da8:	b913      	cbnz	r3, 402db0 <strstr+0x214>
  402daa:	4770      	bx	lr
  402dac:	4641      	mov	r1, r8
  402dae:	e790      	b.n	402cd2 <strstr+0x136>
  402db0:	2000      	movs	r0, #0
  402db2:	4770      	bx	lr

00402db4 <register_fini>:
  402db4:	4b02      	ldr	r3, [pc, #8]	; (402dc0 <register_fini+0xc>)
  402db6:	b113      	cbz	r3, 402dbe <register_fini+0xa>
  402db8:	4802      	ldr	r0, [pc, #8]	; (402dc4 <register_fini+0x10>)
  402dba:	f000 b805 	b.w	402dc8 <atexit>
  402dbe:	4770      	bx	lr
  402dc0:	00000000 	.word	0x00000000
  402dc4:	00402dd5 	.word	0x00402dd5

00402dc8 <atexit>:
  402dc8:	2300      	movs	r3, #0
  402dca:	4601      	mov	r1, r0
  402dcc:	461a      	mov	r2, r3
  402dce:	4618      	mov	r0, r3
  402dd0:	f000 b912 	b.w	402ff8 <__register_exitproc>

00402dd4 <__libc_fini_array>:
  402dd4:	b538      	push	{r3, r4, r5, lr}
  402dd6:	4c0a      	ldr	r4, [pc, #40]	; (402e00 <__libc_fini_array+0x2c>)
  402dd8:	4d0a      	ldr	r5, [pc, #40]	; (402e04 <__libc_fini_array+0x30>)
  402dda:	1b64      	subs	r4, r4, r5
  402ddc:	10a4      	asrs	r4, r4, #2
  402dde:	d00a      	beq.n	402df6 <__libc_fini_array+0x22>
  402de0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402de4:	3b01      	subs	r3, #1
  402de6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402dea:	3c01      	subs	r4, #1
  402dec:	f855 3904 	ldr.w	r3, [r5], #-4
  402df0:	4798      	blx	r3
  402df2:	2c00      	cmp	r4, #0
  402df4:	d1f9      	bne.n	402dea <__libc_fini_array+0x16>
  402df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402dfa:	f000 ba3b 	b.w	403274 <_fini>
  402dfe:	bf00      	nop
  402e00:	00403284 	.word	0x00403284
  402e04:	00403280 	.word	0x00403280

00402e08 <__retarget_lock_acquire_recursive>:
  402e08:	4770      	bx	lr
  402e0a:	bf00      	nop

00402e0c <__retarget_lock_release_recursive>:
  402e0c:	4770      	bx	lr
  402e0e:	bf00      	nop

00402e10 <memchr>:
  402e10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402e14:	2a10      	cmp	r2, #16
  402e16:	db2b      	blt.n	402e70 <memchr+0x60>
  402e18:	f010 0f07 	tst.w	r0, #7
  402e1c:	d008      	beq.n	402e30 <memchr+0x20>
  402e1e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402e22:	3a01      	subs	r2, #1
  402e24:	428b      	cmp	r3, r1
  402e26:	d02d      	beq.n	402e84 <memchr+0x74>
  402e28:	f010 0f07 	tst.w	r0, #7
  402e2c:	b342      	cbz	r2, 402e80 <memchr+0x70>
  402e2e:	d1f6      	bne.n	402e1e <memchr+0xe>
  402e30:	b4f0      	push	{r4, r5, r6, r7}
  402e32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402e36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402e3a:	f022 0407 	bic.w	r4, r2, #7
  402e3e:	f07f 0700 	mvns.w	r7, #0
  402e42:	2300      	movs	r3, #0
  402e44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402e48:	3c08      	subs	r4, #8
  402e4a:	ea85 0501 	eor.w	r5, r5, r1
  402e4e:	ea86 0601 	eor.w	r6, r6, r1
  402e52:	fa85 f547 	uadd8	r5, r5, r7
  402e56:	faa3 f587 	sel	r5, r3, r7
  402e5a:	fa86 f647 	uadd8	r6, r6, r7
  402e5e:	faa5 f687 	sel	r6, r5, r7
  402e62:	b98e      	cbnz	r6, 402e88 <memchr+0x78>
  402e64:	d1ee      	bne.n	402e44 <memchr+0x34>
  402e66:	bcf0      	pop	{r4, r5, r6, r7}
  402e68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402e6c:	f002 0207 	and.w	r2, r2, #7
  402e70:	b132      	cbz	r2, 402e80 <memchr+0x70>
  402e72:	f810 3b01 	ldrb.w	r3, [r0], #1
  402e76:	3a01      	subs	r2, #1
  402e78:	ea83 0301 	eor.w	r3, r3, r1
  402e7c:	b113      	cbz	r3, 402e84 <memchr+0x74>
  402e7e:	d1f8      	bne.n	402e72 <memchr+0x62>
  402e80:	2000      	movs	r0, #0
  402e82:	4770      	bx	lr
  402e84:	3801      	subs	r0, #1
  402e86:	4770      	bx	lr
  402e88:	2d00      	cmp	r5, #0
  402e8a:	bf06      	itte	eq
  402e8c:	4635      	moveq	r5, r6
  402e8e:	3803      	subeq	r0, #3
  402e90:	3807      	subne	r0, #7
  402e92:	f015 0f01 	tst.w	r5, #1
  402e96:	d107      	bne.n	402ea8 <memchr+0x98>
  402e98:	3001      	adds	r0, #1
  402e9a:	f415 7f80 	tst.w	r5, #256	; 0x100
  402e9e:	bf02      	ittt	eq
  402ea0:	3001      	addeq	r0, #1
  402ea2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402ea6:	3001      	addeq	r0, #1
  402ea8:	bcf0      	pop	{r4, r5, r6, r7}
  402eaa:	3801      	subs	r0, #1
  402eac:	4770      	bx	lr
  402eae:	bf00      	nop

00402eb0 <memcmp>:
  402eb0:	2a03      	cmp	r2, #3
  402eb2:	b470      	push	{r4, r5, r6}
  402eb4:	d922      	bls.n	402efc <memcmp+0x4c>
  402eb6:	ea40 0301 	orr.w	r3, r0, r1
  402eba:	079b      	lsls	r3, r3, #30
  402ebc:	d011      	beq.n	402ee2 <memcmp+0x32>
  402ebe:	7803      	ldrb	r3, [r0, #0]
  402ec0:	780c      	ldrb	r4, [r1, #0]
  402ec2:	42a3      	cmp	r3, r4
  402ec4:	d11d      	bne.n	402f02 <memcmp+0x52>
  402ec6:	440a      	add	r2, r1
  402ec8:	3101      	adds	r1, #1
  402eca:	e005      	b.n	402ed8 <memcmp+0x28>
  402ecc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
  402ed4:	42a3      	cmp	r3, r4
  402ed6:	d114      	bne.n	402f02 <memcmp+0x52>
  402ed8:	4291      	cmp	r1, r2
  402eda:	d1f7      	bne.n	402ecc <memcmp+0x1c>
  402edc:	2000      	movs	r0, #0
  402ede:	bc70      	pop	{r4, r5, r6}
  402ee0:	4770      	bx	lr
  402ee2:	680d      	ldr	r5, [r1, #0]
  402ee4:	6806      	ldr	r6, [r0, #0]
  402ee6:	42ae      	cmp	r6, r5
  402ee8:	460c      	mov	r4, r1
  402eea:	4603      	mov	r3, r0
  402eec:	f101 0104 	add.w	r1, r1, #4
  402ef0:	f100 0004 	add.w	r0, r0, #4
  402ef4:	d108      	bne.n	402f08 <memcmp+0x58>
  402ef6:	3a04      	subs	r2, #4
  402ef8:	2a03      	cmp	r2, #3
  402efa:	d8f2      	bhi.n	402ee2 <memcmp+0x32>
  402efc:	2a00      	cmp	r2, #0
  402efe:	d1de      	bne.n	402ebe <memcmp+0xe>
  402f00:	e7ec      	b.n	402edc <memcmp+0x2c>
  402f02:	1b18      	subs	r0, r3, r4
  402f04:	bc70      	pop	{r4, r5, r6}
  402f06:	4770      	bx	lr
  402f08:	4621      	mov	r1, r4
  402f0a:	4618      	mov	r0, r3
  402f0c:	e7d7      	b.n	402ebe <memcmp+0xe>
  402f0e:	bf00      	nop

00402f10 <strchr>:
  402f10:	b2c9      	uxtb	r1, r1
  402f12:	2900      	cmp	r1, #0
  402f14:	d041      	beq.n	402f9a <strchr+0x8a>
  402f16:	0782      	lsls	r2, r0, #30
  402f18:	b4f0      	push	{r4, r5, r6, r7}
  402f1a:	d067      	beq.n	402fec <strchr+0xdc>
  402f1c:	7803      	ldrb	r3, [r0, #0]
  402f1e:	2b00      	cmp	r3, #0
  402f20:	d068      	beq.n	402ff4 <strchr+0xe4>
  402f22:	4299      	cmp	r1, r3
  402f24:	d037      	beq.n	402f96 <strchr+0x86>
  402f26:	1c43      	adds	r3, r0, #1
  402f28:	e004      	b.n	402f34 <strchr+0x24>
  402f2a:	f813 0b01 	ldrb.w	r0, [r3], #1
  402f2e:	b390      	cbz	r0, 402f96 <strchr+0x86>
  402f30:	4281      	cmp	r1, r0
  402f32:	d02f      	beq.n	402f94 <strchr+0x84>
  402f34:	079a      	lsls	r2, r3, #30
  402f36:	461c      	mov	r4, r3
  402f38:	d1f7      	bne.n	402f2a <strchr+0x1a>
  402f3a:	6825      	ldr	r5, [r4, #0]
  402f3c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  402f40:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  402f44:	ea83 0605 	eor.w	r6, r3, r5
  402f48:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  402f4c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  402f50:	ea20 0006 	bic.w	r0, r0, r6
  402f54:	ea22 0205 	bic.w	r2, r2, r5
  402f58:	4302      	orrs	r2, r0
  402f5a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402f5e:	d111      	bne.n	402f84 <strchr+0x74>
  402f60:	4620      	mov	r0, r4
  402f62:	f850 6f04 	ldr.w	r6, [r0, #4]!
  402f66:	ea83 0706 	eor.w	r7, r3, r6
  402f6a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  402f6e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  402f72:	ea25 0507 	bic.w	r5, r5, r7
  402f76:	ea22 0206 	bic.w	r2, r2, r6
  402f7a:	432a      	orrs	r2, r5
  402f7c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402f80:	d0ef      	beq.n	402f62 <strchr+0x52>
  402f82:	4604      	mov	r4, r0
  402f84:	7820      	ldrb	r0, [r4, #0]
  402f86:	b918      	cbnz	r0, 402f90 <strchr+0x80>
  402f88:	e005      	b.n	402f96 <strchr+0x86>
  402f8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  402f8e:	b110      	cbz	r0, 402f96 <strchr+0x86>
  402f90:	4281      	cmp	r1, r0
  402f92:	d1fa      	bne.n	402f8a <strchr+0x7a>
  402f94:	4620      	mov	r0, r4
  402f96:	bcf0      	pop	{r4, r5, r6, r7}
  402f98:	4770      	bx	lr
  402f9a:	0783      	lsls	r3, r0, #30
  402f9c:	d024      	beq.n	402fe8 <strchr+0xd8>
  402f9e:	7803      	ldrb	r3, [r0, #0]
  402fa0:	2b00      	cmp	r3, #0
  402fa2:	d0f9      	beq.n	402f98 <strchr+0x88>
  402fa4:	1c43      	adds	r3, r0, #1
  402fa6:	e003      	b.n	402fb0 <strchr+0xa0>
  402fa8:	7802      	ldrb	r2, [r0, #0]
  402faa:	3301      	adds	r3, #1
  402fac:	2a00      	cmp	r2, #0
  402fae:	d0f3      	beq.n	402f98 <strchr+0x88>
  402fb0:	0799      	lsls	r1, r3, #30
  402fb2:	4618      	mov	r0, r3
  402fb4:	d1f8      	bne.n	402fa8 <strchr+0x98>
  402fb6:	6819      	ldr	r1, [r3, #0]
  402fb8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402fbc:	ea22 0201 	bic.w	r2, r2, r1
  402fc0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402fc4:	d108      	bne.n	402fd8 <strchr+0xc8>
  402fc6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  402fca:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402fce:	ea22 0201 	bic.w	r2, r2, r1
  402fd2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402fd6:	d0f6      	beq.n	402fc6 <strchr+0xb6>
  402fd8:	781a      	ldrb	r2, [r3, #0]
  402fda:	4618      	mov	r0, r3
  402fdc:	b142      	cbz	r2, 402ff0 <strchr+0xe0>
  402fde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402fe2:	2b00      	cmp	r3, #0
  402fe4:	d1fb      	bne.n	402fde <strchr+0xce>
  402fe6:	4770      	bx	lr
  402fe8:	4603      	mov	r3, r0
  402fea:	e7e4      	b.n	402fb6 <strchr+0xa6>
  402fec:	4604      	mov	r4, r0
  402fee:	e7a4      	b.n	402f3a <strchr+0x2a>
  402ff0:	4618      	mov	r0, r3
  402ff2:	4770      	bx	lr
  402ff4:	4618      	mov	r0, r3
  402ff6:	e7ce      	b.n	402f96 <strchr+0x86>

00402ff8 <__register_exitproc>:
  402ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402ffc:	4d2c      	ldr	r5, [pc, #176]	; (4030b0 <__register_exitproc+0xb8>)
  402ffe:	4606      	mov	r6, r0
  403000:	6828      	ldr	r0, [r5, #0]
  403002:	4698      	mov	r8, r3
  403004:	460f      	mov	r7, r1
  403006:	4691      	mov	r9, r2
  403008:	f7ff fefe 	bl	402e08 <__retarget_lock_acquire_recursive>
  40300c:	4b29      	ldr	r3, [pc, #164]	; (4030b4 <__register_exitproc+0xbc>)
  40300e:	681c      	ldr	r4, [r3, #0]
  403010:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403014:	2b00      	cmp	r3, #0
  403016:	d03e      	beq.n	403096 <__register_exitproc+0x9e>
  403018:	685a      	ldr	r2, [r3, #4]
  40301a:	2a1f      	cmp	r2, #31
  40301c:	dc1c      	bgt.n	403058 <__register_exitproc+0x60>
  40301e:	f102 0e01 	add.w	lr, r2, #1
  403022:	b176      	cbz	r6, 403042 <__register_exitproc+0x4a>
  403024:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403028:	2401      	movs	r4, #1
  40302a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40302e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403032:	4094      	lsls	r4, r2
  403034:	4320      	orrs	r0, r4
  403036:	2e02      	cmp	r6, #2
  403038:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40303c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403040:	d023      	beq.n	40308a <__register_exitproc+0x92>
  403042:	3202      	adds	r2, #2
  403044:	f8c3 e004 	str.w	lr, [r3, #4]
  403048:	6828      	ldr	r0, [r5, #0]
  40304a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40304e:	f7ff fedd 	bl	402e0c <__retarget_lock_release_recursive>
  403052:	2000      	movs	r0, #0
  403054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403058:	4b17      	ldr	r3, [pc, #92]	; (4030b8 <__register_exitproc+0xc0>)
  40305a:	b30b      	cbz	r3, 4030a0 <__register_exitproc+0xa8>
  40305c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403060:	f3af 8000 	nop.w
  403064:	4603      	mov	r3, r0
  403066:	b1d8      	cbz	r0, 4030a0 <__register_exitproc+0xa8>
  403068:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40306c:	6002      	str	r2, [r0, #0]
  40306e:	2100      	movs	r1, #0
  403070:	6041      	str	r1, [r0, #4]
  403072:	460a      	mov	r2, r1
  403074:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403078:	f04f 0e01 	mov.w	lr, #1
  40307c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403080:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403084:	2e00      	cmp	r6, #0
  403086:	d0dc      	beq.n	403042 <__register_exitproc+0x4a>
  403088:	e7cc      	b.n	403024 <__register_exitproc+0x2c>
  40308a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40308e:	430c      	orrs	r4, r1
  403090:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403094:	e7d5      	b.n	403042 <__register_exitproc+0x4a>
  403096:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40309a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40309e:	e7bb      	b.n	403018 <__register_exitproc+0x20>
  4030a0:	6828      	ldr	r0, [r5, #0]
  4030a2:	f7ff feb3 	bl	402e0c <__retarget_lock_release_recursive>
  4030a6:	f04f 30ff 	mov.w	r0, #4294967295
  4030aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4030ae:	bf00      	nop
  4030b0:	20000438 	.word	0x20000438
  4030b4:	0040325c 	.word	0x0040325c
  4030b8:	00000000 	.word	0x00000000
  4030bc:	72617453 	.word	0x72617453
  4030c0:	72742074 	.word	0x72742074
  4030c4:	66736e61 	.word	0x66736e61
  4030c8:	00007265 	.word	0x00007265
  4030cc:	65696c43 	.word	0x65696c43
  4030d0:	6e20746e 	.word	0x6e20746e
  4030d4:	6320746f 	.word	0x6320746f
  4030d8:	656e6e6f 	.word	0x656e6e6f
  4030dc:	64657463 	.word	0x64657463
  4030e0:	00000000 	.word	0x00000000
  4030e4:	6d6d6f43 	.word	0x6d6d6f43
  4030e8:	20646e61 	.word	0x20646e61
  4030ec:	6c696166 	.word	0x6c696166
  4030f0:	00006465 	.word	0x00006465
  4030f4:	656e6f4e 	.word	0x656e6f4e
  4030f8:	00000000 	.word	0x00000000
  4030fc:	0001c200 	.word	0x0001c200
  403100:	000000c0 	.word	0x000000c0
  403104:	00000800 	.word	0x00000800
	...
  403114:	20746573 	.word	0x20746573
  403118:	74737973 	.word	0x74737973
  40311c:	632e6d65 	.word	0x632e6d65
  403120:	652e646d 	.word	0x652e646d
  403124:	206f6863 	.word	0x206f6863
  403128:	0d66666f 	.word	0x0d66666f
  40312c:	0000000a 	.word	0x0000000a
  403130:	20746573 	.word	0x20746573
  403134:	74726175 	.word	0x74726175
  403138:	6f6c662e 	.word	0x6f6c662e
  40313c:	20302077 	.word	0x20302077
  403140:	0a0d6e6f 	.word	0x0a0d6e6f
  403144:	00000000 	.word	0x00000000
  403148:	20746573 	.word	0x20746573
  40314c:	63207562 	.word	0x63207562
  403150:	31207220 	.word	0x31207220
  403154:	30303030 	.word	0x30303030
  403158:	00000a0d 	.word	0x00000a0d
  40315c:	20746573 	.word	0x20746573
  403160:	74737973 	.word	0x74737973
  403164:	692e6d65 	.word	0x692e6d65
  403168:	6369646e 	.word	0x6369646e
  40316c:	726f7461 	.word	0x726f7461
  403170:	6970672e 	.word	0x6970672e
  403174:	6c77206f 	.word	0x6c77206f
  403178:	32206e61 	.word	0x32206e61
  40317c:	000a0d30 	.word	0x000a0d30
  403180:	20746573 	.word	0x20746573
  403184:	74737973 	.word	0x74737973
  403188:	692e6d65 	.word	0x692e6d65
  40318c:	6369646e 	.word	0x6369646e
  403190:	726f7461 	.word	0x726f7461
  403194:	6970672e 	.word	0x6970672e
  403198:	656e206f 	.word	0x656e206f
  40319c:	726f7774 	.word	0x726f7774
  4031a0:	3831206b 	.word	0x3831206b
  4031a4:	00000a0d 	.word	0x00000a0d
  4031a8:	20746573 	.word	0x20746573
  4031ac:	74737973 	.word	0x74737973
  4031b0:	692e6d65 	.word	0x692e6d65
  4031b4:	6369646e 	.word	0x6369646e
  4031b8:	726f7461 	.word	0x726f7461
  4031bc:	6970672e 	.word	0x6970672e
  4031c0:	6f73206f 	.word	0x6f73206f
  4031c4:	70617466 	.word	0x70617466
  4031c8:	0d313220 	.word	0x0d313220
  4031cc:	0000000a 	.word	0x0000000a
  4031d0:	20746573 	.word	0x20746573
  4031d4:	74737973 	.word	0x74737973
  4031d8:	632e6d65 	.word	0x632e6d65
  4031dc:	672e646d 	.word	0x672e646d
  4031e0:	206f6970 	.word	0x206f6970
  4031e4:	0a0d3631 	.word	0x0a0d3631
  4031e8:	00000000 	.word	0x00000000
  4031ec:	20746573 	.word	0x20746573
  4031f0:	6e616c77 	.word	0x6e616c77
  4031f4:	74656e2e 	.word	0x74656e2e
  4031f8:	6b726f77 	.word	0x6b726f77
  4031fc:	6174732e 	.word	0x6174732e
  403200:	5f737574 	.word	0x5f737574
  403204:	6f697067 	.word	0x6f697067
  403208:	0d343120 	.word	0x0d343120
  40320c:	0000000a 	.word	0x0000000a
  403210:	65766173 	.word	0x65766173
  403214:	00000a0d 	.word	0x00000a0d
  403218:	75746573 	.word	0x75746573
  40321c:	65772070 	.word	0x65772070
  403220:	000a0d62 	.word	0x000a0d62
  403224:	706d7562 	.word	0x706d7562
  403228:	00000a0d 	.word	0x00000a0d
  40322c:	20706f66 	.word	0x20706f66
  403230:	74736574 	.word	0x74736574
  403234:	7478742e 	.word	0x7478742e
  403238:	00000a0d 	.word	0x00000a0d
  40323c:	20747366 	.word	0x20747366
  403240:	74736574 	.word	0x74736574
  403244:	7478742e 	.word	0x7478742e
  403248:	00000a0d 	.word	0x00000a0d
  40324c:	64616572 	.word	0x64616572
  403250:	00000020 	.word	0x00000020
  403254:	72746550 	.word	0x72746550
  403258:	00007361 	.word	0x00007361

0040325c <_global_impure_ptr>:
  40325c:	20000010                                ... 

00403260 <_init>:
  403260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403262:	bf00      	nop
  403264:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403266:	bc08      	pop	{r3}
  403268:	469e      	mov	lr, r3
  40326a:	4770      	bx	lr

0040326c <__init_array_start>:
  40326c:	00402db5 	.word	0x00402db5

00403270 <__frame_dummy_init_array_entry>:
  403270:	004000f1                                ..@.

00403274 <_fini>:
  403274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403276:	bf00      	nop
  403278:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40327a:	bc08      	pop	{r3}
  40327c:	469e      	mov	lr, r3
  40327e:	4770      	bx	lr

00403280 <__fini_array_start>:
  403280:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	0918 2000                                   ... 
