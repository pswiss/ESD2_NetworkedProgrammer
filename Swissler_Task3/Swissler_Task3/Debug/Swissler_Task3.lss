
Swissler_Task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017a4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004017a4  004017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  004017ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000c0  2000043c  00401be8  0002043c  2**2
                  ALLOC
  4 .stack        00003004  200004fc  00401ca8  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000beae  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a67  00000000  00000000  0002c36d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003614  00000000  00000000  0002ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000640  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000608  00000000  00000000  00031a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000111f1  00000000  00000000  00032030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008403  00000000  00000000  00043221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004aec9  00000000  00000000  0004b624  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001b48  00000000  00000000  000964f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 35 00 20 81 0c 40 00 49 0d 40 00 49 0d 40 00     .5. ..@.I.@.I.@.
  400010:	49 0d 40 00 49 0d 40 00 49 0d 40 00 00 00 00 00     I.@.I.@.I.@.....
	...
  40002c:	49 0d 40 00 49 0d 40 00 00 00 00 00 49 0d 40 00     I.@.I.@.....I.@.
  40003c:	49 0d 40 00 49 0d 40 00 49 0d 40 00 49 0d 40 00     I.@.I.@.I.@.I.@.
  40004c:	49 0d 40 00 49 0d 40 00 49 0d 40 00 49 0d 40 00     I.@.I.@.I.@.I.@.
  40005c:	00 00 00 00 49 0d 40 00 49 0d 40 00 00 00 00 00     ....I.@.I.@.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 49 0d 40 00     ..@...@.....I.@.
  40007c:	49 0d 40 00 00 00 00 00 00 00 00 00 49 0d 40 00     I.@.........I.@.
  40008c:	49 0d 40 00 49 0d 40 00 49 0d 40 00 49 0d 40 00     I.@.I.@.I.@.I.@.
  40009c:	49 0d 40 00 49 0d 40 00 49 0d 40 00 00 00 00 00     I.@.I.@.I.@.....
	...
  4000b4:	49 0d 40 00 49 0d 40 00 49 0d 40 00 49 0d 40 00     I.@.I.@.I.@.I.@.
  4000c4:	49 0d 40 00 49 0d 40 00                             I.@.I.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004017ac 	.word	0x004017ac

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004017ac 	.word	0x004017ac
  40012c:	20000440 	.word	0x20000440
  400130:	004017ac 	.word	0x004017ac
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	004006ef 	.word	0x004006ef
  4001fc:	00400705 	.word	0x00400705
  400200:	20000458 	.word	0x20000458
  400204:	200004d4 	.word	0x200004d4
  400208:	200004cc 	.word	0x200004cc

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	200004c8 	.word	0x200004c8
  4002a4:	20000458 	.word	0x20000458
  4002a8:	0040066b 	.word	0x0040066b

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4002dc:	b580      	push	{r7, lr}
  4002de:	b082      	sub	sp, #8
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002e4:	687b      	ldr	r3, [r7, #4]
  4002e6:	2b07      	cmp	r3, #7
  4002e8:	d831      	bhi.n	40034e <osc_enable+0x72>
  4002ea:	a201      	add	r2, pc, #4	; (adr r2, 4002f0 <osc_enable+0x14>)
  4002ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002f0:	0040034d 	.word	0x0040034d
  4002f4:	00400311 	.word	0x00400311
  4002f8:	00400319 	.word	0x00400319
  4002fc:	00400321 	.word	0x00400321
  400300:	00400329 	.word	0x00400329
  400304:	00400331 	.word	0x00400331
  400308:	00400339 	.word	0x00400339
  40030c:	00400343 	.word	0x00400343
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400310:	2000      	movs	r0, #0
  400312:	4b11      	ldr	r3, [pc, #68]	; (400358 <osc_enable+0x7c>)
  400314:	4798      	blx	r3
		break;
  400316:	e01a      	b.n	40034e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400318:	2001      	movs	r0, #1
  40031a:	4b0f      	ldr	r3, [pc, #60]	; (400358 <osc_enable+0x7c>)
  40031c:	4798      	blx	r3
		break;
  40031e:	e016      	b.n	40034e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400320:	2000      	movs	r0, #0
  400322:	4b0e      	ldr	r3, [pc, #56]	; (40035c <osc_enable+0x80>)
  400324:	4798      	blx	r3
		break;
  400326:	e012      	b.n	40034e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400328:	2010      	movs	r0, #16
  40032a:	4b0c      	ldr	r3, [pc, #48]	; (40035c <osc_enable+0x80>)
  40032c:	4798      	blx	r3
		break;
  40032e:	e00e      	b.n	40034e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400330:	2020      	movs	r0, #32
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <osc_enable+0x80>)
  400334:	4798      	blx	r3
		break;
  400336:	e00a      	b.n	40034e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400338:	213e      	movs	r1, #62	; 0x3e
  40033a:	2000      	movs	r0, #0
  40033c:	4b08      	ldr	r3, [pc, #32]	; (400360 <osc_enable+0x84>)
  40033e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400340:	e005      	b.n	40034e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400342:	213e      	movs	r1, #62	; 0x3e
  400344:	2001      	movs	r0, #1
  400346:	4b06      	ldr	r3, [pc, #24]	; (400360 <osc_enable+0x84>)
  400348:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40034a:	e000      	b.n	40034e <osc_enable+0x72>
		break;
  40034c:	bf00      	nop
	}
}
  40034e:	bf00      	nop
  400350:	3708      	adds	r7, #8
  400352:	46bd      	mov	sp, r7
  400354:	bd80      	pop	{r7, pc}
  400356:	bf00      	nop
  400358:	0040079d 	.word	0x0040079d
  40035c:	00400809 	.word	0x00400809
  400360:	00400879 	.word	0x00400879

00400364 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400364:	b580      	push	{r7, lr}
  400366:	b082      	sub	sp, #8
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40036c:	687b      	ldr	r3, [r7, #4]
  40036e:	2b07      	cmp	r3, #7
  400370:	d826      	bhi.n	4003c0 <osc_is_ready+0x5c>
  400372:	a201      	add	r2, pc, #4	; (adr r2, 400378 <osc_is_ready+0x14>)
  400374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400378:	00400399 	.word	0x00400399
  40037c:	0040039d 	.word	0x0040039d
  400380:	0040039d 	.word	0x0040039d
  400384:	004003af 	.word	0x004003af
  400388:	004003af 	.word	0x004003af
  40038c:	004003af 	.word	0x004003af
  400390:	004003af 	.word	0x004003af
  400394:	004003af 	.word	0x004003af
	case OSC_SLCK_32K_RC:
		return 1;
  400398:	2301      	movs	r3, #1
  40039a:	e012      	b.n	4003c2 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40039c:	4b0b      	ldr	r3, [pc, #44]	; (4003cc <osc_is_ready+0x68>)
  40039e:	4798      	blx	r3
  4003a0:	4603      	mov	r3, r0
  4003a2:	2b00      	cmp	r3, #0
  4003a4:	bf14      	ite	ne
  4003a6:	2301      	movne	r3, #1
  4003a8:	2300      	moveq	r3, #0
  4003aa:	b2db      	uxtb	r3, r3
  4003ac:	e009      	b.n	4003c2 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4003ae:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <osc_is_ready+0x6c>)
  4003b0:	4798      	blx	r3
  4003b2:	4603      	mov	r3, r0
  4003b4:	2b00      	cmp	r3, #0
  4003b6:	bf14      	ite	ne
  4003b8:	2301      	movne	r3, #1
  4003ba:	2300      	moveq	r3, #0
  4003bc:	b2db      	uxtb	r3, r3
  4003be:	e000      	b.n	4003c2 <osc_is_ready+0x5e>
	}

	return 0;
  4003c0:	2300      	movs	r3, #0
}
  4003c2:	4618      	mov	r0, r3
  4003c4:	3708      	adds	r7, #8
  4003c6:	46bd      	mov	sp, r7
  4003c8:	bd80      	pop	{r7, pc}
  4003ca:	bf00      	nop
  4003cc:	004007d5 	.word	0x004007d5
  4003d0:	004008f1 	.word	0x004008f1

004003d4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4003d4:	b480      	push	{r7}
  4003d6:	b083      	sub	sp, #12
  4003d8:	af00      	add	r7, sp, #0
  4003da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4003dc:	687b      	ldr	r3, [r7, #4]
  4003de:	2b07      	cmp	r3, #7
  4003e0:	d825      	bhi.n	40042e <osc_get_rate+0x5a>
  4003e2:	a201      	add	r2, pc, #4	; (adr r2, 4003e8 <osc_get_rate+0x14>)
  4003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003e8:	00400409 	.word	0x00400409
  4003ec:	0040040f 	.word	0x0040040f
  4003f0:	00400415 	.word	0x00400415
  4003f4:	0040041b 	.word	0x0040041b
  4003f8:	0040041f 	.word	0x0040041f
  4003fc:	00400423 	.word	0x00400423
  400400:	00400427 	.word	0x00400427
  400404:	0040042b 	.word	0x0040042b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400408:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40040c:	e010      	b.n	400430 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40040e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400412:	e00d      	b.n	400430 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400418:	e00a      	b.n	400430 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40041a:	4b08      	ldr	r3, [pc, #32]	; (40043c <osc_get_rate+0x68>)
  40041c:	e008      	b.n	400430 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40041e:	4b08      	ldr	r3, [pc, #32]	; (400440 <osc_get_rate+0x6c>)
  400420:	e006      	b.n	400430 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400422:	4b08      	ldr	r3, [pc, #32]	; (400444 <osc_get_rate+0x70>)
  400424:	e004      	b.n	400430 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400426:	4b07      	ldr	r3, [pc, #28]	; (400444 <osc_get_rate+0x70>)
  400428:	e002      	b.n	400430 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40042a:	4b06      	ldr	r3, [pc, #24]	; (400444 <osc_get_rate+0x70>)
  40042c:	e000      	b.n	400430 <osc_get_rate+0x5c>
	}

	return 0;
  40042e:	2300      	movs	r3, #0
}
  400430:	4618      	mov	r0, r3
  400432:	370c      	adds	r7, #12
  400434:	46bd      	mov	sp, r7
  400436:	bc80      	pop	{r7}
  400438:	4770      	bx	lr
  40043a:	bf00      	nop
  40043c:	003d0900 	.word	0x003d0900
  400440:	007a1200 	.word	0x007a1200
  400444:	00b71b00 	.word	0x00b71b00

00400448 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400448:	b580      	push	{r7, lr}
  40044a:	b082      	sub	sp, #8
  40044c:	af00      	add	r7, sp, #0
  40044e:	4603      	mov	r3, r0
  400450:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400452:	bf00      	nop
  400454:	79fb      	ldrb	r3, [r7, #7]
  400456:	4618      	mov	r0, r3
  400458:	4b05      	ldr	r3, [pc, #20]	; (400470 <osc_wait_ready+0x28>)
  40045a:	4798      	blx	r3
  40045c:	4603      	mov	r3, r0
  40045e:	f083 0301 	eor.w	r3, r3, #1
  400462:	b2db      	uxtb	r3, r3
  400464:	2b00      	cmp	r3, #0
  400466:	d1f5      	bne.n	400454 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400468:	bf00      	nop
  40046a:	3708      	adds	r7, #8
  40046c:	46bd      	mov	sp, r7
  40046e:	bd80      	pop	{r7, pc}
  400470:	00400365 	.word	0x00400365

00400474 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400474:	b580      	push	{r7, lr}
  400476:	b086      	sub	sp, #24
  400478:	af00      	add	r7, sp, #0
  40047a:	60f8      	str	r0, [r7, #12]
  40047c:	607a      	str	r2, [r7, #4]
  40047e:	603b      	str	r3, [r7, #0]
  400480:	460b      	mov	r3, r1
  400482:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400484:	7afb      	ldrb	r3, [r7, #11]
  400486:	4618      	mov	r0, r3
  400488:	4b0d      	ldr	r3, [pc, #52]	; (4004c0 <pll_config_init+0x4c>)
  40048a:	4798      	blx	r3
  40048c:	4602      	mov	r2, r0
  40048e:	687b      	ldr	r3, [r7, #4]
  400490:	fbb2 f3f3 	udiv	r3, r2, r3
  400494:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400496:	697b      	ldr	r3, [r7, #20]
  400498:	683a      	ldr	r2, [r7, #0]
  40049a:	fb02 f303 	mul.w	r3, r2, r3
  40049e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4004a0:	683b      	ldr	r3, [r7, #0]
  4004a2:	3b01      	subs	r3, #1
  4004a4:	041a      	lsls	r2, r3, #16
  4004a6:	4b07      	ldr	r3, [pc, #28]	; (4004c4 <pll_config_init+0x50>)
  4004a8:	4013      	ands	r3, r2
  4004aa:	687a      	ldr	r2, [r7, #4]
  4004ac:	b2d2      	uxtb	r2, r2
  4004ae:	4313      	orrs	r3, r2
  4004b0:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4004b4:	68fb      	ldr	r3, [r7, #12]
  4004b6:	601a      	str	r2, [r3, #0]
}
  4004b8:	bf00      	nop
  4004ba:	3718      	adds	r7, #24
  4004bc:	46bd      	mov	sp, r7
  4004be:	bd80      	pop	{r7, pc}
  4004c0:	004003d5 	.word	0x004003d5
  4004c4:	07ff0000 	.word	0x07ff0000

004004c8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4004c8:	b580      	push	{r7, lr}
  4004ca:	b082      	sub	sp, #8
  4004cc:	af00      	add	r7, sp, #0
  4004ce:	6078      	str	r0, [r7, #4]
  4004d0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4004d2:	683b      	ldr	r3, [r7, #0]
  4004d4:	2b00      	cmp	r3, #0
  4004d6:	d108      	bne.n	4004ea <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4004d8:	4b09      	ldr	r3, [pc, #36]	; (400500 <pll_enable+0x38>)
  4004da:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4004dc:	4a09      	ldr	r2, [pc, #36]	; (400504 <pll_enable+0x3c>)
  4004de:	687b      	ldr	r3, [r7, #4]
  4004e0:	681b      	ldr	r3, [r3, #0]
  4004e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4004e6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4004e8:	e005      	b.n	4004f6 <pll_enable+0x2e>
		pmc_disable_pllbck();
  4004ea:	4b07      	ldr	r3, [pc, #28]	; (400508 <pll_enable+0x40>)
  4004ec:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4004ee:	4a05      	ldr	r2, [pc, #20]	; (400504 <pll_enable+0x3c>)
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	681b      	ldr	r3, [r3, #0]
  4004f4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4004f6:	bf00      	nop
  4004f8:	3708      	adds	r7, #8
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd80      	pop	{r7, pc}
  4004fe:	bf00      	nop
  400500:	00400909 	.word	0x00400909
  400504:	400e0400 	.word	0x400e0400
  400508:	00400939 	.word	0x00400939

0040050c <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b082      	sub	sp, #8
  400510:	af00      	add	r7, sp, #0
  400512:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400514:	687b      	ldr	r3, [r7, #4]
  400516:	2b00      	cmp	r3, #0
  400518:	d103      	bne.n	400522 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40051a:	4b05      	ldr	r3, [pc, #20]	; (400530 <pll_is_locked+0x24>)
  40051c:	4798      	blx	r3
  40051e:	4603      	mov	r3, r0
  400520:	e002      	b.n	400528 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400522:	4b04      	ldr	r3, [pc, #16]	; (400534 <pll_is_locked+0x28>)
  400524:	4798      	blx	r3
  400526:	4603      	mov	r3, r0
	}
}
  400528:	4618      	mov	r0, r3
  40052a:	3708      	adds	r7, #8
  40052c:	46bd      	mov	sp, r7
  40052e:	bd80      	pop	{r7, pc}
  400530:	00400921 	.word	0x00400921
  400534:	00400951 	.word	0x00400951

00400538 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400538:	b580      	push	{r7, lr}
  40053a:	b082      	sub	sp, #8
  40053c:	af00      	add	r7, sp, #0
  40053e:	4603      	mov	r3, r0
  400540:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400542:	79fb      	ldrb	r3, [r7, #7]
  400544:	3b03      	subs	r3, #3
  400546:	2b04      	cmp	r3, #4
  400548:	d808      	bhi.n	40055c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40054a:	79fb      	ldrb	r3, [r7, #7]
  40054c:	4618      	mov	r0, r3
  40054e:	4b06      	ldr	r3, [pc, #24]	; (400568 <pll_enable_source+0x30>)
  400550:	4798      	blx	r3
		osc_wait_ready(e_src);
  400552:	79fb      	ldrb	r3, [r7, #7]
  400554:	4618      	mov	r0, r3
  400556:	4b05      	ldr	r3, [pc, #20]	; (40056c <pll_enable_source+0x34>)
  400558:	4798      	blx	r3
		break;
  40055a:	e000      	b.n	40055e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40055c:	bf00      	nop
	}
}
  40055e:	bf00      	nop
  400560:	3708      	adds	r7, #8
  400562:	46bd      	mov	sp, r7
  400564:	bd80      	pop	{r7, pc}
  400566:	bf00      	nop
  400568:	004002dd 	.word	0x004002dd
  40056c:	00400449 	.word	0x00400449

00400570 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400570:	b580      	push	{r7, lr}
  400572:	b082      	sub	sp, #8
  400574:	af00      	add	r7, sp, #0
  400576:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400578:	bf00      	nop
  40057a:	6878      	ldr	r0, [r7, #4]
  40057c:	4b04      	ldr	r3, [pc, #16]	; (400590 <pll_wait_for_lock+0x20>)
  40057e:	4798      	blx	r3
  400580:	4603      	mov	r3, r0
  400582:	2b00      	cmp	r3, #0
  400584:	d0f9      	beq.n	40057a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400586:	2300      	movs	r3, #0
}
  400588:	4618      	mov	r0, r3
  40058a:	3708      	adds	r7, #8
  40058c:	46bd      	mov	sp, r7
  40058e:	bd80      	pop	{r7, pc}
  400590:	0040050d 	.word	0x0040050d

00400594 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400594:	b580      	push	{r7, lr}
  400596:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400598:	2006      	movs	r0, #6
  40059a:	4b04      	ldr	r3, [pc, #16]	; (4005ac <sysclk_get_main_hz+0x18>)
  40059c:	4798      	blx	r3
  40059e:	4602      	mov	r2, r0
  4005a0:	4613      	mov	r3, r2
  4005a2:	009b      	lsls	r3, r3, #2
  4005a4:	4413      	add	r3, r2
  4005a6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4005a8:	4618      	mov	r0, r3
  4005aa:	bd80      	pop	{r7, pc}
  4005ac:	004003d5 	.word	0x004003d5

004005b0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4005b0:	b580      	push	{r7, lr}
  4005b2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4005b4:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <sysclk_get_cpu_hz+0x10>)
  4005b6:	4798      	blx	r3
  4005b8:	4603      	mov	r3, r0
  4005ba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4005bc:	4618      	mov	r0, r3
  4005be:	bd80      	pop	{r7, pc}
  4005c0:	00400595 	.word	0x00400595

004005c4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4005c4:	b590      	push	{r4, r7, lr}
  4005c6:	b083      	sub	sp, #12
  4005c8:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4005ca:	4811      	ldr	r0, [pc, #68]	; (400610 <sysclk_init+0x4c>)
  4005cc:	4b11      	ldr	r3, [pc, #68]	; (400614 <sysclk_init+0x50>)
  4005ce:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4005d0:	2006      	movs	r0, #6
  4005d2:	4b11      	ldr	r3, [pc, #68]	; (400618 <sysclk_init+0x54>)
  4005d4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4005d6:	1d38      	adds	r0, r7, #4
  4005d8:	2314      	movs	r3, #20
  4005da:	2201      	movs	r2, #1
  4005dc:	2106      	movs	r1, #6
  4005de:	4c0f      	ldr	r4, [pc, #60]	; (40061c <sysclk_init+0x58>)
  4005e0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4005e2:	1d3b      	adds	r3, r7, #4
  4005e4:	2100      	movs	r1, #0
  4005e6:	4618      	mov	r0, r3
  4005e8:	4b0d      	ldr	r3, [pc, #52]	; (400620 <sysclk_init+0x5c>)
  4005ea:	4798      	blx	r3
		pll_wait_for_lock(0);
  4005ec:	2000      	movs	r0, #0
  4005ee:	4b0d      	ldr	r3, [pc, #52]	; (400624 <sysclk_init+0x60>)
  4005f0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4005f2:	2010      	movs	r0, #16
  4005f4:	4b0c      	ldr	r3, [pc, #48]	; (400628 <sysclk_init+0x64>)
  4005f6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4005f8:	4b0c      	ldr	r3, [pc, #48]	; (40062c <sysclk_init+0x68>)
  4005fa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4005fc:	4b0c      	ldr	r3, [pc, #48]	; (400630 <sysclk_init+0x6c>)
  4005fe:	4798      	blx	r3
  400600:	4603      	mov	r3, r0
  400602:	4618      	mov	r0, r3
  400604:	4b03      	ldr	r3, [pc, #12]	; (400614 <sysclk_init+0x50>)
  400606:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400608:	bf00      	nop
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	bd90      	pop	{r4, r7, pc}
  400610:	07270e00 	.word	0x07270e00
  400614:	00400ee9 	.word	0x00400ee9
  400618:	00400539 	.word	0x00400539
  40061c:	00400475 	.word	0x00400475
  400620:	004004c9 	.word	0x004004c9
  400624:	00400571 	.word	0x00400571
  400628:	0040071d 	.word	0x0040071d
  40062c:	00400d51 	.word	0x00400d51
  400630:	004005b1 	.word	0x004005b1

00400634 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400634:	b480      	push	{r7}
  400636:	b085      	sub	sp, #20
  400638:	af00      	add	r7, sp, #0
  40063a:	60f8      	str	r0, [r7, #12]
  40063c:	60b9      	str	r1, [r7, #8]
  40063e:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	68ba      	ldr	r2, [r7, #8]
  400644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	005b      	lsls	r3, r3, #1
  40064c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400650:	fbb2 f3f3 	udiv	r3, r2, r3
  400654:	3b01      	subs	r3, #1
  400656:	f3c3 020d 	ubfx	r2, r3, #0, #14
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400660:	bf00      	nop
  400662:	3714      	adds	r7, #20
  400664:	46bd      	mov	sp, r7
  400666:	bc80      	pop	{r7}
  400668:	4770      	bx	lr

0040066a <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40066a:	b480      	push	{r7}
  40066c:	b085      	sub	sp, #20
  40066e:	af00      	add	r7, sp, #0
  400670:	60f8      	str	r0, [r7, #12]
  400672:	60b9      	str	r1, [r7, #8]
  400674:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400676:	687b      	ldr	r3, [r7, #4]
  400678:	f003 0310 	and.w	r3, r3, #16
  40067c:	2b00      	cmp	r3, #0
  40067e:	d020      	beq.n	4006c2 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400680:	68fb      	ldr	r3, [r7, #12]
  400682:	68ba      	ldr	r2, [r7, #8]
  400684:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400688:	687b      	ldr	r3, [r7, #4]
  40068a:	f003 0320 	and.w	r3, r3, #32
  40068e:	2b00      	cmp	r3, #0
  400690:	d004      	beq.n	40069c <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400692:	68fb      	ldr	r3, [r7, #12]
  400694:	68ba      	ldr	r2, [r7, #8]
  400696:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40069a:	e003      	b.n	4006a4 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	68ba      	ldr	r2, [r7, #8]
  4006a0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d004      	beq.n	4006b8 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	68ba      	ldr	r2, [r7, #8]
  4006b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4006b6:	e008      	b.n	4006ca <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4006b8:	68fb      	ldr	r3, [r7, #12]
  4006ba:	68ba      	ldr	r2, [r7, #8]
  4006bc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4006c0:	e003      	b.n	4006ca <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4006c2:	68fb      	ldr	r3, [r7, #12]
  4006c4:	68ba      	ldr	r2, [r7, #8]
  4006c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4006ca:	bf00      	nop
  4006cc:	3714      	adds	r7, #20
  4006ce:	46bd      	mov	sp, r7
  4006d0:	bc80      	pop	{r7}
  4006d2:	4770      	bx	lr

004006d4 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4006d4:	b480      	push	{r7}
  4006d6:	b083      	sub	sp, #12
  4006d8:	af00      	add	r7, sp, #0
  4006da:	6078      	str	r0, [r7, #4]
  4006dc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4006de:	687b      	ldr	r3, [r7, #4]
  4006e0:	683a      	ldr	r2, [r7, #0]
  4006e2:	641a      	str	r2, [r3, #64]	; 0x40
}
  4006e4:	bf00      	nop
  4006e6:	370c      	adds	r7, #12
  4006e8:	46bd      	mov	sp, r7
  4006ea:	bc80      	pop	{r7}
  4006ec:	4770      	bx	lr

004006ee <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4006ee:	b480      	push	{r7}
  4006f0:	b083      	sub	sp, #12
  4006f2:	af00      	add	r7, sp, #0
  4006f4:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4006f6:	687b      	ldr	r3, [r7, #4]
  4006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4006fa:	4618      	mov	r0, r3
  4006fc:	370c      	adds	r7, #12
  4006fe:	46bd      	mov	sp, r7
  400700:	bc80      	pop	{r7}
  400702:	4770      	bx	lr

00400704 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400704:	b480      	push	{r7}
  400706:	b083      	sub	sp, #12
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400710:	4618      	mov	r0, r3
  400712:	370c      	adds	r7, #12
  400714:	46bd      	mov	sp, r7
  400716:	bc80      	pop	{r7}
  400718:	4770      	bx	lr
	...

0040071c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40071c:	b480      	push	{r7}
  40071e:	b085      	sub	sp, #20
  400720:	af00      	add	r7, sp, #0
  400722:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400724:	491c      	ldr	r1, [pc, #112]	; (400798 <pmc_switch_mck_to_pllack+0x7c>)
  400726:	4b1c      	ldr	r3, [pc, #112]	; (400798 <pmc_switch_mck_to_pllack+0x7c>)
  400728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40072a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40072e:	687b      	ldr	r3, [r7, #4]
  400730:	4313      	orrs	r3, r2
  400732:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400734:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400738:	60fb      	str	r3, [r7, #12]
  40073a:	e007      	b.n	40074c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40073c:	68fb      	ldr	r3, [r7, #12]
  40073e:	2b00      	cmp	r3, #0
  400740:	d101      	bne.n	400746 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400742:	2301      	movs	r3, #1
  400744:	e023      	b.n	40078e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400746:	68fb      	ldr	r3, [r7, #12]
  400748:	3b01      	subs	r3, #1
  40074a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40074c:	4b12      	ldr	r3, [pc, #72]	; (400798 <pmc_switch_mck_to_pllack+0x7c>)
  40074e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400750:	f003 0308 	and.w	r3, r3, #8
  400754:	2b00      	cmp	r3, #0
  400756:	d0f1      	beq.n	40073c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400758:	4a0f      	ldr	r2, [pc, #60]	; (400798 <pmc_switch_mck_to_pllack+0x7c>)
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <pmc_switch_mck_to_pllack+0x7c>)
  40075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40075e:	f023 0303 	bic.w	r3, r3, #3
  400762:	f043 0302 	orr.w	r3, r3, #2
  400766:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400768:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40076c:	60fb      	str	r3, [r7, #12]
  40076e:	e007      	b.n	400780 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400770:	68fb      	ldr	r3, [r7, #12]
  400772:	2b00      	cmp	r3, #0
  400774:	d101      	bne.n	40077a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400776:	2301      	movs	r3, #1
  400778:	e009      	b.n	40078e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40077a:	68fb      	ldr	r3, [r7, #12]
  40077c:	3b01      	subs	r3, #1
  40077e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400780:	4b05      	ldr	r3, [pc, #20]	; (400798 <pmc_switch_mck_to_pllack+0x7c>)
  400782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400784:	f003 0308 	and.w	r3, r3, #8
  400788:	2b00      	cmp	r3, #0
  40078a:	d0f1      	beq.n	400770 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40078c:	2300      	movs	r3, #0
}
  40078e:	4618      	mov	r0, r3
  400790:	3714      	adds	r7, #20
  400792:	46bd      	mov	sp, r7
  400794:	bc80      	pop	{r7}
  400796:	4770      	bx	lr
  400798:	400e0400 	.word	0x400e0400

0040079c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40079c:	b480      	push	{r7}
  40079e:	b083      	sub	sp, #12
  4007a0:	af00      	add	r7, sp, #0
  4007a2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4007a4:	687b      	ldr	r3, [r7, #4]
  4007a6:	2b01      	cmp	r3, #1
  4007a8:	d107      	bne.n	4007ba <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4007aa:	4a08      	ldr	r2, [pc, #32]	; (4007cc <pmc_switch_sclk_to_32kxtal+0x30>)
  4007ac:	4b07      	ldr	r3, [pc, #28]	; (4007cc <pmc_switch_sclk_to_32kxtal+0x30>)
  4007ae:	689b      	ldr	r3, [r3, #8]
  4007b0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4007b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4007b8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4007ba:	4b04      	ldr	r3, [pc, #16]	; (4007cc <pmc_switch_sclk_to_32kxtal+0x30>)
  4007bc:	4a04      	ldr	r2, [pc, #16]	; (4007d0 <pmc_switch_sclk_to_32kxtal+0x34>)
  4007be:	601a      	str	r2, [r3, #0]
}
  4007c0:	bf00      	nop
  4007c2:	370c      	adds	r7, #12
  4007c4:	46bd      	mov	sp, r7
  4007c6:	bc80      	pop	{r7}
  4007c8:	4770      	bx	lr
  4007ca:	bf00      	nop
  4007cc:	400e1410 	.word	0x400e1410
  4007d0:	a5000008 	.word	0xa5000008

004007d4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4007d4:	b480      	push	{r7}
  4007d6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4007d8:	4b09      	ldr	r3, [pc, #36]	; (400800 <pmc_osc_is_ready_32kxtal+0x2c>)
  4007da:	695b      	ldr	r3, [r3, #20]
  4007dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4007e0:	2b00      	cmp	r3, #0
  4007e2:	d007      	beq.n	4007f4 <pmc_osc_is_ready_32kxtal+0x20>
  4007e4:	4b07      	ldr	r3, [pc, #28]	; (400804 <pmc_osc_is_ready_32kxtal+0x30>)
  4007e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4007e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4007ec:	2b00      	cmp	r3, #0
  4007ee:	d001      	beq.n	4007f4 <pmc_osc_is_ready_32kxtal+0x20>
  4007f0:	2301      	movs	r3, #1
  4007f2:	e000      	b.n	4007f6 <pmc_osc_is_ready_32kxtal+0x22>
  4007f4:	2300      	movs	r3, #0
}
  4007f6:	4618      	mov	r0, r3
  4007f8:	46bd      	mov	sp, r7
  4007fa:	bc80      	pop	{r7}
  4007fc:	4770      	bx	lr
  4007fe:	bf00      	nop
  400800:	400e1410 	.word	0x400e1410
  400804:	400e0400 	.word	0x400e0400

00400808 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400808:	b480      	push	{r7}
  40080a:	b083      	sub	sp, #12
  40080c:	af00      	add	r7, sp, #0
  40080e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400810:	4a18      	ldr	r2, [pc, #96]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  400812:	4b18      	ldr	r3, [pc, #96]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  400814:	6a1b      	ldr	r3, [r3, #32]
  400816:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40081a:	f043 0308 	orr.w	r3, r3, #8
  40081e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400820:	bf00      	nop
  400822:	4b14      	ldr	r3, [pc, #80]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  400824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40082a:	2b00      	cmp	r3, #0
  40082c:	d0f9      	beq.n	400822 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40082e:	4911      	ldr	r1, [pc, #68]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  400830:	4b10      	ldr	r3, [pc, #64]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  400832:	6a1b      	ldr	r3, [r3, #32]
  400834:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40083c:	687a      	ldr	r2, [r7, #4]
  40083e:	4313      	orrs	r3, r2
  400840:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400844:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400846:	bf00      	nop
  400848:	4b0a      	ldr	r3, [pc, #40]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  40084a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40084c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400850:	2b00      	cmp	r3, #0
  400852:	d0f9      	beq.n	400848 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400854:	4a07      	ldr	r2, [pc, #28]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  400856:	4b07      	ldr	r3, [pc, #28]	; (400874 <pmc_switch_mainck_to_fastrc+0x6c>)
  400858:	6a1b      	ldr	r3, [r3, #32]
  40085a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40085e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400862:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400866:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400868:	bf00      	nop
  40086a:	370c      	adds	r7, #12
  40086c:	46bd      	mov	sp, r7
  40086e:	bc80      	pop	{r7}
  400870:	4770      	bx	lr
  400872:	bf00      	nop
  400874:	400e0400 	.word	0x400e0400

00400878 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400878:	b480      	push	{r7}
  40087a:	b083      	sub	sp, #12
  40087c:	af00      	add	r7, sp, #0
  40087e:	6078      	str	r0, [r7, #4]
  400880:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400882:	687b      	ldr	r3, [r7, #4]
  400884:	2b00      	cmp	r3, #0
  400886:	d008      	beq.n	40089a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400888:	4916      	ldr	r1, [pc, #88]	; (4008e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40088a:	4b16      	ldr	r3, [pc, #88]	; (4008e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40088c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40088e:	4a16      	ldr	r2, [pc, #88]	; (4008e8 <pmc_switch_mainck_to_xtal+0x70>)
  400890:	401a      	ands	r2, r3
  400892:	4b16      	ldr	r3, [pc, #88]	; (4008ec <pmc_switch_mainck_to_xtal+0x74>)
  400894:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400896:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400898:	e01e      	b.n	4008d8 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40089a:	4912      	ldr	r1, [pc, #72]	; (4008e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40089c:	4b11      	ldr	r3, [pc, #68]	; (4008e4 <pmc_switch_mainck_to_xtal+0x6c>)
  40089e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008a0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4008a4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008a8:	683a      	ldr	r2, [r7, #0]
  4008aa:	0212      	lsls	r2, r2, #8
  4008ac:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008ae:	4313      	orrs	r3, r2
  4008b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4008b4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008b8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008ba:	bf00      	nop
  4008bc:	4b09      	ldr	r3, [pc, #36]	; (4008e4 <pmc_switch_mainck_to_xtal+0x6c>)
  4008be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008c0:	f003 0301 	and.w	r3, r3, #1
  4008c4:	2b00      	cmp	r3, #0
  4008c6:	d0f9      	beq.n	4008bc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008c8:	4a06      	ldr	r2, [pc, #24]	; (4008e4 <pmc_switch_mainck_to_xtal+0x6c>)
  4008ca:	4b06      	ldr	r3, [pc, #24]	; (4008e4 <pmc_switch_mainck_to_xtal+0x6c>)
  4008cc:	6a1b      	ldr	r3, [r3, #32]
  4008ce:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4008d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4008d6:	6213      	str	r3, [r2, #32]
}
  4008d8:	bf00      	nop
  4008da:	370c      	adds	r7, #12
  4008dc:	46bd      	mov	sp, r7
  4008de:	bc80      	pop	{r7}
  4008e0:	4770      	bx	lr
  4008e2:	bf00      	nop
  4008e4:	400e0400 	.word	0x400e0400
  4008e8:	fec8fffc 	.word	0xfec8fffc
  4008ec:	01370002 	.word	0x01370002

004008f0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4008f0:	b480      	push	{r7}
  4008f2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008f4:	4b03      	ldr	r3, [pc, #12]	; (400904 <pmc_osc_is_ready_mainck+0x14>)
  4008f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4008fc:	4618      	mov	r0, r3
  4008fe:	46bd      	mov	sp, r7
  400900:	bc80      	pop	{r7}
  400902:	4770      	bx	lr
  400904:	400e0400 	.word	0x400e0400

00400908 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400908:	b480      	push	{r7}
  40090a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40090c:	4b03      	ldr	r3, [pc, #12]	; (40091c <pmc_disable_pllack+0x14>)
  40090e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400912:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400914:	bf00      	nop
  400916:	46bd      	mov	sp, r7
  400918:	bc80      	pop	{r7}
  40091a:	4770      	bx	lr
  40091c:	400e0400 	.word	0x400e0400

00400920 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400920:	b480      	push	{r7}
  400922:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400924:	4b03      	ldr	r3, [pc, #12]	; (400934 <pmc_is_locked_pllack+0x14>)
  400926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400928:	f003 0302 	and.w	r3, r3, #2
}
  40092c:	4618      	mov	r0, r3
  40092e:	46bd      	mov	sp, r7
  400930:	bc80      	pop	{r7}
  400932:	4770      	bx	lr
  400934:	400e0400 	.word	0x400e0400

00400938 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  400938:	b480      	push	{r7}
  40093a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40093c:	4b03      	ldr	r3, [pc, #12]	; (40094c <pmc_disable_pllbck+0x14>)
  40093e:	2200      	movs	r2, #0
  400940:	62da      	str	r2, [r3, #44]	; 0x2c
}
  400942:	bf00      	nop
  400944:	46bd      	mov	sp, r7
  400946:	bc80      	pop	{r7}
  400948:	4770      	bx	lr
  40094a:	bf00      	nop
  40094c:	400e0400 	.word	0x400e0400

00400950 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  400950:	b480      	push	{r7}
  400952:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400954:	4b03      	ldr	r3, [pc, #12]	; (400964 <pmc_is_locked_pllbck+0x14>)
  400956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400958:	f003 0304 	and.w	r3, r3, #4
}
  40095c:	4618      	mov	r0, r3
  40095e:	46bd      	mov	sp, r7
  400960:	bc80      	pop	{r7}
  400962:	4770      	bx	lr
  400964:	400e0400 	.word	0x400e0400

00400968 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400968:	b480      	push	{r7}
  40096a:	b083      	sub	sp, #12
  40096c:	af00      	add	r7, sp, #0
  40096e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400970:	687b      	ldr	r3, [r7, #4]
  400972:	2b22      	cmp	r3, #34	; 0x22
  400974:	d901      	bls.n	40097a <pmc_enable_periph_clk+0x12>
		return 1;
  400976:	2301      	movs	r3, #1
  400978:	e02f      	b.n	4009da <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40097a:	687b      	ldr	r3, [r7, #4]
  40097c:	2b1f      	cmp	r3, #31
  40097e:	d813      	bhi.n	4009a8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400980:	4b18      	ldr	r3, [pc, #96]	; (4009e4 <pmc_enable_periph_clk+0x7c>)
  400982:	699a      	ldr	r2, [r3, #24]
  400984:	2101      	movs	r1, #1
  400986:	687b      	ldr	r3, [r7, #4]
  400988:	fa01 f303 	lsl.w	r3, r1, r3
  40098c:	401a      	ands	r2, r3
  40098e:	2101      	movs	r1, #1
  400990:	687b      	ldr	r3, [r7, #4]
  400992:	fa01 f303 	lsl.w	r3, r1, r3
  400996:	429a      	cmp	r2, r3
  400998:	d01e      	beq.n	4009d8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40099a:	4a12      	ldr	r2, [pc, #72]	; (4009e4 <pmc_enable_periph_clk+0x7c>)
  40099c:	2101      	movs	r1, #1
  40099e:	687b      	ldr	r3, [r7, #4]
  4009a0:	fa01 f303 	lsl.w	r3, r1, r3
  4009a4:	6113      	str	r3, [r2, #16]
  4009a6:	e017      	b.n	4009d8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4009a8:	687b      	ldr	r3, [r7, #4]
  4009aa:	3b20      	subs	r3, #32
  4009ac:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009ae:	4b0d      	ldr	r3, [pc, #52]	; (4009e4 <pmc_enable_periph_clk+0x7c>)
  4009b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4009b4:	2101      	movs	r1, #1
  4009b6:	687b      	ldr	r3, [r7, #4]
  4009b8:	fa01 f303 	lsl.w	r3, r1, r3
  4009bc:	401a      	ands	r2, r3
  4009be:	2101      	movs	r1, #1
  4009c0:	687b      	ldr	r3, [r7, #4]
  4009c2:	fa01 f303 	lsl.w	r3, r1, r3
  4009c6:	429a      	cmp	r2, r3
  4009c8:	d006      	beq.n	4009d8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4009ca:	4a06      	ldr	r2, [pc, #24]	; (4009e4 <pmc_enable_periph_clk+0x7c>)
  4009cc:	2101      	movs	r1, #1
  4009ce:	687b      	ldr	r3, [r7, #4]
  4009d0:	fa01 f303 	lsl.w	r3, r1, r3
  4009d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4009d8:	2300      	movs	r3, #0
}
  4009da:	4618      	mov	r0, r3
  4009dc:	370c      	adds	r7, #12
  4009de:	46bd      	mov	sp, r7
  4009e0:	bc80      	pop	{r7}
  4009e2:	4770      	bx	lr
  4009e4:	400e0400 	.word	0x400e0400

004009e8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4009e8:	b580      	push	{r7, lr}
  4009ea:	b082      	sub	sp, #8
  4009ec:	af00      	add	r7, sp, #0
  4009ee:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4009f0:	6878      	ldr	r0, [r7, #4]
  4009f2:	4b03      	ldr	r3, [pc, #12]	; (400a00 <sysclk_enable_peripheral_clock+0x18>)
  4009f4:	4798      	blx	r3
}
  4009f6:	bf00      	nop
  4009f8:	3708      	adds	r7, #8
  4009fa:	46bd      	mov	sp, r7
  4009fc:	bd80      	pop	{r7, pc}
  4009fe:	bf00      	nop
  400a00:	00400969 	.word	0x00400969

00400a04 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400a04:	b580      	push	{r7, lr}
  400a06:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400a08:	200b      	movs	r0, #11
  400a0a:	4b03      	ldr	r3, [pc, #12]	; (400a18 <ioport_init+0x14>)
  400a0c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400a0e:	200c      	movs	r0, #12
  400a10:	4b01      	ldr	r3, [pc, #4]	; (400a18 <ioport_init+0x14>)
  400a12:	4798      	blx	r3
	arch_ioport_init();
}
  400a14:	bf00      	nop
  400a16:	bd80      	pop	{r7, pc}
  400a18:	004009e9 	.word	0x004009e9

00400a1c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400a1c:	b480      	push	{r7}
  400a1e:	b08d      	sub	sp, #52	; 0x34
  400a20:	af00      	add	r7, sp, #0
  400a22:	6078      	str	r0, [r7, #4]
  400a24:	6039      	str	r1, [r7, #0]
  400a26:	687b      	ldr	r3, [r7, #4]
  400a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  400a2a:	683b      	ldr	r3, [r7, #0]
  400a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  400a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a30:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a34:	095a      	lsrs	r2, r3, #5
  400a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a38:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400a3a:	6a3b      	ldr	r3, [r7, #32]
  400a3c:	f003 031f 	and.w	r3, r3, #31
  400a40:	2101      	movs	r1, #1
  400a42:	fa01 f303 	lsl.w	r3, r1, r3
  400a46:	61fa      	str	r2, [r7, #28]
  400a48:	61bb      	str	r3, [r7, #24]
  400a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400a4c:	617b      	str	r3, [r7, #20]
  400a4e:	69fb      	ldr	r3, [r7, #28]
  400a50:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a52:	693b      	ldr	r3, [r7, #16]
  400a54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400a58:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400a5c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400a5e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400a60:	697b      	ldr	r3, [r7, #20]
  400a62:	f003 0308 	and.w	r3, r3, #8
  400a66:	2b00      	cmp	r3, #0
  400a68:	d003      	beq.n	400a72 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  400a6a:	68fb      	ldr	r3, [r7, #12]
  400a6c:	69ba      	ldr	r2, [r7, #24]
  400a6e:	665a      	str	r2, [r3, #100]	; 0x64
  400a70:	e002      	b.n	400a78 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  400a72:	68fb      	ldr	r3, [r7, #12]
  400a74:	69ba      	ldr	r2, [r7, #24]
  400a76:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400a78:	697b      	ldr	r3, [r7, #20]
  400a7a:	f003 0310 	and.w	r3, r3, #16
  400a7e:	2b00      	cmp	r3, #0
  400a80:	d004      	beq.n	400a8c <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  400a82:	68fb      	ldr	r3, [r7, #12]
  400a84:	69ba      	ldr	r2, [r7, #24]
  400a86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400a8a:	e003      	b.n	400a94 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  400a8c:	68fb      	ldr	r3, [r7, #12]
  400a8e:	69ba      	ldr	r2, [r7, #24]
  400a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400a94:	697b      	ldr	r3, [r7, #20]
  400a96:	f003 0320 	and.w	r3, r3, #32
  400a9a:	2b00      	cmp	r3, #0
  400a9c:	d003      	beq.n	400aa6 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  400a9e:	68fb      	ldr	r3, [r7, #12]
  400aa0:	69ba      	ldr	r2, [r7, #24]
  400aa2:	651a      	str	r2, [r3, #80]	; 0x50
  400aa4:	e002      	b.n	400aac <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  400aa6:	68fb      	ldr	r3, [r7, #12]
  400aa8:	69ba      	ldr	r2, [r7, #24]
  400aaa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400aac:	697b      	ldr	r3, [r7, #20]
  400aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d003      	beq.n	400abe <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  400ab6:	68fb      	ldr	r3, [r7, #12]
  400ab8:	69ba      	ldr	r2, [r7, #24]
  400aba:	621a      	str	r2, [r3, #32]
  400abc:	e002      	b.n	400ac4 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  400abe:	68fb      	ldr	r3, [r7, #12]
  400ac0:	69ba      	ldr	r2, [r7, #24]
  400ac2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400ac4:	697b      	ldr	r3, [r7, #20]
  400ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400aca:	2b00      	cmp	r3, #0
  400acc:	d004      	beq.n	400ad8 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400ace:	68fb      	ldr	r3, [r7, #12]
  400ad0:	69ba      	ldr	r2, [r7, #24]
  400ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400ad6:	e003      	b.n	400ae0 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400ad8:	68fb      	ldr	r3, [r7, #12]
  400ada:	69ba      	ldr	r2, [r7, #24]
  400adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400ae0:	697b      	ldr	r3, [r7, #20]
  400ae2:	f003 0301 	and.w	r3, r3, #1
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d006      	beq.n	400af8 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  400aea:	68fb      	ldr	r3, [r7, #12]
  400aec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400aee:	69bb      	ldr	r3, [r7, #24]
  400af0:	431a      	orrs	r2, r3
  400af2:	68fb      	ldr	r3, [r7, #12]
  400af4:	671a      	str	r2, [r3, #112]	; 0x70
  400af6:	e006      	b.n	400b06 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400af8:	68fb      	ldr	r3, [r7, #12]
  400afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400afc:	69bb      	ldr	r3, [r7, #24]
  400afe:	43db      	mvns	r3, r3
  400b00:	401a      	ands	r2, r3
  400b02:	68fb      	ldr	r3, [r7, #12]
  400b04:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400b06:	697b      	ldr	r3, [r7, #20]
  400b08:	f003 0302 	and.w	r3, r3, #2
  400b0c:	2b00      	cmp	r3, #0
  400b0e:	d006      	beq.n	400b1e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  400b10:	68fb      	ldr	r3, [r7, #12]
  400b12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b14:	69bb      	ldr	r3, [r7, #24]
  400b16:	431a      	orrs	r2, r3
  400b18:	68fb      	ldr	r3, [r7, #12]
  400b1a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400b1c:	e006      	b.n	400b2c <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400b1e:	68fb      	ldr	r3, [r7, #12]
  400b20:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b22:	69bb      	ldr	r3, [r7, #24]
  400b24:	43db      	mvns	r3, r3
  400b26:	401a      	ands	r2, r3
  400b28:	68fb      	ldr	r3, [r7, #12]
  400b2a:	675a      	str	r2, [r3, #116]	; 0x74
  400b2c:	bf00      	nop
  400b2e:	3734      	adds	r7, #52	; 0x34
  400b30:	46bd      	mov	sp, r7
  400b32:	bc80      	pop	{r7}
  400b34:	4770      	bx	lr

00400b36 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400b36:	b480      	push	{r7}
  400b38:	b08d      	sub	sp, #52	; 0x34
  400b3a:	af00      	add	r7, sp, #0
  400b3c:	6078      	str	r0, [r7, #4]
  400b3e:	460b      	mov	r3, r1
  400b40:	70fb      	strb	r3, [r7, #3]
  400b42:	687b      	ldr	r3, [r7, #4]
  400b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  400b46:	78fb      	ldrb	r3, [r7, #3]
  400b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b4e:	627b      	str	r3, [r7, #36]	; 0x24
  400b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b52:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400b54:	6a3b      	ldr	r3, [r7, #32]
  400b56:	095b      	lsrs	r3, r3, #5
  400b58:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400b5a:	69fb      	ldr	r3, [r7, #28]
  400b5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b60:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b64:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400b66:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400b6c:	2b01      	cmp	r3, #1
  400b6e:	d109      	bne.n	400b84 <ioport_set_pin_dir+0x4e>
  400b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b72:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400b74:	697b      	ldr	r3, [r7, #20]
  400b76:	f003 031f 	and.w	r3, r3, #31
  400b7a:	2201      	movs	r2, #1
  400b7c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b7e:	69bb      	ldr	r3, [r7, #24]
  400b80:	611a      	str	r2, [r3, #16]
  400b82:	e00c      	b.n	400b9e <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  400b84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400b88:	2b00      	cmp	r3, #0
  400b8a:	d108      	bne.n	400b9e <ioport_set_pin_dir+0x68>
  400b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b8e:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400b90:	693b      	ldr	r3, [r7, #16]
  400b92:	f003 031f 	and.w	r3, r3, #31
  400b96:	2201      	movs	r2, #1
  400b98:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b9a:	69bb      	ldr	r3, [r7, #24]
  400b9c:	615a      	str	r2, [r3, #20]
  400b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ba0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400ba2:	68fb      	ldr	r3, [r7, #12]
  400ba4:	f003 031f 	and.w	r3, r3, #31
  400ba8:	2201      	movs	r2, #1
  400baa:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bac:	69bb      	ldr	r3, [r7, #24]
  400bae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400bb2:	bf00      	nop
  400bb4:	3734      	adds	r7, #52	; 0x34
  400bb6:	46bd      	mov	sp, r7
  400bb8:	bc80      	pop	{r7}
  400bba:	4770      	bx	lr

00400bbc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400bbc:	b480      	push	{r7}
  400bbe:	b08b      	sub	sp, #44	; 0x2c
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	6078      	str	r0, [r7, #4]
  400bc4:	460b      	mov	r3, r1
  400bc6:	70fb      	strb	r3, [r7, #3]
  400bc8:	687b      	ldr	r3, [r7, #4]
  400bca:	627b      	str	r3, [r7, #36]	; 0x24
  400bcc:	78fb      	ldrb	r3, [r7, #3]
  400bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bd4:	61fb      	str	r3, [r7, #28]
  400bd6:	69fb      	ldr	r3, [r7, #28]
  400bd8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400bda:	69bb      	ldr	r3, [r7, #24]
  400bdc:	095b      	lsrs	r3, r3, #5
  400bde:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400be0:	697b      	ldr	r3, [r7, #20]
  400be2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400be6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400bea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400bec:	613b      	str	r3, [r7, #16]

	if (level) {
  400bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400bf2:	2b00      	cmp	r3, #0
  400bf4:	d009      	beq.n	400c0a <ioport_set_pin_level+0x4e>
  400bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bf8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400bfa:	68fb      	ldr	r3, [r7, #12]
  400bfc:	f003 031f 	and.w	r3, r3, #31
  400c00:	2201      	movs	r2, #1
  400c02:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c04:	693b      	ldr	r3, [r7, #16]
  400c06:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400c08:	e008      	b.n	400c1c <ioport_set_pin_level+0x60>
  400c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c0c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400c0e:	68bb      	ldr	r3, [r7, #8]
  400c10:	f003 031f 	and.w	r3, r3, #31
  400c14:	2201      	movs	r2, #1
  400c16:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c18:	693b      	ldr	r3, [r7, #16]
  400c1a:	635a      	str	r2, [r3, #52]	; 0x34
  400c1c:	bf00      	nop
  400c1e:	372c      	adds	r7, #44	; 0x2c
  400c20:	46bd      	mov	sp, r7
  400c22:	bc80      	pop	{r7}
  400c24:	4770      	bx	lr
	...

00400c28 <board_init>:
#include <board.h>
#include <conf_board.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
void board_init(void)
{
  400c28:	b580      	push	{r7, lr}
  400c2a:	af00      	add	r7, sp, #0
	// boilerplate initialization
	ioport_init();	
  400c2c:	4b09      	ldr	r3, [pc, #36]	; (400c54 <board_init+0x2c>)
  400c2e:	4798      	blx	r3
	
	/* Set output direction on the given LED IOPORTs */
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  400c30:	2101      	movs	r1, #1
  400c32:	2000      	movs	r0, #0
  400c34:	4b08      	ldr	r3, [pc, #32]	; (400c58 <board_init+0x30>)
  400c36:	4798      	blx	r3
	
	// Set the LED OFF
	ioport_set_pin_level(LED_PIN,LOW);
  400c38:	2100      	movs	r1, #0
  400c3a:	2000      	movs	r0, #0
  400c3c:	4b07      	ldr	r3, [pc, #28]	; (400c5c <board_init+0x34>)
  400c3e:	4798      	blx	r3

	/* Set direction and pullup on the given button IOPORT */
	ioport_set_pin_dir(BUTTON_PIN, IOPORT_DIR_INPUT);
  400c40:	2100      	movs	r1, #0
  400c42:	2024      	movs	r0, #36	; 0x24
  400c44:	4b04      	ldr	r3, [pc, #16]	; (400c58 <board_init+0x30>)
  400c46:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_PIN, IOPORT_MODE_PULLUP);
  400c48:	2108      	movs	r1, #8
  400c4a:	2024      	movs	r0, #36	; 0x24
  400c4c:	4b04      	ldr	r3, [pc, #16]	; (400c60 <board_init+0x38>)
  400c4e:	4798      	blx	r3
}
  400c50:	bf00      	nop
  400c52:	bd80      	pop	{r7, pc}
  400c54:	00400a05 	.word	0x00400a05
  400c58:	00400b37 	.word	0x00400b37
  400c5c:	00400bbd 	.word	0x00400bbd
  400c60:	00400a1d 	.word	0x00400a1d

00400c64 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400c64:	b480      	push	{r7}
  400c66:	b083      	sub	sp, #12
  400c68:	af00      	add	r7, sp, #0
  400c6a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400c6c:	687b      	ldr	r3, [r7, #4]
  400c6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c72:	605a      	str	r2, [r3, #4]

}
  400c74:	bf00      	nop
  400c76:	370c      	adds	r7, #12
  400c78:	46bd      	mov	sp, r7
  400c7a:	bc80      	pop	{r7}
  400c7c:	4770      	bx	lr
	...

00400c80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400c80:	b580      	push	{r7, lr}
  400c82:	b084      	sub	sp, #16
  400c84:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  400c86:	4b27      	ldr	r3, [pc, #156]	; (400d24 <Reset_Handler+0xa4>)
  400c88:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  400c8a:	4b27      	ldr	r3, [pc, #156]	; (400d28 <Reset_Handler+0xa8>)
  400c8c:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  400c8e:	68fa      	ldr	r2, [r7, #12]
  400c90:	68bb      	ldr	r3, [r7, #8]
  400c92:	429a      	cmp	r2, r3
  400c94:	d90d      	bls.n	400cb2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  400c96:	e007      	b.n	400ca8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  400c98:	68bb      	ldr	r3, [r7, #8]
  400c9a:	1d1a      	adds	r2, r3, #4
  400c9c:	60ba      	str	r2, [r7, #8]
  400c9e:	68fa      	ldr	r2, [r7, #12]
  400ca0:	1d11      	adds	r1, r2, #4
  400ca2:	60f9      	str	r1, [r7, #12]
  400ca4:	6812      	ldr	r2, [r2, #0]
  400ca6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  400ca8:	68bb      	ldr	r3, [r7, #8]
  400caa:	4a20      	ldr	r2, [pc, #128]	; (400d2c <Reset_Handler+0xac>)
  400cac:	4293      	cmp	r3, r2
  400cae:	d3f3      	bcc.n	400c98 <Reset_Handler+0x18>
  400cb0:	e020      	b.n	400cf4 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  400cb2:	68fa      	ldr	r2, [r7, #12]
  400cb4:	68bb      	ldr	r3, [r7, #8]
  400cb6:	429a      	cmp	r2, r3
  400cb8:	d21c      	bcs.n	400cf4 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400cba:	4a1c      	ldr	r2, [pc, #112]	; (400d2c <Reset_Handler+0xac>)
  400cbc:	4b1a      	ldr	r3, [pc, #104]	; (400d28 <Reset_Handler+0xa8>)
  400cbe:	1ad3      	subs	r3, r2, r3
  400cc0:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400cc2:	68fa      	ldr	r2, [r7, #12]
  400cc4:	687b      	ldr	r3, [r7, #4]
  400cc6:	4413      	add	r3, r2
  400cc8:	3b04      	subs	r3, #4
  400cca:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  400ccc:	68ba      	ldr	r2, [r7, #8]
  400cce:	687b      	ldr	r3, [r7, #4]
  400cd0:	4413      	add	r3, r2
  400cd2:	3b04      	subs	r3, #4
  400cd4:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  400cd6:	e00a      	b.n	400cee <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  400cd8:	68bb      	ldr	r3, [r7, #8]
  400cda:	1f1a      	subs	r2, r3, #4
  400cdc:	60ba      	str	r2, [r7, #8]
  400cde:	68fa      	ldr	r2, [r7, #12]
  400ce0:	1f11      	subs	r1, r2, #4
  400ce2:	60f9      	str	r1, [r7, #12]
  400ce4:	6812      	ldr	r2, [r2, #0]
  400ce6:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  400ce8:	687b      	ldr	r3, [r7, #4]
  400cea:	3b04      	subs	r3, #4
  400cec:	607b      	str	r3, [r7, #4]
  400cee:	687b      	ldr	r3, [r7, #4]
  400cf0:	2b00      	cmp	r3, #0
  400cf2:	d1f1      	bne.n	400cd8 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400cf4:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400cf6:	4b0e      	ldr	r3, [pc, #56]	; (400d30 <Reset_Handler+0xb0>)
  400cf8:	60bb      	str	r3, [r7, #8]
  400cfa:	e004      	b.n	400d06 <Reset_Handler+0x86>
		*pDest++ = 0;
  400cfc:	68bb      	ldr	r3, [r7, #8]
  400cfe:	1d1a      	adds	r2, r3, #4
  400d00:	60ba      	str	r2, [r7, #8]
  400d02:	2200      	movs	r2, #0
  400d04:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  400d06:	68bb      	ldr	r3, [r7, #8]
  400d08:	4a0a      	ldr	r2, [pc, #40]	; (400d34 <Reset_Handler+0xb4>)
  400d0a:	4293      	cmp	r3, r2
  400d0c:	d3f6      	bcc.n	400cfc <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  400d0e:	4b0a      	ldr	r3, [pc, #40]	; (400d38 <Reset_Handler+0xb8>)
  400d10:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  400d12:	4a0a      	ldr	r2, [pc, #40]	; (400d3c <Reset_Handler+0xbc>)
  400d14:	68fb      	ldr	r3, [r7, #12]
  400d16:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  400d18:	4b09      	ldr	r3, [pc, #36]	; (400d40 <Reset_Handler+0xc0>)
  400d1a:	4798      	blx	r3

	/* Branch to main function */
	main();
  400d1c:	4b09      	ldr	r3, [pc, #36]	; (400d44 <Reset_Handler+0xc4>)
  400d1e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  400d20:	e7fe      	b.n	400d20 <Reset_Handler+0xa0>
  400d22:	bf00      	nop
  400d24:	004017ac 	.word	0x004017ac
  400d28:	20000000 	.word	0x20000000
  400d2c:	2000043c 	.word	0x2000043c
  400d30:	2000043c 	.word	0x2000043c
  400d34:	200004fc 	.word	0x200004fc
  400d38:	00400000 	.word	0x00400000
  400d3c:	e000ed00 	.word	0xe000ed00
  400d40:	0040160d 	.word	0x0040160d
  400d44:	004011ed 	.word	0x004011ed

00400d48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d48:	b480      	push	{r7}
  400d4a:	af00      	add	r7, sp, #0
	while (1) {
  400d4c:	e7fe      	b.n	400d4c <Dummy_Handler+0x4>
	...

00400d50 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  400d50:	b480      	push	{r7}
  400d52:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400d54:	4b5d      	ldr	r3, [pc, #372]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d58:	f003 0303 	and.w	r3, r3, #3
  400d5c:	2b03      	cmp	r3, #3
  400d5e:	f200 8096 	bhi.w	400e8e <SystemCoreClockUpdate+0x13e>
  400d62:	a201      	add	r2, pc, #4	; (adr r2, 400d68 <SystemCoreClockUpdate+0x18>)
  400d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d68:	00400d79 	.word	0x00400d79
  400d6c:	00400d99 	.word	0x00400d99
  400d70:	00400de3 	.word	0x00400de3
  400d74:	00400de3 	.word	0x00400de3
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400d78:	4b55      	ldr	r3, [pc, #340]	; (400ed0 <SystemCoreClockUpdate+0x180>)
  400d7a:	695b      	ldr	r3, [r3, #20]
  400d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400d80:	2b00      	cmp	r3, #0
  400d82:	d004      	beq.n	400d8e <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400d84:	4b53      	ldr	r3, [pc, #332]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400d86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d8a:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  400d8c:	e080      	b.n	400e90 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400d8e:	4b51      	ldr	r3, [pc, #324]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400d90:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400d94:	601a      	str	r2, [r3, #0]
		break;
  400d96:	e07b      	b.n	400e90 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400d98:	4b4c      	ldr	r3, [pc, #304]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400d9a:	6a1b      	ldr	r3, [r3, #32]
  400d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400da0:	2b00      	cmp	r3, #0
  400da2:	d003      	beq.n	400dac <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400da4:	4b4b      	ldr	r3, [pc, #300]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400da6:	4a4c      	ldr	r2, [pc, #304]	; (400ed8 <SystemCoreClockUpdate+0x188>)
  400da8:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  400daa:	e071      	b.n	400e90 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400dac:	4b49      	ldr	r3, [pc, #292]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400dae:	4a4b      	ldr	r2, [pc, #300]	; (400edc <SystemCoreClockUpdate+0x18c>)
  400db0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400db2:	4b46      	ldr	r3, [pc, #280]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400db4:	6a1b      	ldr	r3, [r3, #32]
  400db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400dba:	2b10      	cmp	r3, #16
  400dbc:	d008      	beq.n	400dd0 <SystemCoreClockUpdate+0x80>
  400dbe:	2b20      	cmp	r3, #32
  400dc0:	d00a      	beq.n	400dd8 <SystemCoreClockUpdate+0x88>
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d000      	beq.n	400dc8 <SystemCoreClockUpdate+0x78>
			break;
  400dc6:	e00b      	b.n	400de0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400dc8:	4b42      	ldr	r3, [pc, #264]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400dca:	4a44      	ldr	r2, [pc, #272]	; (400edc <SystemCoreClockUpdate+0x18c>)
  400dcc:	601a      	str	r2, [r3, #0]
			break;
  400dce:	e007      	b.n	400de0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400dd0:	4b40      	ldr	r3, [pc, #256]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400dd2:	4a43      	ldr	r2, [pc, #268]	; (400ee0 <SystemCoreClockUpdate+0x190>)
  400dd4:	601a      	str	r2, [r3, #0]
			break;
  400dd6:	e003      	b.n	400de0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400dd8:	4b3e      	ldr	r3, [pc, #248]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400dda:	4a3f      	ldr	r2, [pc, #252]	; (400ed8 <SystemCoreClockUpdate+0x188>)
  400ddc:	601a      	str	r2, [r3, #0]
			break;
  400dde:	bf00      	nop
		break;
  400de0:	e056      	b.n	400e90 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400de2:	4b3a      	ldr	r3, [pc, #232]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400de4:	6a1b      	ldr	r3, [r3, #32]
  400de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400dea:	2b00      	cmp	r3, #0
  400dec:	d003      	beq.n	400df6 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400dee:	4b39      	ldr	r3, [pc, #228]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400df0:	4a39      	ldr	r2, [pc, #228]	; (400ed8 <SystemCoreClockUpdate+0x188>)
  400df2:	601a      	str	r2, [r3, #0]
  400df4:	e019      	b.n	400e2a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400df6:	4b37      	ldr	r3, [pc, #220]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400df8:	4a38      	ldr	r2, [pc, #224]	; (400edc <SystemCoreClockUpdate+0x18c>)
  400dfa:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400dfc:	4b33      	ldr	r3, [pc, #204]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400dfe:	6a1b      	ldr	r3, [r3, #32]
  400e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e04:	2b10      	cmp	r3, #16
  400e06:	d008      	beq.n	400e1a <SystemCoreClockUpdate+0xca>
  400e08:	2b20      	cmp	r3, #32
  400e0a:	d00a      	beq.n	400e22 <SystemCoreClockUpdate+0xd2>
  400e0c:	2b00      	cmp	r3, #0
  400e0e:	d000      	beq.n	400e12 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  400e10:	e00b      	b.n	400e2a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e12:	4b30      	ldr	r3, [pc, #192]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e14:	4a31      	ldr	r2, [pc, #196]	; (400edc <SystemCoreClockUpdate+0x18c>)
  400e16:	601a      	str	r2, [r3, #0]
					break;
  400e18:	e007      	b.n	400e2a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e1a:	4b2e      	ldr	r3, [pc, #184]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e1c:	4a30      	ldr	r2, [pc, #192]	; (400ee0 <SystemCoreClockUpdate+0x190>)
  400e1e:	601a      	str	r2, [r3, #0]
					break;
  400e20:	e003      	b.n	400e2a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e22:	4b2c      	ldr	r3, [pc, #176]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e24:	4a2c      	ldr	r2, [pc, #176]	; (400ed8 <SystemCoreClockUpdate+0x188>)
  400e26:	601a      	str	r2, [r3, #0]
					break;
  400e28:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400e2a:	4b28      	ldr	r3, [pc, #160]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e2e:	f003 0303 	and.w	r3, r3, #3
  400e32:	2b02      	cmp	r3, #2
  400e34:	d115      	bne.n	400e62 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400e36:	4b25      	ldr	r3, [pc, #148]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  400e3a:	0c1b      	lsrs	r3, r3, #16
  400e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  400e40:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400e42:	4a24      	ldr	r2, [pc, #144]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e44:	6812      	ldr	r2, [r2, #0]
  400e46:	fb02 f303 	mul.w	r3, r2, r3
  400e4a:	4a22      	ldr	r2, [pc, #136]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e4c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400e4e:	4b1f      	ldr	r3, [pc, #124]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  400e52:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400e54:	4a1f      	ldr	r2, [pc, #124]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e56:	6812      	ldr	r2, [r2, #0]
  400e58:	fbb2 f3f3 	udiv	r3, r2, r3
  400e5c:	4a1d      	ldr	r2, [pc, #116]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e5e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  400e60:	e016      	b.n	400e90 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e62:	4b1a      	ldr	r3, [pc, #104]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400e66:	0c1b      	lsrs	r3, r3, #16
  400e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
  400e6c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e6e:	4a19      	ldr	r2, [pc, #100]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e70:	6812      	ldr	r2, [r2, #0]
  400e72:	fb02 f303 	mul.w	r3, r2, r3
  400e76:	4a17      	ldr	r2, [pc, #92]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e78:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e7a:	4b14      	ldr	r3, [pc, #80]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  400e7e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e80:	4a14      	ldr	r2, [pc, #80]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e82:	6812      	ldr	r2, [r2, #0]
  400e84:	fbb2 f3f3 	udiv	r3, r2, r3
  400e88:	4a12      	ldr	r2, [pc, #72]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e8a:	6013      	str	r3, [r2, #0]
		break;
  400e8c:	e000      	b.n	400e90 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  400e8e:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400e90:	4b0e      	ldr	r3, [pc, #56]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e98:	2b70      	cmp	r3, #112	; 0x70
  400e9a:	d108      	bne.n	400eae <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  400e9c:	4b0d      	ldr	r3, [pc, #52]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400e9e:	681b      	ldr	r3, [r3, #0]
  400ea0:	4a10      	ldr	r2, [pc, #64]	; (400ee4 <SystemCoreClockUpdate+0x194>)
  400ea2:	fba2 2303 	umull	r2, r3, r2, r3
  400ea6:	085b      	lsrs	r3, r3, #1
  400ea8:	4a0a      	ldr	r2, [pc, #40]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400eaa:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  400eac:	e00a      	b.n	400ec4 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400eae:	4b07      	ldr	r3, [pc, #28]	; (400ecc <SystemCoreClockUpdate+0x17c>)
  400eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eb2:	091b      	lsrs	r3, r3, #4
  400eb4:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  400eb8:	4a06      	ldr	r2, [pc, #24]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400eba:	6812      	ldr	r2, [r2, #0]
  400ebc:	fa22 f303 	lsr.w	r3, r2, r3
  400ec0:	4a04      	ldr	r2, [pc, #16]	; (400ed4 <SystemCoreClockUpdate+0x184>)
  400ec2:	6013      	str	r3, [r2, #0]
}
  400ec4:	bf00      	nop
  400ec6:	46bd      	mov	sp, r7
  400ec8:	bc80      	pop	{r7}
  400eca:	4770      	bx	lr
  400ecc:	400e0400 	.word	0x400e0400
  400ed0:	400e1410 	.word	0x400e1410
  400ed4:	2000000c 	.word	0x2000000c
  400ed8:	00b71b00 	.word	0x00b71b00
  400edc:	003d0900 	.word	0x003d0900
  400ee0:	007a1200 	.word	0x007a1200
  400ee4:	aaaaaaab 	.word	0xaaaaaaab

00400ee8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  400ee8:	b480      	push	{r7}
  400eea:	b083      	sub	sp, #12
  400eec:	af00      	add	r7, sp, #0
  400eee:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400ef0:	687b      	ldr	r3, [r7, #4]
  400ef2:	4a18      	ldr	r2, [pc, #96]	; (400f54 <system_init_flash+0x6c>)
  400ef4:	4293      	cmp	r3, r2
  400ef6:	d804      	bhi.n	400f02 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ef8:	4b17      	ldr	r3, [pc, #92]	; (400f58 <system_init_flash+0x70>)
  400efa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400efe:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  400f00:	e023      	b.n	400f4a <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400f02:	687b      	ldr	r3, [r7, #4]
  400f04:	4a15      	ldr	r2, [pc, #84]	; (400f5c <system_init_flash+0x74>)
  400f06:	4293      	cmp	r3, r2
  400f08:	d803      	bhi.n	400f12 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f0a:	4b13      	ldr	r3, [pc, #76]	; (400f58 <system_init_flash+0x70>)
  400f0c:	4a14      	ldr	r2, [pc, #80]	; (400f60 <system_init_flash+0x78>)
  400f0e:	601a      	str	r2, [r3, #0]
}
  400f10:	e01b      	b.n	400f4a <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400f12:	687b      	ldr	r3, [r7, #4]
  400f14:	4a13      	ldr	r2, [pc, #76]	; (400f64 <system_init_flash+0x7c>)
  400f16:	4293      	cmp	r3, r2
  400f18:	d803      	bhi.n	400f22 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f1a:	4b0f      	ldr	r3, [pc, #60]	; (400f58 <system_init_flash+0x70>)
  400f1c:	4a12      	ldr	r2, [pc, #72]	; (400f68 <system_init_flash+0x80>)
  400f1e:	601a      	str	r2, [r3, #0]
}
  400f20:	e013      	b.n	400f4a <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400f22:	687b      	ldr	r3, [r7, #4]
  400f24:	4a11      	ldr	r2, [pc, #68]	; (400f6c <system_init_flash+0x84>)
  400f26:	4293      	cmp	r3, r2
  400f28:	d803      	bhi.n	400f32 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f2a:	4b0b      	ldr	r3, [pc, #44]	; (400f58 <system_init_flash+0x70>)
  400f2c:	4a10      	ldr	r2, [pc, #64]	; (400f70 <system_init_flash+0x88>)
  400f2e:	601a      	str	r2, [r3, #0]
}
  400f30:	e00b      	b.n	400f4a <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400f32:	687b      	ldr	r3, [r7, #4]
  400f34:	4a0f      	ldr	r2, [pc, #60]	; (400f74 <system_init_flash+0x8c>)
  400f36:	4293      	cmp	r3, r2
  400f38:	d804      	bhi.n	400f44 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f3a:	4b07      	ldr	r3, [pc, #28]	; (400f58 <system_init_flash+0x70>)
  400f3c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400f40:	601a      	str	r2, [r3, #0]
}
  400f42:	e002      	b.n	400f4a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f44:	4b04      	ldr	r3, [pc, #16]	; (400f58 <system_init_flash+0x70>)
  400f46:	4a0c      	ldr	r2, [pc, #48]	; (400f78 <system_init_flash+0x90>)
  400f48:	601a      	str	r2, [r3, #0]
}
  400f4a:	bf00      	nop
  400f4c:	370c      	adds	r7, #12
  400f4e:	46bd      	mov	sp, r7
  400f50:	bc80      	pop	{r7}
  400f52:	4770      	bx	lr
  400f54:	01312cff 	.word	0x01312cff
  400f58:	400e0a00 	.word	0x400e0a00
  400f5c:	026259ff 	.word	0x026259ff
  400f60:	04000100 	.word	0x04000100
  400f64:	039386ff 	.word	0x039386ff
  400f68:	04000200 	.word	0x04000200
  400f6c:	04c4b3ff 	.word	0x04c4b3ff
  400f70:	04000300 	.word	0x04000300
  400f74:	05f5e0ff 	.word	0x05f5e0ff
  400f78:	04000500 	.word	0x04000500

00400f7c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400f7c:	b480      	push	{r7}
  400f7e:	b083      	sub	sp, #12
  400f80:	af00      	add	r7, sp, #0
  400f82:	4603      	mov	r3, r0
  400f84:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400f86:	4908      	ldr	r1, [pc, #32]	; (400fa8 <NVIC_EnableIRQ+0x2c>)
  400f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400f8c:	095b      	lsrs	r3, r3, #5
  400f8e:	79fa      	ldrb	r2, [r7, #7]
  400f90:	f002 021f 	and.w	r2, r2, #31
  400f94:	2001      	movs	r0, #1
  400f96:	fa00 f202 	lsl.w	r2, r0, r2
  400f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400f9e:	bf00      	nop
  400fa0:	370c      	adds	r7, #12
  400fa2:	46bd      	mov	sp, r7
  400fa4:	bc80      	pop	{r7}
  400fa6:	4770      	bx	lr
  400fa8:	e000e100 	.word	0xe000e100

00400fac <button_handler>:
volatile uint32_t button_flag = false;

////////////////////////////////////////////////////////////////////////////////////////////////////
// Button handler: what happens when the interrupt is triggered?
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
  400fac:	b480      	push	{r7}
  400fae:	b083      	sub	sp, #12
  400fb0:	af00      	add	r7, sp, #0
  400fb2:	6078      	str	r0, [r7, #4]
  400fb4:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	button_flag = true;
  400fb6:	4b04      	ldr	r3, [pc, #16]	; (400fc8 <button_handler+0x1c>)
  400fb8:	2201      	movs	r2, #1
  400fba:	601a      	str	r2, [r3, #0]
}
  400fbc:	bf00      	nop
  400fbe:	370c      	adds	r7, #12
  400fc0:	46bd      	mov	sp, r7
  400fc2:	bc80      	pop	{r7}
  400fc4:	4770      	bx	lr
  400fc6:	bf00      	nop
  400fc8:	200004d0 	.word	0x200004d0

00400fcc <configure_button>:

////////////////////////////////////////////////////////////////////////////////////////////////////
// configures the button
void configure_button(void)
{
  400fcc:	b590      	push	{r4, r7, lr}
  400fce:	b083      	sub	sp, #12
  400fd0:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  400fd2:	200c      	movs	r0, #12
  400fd4:	4b0c      	ldr	r3, [pc, #48]	; (401008 <configure_button+0x3c>)
  400fd6:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  400fd8:	220a      	movs	r2, #10
  400fda:	2110      	movs	r1, #16
  400fdc:	480b      	ldr	r0, [pc, #44]	; (40100c <configure_button+0x40>)
  400fde:	4b0c      	ldr	r3, [pc, #48]	; (401010 <configure_button+0x44>)
  400fe0:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  400fe2:	4b0c      	ldr	r3, [pc, #48]	; (401014 <configure_button+0x48>)
  400fe4:	9300      	str	r3, [sp, #0]
  400fe6:	2349      	movs	r3, #73	; 0x49
  400fe8:	2210      	movs	r2, #16
  400fea:	210c      	movs	r1, #12
  400fec:	4807      	ldr	r0, [pc, #28]	; (40100c <configure_button+0x40>)
  400fee:	4c0a      	ldr	r4, [pc, #40]	; (401018 <configure_button+0x4c>)
  400ff0:	47a0      	blx	r4
			PUSH_BUTTON_ATTR, button_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);
  400ff2:	200c      	movs	r0, #12
  400ff4:	4b09      	ldr	r3, [pc, #36]	; (40101c <configure_button+0x50>)
  400ff6:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  400ff8:	2110      	movs	r1, #16
  400ffa:	4804      	ldr	r0, [pc, #16]	; (40100c <configure_button+0x40>)
  400ffc:	4b08      	ldr	r3, [pc, #32]	; (401020 <configure_button+0x54>)
  400ffe:	4798      	blx	r3
}
  401000:	bf00      	nop
  401002:	3704      	adds	r7, #4
  401004:	46bd      	mov	sp, r7
  401006:	bd90      	pop	{r4, r7, pc}
  401008:	00400969 	.word	0x00400969
  40100c:	400e1000 	.word	0x400e1000
  401010:	00400635 	.word	0x00400635
  401014:	00400fad 	.word	0x00400fad
  401018:	0040020d 	.word	0x0040020d
  40101c:	00400f7d 	.word	0x00400f7d
  401020:	004006d5 	.word	0x004006d5

00401024 <osc_get_rate>:
{
  401024:	b480      	push	{r7}
  401026:	b083      	sub	sp, #12
  401028:	af00      	add	r7, sp, #0
  40102a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40102c:	687b      	ldr	r3, [r7, #4]
  40102e:	2b07      	cmp	r3, #7
  401030:	d825      	bhi.n	40107e <osc_get_rate+0x5a>
  401032:	a201      	add	r2, pc, #4	; (adr r2, 401038 <osc_get_rate+0x14>)
  401034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401038:	00401059 	.word	0x00401059
  40103c:	0040105f 	.word	0x0040105f
  401040:	00401065 	.word	0x00401065
  401044:	0040106b 	.word	0x0040106b
  401048:	0040106f 	.word	0x0040106f
  40104c:	00401073 	.word	0x00401073
  401050:	00401077 	.word	0x00401077
  401054:	0040107b 	.word	0x0040107b
		return OSC_SLCK_32K_RC_HZ;
  401058:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40105c:	e010      	b.n	401080 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40105e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401062:	e00d      	b.n	401080 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401068:	e00a      	b.n	401080 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40106a:	4b08      	ldr	r3, [pc, #32]	; (40108c <osc_get_rate+0x68>)
  40106c:	e008      	b.n	401080 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40106e:	4b08      	ldr	r3, [pc, #32]	; (401090 <osc_get_rate+0x6c>)
  401070:	e006      	b.n	401080 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401072:	4b08      	ldr	r3, [pc, #32]	; (401094 <osc_get_rate+0x70>)
  401074:	e004      	b.n	401080 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401076:	4b07      	ldr	r3, [pc, #28]	; (401094 <osc_get_rate+0x70>)
  401078:	e002      	b.n	401080 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40107a:	4b06      	ldr	r3, [pc, #24]	; (401094 <osc_get_rate+0x70>)
  40107c:	e000      	b.n	401080 <osc_get_rate+0x5c>
	return 0;
  40107e:	2300      	movs	r3, #0
}
  401080:	4618      	mov	r0, r3
  401082:	370c      	adds	r7, #12
  401084:	46bd      	mov	sp, r7
  401086:	bc80      	pop	{r7}
  401088:	4770      	bx	lr
  40108a:	bf00      	nop
  40108c:	003d0900 	.word	0x003d0900
  401090:	007a1200 	.word	0x007a1200
  401094:	00b71b00 	.word	0x00b71b00

00401098 <sysclk_get_main_hz>:
{
  401098:	b580      	push	{r7, lr}
  40109a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40109c:	2006      	movs	r0, #6
  40109e:	4b04      	ldr	r3, [pc, #16]	; (4010b0 <sysclk_get_main_hz+0x18>)
  4010a0:	4798      	blx	r3
  4010a2:	4602      	mov	r2, r0
  4010a4:	4613      	mov	r3, r2
  4010a6:	009b      	lsls	r3, r3, #2
  4010a8:	4413      	add	r3, r2
  4010aa:	009b      	lsls	r3, r3, #2
}
  4010ac:	4618      	mov	r0, r3
  4010ae:	bd80      	pop	{r7, pc}
  4010b0:	00401025 	.word	0x00401025

004010b4 <sysclk_get_cpu_hz>:
{
  4010b4:	b580      	push	{r7, lr}
  4010b6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4010b8:	4b02      	ldr	r3, [pc, #8]	; (4010c4 <sysclk_get_cpu_hz+0x10>)
  4010ba:	4798      	blx	r3
  4010bc:	4603      	mov	r3, r0
  4010be:	085b      	lsrs	r3, r3, #1
}
  4010c0:	4618      	mov	r0, r3
  4010c2:	bd80      	pop	{r7, pc}
  4010c4:	00401099 	.word	0x00401099

004010c8 <ioport_set_pin_level>:
{
  4010c8:	b480      	push	{r7}
  4010ca:	b08b      	sub	sp, #44	; 0x2c
  4010cc:	af00      	add	r7, sp, #0
  4010ce:	6078      	str	r0, [r7, #4]
  4010d0:	460b      	mov	r3, r1
  4010d2:	70fb      	strb	r3, [r7, #3]
  4010d4:	687b      	ldr	r3, [r7, #4]
  4010d6:	627b      	str	r3, [r7, #36]	; 0x24
  4010d8:	78fb      	ldrb	r3, [r7, #3]
  4010da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010e0:	61fb      	str	r3, [r7, #28]
  4010e2:	69fb      	ldr	r3, [r7, #28]
  4010e4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4010e6:	69bb      	ldr	r3, [r7, #24]
  4010e8:	095b      	lsrs	r3, r3, #5
  4010ea:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4010ec:	697b      	ldr	r3, [r7, #20]
  4010ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4010f2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4010f6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4010f8:	613b      	str	r3, [r7, #16]
	if (level) {
  4010fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4010fe:	2b00      	cmp	r3, #0
  401100:	d009      	beq.n	401116 <ioport_set_pin_level+0x4e>
  401102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401104:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401106:	68fb      	ldr	r3, [r7, #12]
  401108:	f003 031f 	and.w	r3, r3, #31
  40110c:	2201      	movs	r2, #1
  40110e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401110:	693b      	ldr	r3, [r7, #16]
  401112:	631a      	str	r2, [r3, #48]	; 0x30
}
  401114:	e008      	b.n	401128 <ioport_set_pin_level+0x60>
  401116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401118:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40111a:	68bb      	ldr	r3, [r7, #8]
  40111c:	f003 031f 	and.w	r3, r3, #31
  401120:	2201      	movs	r2, #1
  401122:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401124:	693b      	ldr	r3, [r7, #16]
  401126:	635a      	str	r2, [r3, #52]	; 0x34
  401128:	bf00      	nop
  40112a:	372c      	adds	r7, #44	; 0x2c
  40112c:	46bd      	mov	sp, r7
  40112e:	bc80      	pop	{r7}
  401130:	4770      	bx	lr

00401132 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  401132:	b480      	push	{r7}
  401134:	b089      	sub	sp, #36	; 0x24
  401136:	af00      	add	r7, sp, #0
  401138:	6078      	str	r0, [r7, #4]
  40113a:	687b      	ldr	r3, [r7, #4]
  40113c:	61fb      	str	r3, [r7, #28]
  40113e:	69fb      	ldr	r3, [r7, #28]
  401140:	61bb      	str	r3, [r7, #24]
  401142:	69bb      	ldr	r3, [r7, #24]
  401144:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  401146:	697b      	ldr	r3, [r7, #20]
  401148:	095b      	lsrs	r3, r3, #5
  40114a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40114c:	693b      	ldr	r3, [r7, #16]
  40114e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401152:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401156:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40115a:	69fb      	ldr	r3, [r7, #28]
  40115c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40115e:	68fb      	ldr	r3, [r7, #12]
  401160:	f003 031f 	and.w	r3, r3, #31
  401164:	2101      	movs	r1, #1
  401166:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40116a:	4013      	ands	r3, r2
  40116c:	2b00      	cmp	r3, #0
  40116e:	bf14      	ite	ne
  401170:	2301      	movne	r3, #1
  401172:	2300      	moveq	r3, #0
  401174:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  401176:	4618      	mov	r0, r3
  401178:	3724      	adds	r7, #36	; 0x24
  40117a:	46bd      	mov	sp, r7
  40117c:	bc80      	pop	{r7}
  40117e:	4770      	bx	lr

00401180 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  401180:	b480      	push	{r7}
  401182:	b08b      	sub	sp, #44	; 0x2c
  401184:	af00      	add	r7, sp, #0
  401186:	6078      	str	r0, [r7, #4]
  401188:	687b      	ldr	r3, [r7, #4]
  40118a:	627b      	str	r3, [r7, #36]	; 0x24
  40118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40118e:	623b      	str	r3, [r7, #32]
  401190:	6a3b      	ldr	r3, [r7, #32]
  401192:	61fb      	str	r3, [r7, #28]
	return pin >> 5;
  401194:	69fb      	ldr	r3, [r7, #28]
  401196:	095b      	lsrs	r3, r3, #5
  401198:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40119a:	69bb      	ldr	r3, [r7, #24]
  40119c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4011a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4011a4:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  4011a6:	617b      	str	r3, [r7, #20]
  4011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011aa:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4011ac:	693b      	ldr	r3, [r7, #16]
  4011ae:	f003 031f 	and.w	r3, r3, #31
  4011b2:	2201      	movs	r2, #1
  4011b4:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  4011b8:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4011ba:	697b      	ldr	r3, [r7, #20]
  4011bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011c0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4011c2:	68bb      	ldr	r3, [r7, #8]
  4011c4:	f003 031f 	and.w	r3, r3, #31
  4011c8:	2101      	movs	r1, #1
  4011ca:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4011ce:	4013      	ands	r3, r2
  4011d0:	2b00      	cmp	r3, #0
  4011d2:	d003      	beq.n	4011dc <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  4011d4:	697b      	ldr	r3, [r7, #20]
  4011d6:	68fa      	ldr	r2, [r7, #12]
  4011d8:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  4011da:	e002      	b.n	4011e2 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  4011dc:	697b      	ldr	r3, [r7, #20]
  4011de:	68fa      	ldr	r2, [r7, #12]
  4011e0:	631a      	str	r2, [r3, #48]	; 0x30
  4011e2:	bf00      	nop
  4011e4:	372c      	adds	r7, #44	; 0x2c
  4011e6:	46bd      	mov	sp, r7
  4011e8:	bc80      	pop	{r7}
  4011ea:	4770      	bx	lr

004011ec <main>:
// Task-specific includes
#include "button.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
int main (void)
{
  4011ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011f0:	b083      	sub	sp, #12
  4011f2:	af00      	add	r7, sp, #0
	// Boilerplate Initialization
	sysclk_init();
  4011f4:	4b35      	ldr	r3, [pc, #212]	; (4012cc <main+0xe0>)
  4011f6:	4798      	blx	r3
	wdt_disable(WDT);
  4011f8:	4835      	ldr	r0, [pc, #212]	; (4012d0 <main+0xe4>)
  4011fa:	4b36      	ldr	r3, [pc, #216]	; (4012d4 <main+0xe8>)
  4011fc:	4798      	blx	r3
	board_init();
  4011fe:	4b36      	ldr	r3, [pc, #216]	; (4012d8 <main+0xec>)
  401200:	4798      	blx	r3
	
	// Task-specific initialization
	configure_button();
  401202:	4b36      	ldr	r3, [pc, #216]	; (4012dc <main+0xf0>)
  401204:	4798      	blx	r3
	
	// Default button flag to be false.
	button_flag = false;
  401206:	4b36      	ldr	r3, [pc, #216]	; (4012e0 <main+0xf4>)
  401208:	2200      	movs	r2, #0
  40120a:	601a      	str	r2, [r3, #0]
	
	// Default set LED state based on the button
	ioport_set_pin_level(LED_PIN,!ioport_get_pin_level(BUTTON_PIN));
  40120c:	2024      	movs	r0, #36	; 0x24
  40120e:	4b35      	ldr	r3, [pc, #212]	; (4012e4 <main+0xf8>)
  401210:	4798      	blx	r3
  401212:	4603      	mov	r3, r0
  401214:	2b00      	cmp	r3, #0
  401216:	bf14      	ite	ne
  401218:	2301      	movne	r3, #1
  40121a:	2300      	moveq	r3, #0
  40121c:	b2db      	uxtb	r3, r3
  40121e:	f083 0301 	eor.w	r3, r3, #1
  401222:	b2db      	uxtb	r3, r3
  401224:	f003 0301 	and.w	r3, r3, #1
  401228:	b2db      	uxtb	r3, r3
  40122a:	4619      	mov	r1, r3
  40122c:	2000      	movs	r0, #0
  40122e:	4b2e      	ldr	r3, [pc, #184]	; (4012e8 <main+0xfc>)
  401230:	4798      	blx	r3
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	while(true){

		ioport_toggle_pin_level(LED_PIN);
  401232:	2000      	movs	r0, #0
  401234:	4b2d      	ldr	r3, [pc, #180]	; (4012ec <main+0x100>)
  401236:	4798      	blx	r3
		delay_ms(1000);
  401238:	4b2d      	ldr	r3, [pc, #180]	; (4012f0 <main+0x104>)
  40123a:	4798      	blx	r3
  40123c:	4603      	mov	r3, r0
  40123e:	4619      	mov	r1, r3
  401240:	f04f 0200 	mov.w	r2, #0
  401244:	460b      	mov	r3, r1
  401246:	4614      	mov	r4, r2
  401248:	0160      	lsls	r0, r4, #5
  40124a:	6078      	str	r0, [r7, #4]
  40124c:	6878      	ldr	r0, [r7, #4]
  40124e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  401252:	6078      	str	r0, [r7, #4]
  401254:	015b      	lsls	r3, r3, #5
  401256:	603b      	str	r3, [r7, #0]
  401258:	e9d7 3400 	ldrd	r3, r4, [r7]
  40125c:	1a5b      	subs	r3, r3, r1
  40125e:	eb64 0402 	sbc.w	r4, r4, r2
  401262:	ea4f 0984 	mov.w	r9, r4, lsl #2
  401266:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  40126a:	ea4f 0883 	mov.w	r8, r3, lsl #2
  40126e:	4643      	mov	r3, r8
  401270:	464c      	mov	r4, r9
  401272:	185b      	adds	r3, r3, r1
  401274:	eb44 0402 	adc.w	r4, r4, r2
  401278:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  40127c:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  401280:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  401284:	4653      	mov	r3, sl
  401286:	465c      	mov	r4, fp
  401288:	4619      	mov	r1, r3
  40128a:	4622      	mov	r2, r4
  40128c:	f243 63af 	movw	r3, #13999	; 0x36af
  401290:	f04f 0400 	mov.w	r4, #0
  401294:	18cd      	adds	r5, r1, r3
  401296:	eb42 0604 	adc.w	r6, r2, r4
  40129a:	4628      	mov	r0, r5
  40129c:	4631      	mov	r1, r6
  40129e:	4c15      	ldr	r4, [pc, #84]	; (4012f4 <main+0x108>)
  4012a0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4012a4:	f04f 0300 	mov.w	r3, #0
  4012a8:	47a0      	blx	r4
  4012aa:	4603      	mov	r3, r0
  4012ac:	460c      	mov	r4, r1
  4012ae:	4618      	mov	r0, r3
  4012b0:	4b11      	ldr	r3, [pc, #68]	; (4012f8 <main+0x10c>)
  4012b2:	4798      	blx	r3
		// Bulk of code: When pushbutton changes state, it throws and innterrupt. Here, we toggle the LED level when the interrupt is detected.
		if(button_flag){
  4012b4:	4b0a      	ldr	r3, [pc, #40]	; (4012e0 <main+0xf4>)
  4012b6:	681b      	ldr	r3, [r3, #0]
  4012b8:	2b00      	cmp	r3, #0
  4012ba:	d0ba      	beq.n	401232 <main+0x46>
			// Clear the flag
			button_flag = false;
  4012bc:	4b08      	ldr	r3, [pc, #32]	; (4012e0 <main+0xf4>)
  4012be:	2200      	movs	r2, #0
  4012c0:	601a      	str	r2, [r3, #0]
			
			// toggle the level
			ioport_toggle_pin_level(LED_PIN);
  4012c2:	2000      	movs	r0, #0
  4012c4:	4b09      	ldr	r3, [pc, #36]	; (4012ec <main+0x100>)
  4012c6:	4798      	blx	r3
		ioport_toggle_pin_level(LED_PIN);
  4012c8:	e7b3      	b.n	401232 <main+0x46>
  4012ca:	bf00      	nop
  4012cc:	004005c5 	.word	0x004005c5
  4012d0:	400e1450 	.word	0x400e1450
  4012d4:	00400c65 	.word	0x00400c65
  4012d8:	00400c29 	.word	0x00400c29
  4012dc:	00400fcd 	.word	0x00400fcd
  4012e0:	200004d0 	.word	0x200004d0
  4012e4:	00401133 	.word	0x00401133
  4012e8:	004010c9 	.word	0x004010c9
  4012ec:	00401181 	.word	0x00401181
  4012f0:	004010b5 	.word	0x004010b5
  4012f4:	004012fd 	.word	0x004012fd
  4012f8:	20000001 	.word	0x20000001

004012fc <__aeabi_uldivmod>:
  4012fc:	b953      	cbnz	r3, 401314 <__aeabi_uldivmod+0x18>
  4012fe:	b94a      	cbnz	r2, 401314 <__aeabi_uldivmod+0x18>
  401300:	2900      	cmp	r1, #0
  401302:	bf08      	it	eq
  401304:	2800      	cmpeq	r0, #0
  401306:	bf1c      	itt	ne
  401308:	f04f 31ff 	movne.w	r1, #4294967295
  40130c:	f04f 30ff 	movne.w	r0, #4294967295
  401310:	f000 b97a 	b.w	401608 <__aeabi_idiv0>
  401314:	f1ad 0c08 	sub.w	ip, sp, #8
  401318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40131c:	f000 f806 	bl	40132c <__udivmoddi4>
  401320:	f8dd e004 	ldr.w	lr, [sp, #4]
  401324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401328:	b004      	add	sp, #16
  40132a:	4770      	bx	lr

0040132c <__udivmoddi4>:
  40132c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401330:	468c      	mov	ip, r1
  401332:	460d      	mov	r5, r1
  401334:	4604      	mov	r4, r0
  401336:	9e08      	ldr	r6, [sp, #32]
  401338:	2b00      	cmp	r3, #0
  40133a:	d151      	bne.n	4013e0 <__udivmoddi4+0xb4>
  40133c:	428a      	cmp	r2, r1
  40133e:	4617      	mov	r7, r2
  401340:	d96d      	bls.n	40141e <__udivmoddi4+0xf2>
  401342:	fab2 fe82 	clz	lr, r2
  401346:	f1be 0f00 	cmp.w	lr, #0
  40134a:	d00b      	beq.n	401364 <__udivmoddi4+0x38>
  40134c:	f1ce 0c20 	rsb	ip, lr, #32
  401350:	fa01 f50e 	lsl.w	r5, r1, lr
  401354:	fa20 fc0c 	lsr.w	ip, r0, ip
  401358:	fa02 f70e 	lsl.w	r7, r2, lr
  40135c:	ea4c 0c05 	orr.w	ip, ip, r5
  401360:	fa00 f40e 	lsl.w	r4, r0, lr
  401364:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401368:	0c25      	lsrs	r5, r4, #16
  40136a:	fbbc f8fa 	udiv	r8, ip, sl
  40136e:	fa1f f987 	uxth.w	r9, r7
  401372:	fb0a cc18 	mls	ip, sl, r8, ip
  401376:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40137a:	fb08 f309 	mul.w	r3, r8, r9
  40137e:	42ab      	cmp	r3, r5
  401380:	d90a      	bls.n	401398 <__udivmoddi4+0x6c>
  401382:	19ed      	adds	r5, r5, r7
  401384:	f108 32ff 	add.w	r2, r8, #4294967295
  401388:	f080 8123 	bcs.w	4015d2 <__udivmoddi4+0x2a6>
  40138c:	42ab      	cmp	r3, r5
  40138e:	f240 8120 	bls.w	4015d2 <__udivmoddi4+0x2a6>
  401392:	f1a8 0802 	sub.w	r8, r8, #2
  401396:	443d      	add	r5, r7
  401398:	1aed      	subs	r5, r5, r3
  40139a:	b2a4      	uxth	r4, r4
  40139c:	fbb5 f0fa 	udiv	r0, r5, sl
  4013a0:	fb0a 5510 	mls	r5, sl, r0, r5
  4013a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4013a8:	fb00 f909 	mul.w	r9, r0, r9
  4013ac:	45a1      	cmp	r9, r4
  4013ae:	d909      	bls.n	4013c4 <__udivmoddi4+0x98>
  4013b0:	19e4      	adds	r4, r4, r7
  4013b2:	f100 33ff 	add.w	r3, r0, #4294967295
  4013b6:	f080 810a 	bcs.w	4015ce <__udivmoddi4+0x2a2>
  4013ba:	45a1      	cmp	r9, r4
  4013bc:	f240 8107 	bls.w	4015ce <__udivmoddi4+0x2a2>
  4013c0:	3802      	subs	r0, #2
  4013c2:	443c      	add	r4, r7
  4013c4:	eba4 0409 	sub.w	r4, r4, r9
  4013c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4013cc:	2100      	movs	r1, #0
  4013ce:	2e00      	cmp	r6, #0
  4013d0:	d061      	beq.n	401496 <__udivmoddi4+0x16a>
  4013d2:	fa24 f40e 	lsr.w	r4, r4, lr
  4013d6:	2300      	movs	r3, #0
  4013d8:	6034      	str	r4, [r6, #0]
  4013da:	6073      	str	r3, [r6, #4]
  4013dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013e0:	428b      	cmp	r3, r1
  4013e2:	d907      	bls.n	4013f4 <__udivmoddi4+0xc8>
  4013e4:	2e00      	cmp	r6, #0
  4013e6:	d054      	beq.n	401492 <__udivmoddi4+0x166>
  4013e8:	2100      	movs	r1, #0
  4013ea:	e886 0021 	stmia.w	r6, {r0, r5}
  4013ee:	4608      	mov	r0, r1
  4013f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013f4:	fab3 f183 	clz	r1, r3
  4013f8:	2900      	cmp	r1, #0
  4013fa:	f040 808e 	bne.w	40151a <__udivmoddi4+0x1ee>
  4013fe:	42ab      	cmp	r3, r5
  401400:	d302      	bcc.n	401408 <__udivmoddi4+0xdc>
  401402:	4282      	cmp	r2, r0
  401404:	f200 80fa 	bhi.w	4015fc <__udivmoddi4+0x2d0>
  401408:	1a84      	subs	r4, r0, r2
  40140a:	eb65 0503 	sbc.w	r5, r5, r3
  40140e:	2001      	movs	r0, #1
  401410:	46ac      	mov	ip, r5
  401412:	2e00      	cmp	r6, #0
  401414:	d03f      	beq.n	401496 <__udivmoddi4+0x16a>
  401416:	e886 1010 	stmia.w	r6, {r4, ip}
  40141a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40141e:	b912      	cbnz	r2, 401426 <__udivmoddi4+0xfa>
  401420:	2701      	movs	r7, #1
  401422:	fbb7 f7f2 	udiv	r7, r7, r2
  401426:	fab7 fe87 	clz	lr, r7
  40142a:	f1be 0f00 	cmp.w	lr, #0
  40142e:	d134      	bne.n	40149a <__udivmoddi4+0x16e>
  401430:	1beb      	subs	r3, r5, r7
  401432:	0c3a      	lsrs	r2, r7, #16
  401434:	fa1f fc87 	uxth.w	ip, r7
  401438:	2101      	movs	r1, #1
  40143a:	fbb3 f8f2 	udiv	r8, r3, r2
  40143e:	0c25      	lsrs	r5, r4, #16
  401440:	fb02 3318 	mls	r3, r2, r8, r3
  401444:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401448:	fb0c f308 	mul.w	r3, ip, r8
  40144c:	42ab      	cmp	r3, r5
  40144e:	d907      	bls.n	401460 <__udivmoddi4+0x134>
  401450:	19ed      	adds	r5, r5, r7
  401452:	f108 30ff 	add.w	r0, r8, #4294967295
  401456:	d202      	bcs.n	40145e <__udivmoddi4+0x132>
  401458:	42ab      	cmp	r3, r5
  40145a:	f200 80d1 	bhi.w	401600 <__udivmoddi4+0x2d4>
  40145e:	4680      	mov	r8, r0
  401460:	1aed      	subs	r5, r5, r3
  401462:	b2a3      	uxth	r3, r4
  401464:	fbb5 f0f2 	udiv	r0, r5, r2
  401468:	fb02 5510 	mls	r5, r2, r0, r5
  40146c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401470:	fb0c fc00 	mul.w	ip, ip, r0
  401474:	45a4      	cmp	ip, r4
  401476:	d907      	bls.n	401488 <__udivmoddi4+0x15c>
  401478:	19e4      	adds	r4, r4, r7
  40147a:	f100 33ff 	add.w	r3, r0, #4294967295
  40147e:	d202      	bcs.n	401486 <__udivmoddi4+0x15a>
  401480:	45a4      	cmp	ip, r4
  401482:	f200 80b8 	bhi.w	4015f6 <__udivmoddi4+0x2ca>
  401486:	4618      	mov	r0, r3
  401488:	eba4 040c 	sub.w	r4, r4, ip
  40148c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401490:	e79d      	b.n	4013ce <__udivmoddi4+0xa2>
  401492:	4631      	mov	r1, r6
  401494:	4630      	mov	r0, r6
  401496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40149a:	f1ce 0420 	rsb	r4, lr, #32
  40149e:	fa05 f30e 	lsl.w	r3, r5, lr
  4014a2:	fa07 f70e 	lsl.w	r7, r7, lr
  4014a6:	fa20 f804 	lsr.w	r8, r0, r4
  4014aa:	0c3a      	lsrs	r2, r7, #16
  4014ac:	fa25 f404 	lsr.w	r4, r5, r4
  4014b0:	ea48 0803 	orr.w	r8, r8, r3
  4014b4:	fbb4 f1f2 	udiv	r1, r4, r2
  4014b8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4014bc:	fb02 4411 	mls	r4, r2, r1, r4
  4014c0:	fa1f fc87 	uxth.w	ip, r7
  4014c4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4014c8:	fb01 f30c 	mul.w	r3, r1, ip
  4014cc:	42ab      	cmp	r3, r5
  4014ce:	fa00 f40e 	lsl.w	r4, r0, lr
  4014d2:	d909      	bls.n	4014e8 <__udivmoddi4+0x1bc>
  4014d4:	19ed      	adds	r5, r5, r7
  4014d6:	f101 30ff 	add.w	r0, r1, #4294967295
  4014da:	f080 808a 	bcs.w	4015f2 <__udivmoddi4+0x2c6>
  4014de:	42ab      	cmp	r3, r5
  4014e0:	f240 8087 	bls.w	4015f2 <__udivmoddi4+0x2c6>
  4014e4:	3902      	subs	r1, #2
  4014e6:	443d      	add	r5, r7
  4014e8:	1aeb      	subs	r3, r5, r3
  4014ea:	fa1f f588 	uxth.w	r5, r8
  4014ee:	fbb3 f0f2 	udiv	r0, r3, r2
  4014f2:	fb02 3310 	mls	r3, r2, r0, r3
  4014f6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4014fa:	fb00 f30c 	mul.w	r3, r0, ip
  4014fe:	42ab      	cmp	r3, r5
  401500:	d907      	bls.n	401512 <__udivmoddi4+0x1e6>
  401502:	19ed      	adds	r5, r5, r7
  401504:	f100 38ff 	add.w	r8, r0, #4294967295
  401508:	d26f      	bcs.n	4015ea <__udivmoddi4+0x2be>
  40150a:	42ab      	cmp	r3, r5
  40150c:	d96d      	bls.n	4015ea <__udivmoddi4+0x2be>
  40150e:	3802      	subs	r0, #2
  401510:	443d      	add	r5, r7
  401512:	1aeb      	subs	r3, r5, r3
  401514:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401518:	e78f      	b.n	40143a <__udivmoddi4+0x10e>
  40151a:	f1c1 0720 	rsb	r7, r1, #32
  40151e:	fa22 f807 	lsr.w	r8, r2, r7
  401522:	408b      	lsls	r3, r1
  401524:	fa05 f401 	lsl.w	r4, r5, r1
  401528:	ea48 0303 	orr.w	r3, r8, r3
  40152c:	fa20 fe07 	lsr.w	lr, r0, r7
  401530:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401534:	40fd      	lsrs	r5, r7
  401536:	ea4e 0e04 	orr.w	lr, lr, r4
  40153a:	fbb5 f9fc 	udiv	r9, r5, ip
  40153e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401542:	fb0c 5519 	mls	r5, ip, r9, r5
  401546:	fa1f f883 	uxth.w	r8, r3
  40154a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40154e:	fb09 f408 	mul.w	r4, r9, r8
  401552:	42ac      	cmp	r4, r5
  401554:	fa02 f201 	lsl.w	r2, r2, r1
  401558:	fa00 fa01 	lsl.w	sl, r0, r1
  40155c:	d908      	bls.n	401570 <__udivmoddi4+0x244>
  40155e:	18ed      	adds	r5, r5, r3
  401560:	f109 30ff 	add.w	r0, r9, #4294967295
  401564:	d243      	bcs.n	4015ee <__udivmoddi4+0x2c2>
  401566:	42ac      	cmp	r4, r5
  401568:	d941      	bls.n	4015ee <__udivmoddi4+0x2c2>
  40156a:	f1a9 0902 	sub.w	r9, r9, #2
  40156e:	441d      	add	r5, r3
  401570:	1b2d      	subs	r5, r5, r4
  401572:	fa1f fe8e 	uxth.w	lr, lr
  401576:	fbb5 f0fc 	udiv	r0, r5, ip
  40157a:	fb0c 5510 	mls	r5, ip, r0, r5
  40157e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401582:	fb00 f808 	mul.w	r8, r0, r8
  401586:	45a0      	cmp	r8, r4
  401588:	d907      	bls.n	40159a <__udivmoddi4+0x26e>
  40158a:	18e4      	adds	r4, r4, r3
  40158c:	f100 35ff 	add.w	r5, r0, #4294967295
  401590:	d229      	bcs.n	4015e6 <__udivmoddi4+0x2ba>
  401592:	45a0      	cmp	r8, r4
  401594:	d927      	bls.n	4015e6 <__udivmoddi4+0x2ba>
  401596:	3802      	subs	r0, #2
  401598:	441c      	add	r4, r3
  40159a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40159e:	eba4 0408 	sub.w	r4, r4, r8
  4015a2:	fba0 8902 	umull	r8, r9, r0, r2
  4015a6:	454c      	cmp	r4, r9
  4015a8:	46c6      	mov	lr, r8
  4015aa:	464d      	mov	r5, r9
  4015ac:	d315      	bcc.n	4015da <__udivmoddi4+0x2ae>
  4015ae:	d012      	beq.n	4015d6 <__udivmoddi4+0x2aa>
  4015b0:	b156      	cbz	r6, 4015c8 <__udivmoddi4+0x29c>
  4015b2:	ebba 030e 	subs.w	r3, sl, lr
  4015b6:	eb64 0405 	sbc.w	r4, r4, r5
  4015ba:	fa04 f707 	lsl.w	r7, r4, r7
  4015be:	40cb      	lsrs	r3, r1
  4015c0:	431f      	orrs	r7, r3
  4015c2:	40cc      	lsrs	r4, r1
  4015c4:	6037      	str	r7, [r6, #0]
  4015c6:	6074      	str	r4, [r6, #4]
  4015c8:	2100      	movs	r1, #0
  4015ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015ce:	4618      	mov	r0, r3
  4015d0:	e6f8      	b.n	4013c4 <__udivmoddi4+0x98>
  4015d2:	4690      	mov	r8, r2
  4015d4:	e6e0      	b.n	401398 <__udivmoddi4+0x6c>
  4015d6:	45c2      	cmp	sl, r8
  4015d8:	d2ea      	bcs.n	4015b0 <__udivmoddi4+0x284>
  4015da:	ebb8 0e02 	subs.w	lr, r8, r2
  4015de:	eb69 0503 	sbc.w	r5, r9, r3
  4015e2:	3801      	subs	r0, #1
  4015e4:	e7e4      	b.n	4015b0 <__udivmoddi4+0x284>
  4015e6:	4628      	mov	r0, r5
  4015e8:	e7d7      	b.n	40159a <__udivmoddi4+0x26e>
  4015ea:	4640      	mov	r0, r8
  4015ec:	e791      	b.n	401512 <__udivmoddi4+0x1e6>
  4015ee:	4681      	mov	r9, r0
  4015f0:	e7be      	b.n	401570 <__udivmoddi4+0x244>
  4015f2:	4601      	mov	r1, r0
  4015f4:	e778      	b.n	4014e8 <__udivmoddi4+0x1bc>
  4015f6:	3802      	subs	r0, #2
  4015f8:	443c      	add	r4, r7
  4015fa:	e745      	b.n	401488 <__udivmoddi4+0x15c>
  4015fc:	4608      	mov	r0, r1
  4015fe:	e708      	b.n	401412 <__udivmoddi4+0xe6>
  401600:	f1a8 0802 	sub.w	r8, r8, #2
  401604:	443d      	add	r5, r7
  401606:	e72b      	b.n	401460 <__udivmoddi4+0x134>

00401608 <__aeabi_idiv0>:
  401608:	4770      	bx	lr
  40160a:	bf00      	nop

0040160c <__libc_init_array>:
  40160c:	b570      	push	{r4, r5, r6, lr}
  40160e:	4e0f      	ldr	r6, [pc, #60]	; (40164c <__libc_init_array+0x40>)
  401610:	4d0f      	ldr	r5, [pc, #60]	; (401650 <__libc_init_array+0x44>)
  401612:	1b76      	subs	r6, r6, r5
  401614:	10b6      	asrs	r6, r6, #2
  401616:	bf18      	it	ne
  401618:	2400      	movne	r4, #0
  40161a:	d005      	beq.n	401628 <__libc_init_array+0x1c>
  40161c:	3401      	adds	r4, #1
  40161e:	f855 3b04 	ldr.w	r3, [r5], #4
  401622:	4798      	blx	r3
  401624:	42a6      	cmp	r6, r4
  401626:	d1f9      	bne.n	40161c <__libc_init_array+0x10>
  401628:	4e0a      	ldr	r6, [pc, #40]	; (401654 <__libc_init_array+0x48>)
  40162a:	4d0b      	ldr	r5, [pc, #44]	; (401658 <__libc_init_array+0x4c>)
  40162c:	1b76      	subs	r6, r6, r5
  40162e:	f000 f8a7 	bl	401780 <_init>
  401632:	10b6      	asrs	r6, r6, #2
  401634:	bf18      	it	ne
  401636:	2400      	movne	r4, #0
  401638:	d006      	beq.n	401648 <__libc_init_array+0x3c>
  40163a:	3401      	adds	r4, #1
  40163c:	f855 3b04 	ldr.w	r3, [r5], #4
  401640:	4798      	blx	r3
  401642:	42a6      	cmp	r6, r4
  401644:	d1f9      	bne.n	40163a <__libc_init_array+0x2e>
  401646:	bd70      	pop	{r4, r5, r6, pc}
  401648:	bd70      	pop	{r4, r5, r6, pc}
  40164a:	bf00      	nop
  40164c:	0040178c 	.word	0x0040178c
  401650:	0040178c 	.word	0x0040178c
  401654:	00401794 	.word	0x00401794
  401658:	0040178c 	.word	0x0040178c

0040165c <register_fini>:
  40165c:	4b02      	ldr	r3, [pc, #8]	; (401668 <register_fini+0xc>)
  40165e:	b113      	cbz	r3, 401666 <register_fini+0xa>
  401660:	4802      	ldr	r0, [pc, #8]	; (40166c <register_fini+0x10>)
  401662:	f000 b805 	b.w	401670 <atexit>
  401666:	4770      	bx	lr
  401668:	00000000 	.word	0x00000000
  40166c:	0040167d 	.word	0x0040167d

00401670 <atexit>:
  401670:	2300      	movs	r3, #0
  401672:	4601      	mov	r1, r0
  401674:	461a      	mov	r2, r3
  401676:	4618      	mov	r0, r3
  401678:	f000 b81e 	b.w	4016b8 <__register_exitproc>

0040167c <__libc_fini_array>:
  40167c:	b538      	push	{r3, r4, r5, lr}
  40167e:	4c0a      	ldr	r4, [pc, #40]	; (4016a8 <__libc_fini_array+0x2c>)
  401680:	4d0a      	ldr	r5, [pc, #40]	; (4016ac <__libc_fini_array+0x30>)
  401682:	1b64      	subs	r4, r4, r5
  401684:	10a4      	asrs	r4, r4, #2
  401686:	d00a      	beq.n	40169e <__libc_fini_array+0x22>
  401688:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40168c:	3b01      	subs	r3, #1
  40168e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401692:	3c01      	subs	r4, #1
  401694:	f855 3904 	ldr.w	r3, [r5], #-4
  401698:	4798      	blx	r3
  40169a:	2c00      	cmp	r4, #0
  40169c:	d1f9      	bne.n	401692 <__libc_fini_array+0x16>
  40169e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4016a2:	f000 b877 	b.w	401794 <_fini>
  4016a6:	bf00      	nop
  4016a8:	004017a4 	.word	0x004017a4
  4016ac:	004017a0 	.word	0x004017a0

004016b0 <__retarget_lock_acquire_recursive>:
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop

004016b4 <__retarget_lock_release_recursive>:
  4016b4:	4770      	bx	lr
  4016b6:	bf00      	nop

004016b8 <__register_exitproc>:
  4016b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4016bc:	4d2c      	ldr	r5, [pc, #176]	; (401770 <__register_exitproc+0xb8>)
  4016be:	4606      	mov	r6, r0
  4016c0:	6828      	ldr	r0, [r5, #0]
  4016c2:	4698      	mov	r8, r3
  4016c4:	460f      	mov	r7, r1
  4016c6:	4691      	mov	r9, r2
  4016c8:	f7ff fff2 	bl	4016b0 <__retarget_lock_acquire_recursive>
  4016cc:	4b29      	ldr	r3, [pc, #164]	; (401774 <__register_exitproc+0xbc>)
  4016ce:	681c      	ldr	r4, [r3, #0]
  4016d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4016d4:	2b00      	cmp	r3, #0
  4016d6:	d03e      	beq.n	401756 <__register_exitproc+0x9e>
  4016d8:	685a      	ldr	r2, [r3, #4]
  4016da:	2a1f      	cmp	r2, #31
  4016dc:	dc1c      	bgt.n	401718 <__register_exitproc+0x60>
  4016de:	f102 0e01 	add.w	lr, r2, #1
  4016e2:	b176      	cbz	r6, 401702 <__register_exitproc+0x4a>
  4016e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4016e8:	2401      	movs	r4, #1
  4016ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4016ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4016f2:	4094      	lsls	r4, r2
  4016f4:	4320      	orrs	r0, r4
  4016f6:	2e02      	cmp	r6, #2
  4016f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4016fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401700:	d023      	beq.n	40174a <__register_exitproc+0x92>
  401702:	3202      	adds	r2, #2
  401704:	f8c3 e004 	str.w	lr, [r3, #4]
  401708:	6828      	ldr	r0, [r5, #0]
  40170a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40170e:	f7ff ffd1 	bl	4016b4 <__retarget_lock_release_recursive>
  401712:	2000      	movs	r0, #0
  401714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401718:	4b17      	ldr	r3, [pc, #92]	; (401778 <__register_exitproc+0xc0>)
  40171a:	b30b      	cbz	r3, 401760 <__register_exitproc+0xa8>
  40171c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401720:	f3af 8000 	nop.w
  401724:	4603      	mov	r3, r0
  401726:	b1d8      	cbz	r0, 401760 <__register_exitproc+0xa8>
  401728:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40172c:	6002      	str	r2, [r0, #0]
  40172e:	2100      	movs	r1, #0
  401730:	6041      	str	r1, [r0, #4]
  401732:	460a      	mov	r2, r1
  401734:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401738:	f04f 0e01 	mov.w	lr, #1
  40173c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401740:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401744:	2e00      	cmp	r6, #0
  401746:	d0dc      	beq.n	401702 <__register_exitproc+0x4a>
  401748:	e7cc      	b.n	4016e4 <__register_exitproc+0x2c>
  40174a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40174e:	430c      	orrs	r4, r1
  401750:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401754:	e7d5      	b.n	401702 <__register_exitproc+0x4a>
  401756:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40175a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40175e:	e7bb      	b.n	4016d8 <__register_exitproc+0x20>
  401760:	6828      	ldr	r0, [r5, #0]
  401762:	f7ff ffa7 	bl	4016b4 <__retarget_lock_release_recursive>
  401766:	f04f 30ff 	mov.w	r0, #4294967295
  40176a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40176e:	bf00      	nop
  401770:	20000438 	.word	0x20000438
  401774:	0040177c 	.word	0x0040177c
  401778:	00000000 	.word	0x00000000

0040177c <_global_impure_ptr>:
  40177c:	20000010                                ... 

00401780 <_init>:
  401780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401782:	bf00      	nop
  401784:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401786:	bc08      	pop	{r3}
  401788:	469e      	mov	lr, r3
  40178a:	4770      	bx	lr

0040178c <__init_array_start>:
  40178c:	0040165d 	.word	0x0040165d

00401790 <__frame_dummy_init_array_entry>:
  401790:	004000f1                                ..@.

00401794 <_fini>:
  401794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401796:	bf00      	nop
  401798:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40179a:	bc08      	pop	{r3}
  40179c:	469e      	mov	lr, r3
  40179e:	4770      	bx	lr

004017a0 <__fini_array_start>:
  4017a0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	04d8 2000                                   ... 
